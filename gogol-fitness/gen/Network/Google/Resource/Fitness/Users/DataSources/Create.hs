{-# LANGUAGE DataKinds          #-}
{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric      #-}
{-# LANGUAGE FlexibleInstances  #-}
{-# LANGUAGE NoImplicitPrelude  #-}
{-# LANGUAGE OverloadedStrings  #-}
{-# LANGUAGE RecordWildCards    #-}
{-# LANGUAGE TypeFamilies       #-}
{-# LANGUAGE TypeOperators      #-}

{-# OPTIONS_GHC -fno-warn-duplicate-exports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds      #-}
{-# OPTIONS_GHC -fno-warn-unused-imports    #-}

-- |
-- Module      : Network.Google.Resource.Fitness.Users.DataSources.Create
-- Copyright   : (c) 2015-2016 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Creates a new data source that is unique across all data sources
-- belonging to this user. A data source is a unique source of sensor data.
-- Data sources can expose raw data coming from hardware sensors on local
-- or companion devices. They can also expose derived data, created by
-- transforming or merging other data sources. Multiple data sources can
-- exist for the same data type. Every data point in every dataset inserted
-- into or read from the Fitness API has an associated data source. Each
-- data source produces a unique stream of dataset updates, with a unique
-- data source identifier. Not all changes to data source affect the data
-- stream ID, so that data collected by updated versions of the same
-- application\/device can still be considered to belong to the same data
-- source. Data sources are identified using a string generated by the
-- server, based on the contents of the source being created. The
-- dataStreamId field should not be set when invoking this method. It will
-- be automatically generated by the server with the correct format. If a
-- dataStreamId is set, it must match the format that the server would
-- generate. This format is a combination of some fields from the data
-- source, and has a specific order. If it doesn\'t match, the request will
-- fail with an error. Specifying a DataType which is not a known type
-- (beginning with \"com.google.\") will create a DataSource with a *custom
-- data type*. Custom data types are only readable by the application that
-- created them. Custom data types are *deprecated*; use standard data
-- types instead. In addition to the data source fields included in the
-- data source ID, the developer project number that is authenticated when
-- creating the data source is included. This developer project number is
-- obfuscated when read by any other developer reading public data types.
--
-- /See:/ <https://developers.google.com/fit/rest/v1/get-started Fitness API Reference> for @fitness.users.dataSources.create@.
module Network.Google.Resource.Fitness.Users.DataSources.Create
    (
    -- * REST Resource
      UsersDataSourcesCreateResource

    -- * Creating a Request
    , usersDataSourcesCreate
    , UsersDataSourcesCreate

    -- * Request Lenses
    , udscXgafv
    , udscUploadProtocol
    , udscAccessToken
    , udscUploadType
    , udscPayload
    , udscUserId
    , udscCallback
    ) where

import Network.Google.Fitness.Types
import Network.Google.Prelude

-- | A resource alias for @fitness.users.dataSources.create@ method which the
-- 'UsersDataSourcesCreate' request conforms to.
type UsersDataSourcesCreateResource =
     "fitness" :>
       "v1" :>
         "users" :>
           Capture "userId" Text :>
             "dataSources" :>
               QueryParam "$.xgafv" Xgafv :>
                 QueryParam "upload_protocol" Text :>
                   QueryParam "access_token" Text :>
                     QueryParam "uploadType" Text :>
                       QueryParam "callback" Text :>
                         QueryParam "alt" AltJSON :>
                           ReqBody '[JSON] DataSource :> Post '[JSON] DataSource

-- | Creates a new data source that is unique across all data sources
-- belonging to this user. A data source is a unique source of sensor data.
-- Data sources can expose raw data coming from hardware sensors on local
-- or companion devices. They can also expose derived data, created by
-- transforming or merging other data sources. Multiple data sources can
-- exist for the same data type. Every data point in every dataset inserted
-- into or read from the Fitness API has an associated data source. Each
-- data source produces a unique stream of dataset updates, with a unique
-- data source identifier. Not all changes to data source affect the data
-- stream ID, so that data collected by updated versions of the same
-- application\/device can still be considered to belong to the same data
-- source. Data sources are identified using a string generated by the
-- server, based on the contents of the source being created. The
-- dataStreamId field should not be set when invoking this method. It will
-- be automatically generated by the server with the correct format. If a
-- dataStreamId is set, it must match the format that the server would
-- generate. This format is a combination of some fields from the data
-- source, and has a specific order. If it doesn\'t match, the request will
-- fail with an error. Specifying a DataType which is not a known type
-- (beginning with \"com.google.\") will create a DataSource with a *custom
-- data type*. Custom data types are only readable by the application that
-- created them. Custom data types are *deprecated*; use standard data
-- types instead. In addition to the data source fields included in the
-- data source ID, the developer project number that is authenticated when
-- creating the data source is included. This developer project number is
-- obfuscated when read by any other developer reading public data types.
--
-- /See:/ 'usersDataSourcesCreate' smart constructor.
data UsersDataSourcesCreate =
  UsersDataSourcesCreate'
    { _udscXgafv :: !(Maybe Xgafv)
    , _udscUploadProtocol :: !(Maybe Text)
    , _udscAccessToken :: !(Maybe Text)
    , _udscUploadType :: !(Maybe Text)
    , _udscPayload :: !DataSource
    , _udscUserId :: !Text
    , _udscCallback :: !(Maybe Text)
    }
  deriving (Eq, Show, Data, Typeable, Generic)


-- | Creates a value of 'UsersDataSourcesCreate' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'udscXgafv'
--
-- * 'udscUploadProtocol'
--
-- * 'udscAccessToken'
--
-- * 'udscUploadType'
--
-- * 'udscPayload'
--
-- * 'udscUserId'
--
-- * 'udscCallback'
usersDataSourcesCreate
    :: DataSource -- ^ 'udscPayload'
    -> Text -- ^ 'udscUserId'
    -> UsersDataSourcesCreate
usersDataSourcesCreate pUdscPayload_ pUdscUserId_ =
  UsersDataSourcesCreate'
    { _udscXgafv = Nothing
    , _udscUploadProtocol = Nothing
    , _udscAccessToken = Nothing
    , _udscUploadType = Nothing
    , _udscPayload = pUdscPayload_
    , _udscUserId = pUdscUserId_
    , _udscCallback = Nothing
    }


-- | V1 error format.
udscXgafv :: Lens' UsersDataSourcesCreate (Maybe Xgafv)
udscXgafv
  = lens _udscXgafv (\ s a -> s{_udscXgafv = a})

-- | Upload protocol for media (e.g. \"raw\", \"multipart\").
udscUploadProtocol :: Lens' UsersDataSourcesCreate (Maybe Text)
udscUploadProtocol
  = lens _udscUploadProtocol
      (\ s a -> s{_udscUploadProtocol = a})

-- | OAuth access token.
udscAccessToken :: Lens' UsersDataSourcesCreate (Maybe Text)
udscAccessToken
  = lens _udscAccessToken
      (\ s a -> s{_udscAccessToken = a})

-- | Legacy upload protocol for media (e.g. \"media\", \"multipart\").
udscUploadType :: Lens' UsersDataSourcesCreate (Maybe Text)
udscUploadType
  = lens _udscUploadType
      (\ s a -> s{_udscUploadType = a})

-- | Multipart request metadata.
udscPayload :: Lens' UsersDataSourcesCreate DataSource
udscPayload
  = lens _udscPayload (\ s a -> s{_udscPayload = a})

-- | Create the data source for the person identified. Use me to indicate the
-- authenticated user. Only me is supported at this time.
udscUserId :: Lens' UsersDataSourcesCreate Text
udscUserId
  = lens _udscUserId (\ s a -> s{_udscUserId = a})

-- | JSONP
udscCallback :: Lens' UsersDataSourcesCreate (Maybe Text)
udscCallback
  = lens _udscCallback (\ s a -> s{_udscCallback = a})

instance GoogleRequest UsersDataSourcesCreate where
        type Rs UsersDataSourcesCreate = DataSource
        type Scopes UsersDataSourcesCreate =
             '["https://www.googleapis.com/auth/fitness.activity.write",
               "https://www.googleapis.com/auth/fitness.blood_glucose.write",
               "https://www.googleapis.com/auth/fitness.blood_pressure.write",
               "https://www.googleapis.com/auth/fitness.body.write",
               "https://www.googleapis.com/auth/fitness.body_temperature.write",
               "https://www.googleapis.com/auth/fitness.heart_rate.write",
               "https://www.googleapis.com/auth/fitness.location.write",
               "https://www.googleapis.com/auth/fitness.nutrition.write",
               "https://www.googleapis.com/auth/fitness.oxygen_saturation.write",
               "https://www.googleapis.com/auth/fitness.reproductive_health.write",
               "https://www.googleapis.com/auth/fitness.sleep.write"]
        requestClient UsersDataSourcesCreate'{..}
          = go _udscUserId _udscXgafv _udscUploadProtocol
              _udscAccessToken
              _udscUploadType
              _udscCallback
              (Just AltJSON)
              _udscPayload
              fitnessService
          where go
                  = buildClient
                      (Proxy :: Proxy UsersDataSourcesCreateResource)
                      mempty
