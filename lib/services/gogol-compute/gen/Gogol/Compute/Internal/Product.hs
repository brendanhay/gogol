{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DerivingStrategies #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE PatternSynonyms #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE StrictData #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# OPTIONS_GHC -fno-warn-duplicate-exports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- |
-- Module      : Gogol.Compute.Internal.Product
-- Copyright   : (c) 2015-2022 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+gogol@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
module Gogol.Compute.Internal.Product
  ( -- * AcceleratorConfig
    AcceleratorConfig (..),
    newAcceleratorConfig,

    -- * AcceleratorType
    AcceleratorType (..),
    newAcceleratorType,

    -- * AcceleratorTypeAggregatedList
    AcceleratorTypeAggregatedList (..),
    newAcceleratorTypeAggregatedList,

    -- * AcceleratorTypeAggregatedList_Items
    AcceleratorTypeAggregatedList_Items (..),
    newAcceleratorTypeAggregatedList_Items,

    -- * AcceleratorTypeAggregatedList_Warning
    AcceleratorTypeAggregatedList_Warning (..),
    newAcceleratorTypeAggregatedList_Warning,

    -- * AcceleratorTypeAggregatedList_Warning_DataItem
    AcceleratorTypeAggregatedList_Warning_DataItem (..),
    newAcceleratorTypeAggregatedList_Warning_DataItem,

    -- * AcceleratorTypeList
    AcceleratorTypeList (..),
    newAcceleratorTypeList,

    -- * AcceleratorTypeList_Warning
    AcceleratorTypeList_Warning (..),
    newAcceleratorTypeList_Warning,

    -- * AcceleratorTypeList_Warning_DataItem
    AcceleratorTypeList_Warning_DataItem (..),
    newAcceleratorTypeList_Warning_DataItem,

    -- * AcceleratorTypesScopedList
    AcceleratorTypesScopedList (..),
    newAcceleratorTypesScopedList,

    -- * AcceleratorTypesScopedList_Warning
    AcceleratorTypesScopedList_Warning (..),
    newAcceleratorTypesScopedList_Warning,

    -- * AcceleratorTypesScopedList_Warning_DataItem
    AcceleratorTypesScopedList_Warning_DataItem (..),
    newAcceleratorTypesScopedList_Warning_DataItem,

    -- * AccessConfig
    AccessConfig (..),
    newAccessConfig,

    -- * Address
    Address (..),
    newAddress,

    -- * AddressAggregatedList
    AddressAggregatedList (..),
    newAddressAggregatedList,

    -- * AddressAggregatedList_Items
    AddressAggregatedList_Items (..),
    newAddressAggregatedList_Items,

    -- * AddressAggregatedList_Warning
    AddressAggregatedList_Warning (..),
    newAddressAggregatedList_Warning,

    -- * AddressAggregatedList_Warning_DataItem
    AddressAggregatedList_Warning_DataItem (..),
    newAddressAggregatedList_Warning_DataItem,

    -- * AddressList
    AddressList (..),
    newAddressList,

    -- * AddressList_Warning
    AddressList_Warning (..),
    newAddressList_Warning,

    -- * AddressList_Warning_DataItem
    AddressList_Warning_DataItem (..),
    newAddressList_Warning_DataItem,

    -- * AddressesScopedList
    AddressesScopedList (..),
    newAddressesScopedList,

    -- * AddressesScopedList_Warning
    AddressesScopedList_Warning (..),
    newAddressesScopedList_Warning,

    -- * AddressesScopedList_Warning_DataItem
    AddressesScopedList_Warning_DataItem (..),
    newAddressesScopedList_Warning_DataItem,

    -- * AdvancedMachineFeatures
    AdvancedMachineFeatures (..),
    newAdvancedMachineFeatures,

    -- * AliasIpRange
    AliasIpRange (..),
    newAliasIpRange,

    -- * AllocationResourceStatus
    AllocationResourceStatus (..),
    newAllocationResourceStatus,

    -- * AllocationResourceStatusSpecificSKUAllocation
    AllocationResourceStatusSpecificSKUAllocation (..),
    newAllocationResourceStatusSpecificSKUAllocation,

    -- * AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk
    AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk (..),
    newAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk,

    -- * AllocationSpecificSKUAllocationReservedInstanceProperties
    AllocationSpecificSKUAllocationReservedInstanceProperties (..),
    newAllocationSpecificSKUAllocationReservedInstanceProperties,

    -- * AllocationSpecificSKUReservation
    AllocationSpecificSKUReservation (..),
    newAllocationSpecificSKUReservation,

    -- * AttachedDisk
    AttachedDisk (..),
    newAttachedDisk,

    -- * AttachedDiskInitializeParams
    AttachedDiskInitializeParams (..),
    newAttachedDiskInitializeParams,

    -- * AttachedDiskInitializeParams_Labels
    AttachedDiskInitializeParams_Labels (..),
    newAttachedDiskInitializeParams_Labels,

    -- * AttachedDiskInitializeParams_ResourceManagerTags
    AttachedDiskInitializeParams_ResourceManagerTags (..),
    newAttachedDiskInitializeParams_ResourceManagerTags,

    -- * AuditConfig
    AuditConfig (..),
    newAuditConfig,

    -- * AuditLogConfig
    AuditLogConfig (..),
    newAuditLogConfig,

    -- * AuthorizationLoggingOptions
    AuthorizationLoggingOptions (..),
    newAuthorizationLoggingOptions,

    -- * Autoscaler
    Autoscaler (..),
    newAutoscaler,

    -- * Autoscaler_ScalingScheduleStatus
    Autoscaler_ScalingScheduleStatus (..),
    newAutoscaler_ScalingScheduleStatus,

    -- * AutoscalerAggregatedList
    AutoscalerAggregatedList (..),
    newAutoscalerAggregatedList,

    -- * AutoscalerAggregatedList_Items
    AutoscalerAggregatedList_Items (..),
    newAutoscalerAggregatedList_Items,

    -- * AutoscalerAggregatedList_Warning
    AutoscalerAggregatedList_Warning (..),
    newAutoscalerAggregatedList_Warning,

    -- * AutoscalerAggregatedList_Warning_DataItem
    AutoscalerAggregatedList_Warning_DataItem (..),
    newAutoscalerAggregatedList_Warning_DataItem,

    -- * AutoscalerList
    AutoscalerList (..),
    newAutoscalerList,

    -- * AutoscalerList_Warning
    AutoscalerList_Warning (..),
    newAutoscalerList_Warning,

    -- * AutoscalerList_Warning_DataItem
    AutoscalerList_Warning_DataItem (..),
    newAutoscalerList_Warning_DataItem,

    -- * AutoscalerStatusDetails
    AutoscalerStatusDetails (..),
    newAutoscalerStatusDetails,

    -- * AutoscalersScopedList
    AutoscalersScopedList (..),
    newAutoscalersScopedList,

    -- * AutoscalersScopedList_Warning
    AutoscalersScopedList_Warning (..),
    newAutoscalersScopedList_Warning,

    -- * AutoscalersScopedList_Warning_DataItem
    AutoscalersScopedList_Warning_DataItem (..),
    newAutoscalersScopedList_Warning_DataItem,

    -- * AutoscalingPolicy
    AutoscalingPolicy (..),
    newAutoscalingPolicy,

    -- * AutoscalingPolicy_ScalingSchedules
    AutoscalingPolicy_ScalingSchedules (..),
    newAutoscalingPolicy_ScalingSchedules,

    -- * AutoscalingPolicyCpuUtilization
    AutoscalingPolicyCpuUtilization (..),
    newAutoscalingPolicyCpuUtilization,

    -- * AutoscalingPolicyCustomMetricUtilization
    AutoscalingPolicyCustomMetricUtilization (..),
    newAutoscalingPolicyCustomMetricUtilization,

    -- * AutoscalingPolicyLoadBalancingUtilization
    AutoscalingPolicyLoadBalancingUtilization (..),
    newAutoscalingPolicyLoadBalancingUtilization,

    -- * AutoscalingPolicyScaleInControl
    AutoscalingPolicyScaleInControl (..),
    newAutoscalingPolicyScaleInControl,

    -- * AutoscalingPolicyScalingSchedule
    AutoscalingPolicyScalingSchedule (..),
    newAutoscalingPolicyScalingSchedule,

    -- * Backend
    Backend (..),
    newBackend,

    -- * BackendBucket
    BackendBucket (..),
    newBackendBucket,

    -- * BackendBucketCdnPolicy
    BackendBucketCdnPolicy (..),
    newBackendBucketCdnPolicy,

    -- * BackendBucketCdnPolicyBypassCacheOnRequestHeader
    BackendBucketCdnPolicyBypassCacheOnRequestHeader (..),
    newBackendBucketCdnPolicyBypassCacheOnRequestHeader,

    -- * BackendBucketCdnPolicyCacheKeyPolicy
    BackendBucketCdnPolicyCacheKeyPolicy (..),
    newBackendBucketCdnPolicyCacheKeyPolicy,

    -- * BackendBucketCdnPolicyNegativeCachingPolicy
    BackendBucketCdnPolicyNegativeCachingPolicy (..),
    newBackendBucketCdnPolicyNegativeCachingPolicy,

    -- * BackendBucketList
    BackendBucketList (..),
    newBackendBucketList,

    -- * BackendBucketList_Warning
    BackendBucketList_Warning (..),
    newBackendBucketList_Warning,

    -- * BackendBucketList_Warning_DataItem
    BackendBucketList_Warning_DataItem (..),
    newBackendBucketList_Warning_DataItem,

    -- * BackendService
    BackendService (..),
    newBackendService,

    -- * BackendServiceAggregatedList
    BackendServiceAggregatedList (..),
    newBackendServiceAggregatedList,

    -- * BackendServiceAggregatedList_Items
    BackendServiceAggregatedList_Items (..),
    newBackendServiceAggregatedList_Items,

    -- * BackendServiceAggregatedList_Warning
    BackendServiceAggregatedList_Warning (..),
    newBackendServiceAggregatedList_Warning,

    -- * BackendServiceAggregatedList_Warning_DataItem
    BackendServiceAggregatedList_Warning_DataItem (..),
    newBackendServiceAggregatedList_Warning_DataItem,

    -- * BackendServiceCdnPolicy
    BackendServiceCdnPolicy (..),
    newBackendServiceCdnPolicy,

    -- * BackendServiceCdnPolicyBypassCacheOnRequestHeader
    BackendServiceCdnPolicyBypassCacheOnRequestHeader (..),
    newBackendServiceCdnPolicyBypassCacheOnRequestHeader,

    -- * BackendServiceCdnPolicyNegativeCachingPolicy
    BackendServiceCdnPolicyNegativeCachingPolicy (..),
    newBackendServiceCdnPolicyNegativeCachingPolicy,

    -- * BackendServiceConnectionTrackingPolicy
    BackendServiceConnectionTrackingPolicy (..),
    newBackendServiceConnectionTrackingPolicy,

    -- * BackendServiceFailoverPolicy
    BackendServiceFailoverPolicy (..),
    newBackendServiceFailoverPolicy,

    -- * BackendServiceGroupHealth
    BackendServiceGroupHealth (..),
    newBackendServiceGroupHealth,

    -- * BackendServiceGroupHealth_Annotations
    BackendServiceGroupHealth_Annotations (..),
    newBackendServiceGroupHealth_Annotations,

    -- * BackendServiceIAP
    BackendServiceIAP (..),
    newBackendServiceIAP,

    -- * BackendServiceList
    BackendServiceList (..),
    newBackendServiceList,

    -- * BackendServiceList_Warning
    BackendServiceList_Warning (..),
    newBackendServiceList_Warning,

    -- * BackendServiceList_Warning_DataItem
    BackendServiceList_Warning_DataItem (..),
    newBackendServiceList_Warning_DataItem,

    -- * BackendServiceLocalityLoadBalancingPolicyConfig
    BackendServiceLocalityLoadBalancingPolicyConfig (..),
    newBackendServiceLocalityLoadBalancingPolicyConfig,

    -- * BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy
    BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy (..),
    newBackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy,

    -- * BackendServiceLocalityLoadBalancingPolicyConfigPolicy
    BackendServiceLocalityLoadBalancingPolicyConfigPolicy (..),
    newBackendServiceLocalityLoadBalancingPolicyConfigPolicy,

    -- * BackendServiceLogConfig
    BackendServiceLogConfig (..),
    newBackendServiceLogConfig,

    -- * BackendServiceReference
    BackendServiceReference (..),
    newBackendServiceReference,

    -- * BackendServicesScopedList
    BackendServicesScopedList (..),
    newBackendServicesScopedList,

    -- * BackendServicesScopedList_Warning
    BackendServicesScopedList_Warning (..),
    newBackendServicesScopedList_Warning,

    -- * BackendServicesScopedList_Warning_DataItem
    BackendServicesScopedList_Warning_DataItem (..),
    newBackendServicesScopedList_Warning_DataItem,

    -- * BfdPacket
    BfdPacket (..),
    newBfdPacket,

    -- * BfdStatus
    BfdStatus (..),
    newBfdStatus,

    -- * BfdStatusPacketCounts
    BfdStatusPacketCounts (..),
    newBfdStatusPacketCounts,

    -- * Binding
    Binding (..),
    newBinding,

    -- * BulkInsertInstanceResource
    BulkInsertInstanceResource (..),
    newBulkInsertInstanceResource,

    -- * BulkInsertInstanceResource_PerInstanceProperties
    BulkInsertInstanceResource_PerInstanceProperties (..),
    newBulkInsertInstanceResource_PerInstanceProperties,

    -- * BulkInsertInstanceResourcePerInstanceProperties
    BulkInsertInstanceResourcePerInstanceProperties (..),
    newBulkInsertInstanceResourcePerInstanceProperties,

    -- * CacheInvalidationRule
    CacheInvalidationRule (..),
    newCacheInvalidationRule,

    -- * CacheKeyPolicy
    CacheKeyPolicy (..),
    newCacheKeyPolicy,

    -- * CircuitBreakers
    CircuitBreakers (..),
    newCircuitBreakers,

    -- * Commitment
    Commitment (..),
    newCommitment,

    -- * CommitmentAggregatedList
    CommitmentAggregatedList (..),
    newCommitmentAggregatedList,

    -- * CommitmentAggregatedList_Items
    CommitmentAggregatedList_Items (..),
    newCommitmentAggregatedList_Items,

    -- * CommitmentAggregatedList_Warning
    CommitmentAggregatedList_Warning (..),
    newCommitmentAggregatedList_Warning,

    -- * CommitmentAggregatedList_Warning_DataItem
    CommitmentAggregatedList_Warning_DataItem (..),
    newCommitmentAggregatedList_Warning_DataItem,

    -- * CommitmentList
    CommitmentList (..),
    newCommitmentList,

    -- * CommitmentList_Warning
    CommitmentList_Warning (..),
    newCommitmentList_Warning,

    -- * CommitmentList_Warning_DataItem
    CommitmentList_Warning_DataItem (..),
    newCommitmentList_Warning_DataItem,

    -- * CommitmentsScopedList
    CommitmentsScopedList (..),
    newCommitmentsScopedList,

    -- * CommitmentsScopedList_Warning
    CommitmentsScopedList_Warning (..),
    newCommitmentsScopedList_Warning,

    -- * CommitmentsScopedList_Warning_DataItem
    CommitmentsScopedList_Warning_DataItem (..),
    newCommitmentsScopedList_Warning_DataItem,

    -- * Condition
    Condition (..),
    newCondition,

    -- * ConfidentialInstanceConfig
    ConfidentialInstanceConfig (..),
    newConfidentialInstanceConfig,

    -- * ConnectionDraining
    ConnectionDraining (..),
    newConnectionDraining,

    -- * ConsistentHashLoadBalancerSettings
    ConsistentHashLoadBalancerSettings (..),
    newConsistentHashLoadBalancerSettings,

    -- * ConsistentHashLoadBalancerSettingsHttpCookie
    ConsistentHashLoadBalancerSettingsHttpCookie (..),
    newConsistentHashLoadBalancerSettingsHttpCookie,

    -- * CorsPolicy
    CorsPolicy (..),
    newCorsPolicy,

    -- * CustomerEncryptionKey
    CustomerEncryptionKey (..),
    newCustomerEncryptionKey,

    -- * CustomerEncryptionKeyProtectedDisk
    CustomerEncryptionKeyProtectedDisk (..),
    newCustomerEncryptionKeyProtectedDisk,

    -- * DeprecationStatus
    DeprecationStatus (..),
    newDeprecationStatus,

    -- * Disk
    Disk (..),
    newDisk,

    -- * Disk_Labels
    Disk_Labels (..),
    newDisk_Labels,

    -- * DiskAggregatedList
    DiskAggregatedList (..),
    newDiskAggregatedList,

    -- * DiskAggregatedList_Items
    DiskAggregatedList_Items (..),
    newDiskAggregatedList_Items,

    -- * DiskAggregatedList_Warning
    DiskAggregatedList_Warning (..),
    newDiskAggregatedList_Warning,

    -- * DiskAggregatedList_Warning_DataItem
    DiskAggregatedList_Warning_DataItem (..),
    newDiskAggregatedList_Warning_DataItem,

    -- * DiskInstantiationConfig
    DiskInstantiationConfig (..),
    newDiskInstantiationConfig,

    -- * DiskList
    DiskList (..),
    newDiskList,

    -- * DiskList_Warning
    DiskList_Warning (..),
    newDiskList_Warning,

    -- * DiskList_Warning_DataItem
    DiskList_Warning_DataItem (..),
    newDiskList_Warning_DataItem,

    -- * DiskMoveRequest
    DiskMoveRequest (..),
    newDiskMoveRequest,

    -- * DiskParams
    DiskParams (..),
    newDiskParams,

    -- * DiskParams_ResourceManagerTags
    DiskParams_ResourceManagerTags (..),
    newDiskParams_ResourceManagerTags,

    -- * DiskType
    DiskType (..),
    newDiskType,

    -- * DiskTypeAggregatedList
    DiskTypeAggregatedList (..),
    newDiskTypeAggregatedList,

    -- * DiskTypeAggregatedList_Items
    DiskTypeAggregatedList_Items (..),
    newDiskTypeAggregatedList_Items,

    -- * DiskTypeAggregatedList_Warning
    DiskTypeAggregatedList_Warning (..),
    newDiskTypeAggregatedList_Warning,

    -- * DiskTypeAggregatedList_Warning_DataItem
    DiskTypeAggregatedList_Warning_DataItem (..),
    newDiskTypeAggregatedList_Warning_DataItem,

    -- * DiskTypeList
    DiskTypeList (..),
    newDiskTypeList,

    -- * DiskTypeList_Warning
    DiskTypeList_Warning (..),
    newDiskTypeList_Warning,

    -- * DiskTypeList_Warning_DataItem
    DiskTypeList_Warning_DataItem (..),
    newDiskTypeList_Warning_DataItem,

    -- * DiskTypesScopedList
    DiskTypesScopedList (..),
    newDiskTypesScopedList,

    -- * DiskTypesScopedList_Warning
    DiskTypesScopedList_Warning (..),
    newDiskTypesScopedList_Warning,

    -- * DiskTypesScopedList_Warning_DataItem
    DiskTypesScopedList_Warning_DataItem (..),
    newDiskTypesScopedList_Warning_DataItem,

    -- * DisksAddResourcePoliciesRequest
    DisksAddResourcePoliciesRequest (..),
    newDisksAddResourcePoliciesRequest,

    -- * DisksRemoveResourcePoliciesRequest
    DisksRemoveResourcePoliciesRequest (..),
    newDisksRemoveResourcePoliciesRequest,

    -- * DisksResizeRequest
    DisksResizeRequest (..),
    newDisksResizeRequest,

    -- * DisksScopedList
    DisksScopedList (..),
    newDisksScopedList,

    -- * DisksScopedList_Warning
    DisksScopedList_Warning (..),
    newDisksScopedList_Warning,

    -- * DisksScopedList_Warning_DataItem
    DisksScopedList_Warning_DataItem (..),
    newDisksScopedList_Warning_DataItem,

    -- * DisplayDevice
    DisplayDevice (..),
    newDisplayDevice,

    -- * DistributionPolicy
    DistributionPolicy (..),
    newDistributionPolicy,

    -- * DistributionPolicyZoneConfiguration
    DistributionPolicyZoneConfiguration (..),
    newDistributionPolicyZoneConfiguration,

    -- * Duration
    Duration (..),
    newDuration,

    -- * ErrorInfo
    ErrorInfo (..),
    newErrorInfo,

    -- * ErrorInfo_Metadatas
    ErrorInfo_Metadatas (..),
    newErrorInfo_Metadatas,

    -- * ExchangedPeeringRoute
    ExchangedPeeringRoute (..),
    newExchangedPeeringRoute,

    -- * ExchangedPeeringRoutesList
    ExchangedPeeringRoutesList (..),
    newExchangedPeeringRoutesList,

    -- * ExchangedPeeringRoutesList_Warning
    ExchangedPeeringRoutesList_Warning (..),
    newExchangedPeeringRoutesList_Warning,

    -- * ExchangedPeeringRoutesList_Warning_DataItem
    ExchangedPeeringRoutesList_Warning_DataItem (..),
    newExchangedPeeringRoutesList_Warning_DataItem,

    -- * Expr
    Expr (..),
    newExpr,

    -- * ExternalVpnGateway
    ExternalVpnGateway (..),
    newExternalVpnGateway,

    -- * ExternalVpnGateway_Labels
    ExternalVpnGateway_Labels (..),
    newExternalVpnGateway_Labels,

    -- * ExternalVpnGatewayInterface
    ExternalVpnGatewayInterface (..),
    newExternalVpnGatewayInterface,

    -- * ExternalVpnGatewayList
    ExternalVpnGatewayList (..),
    newExternalVpnGatewayList,

    -- * ExternalVpnGatewayList_Warning
    ExternalVpnGatewayList_Warning (..),
    newExternalVpnGatewayList_Warning,

    -- * ExternalVpnGatewayList_Warning_DataItem
    ExternalVpnGatewayList_Warning_DataItem (..),
    newExternalVpnGatewayList_Warning_DataItem,

    -- * FileContentBuffer
    FileContentBuffer (..),
    newFileContentBuffer,

    -- * Firewall
    Firewall (..),
    newFirewall,

    -- * Firewall_AllowedItem
    Firewall_AllowedItem (..),
    newFirewall_AllowedItem,

    -- * Firewall_DeniedItem
    Firewall_DeniedItem (..),
    newFirewall_DeniedItem,

    -- * FirewallList
    FirewallList (..),
    newFirewallList,

    -- * FirewallList_Warning
    FirewallList_Warning (..),
    newFirewallList_Warning,

    -- * FirewallList_Warning_DataItem
    FirewallList_Warning_DataItem (..),
    newFirewallList_Warning_DataItem,

    -- * FirewallLogConfig
    FirewallLogConfig (..),
    newFirewallLogConfig,

    -- * FirewallPoliciesListAssociationsResponse
    FirewallPoliciesListAssociationsResponse (..),
    newFirewallPoliciesListAssociationsResponse,

    -- * FirewallPolicy
    FirewallPolicy (..),
    newFirewallPolicy,

    -- * FirewallPolicyAssociation
    FirewallPolicyAssociation (..),
    newFirewallPolicyAssociation,

    -- * FirewallPolicyList
    FirewallPolicyList (..),
    newFirewallPolicyList,

    -- * FirewallPolicyList_Warning
    FirewallPolicyList_Warning (..),
    newFirewallPolicyList_Warning,

    -- * FirewallPolicyList_Warning_DataItem
    FirewallPolicyList_Warning_DataItem (..),
    newFirewallPolicyList_Warning_DataItem,

    -- * FirewallPolicyRule
    FirewallPolicyRule (..),
    newFirewallPolicyRule,

    -- * FirewallPolicyRuleMatcher
    FirewallPolicyRuleMatcher (..),
    newFirewallPolicyRuleMatcher,

    -- * FirewallPolicyRuleMatcherLayer4Config
    FirewallPolicyRuleMatcherLayer4Config (..),
    newFirewallPolicyRuleMatcherLayer4Config,

    -- * FirewallPolicyRuleSecureTag
    FirewallPolicyRuleSecureTag (..),
    newFirewallPolicyRuleSecureTag,

    -- * FixedOrPercent
    FixedOrPercent (..),
    newFixedOrPercent,

    -- * ForwardingRule
    ForwardingRule (..),
    newForwardingRule,

    -- * ForwardingRule_Labels
    ForwardingRule_Labels (..),
    newForwardingRule_Labels,

    -- * ForwardingRuleAggregatedList
    ForwardingRuleAggregatedList (..),
    newForwardingRuleAggregatedList,

    -- * ForwardingRuleAggregatedList_Items
    ForwardingRuleAggregatedList_Items (..),
    newForwardingRuleAggregatedList_Items,

    -- * ForwardingRuleAggregatedList_Warning
    ForwardingRuleAggregatedList_Warning (..),
    newForwardingRuleAggregatedList_Warning,

    -- * ForwardingRuleAggregatedList_Warning_DataItem
    ForwardingRuleAggregatedList_Warning_DataItem (..),
    newForwardingRuleAggregatedList_Warning_DataItem,

    -- * ForwardingRuleList
    ForwardingRuleList (..),
    newForwardingRuleList,

    -- * ForwardingRuleList_Warning
    ForwardingRuleList_Warning (..),
    newForwardingRuleList_Warning,

    -- * ForwardingRuleList_Warning_DataItem
    ForwardingRuleList_Warning_DataItem (..),
    newForwardingRuleList_Warning_DataItem,

    -- * ForwardingRuleReference
    ForwardingRuleReference (..),
    newForwardingRuleReference,

    -- * ForwardingRuleServiceDirectoryRegistration
    ForwardingRuleServiceDirectoryRegistration (..),
    newForwardingRuleServiceDirectoryRegistration,

    -- * ForwardingRulesScopedList
    ForwardingRulesScopedList (..),
    newForwardingRulesScopedList,

    -- * ForwardingRulesScopedList_Warning
    ForwardingRulesScopedList_Warning (..),
    newForwardingRulesScopedList_Warning,

    -- * ForwardingRulesScopedList_Warning_DataItem
    ForwardingRulesScopedList_Warning_DataItem (..),
    newForwardingRulesScopedList_Warning_DataItem,

    -- * GRPCHealthCheck
    GRPCHealthCheck (..),
    newGRPCHealthCheck,

    -- * GlobalNetworkEndpointGroupsAttachEndpointsRequest
    GlobalNetworkEndpointGroupsAttachEndpointsRequest (..),
    newGlobalNetworkEndpointGroupsAttachEndpointsRequest,

    -- * GlobalNetworkEndpointGroupsDetachEndpointsRequest
    GlobalNetworkEndpointGroupsDetachEndpointsRequest (..),
    newGlobalNetworkEndpointGroupsDetachEndpointsRequest,

    -- * GlobalOrganizationSetPolicyRequest
    GlobalOrganizationSetPolicyRequest (..),
    newGlobalOrganizationSetPolicyRequest,

    -- * GlobalSetLabelsRequest
    GlobalSetLabelsRequest (..),
    newGlobalSetLabelsRequest,

    -- * GlobalSetLabelsRequest_Labels
    GlobalSetLabelsRequest_Labels (..),
    newGlobalSetLabelsRequest_Labels,

    -- * GlobalSetPolicyRequest
    GlobalSetPolicyRequest (..),
    newGlobalSetPolicyRequest,

    -- * GuestAttributes
    GuestAttributes (..),
    newGuestAttributes,

    -- * GuestAttributesEntry
    GuestAttributesEntry (..),
    newGuestAttributesEntry,

    -- * GuestAttributesValue
    GuestAttributesValue (..),
    newGuestAttributesValue,

    -- * GuestOsFeature
    GuestOsFeature (..),
    newGuestOsFeature,

    -- * HTTP2HealthCheck
    HTTP2HealthCheck (..),
    newHTTP2HealthCheck,

    -- * HTTPHealthCheck
    HTTPHealthCheck (..),
    newHTTPHealthCheck,

    -- * HTTPSHealthCheck
    HTTPSHealthCheck (..),
    newHTTPSHealthCheck,

    -- * HealthCheck
    HealthCheck (..),
    newHealthCheck,

    -- * HealthCheckList
    HealthCheckList (..),
    newHealthCheckList,

    -- * HealthCheckList_Warning
    HealthCheckList_Warning (..),
    newHealthCheckList_Warning,

    -- * HealthCheckList_Warning_DataItem
    HealthCheckList_Warning_DataItem (..),
    newHealthCheckList_Warning_DataItem,

    -- * HealthCheckLogConfig
    HealthCheckLogConfig (..),
    newHealthCheckLogConfig,

    -- * HealthCheckReference
    HealthCheckReference (..),
    newHealthCheckReference,

    -- * HealthCheckService
    HealthCheckService (..),
    newHealthCheckService,

    -- * HealthCheckServiceReference
    HealthCheckServiceReference (..),
    newHealthCheckServiceReference,

    -- * HealthCheckServicesList
    HealthCheckServicesList (..),
    newHealthCheckServicesList,

    -- * HealthCheckServicesList_Warning
    HealthCheckServicesList_Warning (..),
    newHealthCheckServicesList_Warning,

    -- * HealthCheckServicesList_Warning_DataItem
    HealthCheckServicesList_Warning_DataItem (..),
    newHealthCheckServicesList_Warning_DataItem,

    -- * HealthChecksAggregatedList
    HealthChecksAggregatedList (..),
    newHealthChecksAggregatedList,

    -- * HealthChecksAggregatedList_Items
    HealthChecksAggregatedList_Items (..),
    newHealthChecksAggregatedList_Items,

    -- * HealthChecksAggregatedList_Warning
    HealthChecksAggregatedList_Warning (..),
    newHealthChecksAggregatedList_Warning,

    -- * HealthChecksAggregatedList_Warning_DataItem
    HealthChecksAggregatedList_Warning_DataItem (..),
    newHealthChecksAggregatedList_Warning_DataItem,

    -- * HealthChecksScopedList
    HealthChecksScopedList (..),
    newHealthChecksScopedList,

    -- * HealthChecksScopedList_Warning
    HealthChecksScopedList_Warning (..),
    newHealthChecksScopedList_Warning,

    -- * HealthChecksScopedList_Warning_DataItem
    HealthChecksScopedList_Warning_DataItem (..),
    newHealthChecksScopedList_Warning_DataItem,

    -- * HealthStatus
    HealthStatus (..),
    newHealthStatus,

    -- * HealthStatus_Annotations
    HealthStatus_Annotations (..),
    newHealthStatus_Annotations,

    -- * HealthStatusForNetworkEndpoint
    HealthStatusForNetworkEndpoint (..),
    newHealthStatusForNetworkEndpoint,

    -- * Help
    Help (..),
    newHelp,

    -- * HelpLink
    HelpLink (..),
    newHelpLink,

    -- * HostRule
    HostRule (..),
    newHostRule,

    -- * HttpFaultAbort
    HttpFaultAbort (..),
    newHttpFaultAbort,

    -- * HttpFaultDelay
    HttpFaultDelay (..),
    newHttpFaultDelay,

    -- * HttpFaultInjection
    HttpFaultInjection (..),
    newHttpFaultInjection,

    -- * HttpHeaderAction
    HttpHeaderAction (..),
    newHttpHeaderAction,

    -- * HttpHeaderMatch
    HttpHeaderMatch (..),
    newHttpHeaderMatch,

    -- * HttpHeaderOption
    HttpHeaderOption (..),
    newHttpHeaderOption,

    -- * HttpHealthCheck
    HttpHealthCheck (..),
    newHttpHealthCheck,

    -- * HttpHealthCheckList
    HttpHealthCheckList (..),
    newHttpHealthCheckList,

    -- * HttpHealthCheckList_Warning
    HttpHealthCheckList_Warning (..),
    newHttpHealthCheckList_Warning,

    -- * HttpHealthCheckList_Warning_DataItem
    HttpHealthCheckList_Warning_DataItem (..),
    newHttpHealthCheckList_Warning_DataItem,

    -- * HttpQueryParameterMatch
    HttpQueryParameterMatch (..),
    newHttpQueryParameterMatch,

    -- * HttpRedirectAction
    HttpRedirectAction (..),
    newHttpRedirectAction,

    -- * HttpRetryPolicy
    HttpRetryPolicy (..),
    newHttpRetryPolicy,

    -- * HttpRouteAction
    HttpRouteAction (..),
    newHttpRouteAction,

    -- * HttpRouteRule
    HttpRouteRule (..),
    newHttpRouteRule,

    -- * HttpRouteRuleMatch
    HttpRouteRuleMatch (..),
    newHttpRouteRuleMatch,

    -- * HttpsHealthCheck
    HttpsHealthCheck (..),
    newHttpsHealthCheck,

    -- * HttpsHealthCheckList
    HttpsHealthCheckList (..),
    newHttpsHealthCheckList,

    -- * HttpsHealthCheckList_Warning
    HttpsHealthCheckList_Warning (..),
    newHttpsHealthCheckList_Warning,

    -- * HttpsHealthCheckList_Warning_DataItem
    HttpsHealthCheckList_Warning_DataItem (..),
    newHttpsHealthCheckList_Warning_DataItem,

    -- * Image
    Image (..),
    newImage,

    -- * Image_Labels
    Image_Labels (..),
    newImage_Labels,

    -- * Image_RawDisk
    Image_RawDisk (..),
    newImage_RawDisk,

    -- * ImageFamilyView
    ImageFamilyView (..),
    newImageFamilyView,

    -- * ImageList
    ImageList (..),
    newImageList,

    -- * ImageList_Warning
    ImageList_Warning (..),
    newImageList_Warning,

    -- * ImageList_Warning_DataItem
    ImageList_Warning_DataItem (..),
    newImageList_Warning_DataItem,

    -- * InitialStateConfig
    InitialStateConfig (..),
    newInitialStateConfig,

    -- * Instance
    Instance (..),
    newInstance,

    -- * Instance_Labels
    Instance_Labels (..),
    newInstance_Labels,

    -- * InstanceAggregatedList
    InstanceAggregatedList (..),
    newInstanceAggregatedList,

    -- * InstanceAggregatedList_Items
    InstanceAggregatedList_Items (..),
    newInstanceAggregatedList_Items,

    -- * InstanceAggregatedList_Warning
    InstanceAggregatedList_Warning (..),
    newInstanceAggregatedList_Warning,

    -- * InstanceAggregatedList_Warning_DataItem
    InstanceAggregatedList_Warning_DataItem (..),
    newInstanceAggregatedList_Warning_DataItem,

    -- * InstanceConsumptionData
    InstanceConsumptionData (..),
    newInstanceConsumptionData,

    -- * InstanceConsumptionInfo
    InstanceConsumptionInfo (..),
    newInstanceConsumptionInfo,

    -- * InstanceGroup
    InstanceGroup (..),
    newInstanceGroup,

    -- * InstanceGroupAggregatedList
    InstanceGroupAggregatedList (..),
    newInstanceGroupAggregatedList,

    -- * InstanceGroupAggregatedList_Items
    InstanceGroupAggregatedList_Items (..),
    newInstanceGroupAggregatedList_Items,

    -- * InstanceGroupAggregatedList_Warning
    InstanceGroupAggregatedList_Warning (..),
    newInstanceGroupAggregatedList_Warning,

    -- * InstanceGroupAggregatedList_Warning_DataItem
    InstanceGroupAggregatedList_Warning_DataItem (..),
    newInstanceGroupAggregatedList_Warning_DataItem,

    -- * InstanceGroupList
    InstanceGroupList (..),
    newInstanceGroupList,

    -- * InstanceGroupList_Warning
    InstanceGroupList_Warning (..),
    newInstanceGroupList_Warning,

    -- * InstanceGroupList_Warning_DataItem
    InstanceGroupList_Warning_DataItem (..),
    newInstanceGroupList_Warning_DataItem,

    -- * InstanceGroupManager
    InstanceGroupManager (..),
    newInstanceGroupManager,

    -- * InstanceGroupManagerActionsSummary
    InstanceGroupManagerActionsSummary (..),
    newInstanceGroupManagerActionsSummary,

    -- * InstanceGroupManagerAggregatedList
    InstanceGroupManagerAggregatedList (..),
    newInstanceGroupManagerAggregatedList,

    -- * InstanceGroupManagerAggregatedList_Items
    InstanceGroupManagerAggregatedList_Items (..),
    newInstanceGroupManagerAggregatedList_Items,

    -- * InstanceGroupManagerAggregatedList_Warning
    InstanceGroupManagerAggregatedList_Warning (..),
    newInstanceGroupManagerAggregatedList_Warning,

    -- * InstanceGroupManagerAggregatedList_Warning_DataItem
    InstanceGroupManagerAggregatedList_Warning_DataItem (..),
    newInstanceGroupManagerAggregatedList_Warning_DataItem,

    -- * InstanceGroupManagerAutoHealingPolicy
    InstanceGroupManagerAutoHealingPolicy (..),
    newInstanceGroupManagerAutoHealingPolicy,

    -- * InstanceGroupManagerList
    InstanceGroupManagerList (..),
    newInstanceGroupManagerList,

    -- * InstanceGroupManagerList_Warning
    InstanceGroupManagerList_Warning (..),
    newInstanceGroupManagerList_Warning,

    -- * InstanceGroupManagerList_Warning_DataItem
    InstanceGroupManagerList_Warning_DataItem (..),
    newInstanceGroupManagerList_Warning_DataItem,

    -- * InstanceGroupManagerStatus
    InstanceGroupManagerStatus (..),
    newInstanceGroupManagerStatus,

    -- * InstanceGroupManagerStatusStateful
    InstanceGroupManagerStatusStateful (..),
    newInstanceGroupManagerStatusStateful,

    -- * InstanceGroupManagerStatusStatefulPerInstanceConfigs
    InstanceGroupManagerStatusStatefulPerInstanceConfigs (..),
    newInstanceGroupManagerStatusStatefulPerInstanceConfigs,

    -- * InstanceGroupManagerStatusVersionTarget
    InstanceGroupManagerStatusVersionTarget (..),
    newInstanceGroupManagerStatusVersionTarget,

    -- * InstanceGroupManagerUpdatePolicy
    InstanceGroupManagerUpdatePolicy (..),
    newInstanceGroupManagerUpdatePolicy,

    -- * InstanceGroupManagerVersion
    InstanceGroupManagerVersion (..),
    newInstanceGroupManagerVersion,

    -- * InstanceGroupManagersAbandonInstancesRequest
    InstanceGroupManagersAbandonInstancesRequest (..),
    newInstanceGroupManagersAbandonInstancesRequest,

    -- * InstanceGroupManagersApplyUpdatesRequest
    InstanceGroupManagersApplyUpdatesRequest (..),
    newInstanceGroupManagersApplyUpdatesRequest,

    -- * InstanceGroupManagersCreateInstancesRequest
    InstanceGroupManagersCreateInstancesRequest (..),
    newInstanceGroupManagersCreateInstancesRequest,

    -- * InstanceGroupManagersDeleteInstancesRequest
    InstanceGroupManagersDeleteInstancesRequest (..),
    newInstanceGroupManagersDeleteInstancesRequest,

    -- * InstanceGroupManagersDeletePerInstanceConfigsReq
    InstanceGroupManagersDeletePerInstanceConfigsReq (..),
    newInstanceGroupManagersDeletePerInstanceConfigsReq,

    -- * InstanceGroupManagersListErrorsResponse
    InstanceGroupManagersListErrorsResponse (..),
    newInstanceGroupManagersListErrorsResponse,

    -- * InstanceGroupManagersListManagedInstancesResponse
    InstanceGroupManagersListManagedInstancesResponse (..),
    newInstanceGroupManagersListManagedInstancesResponse,

    -- * InstanceGroupManagersListPerInstanceConfigsResp
    InstanceGroupManagersListPerInstanceConfigsResp (..),
    newInstanceGroupManagersListPerInstanceConfigsResp,

    -- * InstanceGroupManagersListPerInstanceConfigsResp_Warning
    InstanceGroupManagersListPerInstanceConfigsResp_Warning (..),
    newInstanceGroupManagersListPerInstanceConfigsResp_Warning,

    -- * InstanceGroupManagersListPerInstanceConfigsResp_Warning_DataItem
    InstanceGroupManagersListPerInstanceConfigsResp_Warning_DataItem (..),
    newInstanceGroupManagersListPerInstanceConfigsResp_Warning_DataItem,

    -- * InstanceGroupManagersPatchPerInstanceConfigsReq
    InstanceGroupManagersPatchPerInstanceConfigsReq (..),
    newInstanceGroupManagersPatchPerInstanceConfigsReq,

    -- * InstanceGroupManagersRecreateInstancesRequest
    InstanceGroupManagersRecreateInstancesRequest (..),
    newInstanceGroupManagersRecreateInstancesRequest,

    -- * InstanceGroupManagersScopedList
    InstanceGroupManagersScopedList (..),
    newInstanceGroupManagersScopedList,

    -- * InstanceGroupManagersScopedList_Warning
    InstanceGroupManagersScopedList_Warning (..),
    newInstanceGroupManagersScopedList_Warning,

    -- * InstanceGroupManagersScopedList_Warning_DataItem
    InstanceGroupManagersScopedList_Warning_DataItem (..),
    newInstanceGroupManagersScopedList_Warning_DataItem,

    -- * InstanceGroupManagersSetInstanceTemplateRequest
    InstanceGroupManagersSetInstanceTemplateRequest (..),
    newInstanceGroupManagersSetInstanceTemplateRequest,

    -- * InstanceGroupManagersSetTargetPoolsRequest
    InstanceGroupManagersSetTargetPoolsRequest (..),
    newInstanceGroupManagersSetTargetPoolsRequest,

    -- * InstanceGroupManagersUpdatePerInstanceConfigsReq
    InstanceGroupManagersUpdatePerInstanceConfigsReq (..),
    newInstanceGroupManagersUpdatePerInstanceConfigsReq,

    -- * InstanceGroupsAddInstancesRequest
    InstanceGroupsAddInstancesRequest (..),
    newInstanceGroupsAddInstancesRequest,

    -- * InstanceGroupsListInstances
    InstanceGroupsListInstances (..),
    newInstanceGroupsListInstances,

    -- * InstanceGroupsListInstances_Warning
    InstanceGroupsListInstances_Warning (..),
    newInstanceGroupsListInstances_Warning,

    -- * InstanceGroupsListInstances_Warning_DataItem
    InstanceGroupsListInstances_Warning_DataItem (..),
    newInstanceGroupsListInstances_Warning_DataItem,

    -- * InstanceGroupsListInstancesRequest
    InstanceGroupsListInstancesRequest (..),
    newInstanceGroupsListInstancesRequest,

    -- * InstanceGroupsRemoveInstancesRequest
    InstanceGroupsRemoveInstancesRequest (..),
    newInstanceGroupsRemoveInstancesRequest,

    -- * InstanceGroupsScopedList
    InstanceGroupsScopedList (..),
    newInstanceGroupsScopedList,

    -- * InstanceGroupsScopedList_Warning
    InstanceGroupsScopedList_Warning (..),
    newInstanceGroupsScopedList_Warning,

    -- * InstanceGroupsScopedList_Warning_DataItem
    InstanceGroupsScopedList_Warning_DataItem (..),
    newInstanceGroupsScopedList_Warning_DataItem,

    -- * InstanceGroupsSetNamedPortsRequest
    InstanceGroupsSetNamedPortsRequest (..),
    newInstanceGroupsSetNamedPortsRequest,

    -- * InstanceList
    InstanceList (..),
    newInstanceList,

    -- * InstanceList_Warning
    InstanceList_Warning (..),
    newInstanceList_Warning,

    -- * InstanceList_Warning_DataItem
    InstanceList_Warning_DataItem (..),
    newInstanceList_Warning_DataItem,

    -- * InstanceListReferrers
    InstanceListReferrers (..),
    newInstanceListReferrers,

    -- * InstanceListReferrers_Warning
    InstanceListReferrers_Warning (..),
    newInstanceListReferrers_Warning,

    -- * InstanceListReferrers_Warning_DataItem
    InstanceListReferrers_Warning_DataItem (..),
    newInstanceListReferrers_Warning_DataItem,

    -- * InstanceManagedByIgmError
    InstanceManagedByIgmError (..),
    newInstanceManagedByIgmError,

    -- * InstanceManagedByIgmErrorInstanceActionDetails
    InstanceManagedByIgmErrorInstanceActionDetails (..),
    newInstanceManagedByIgmErrorInstanceActionDetails,

    -- * InstanceManagedByIgmErrorManagedInstanceError
    InstanceManagedByIgmErrorManagedInstanceError (..),
    newInstanceManagedByIgmErrorManagedInstanceError,

    -- * InstanceMoveRequest
    InstanceMoveRequest (..),
    newInstanceMoveRequest,

    -- * InstanceParams
    InstanceParams (..),
    newInstanceParams,

    -- * InstanceParams_ResourceManagerTags
    InstanceParams_ResourceManagerTags (..),
    newInstanceParams_ResourceManagerTags,

    -- * InstanceProperties
    InstanceProperties (..),
    newInstanceProperties,

    -- * InstanceProperties_Labels
    InstanceProperties_Labels (..),
    newInstanceProperties_Labels,

    -- * InstanceProperties_ResourceManagerTags
    InstanceProperties_ResourceManagerTags (..),
    newInstanceProperties_ResourceManagerTags,

    -- * InstanceReference
    InstanceReference (..),
    newInstanceReference,

    -- * InstanceTemplate
    InstanceTemplate (..),
    newInstanceTemplate,

    -- * InstanceTemplateAggregatedList
    InstanceTemplateAggregatedList (..),
    newInstanceTemplateAggregatedList,

    -- * InstanceTemplateAggregatedList_Items
    InstanceTemplateAggregatedList_Items (..),
    newInstanceTemplateAggregatedList_Items,

    -- * InstanceTemplateAggregatedList_Warning
    InstanceTemplateAggregatedList_Warning (..),
    newInstanceTemplateAggregatedList_Warning,

    -- * InstanceTemplateAggregatedList_Warning_DataItem
    InstanceTemplateAggregatedList_Warning_DataItem (..),
    newInstanceTemplateAggregatedList_Warning_DataItem,

    -- * InstanceTemplateList
    InstanceTemplateList (..),
    newInstanceTemplateList,

    -- * InstanceTemplateList_Warning
    InstanceTemplateList_Warning (..),
    newInstanceTemplateList_Warning,

    -- * InstanceTemplateList_Warning_DataItem
    InstanceTemplateList_Warning_DataItem (..),
    newInstanceTemplateList_Warning_DataItem,

    -- * InstanceTemplatesScopedList
    InstanceTemplatesScopedList (..),
    newInstanceTemplatesScopedList,

    -- * InstanceTemplatesScopedList_Warning
    InstanceTemplatesScopedList_Warning (..),
    newInstanceTemplatesScopedList_Warning,

    -- * InstanceTemplatesScopedList_Warning_DataItem
    InstanceTemplatesScopedList_Warning_DataItem (..),
    newInstanceTemplatesScopedList_Warning_DataItem,

    -- * InstanceWithNamedPorts
    InstanceWithNamedPorts (..),
    newInstanceWithNamedPorts,

    -- * InstancesAddResourcePoliciesRequest
    InstancesAddResourcePoliciesRequest (..),
    newInstancesAddResourcePoliciesRequest,

    -- * InstancesGetEffectiveFirewallsResponse
    InstancesGetEffectiveFirewallsResponse (..),
    newInstancesGetEffectiveFirewallsResponse,

    -- * InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy
    InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy (..),
    newInstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy,

    -- * InstancesRemoveResourcePoliciesRequest
    InstancesRemoveResourcePoliciesRequest (..),
    newInstancesRemoveResourcePoliciesRequest,

    -- * InstancesScopedList
    InstancesScopedList (..),
    newInstancesScopedList,

    -- * InstancesScopedList_Warning
    InstancesScopedList_Warning (..),
    newInstancesScopedList_Warning,

    -- * InstancesScopedList_Warning_DataItem
    InstancesScopedList_Warning_DataItem (..),
    newInstancesScopedList_Warning_DataItem,

    -- * InstancesSetLabelsRequest
    InstancesSetLabelsRequest (..),
    newInstancesSetLabelsRequest,

    -- * InstancesSetLabelsRequest_Labels
    InstancesSetLabelsRequest_Labels (..),
    newInstancesSetLabelsRequest_Labels,

    -- * InstancesSetMachineResourcesRequest
    InstancesSetMachineResourcesRequest (..),
    newInstancesSetMachineResourcesRequest,

    -- * InstancesSetMachineTypeRequest
    InstancesSetMachineTypeRequest (..),
    newInstancesSetMachineTypeRequest,

    -- * InstancesSetMinCpuPlatformRequest
    InstancesSetMinCpuPlatformRequest (..),
    newInstancesSetMinCpuPlatformRequest,

    -- * InstancesSetNameRequest
    InstancesSetNameRequest (..),
    newInstancesSetNameRequest,

    -- * InstancesSetServiceAccountRequest
    InstancesSetServiceAccountRequest (..),
    newInstancesSetServiceAccountRequest,

    -- * InstancesStartWithEncryptionKeyRequest
    InstancesStartWithEncryptionKeyRequest (..),
    newInstancesStartWithEncryptionKeyRequest,

    -- * Int64RangeMatch
    Int64RangeMatch (..),
    newInt64RangeMatch,

    -- * Interconnect
    Interconnect (..),
    newInterconnect,

    -- * InterconnectAttachment
    InterconnectAttachment (..),
    newInterconnectAttachment,

    -- * InterconnectAttachmentAggregatedList
    InterconnectAttachmentAggregatedList (..),
    newInterconnectAttachmentAggregatedList,

    -- * InterconnectAttachmentAggregatedList_Items
    InterconnectAttachmentAggregatedList_Items (..),
    newInterconnectAttachmentAggregatedList_Items,

    -- * InterconnectAttachmentAggregatedList_Warning
    InterconnectAttachmentAggregatedList_Warning (..),
    newInterconnectAttachmentAggregatedList_Warning,

    -- * InterconnectAttachmentAggregatedList_Warning_DataItem
    InterconnectAttachmentAggregatedList_Warning_DataItem (..),
    newInterconnectAttachmentAggregatedList_Warning_DataItem,

    -- * InterconnectAttachmentList
    InterconnectAttachmentList (..),
    newInterconnectAttachmentList,

    -- * InterconnectAttachmentList_Warning
    InterconnectAttachmentList_Warning (..),
    newInterconnectAttachmentList_Warning,

    -- * InterconnectAttachmentList_Warning_DataItem
    InterconnectAttachmentList_Warning_DataItem (..),
    newInterconnectAttachmentList_Warning_DataItem,

    -- * InterconnectAttachmentPartnerMetadata
    InterconnectAttachmentPartnerMetadata (..),
    newInterconnectAttachmentPartnerMetadata,

    -- * InterconnectAttachmentPrivateInfo
    InterconnectAttachmentPrivateInfo (..),
    newInterconnectAttachmentPrivateInfo,

    -- * InterconnectAttachmentsScopedList
    InterconnectAttachmentsScopedList (..),
    newInterconnectAttachmentsScopedList,

    -- * InterconnectAttachmentsScopedList_Warning
    InterconnectAttachmentsScopedList_Warning (..),
    newInterconnectAttachmentsScopedList_Warning,

    -- * InterconnectAttachmentsScopedList_Warning_DataItem
    InterconnectAttachmentsScopedList_Warning_DataItem (..),
    newInterconnectAttachmentsScopedList_Warning_DataItem,

    -- * InterconnectCircuitInfo
    InterconnectCircuitInfo (..),
    newInterconnectCircuitInfo,

    -- * InterconnectDiagnostics
    InterconnectDiagnostics (..),
    newInterconnectDiagnostics,

    -- * InterconnectDiagnosticsARPEntry
    InterconnectDiagnosticsARPEntry (..),
    newInterconnectDiagnosticsARPEntry,

    -- * InterconnectDiagnosticsLinkLACPStatus
    InterconnectDiagnosticsLinkLACPStatus (..),
    newInterconnectDiagnosticsLinkLACPStatus,

    -- * InterconnectDiagnosticsLinkOpticalPower
    InterconnectDiagnosticsLinkOpticalPower (..),
    newInterconnectDiagnosticsLinkOpticalPower,

    -- * InterconnectDiagnosticsLinkStatus
    InterconnectDiagnosticsLinkStatus (..),
    newInterconnectDiagnosticsLinkStatus,

    -- * InterconnectList
    InterconnectList (..),
    newInterconnectList,

    -- * InterconnectList_Warning
    InterconnectList_Warning (..),
    newInterconnectList_Warning,

    -- * InterconnectList_Warning_DataItem
    InterconnectList_Warning_DataItem (..),
    newInterconnectList_Warning_DataItem,

    -- * InterconnectLocation
    InterconnectLocation (..),
    newInterconnectLocation,

    -- * InterconnectLocationList
    InterconnectLocationList (..),
    newInterconnectLocationList,

    -- * InterconnectLocationList_Warning
    InterconnectLocationList_Warning (..),
    newInterconnectLocationList_Warning,

    -- * InterconnectLocationList_Warning_DataItem
    InterconnectLocationList_Warning_DataItem (..),
    newInterconnectLocationList_Warning_DataItem,

    -- * InterconnectLocationRegionInfo
    InterconnectLocationRegionInfo (..),
    newInterconnectLocationRegionInfo,

    -- * InterconnectOutageNotification
    InterconnectOutageNotification (..),
    newInterconnectOutageNotification,

    -- * InterconnectsGetDiagnosticsResponse
    InterconnectsGetDiagnosticsResponse (..),
    newInterconnectsGetDiagnosticsResponse,

    -- * License
    License (..),
    newLicense,

    -- * LicenseCode
    LicenseCode (..),
    newLicenseCode,

    -- * LicenseCodeLicenseAlias
    LicenseCodeLicenseAlias (..),
    newLicenseCodeLicenseAlias,

    -- * LicenseResourceCommitment
    LicenseResourceCommitment (..),
    newLicenseResourceCommitment,

    -- * LicenseResourceRequirements
    LicenseResourceRequirements (..),
    newLicenseResourceRequirements,

    -- * LicensesListResponse
    LicensesListResponse (..),
    newLicensesListResponse,

    -- * LicensesListResponse_Warning
    LicensesListResponse_Warning (..),
    newLicensesListResponse_Warning,

    -- * LicensesListResponse_Warning_DataItem
    LicensesListResponse_Warning_DataItem (..),
    newLicensesListResponse_Warning_DataItem,

    -- * LocalDisk
    LocalDisk (..),
    newLocalDisk,

    -- * LocalizedMessage
    LocalizedMessage (..),
    newLocalizedMessage,

    -- * LocationPolicy
    LocationPolicy (..),
    newLocationPolicy,

    -- * LocationPolicy_Locations
    LocationPolicy_Locations (..),
    newLocationPolicy_Locations,

    -- * LocationPolicyLocation
    LocationPolicyLocation (..),
    newLocationPolicyLocation,

    -- * LocationPolicyLocationConstraints
    LocationPolicyLocationConstraints (..),
    newLocationPolicyLocationConstraints,

    -- * LogConfig
    LogConfig (..),
    newLogConfig,

    -- * LogConfigCloudAuditOptions
    LogConfigCloudAuditOptions (..),
    newLogConfigCloudAuditOptions,

    -- * LogConfigCounterOptions
    LogConfigCounterOptions (..),
    newLogConfigCounterOptions,

    -- * LogConfigCounterOptionsCustomField
    LogConfigCounterOptionsCustomField (..),
    newLogConfigCounterOptionsCustomField,

    -- * LogConfigDataAccessOptions
    LogConfigDataAccessOptions (..),
    newLogConfigDataAccessOptions,

    -- * MachineImage
    MachineImage (..),
    newMachineImage,

    -- * MachineImageList
    MachineImageList (..),
    newMachineImageList,

    -- * MachineImageList_Warning
    MachineImageList_Warning (..),
    newMachineImageList_Warning,

    -- * MachineImageList_Warning_DataItem
    MachineImageList_Warning_DataItem (..),
    newMachineImageList_Warning_DataItem,

    -- * MachineType
    MachineType (..),
    newMachineType,

    -- * MachineType_AcceleratorsItem
    MachineType_AcceleratorsItem (..),
    newMachineType_AcceleratorsItem,

    -- * MachineType_ScratchDisksItem
    MachineType_ScratchDisksItem (..),
    newMachineType_ScratchDisksItem,

    -- * MachineTypeAggregatedList
    MachineTypeAggregatedList (..),
    newMachineTypeAggregatedList,

    -- * MachineTypeAggregatedList_Items
    MachineTypeAggregatedList_Items (..),
    newMachineTypeAggregatedList_Items,

    -- * MachineTypeAggregatedList_Warning
    MachineTypeAggregatedList_Warning (..),
    newMachineTypeAggregatedList_Warning,

    -- * MachineTypeAggregatedList_Warning_DataItem
    MachineTypeAggregatedList_Warning_DataItem (..),
    newMachineTypeAggregatedList_Warning_DataItem,

    -- * MachineTypeList
    MachineTypeList (..),
    newMachineTypeList,

    -- * MachineTypeList_Warning
    MachineTypeList_Warning (..),
    newMachineTypeList_Warning,

    -- * MachineTypeList_Warning_DataItem
    MachineTypeList_Warning_DataItem (..),
    newMachineTypeList_Warning_DataItem,

    -- * MachineTypesScopedList
    MachineTypesScopedList (..),
    newMachineTypesScopedList,

    -- * MachineTypesScopedList_Warning
    MachineTypesScopedList_Warning (..),
    newMachineTypesScopedList_Warning,

    -- * MachineTypesScopedList_Warning_DataItem
    MachineTypesScopedList_Warning_DataItem (..),
    newMachineTypesScopedList_Warning_DataItem,

    -- * ManagedInstance
    ManagedInstance (..),
    newManagedInstance,

    -- * ManagedInstanceInstanceHealth
    ManagedInstanceInstanceHealth (..),
    newManagedInstanceInstanceHealth,

    -- * ManagedInstanceLastAttempt
    ManagedInstanceLastAttempt (..),
    newManagedInstanceLastAttempt,

    -- * ManagedInstanceLastAttempt_Errors
    ManagedInstanceLastAttempt_Errors (..),
    newManagedInstanceLastAttempt_Errors,

    -- * ManagedInstanceLastAttempt_Errors_ErrorsItem
    ManagedInstanceLastAttempt_Errors_ErrorsItem (..),
    newManagedInstanceLastAttempt_Errors_ErrorsItem,

    -- * ManagedInstanceLastAttempt_Errors_ErrorsItem_ErrorDetailsItem
    ManagedInstanceLastAttempt_Errors_ErrorsItem_ErrorDetailsItem (..),
    newManagedInstanceLastAttempt_Errors_ErrorsItem_ErrorDetailsItem,

    -- * ManagedInstanceVersion
    ManagedInstanceVersion (..),
    newManagedInstanceVersion,

    -- * Metadata
    Metadata (..),
    newMetadata,

    -- * Metadata_ItemsItem
    Metadata_ItemsItem (..),
    newMetadata_ItemsItem,

    -- * MetadataFilter
    MetadataFilter (..),
    newMetadataFilter,

    -- * MetadataFilterLabelMatch
    MetadataFilterLabelMatch (..),
    newMetadataFilterLabelMatch,

    -- * NamedPort
    NamedPort (..),
    newNamedPort,

    -- * Network
    Network (..),
    newNetwork,

    -- * NetworkAttachment
    NetworkAttachment (..),
    newNetworkAttachment,

    -- * NetworkAttachmentAggregatedList
    NetworkAttachmentAggregatedList (..),
    newNetworkAttachmentAggregatedList,

    -- * NetworkAttachmentAggregatedList_Items
    NetworkAttachmentAggregatedList_Items (..),
    newNetworkAttachmentAggregatedList_Items,

    -- * NetworkAttachmentAggregatedList_Warning
    NetworkAttachmentAggregatedList_Warning (..),
    newNetworkAttachmentAggregatedList_Warning,

    -- * NetworkAttachmentAggregatedList_Warning_DataItem
    NetworkAttachmentAggregatedList_Warning_DataItem (..),
    newNetworkAttachmentAggregatedList_Warning_DataItem,

    -- * NetworkAttachmentConnectedEndpoint
    NetworkAttachmentConnectedEndpoint (..),
    newNetworkAttachmentConnectedEndpoint,

    -- * NetworkAttachmentList
    NetworkAttachmentList (..),
    newNetworkAttachmentList,

    -- * NetworkAttachmentList_Warning
    NetworkAttachmentList_Warning (..),
    newNetworkAttachmentList_Warning,

    -- * NetworkAttachmentList_Warning_DataItem
    NetworkAttachmentList_Warning_DataItem (..),
    newNetworkAttachmentList_Warning_DataItem,

    -- * NetworkAttachmentsScopedList
    NetworkAttachmentsScopedList (..),
    newNetworkAttachmentsScopedList,

    -- * NetworkAttachmentsScopedList_Warning
    NetworkAttachmentsScopedList_Warning (..),
    newNetworkAttachmentsScopedList_Warning,

    -- * NetworkAttachmentsScopedList_Warning_DataItem
    NetworkAttachmentsScopedList_Warning_DataItem (..),
    newNetworkAttachmentsScopedList_Warning_DataItem,

    -- * NetworkEdgeSecurityService
    NetworkEdgeSecurityService (..),
    newNetworkEdgeSecurityService,

    -- * NetworkEdgeSecurityServiceAggregatedList
    NetworkEdgeSecurityServiceAggregatedList (..),
    newNetworkEdgeSecurityServiceAggregatedList,

    -- * NetworkEdgeSecurityServiceAggregatedList_Items
    NetworkEdgeSecurityServiceAggregatedList_Items (..),
    newNetworkEdgeSecurityServiceAggregatedList_Items,

    -- * NetworkEdgeSecurityServiceAggregatedList_Warning
    NetworkEdgeSecurityServiceAggregatedList_Warning (..),
    newNetworkEdgeSecurityServiceAggregatedList_Warning,

    -- * NetworkEdgeSecurityServiceAggregatedList_Warning_DataItem
    NetworkEdgeSecurityServiceAggregatedList_Warning_DataItem (..),
    newNetworkEdgeSecurityServiceAggregatedList_Warning_DataItem,

    -- * NetworkEdgeSecurityServicesScopedList
    NetworkEdgeSecurityServicesScopedList (..),
    newNetworkEdgeSecurityServicesScopedList,

    -- * NetworkEdgeSecurityServicesScopedList_Warning
    NetworkEdgeSecurityServicesScopedList_Warning (..),
    newNetworkEdgeSecurityServicesScopedList_Warning,

    -- * NetworkEdgeSecurityServicesScopedList_Warning_DataItem
    NetworkEdgeSecurityServicesScopedList_Warning_DataItem (..),
    newNetworkEdgeSecurityServicesScopedList_Warning_DataItem,

    -- * NetworkEndpoint
    NetworkEndpoint (..),
    newNetworkEndpoint,

    -- * NetworkEndpoint_Annotations
    NetworkEndpoint_Annotations (..),
    newNetworkEndpoint_Annotations,

    -- * NetworkEndpointGroup
    NetworkEndpointGroup (..),
    newNetworkEndpointGroup,

    -- * NetworkEndpointGroup_Annotations
    NetworkEndpointGroup_Annotations (..),
    newNetworkEndpointGroup_Annotations,

    -- * NetworkEndpointGroupAggregatedList
    NetworkEndpointGroupAggregatedList (..),
    newNetworkEndpointGroupAggregatedList,

    -- * NetworkEndpointGroupAggregatedList_Items
    NetworkEndpointGroupAggregatedList_Items (..),
    newNetworkEndpointGroupAggregatedList_Items,

    -- * NetworkEndpointGroupAggregatedList_Warning
    NetworkEndpointGroupAggregatedList_Warning (..),
    newNetworkEndpointGroupAggregatedList_Warning,

    -- * NetworkEndpointGroupAggregatedList_Warning_DataItem
    NetworkEndpointGroupAggregatedList_Warning_DataItem (..),
    newNetworkEndpointGroupAggregatedList_Warning_DataItem,

    -- * NetworkEndpointGroupAppEngine
    NetworkEndpointGroupAppEngine (..),
    newNetworkEndpointGroupAppEngine,

    -- * NetworkEndpointGroupCloudFunction
    NetworkEndpointGroupCloudFunction (..),
    newNetworkEndpointGroupCloudFunction,

    -- * NetworkEndpointGroupCloudRun
    NetworkEndpointGroupCloudRun (..),
    newNetworkEndpointGroupCloudRun,

    -- * NetworkEndpointGroupList
    NetworkEndpointGroupList (..),
    newNetworkEndpointGroupList,

    -- * NetworkEndpointGroupList_Warning
    NetworkEndpointGroupList_Warning (..),
    newNetworkEndpointGroupList_Warning,

    -- * NetworkEndpointGroupList_Warning_DataItem
    NetworkEndpointGroupList_Warning_DataItem (..),
    newNetworkEndpointGroupList_Warning_DataItem,

    -- * NetworkEndpointGroupPscData
    NetworkEndpointGroupPscData (..),
    newNetworkEndpointGroupPscData,

    -- * NetworkEndpointGroupsAttachEndpointsRequest
    NetworkEndpointGroupsAttachEndpointsRequest (..),
    newNetworkEndpointGroupsAttachEndpointsRequest,

    -- * NetworkEndpointGroupsDetachEndpointsRequest
    NetworkEndpointGroupsDetachEndpointsRequest (..),
    newNetworkEndpointGroupsDetachEndpointsRequest,

    -- * NetworkEndpointGroupsListEndpointsRequest
    NetworkEndpointGroupsListEndpointsRequest (..),
    newNetworkEndpointGroupsListEndpointsRequest,

    -- * NetworkEndpointGroupsListNetworkEndpoints
    NetworkEndpointGroupsListNetworkEndpoints (..),
    newNetworkEndpointGroupsListNetworkEndpoints,

    -- * NetworkEndpointGroupsListNetworkEndpoints_Warning
    NetworkEndpointGroupsListNetworkEndpoints_Warning (..),
    newNetworkEndpointGroupsListNetworkEndpoints_Warning,

    -- * NetworkEndpointGroupsListNetworkEndpoints_Warning_DataItem
    NetworkEndpointGroupsListNetworkEndpoints_Warning_DataItem (..),
    newNetworkEndpointGroupsListNetworkEndpoints_Warning_DataItem,

    -- * NetworkEndpointGroupsScopedList
    NetworkEndpointGroupsScopedList (..),
    newNetworkEndpointGroupsScopedList,

    -- * NetworkEndpointGroupsScopedList_Warning
    NetworkEndpointGroupsScopedList_Warning (..),
    newNetworkEndpointGroupsScopedList_Warning,

    -- * NetworkEndpointGroupsScopedList_Warning_DataItem
    NetworkEndpointGroupsScopedList_Warning_DataItem (..),
    newNetworkEndpointGroupsScopedList_Warning_DataItem,

    -- * NetworkEndpointWithHealthStatus
    NetworkEndpointWithHealthStatus (..),
    newNetworkEndpointWithHealthStatus,

    -- * NetworkInterface
    NetworkInterface (..),
    newNetworkInterface,

    -- * NetworkList
    NetworkList (..),
    newNetworkList,

    -- * NetworkList_Warning
    NetworkList_Warning (..),
    newNetworkList_Warning,

    -- * NetworkList_Warning_DataItem
    NetworkList_Warning_DataItem (..),
    newNetworkList_Warning_DataItem,

    -- * NetworkPeering
    NetworkPeering (..),
    newNetworkPeering,

    -- * NetworkPerformanceConfig
    NetworkPerformanceConfig (..),
    newNetworkPerformanceConfig,

    -- * NetworkRoutingConfig
    NetworkRoutingConfig (..),
    newNetworkRoutingConfig,

    -- * NetworksAddPeeringRequest
    NetworksAddPeeringRequest (..),
    newNetworksAddPeeringRequest,

    -- * NetworksGetEffectiveFirewallsResponse
    NetworksGetEffectiveFirewallsResponse (..),
    newNetworksGetEffectiveFirewallsResponse,

    -- * NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy
    NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy (..),
    newNetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy,

    -- * NetworksRemovePeeringRequest
    NetworksRemovePeeringRequest (..),
    newNetworksRemovePeeringRequest,

    -- * NetworksUpdatePeeringRequest
    NetworksUpdatePeeringRequest (..),
    newNetworksUpdatePeeringRequest,

    -- * NodeGroup
    NodeGroup (..),
    newNodeGroup,

    -- * NodeGroupAggregatedList
    NodeGroupAggregatedList (..),
    newNodeGroupAggregatedList,

    -- * NodeGroupAggregatedList_Items
    NodeGroupAggregatedList_Items (..),
    newNodeGroupAggregatedList_Items,

    -- * NodeGroupAggregatedList_Warning
    NodeGroupAggregatedList_Warning (..),
    newNodeGroupAggregatedList_Warning,

    -- * NodeGroupAggregatedList_Warning_DataItem
    NodeGroupAggregatedList_Warning_DataItem (..),
    newNodeGroupAggregatedList_Warning_DataItem,

    -- * NodeGroupAutoscalingPolicy
    NodeGroupAutoscalingPolicy (..),
    newNodeGroupAutoscalingPolicy,

    -- * NodeGroupList
    NodeGroupList (..),
    newNodeGroupList,

    -- * NodeGroupList_Warning
    NodeGroupList_Warning (..),
    newNodeGroupList_Warning,

    -- * NodeGroupList_Warning_DataItem
    NodeGroupList_Warning_DataItem (..),
    newNodeGroupList_Warning_DataItem,

    -- * NodeGroupMaintenanceWindow
    NodeGroupMaintenanceWindow (..),
    newNodeGroupMaintenanceWindow,

    -- * NodeGroupNode
    NodeGroupNode (..),
    newNodeGroupNode,

    -- * NodeGroupsAddNodesRequest
    NodeGroupsAddNodesRequest (..),
    newNodeGroupsAddNodesRequest,

    -- * NodeGroupsDeleteNodesRequest
    NodeGroupsDeleteNodesRequest (..),
    newNodeGroupsDeleteNodesRequest,

    -- * NodeGroupsListNodes
    NodeGroupsListNodes (..),
    newNodeGroupsListNodes,

    -- * NodeGroupsListNodes_Warning
    NodeGroupsListNodes_Warning (..),
    newNodeGroupsListNodes_Warning,

    -- * NodeGroupsListNodes_Warning_DataItem
    NodeGroupsListNodes_Warning_DataItem (..),
    newNodeGroupsListNodes_Warning_DataItem,

    -- * NodeGroupsScopedList
    NodeGroupsScopedList (..),
    newNodeGroupsScopedList,

    -- * NodeGroupsScopedList_Warning
    NodeGroupsScopedList_Warning (..),
    newNodeGroupsScopedList_Warning,

    -- * NodeGroupsScopedList_Warning_DataItem
    NodeGroupsScopedList_Warning_DataItem (..),
    newNodeGroupsScopedList_Warning_DataItem,

    -- * NodeGroupsSetNodeTemplateRequest
    NodeGroupsSetNodeTemplateRequest (..),
    newNodeGroupsSetNodeTemplateRequest,

    -- * NodeGroupsSimulateMaintenanceEventRequest
    NodeGroupsSimulateMaintenanceEventRequest (..),
    newNodeGroupsSimulateMaintenanceEventRequest,

    -- * NodeTemplate
    NodeTemplate (..),
    newNodeTemplate,

    -- * NodeTemplate_NodeAffinityLabels
    NodeTemplate_NodeAffinityLabels (..),
    newNodeTemplate_NodeAffinityLabels,

    -- * NodeTemplateAggregatedList
    NodeTemplateAggregatedList (..),
    newNodeTemplateAggregatedList,

    -- * NodeTemplateAggregatedList_Items
    NodeTemplateAggregatedList_Items (..),
    newNodeTemplateAggregatedList_Items,

    -- * NodeTemplateAggregatedList_Warning
    NodeTemplateAggregatedList_Warning (..),
    newNodeTemplateAggregatedList_Warning,

    -- * NodeTemplateAggregatedList_Warning_DataItem
    NodeTemplateAggregatedList_Warning_DataItem (..),
    newNodeTemplateAggregatedList_Warning_DataItem,

    -- * NodeTemplateList
    NodeTemplateList (..),
    newNodeTemplateList,

    -- * NodeTemplateList_Warning
    NodeTemplateList_Warning (..),
    newNodeTemplateList_Warning,

    -- * NodeTemplateList_Warning_DataItem
    NodeTemplateList_Warning_DataItem (..),
    newNodeTemplateList_Warning_DataItem,

    -- * NodeTemplateNodeTypeFlexibility
    NodeTemplateNodeTypeFlexibility (..),
    newNodeTemplateNodeTypeFlexibility,

    -- * NodeTemplatesScopedList
    NodeTemplatesScopedList (..),
    newNodeTemplatesScopedList,

    -- * NodeTemplatesScopedList_Warning
    NodeTemplatesScopedList_Warning (..),
    newNodeTemplatesScopedList_Warning,

    -- * NodeTemplatesScopedList_Warning_DataItem
    NodeTemplatesScopedList_Warning_DataItem (..),
    newNodeTemplatesScopedList_Warning_DataItem,

    -- * NodeType
    NodeType (..),
    newNodeType,

    -- * NodeTypeAggregatedList
    NodeTypeAggregatedList (..),
    newNodeTypeAggregatedList,

    -- * NodeTypeAggregatedList_Items
    NodeTypeAggregatedList_Items (..),
    newNodeTypeAggregatedList_Items,

    -- * NodeTypeAggregatedList_Warning
    NodeTypeAggregatedList_Warning (..),
    newNodeTypeAggregatedList_Warning,

    -- * NodeTypeAggregatedList_Warning_DataItem
    NodeTypeAggregatedList_Warning_DataItem (..),
    newNodeTypeAggregatedList_Warning_DataItem,

    -- * NodeTypeList
    NodeTypeList (..),
    newNodeTypeList,

    -- * NodeTypeList_Warning
    NodeTypeList_Warning (..),
    newNodeTypeList_Warning,

    -- * NodeTypeList_Warning_DataItem
    NodeTypeList_Warning_DataItem (..),
    newNodeTypeList_Warning_DataItem,

    -- * NodeTypesScopedList
    NodeTypesScopedList (..),
    newNodeTypesScopedList,

    -- * NodeTypesScopedList_Warning
    NodeTypesScopedList_Warning (..),
    newNodeTypesScopedList_Warning,

    -- * NodeTypesScopedList_Warning_DataItem
    NodeTypesScopedList_Warning_DataItem (..),
    newNodeTypesScopedList_Warning_DataItem,

    -- * NotificationEndpoint
    NotificationEndpoint (..),
    newNotificationEndpoint,

    -- * NotificationEndpointGrpcSettings
    NotificationEndpointGrpcSettings (..),
    newNotificationEndpointGrpcSettings,

    -- * NotificationEndpointList
    NotificationEndpointList (..),
    newNotificationEndpointList,

    -- * NotificationEndpointList_Warning
    NotificationEndpointList_Warning (..),
    newNotificationEndpointList_Warning,

    -- * NotificationEndpointList_Warning_DataItem
    NotificationEndpointList_Warning_DataItem (..),
    newNotificationEndpointList_Warning_DataItem,

    -- * Operation
    Operation (..),
    newOperation,

    -- * Operation_Error
    Operation_Error (..),
    newOperation_Error,

    -- * Operation_Error_ErrorsItem
    Operation_Error_ErrorsItem (..),
    newOperation_Error_ErrorsItem,

    -- * Operation_Error_ErrorsItem_ErrorDetailsItem
    Operation_Error_ErrorsItem_ErrorDetailsItem (..),
    newOperation_Error_ErrorsItem_ErrorDetailsItem,

    -- * Operation_WarningsItem
    Operation_WarningsItem (..),
    newOperation_WarningsItem,

    -- * Operation_WarningsItem_DataItem
    Operation_WarningsItem_DataItem (..),
    newOperation_WarningsItem_DataItem,

    -- * OperationAggregatedList
    OperationAggregatedList (..),
    newOperationAggregatedList,

    -- * OperationAggregatedList_Items
    OperationAggregatedList_Items (..),
    newOperationAggregatedList_Items,

    -- * OperationAggregatedList_Warning
    OperationAggregatedList_Warning (..),
    newOperationAggregatedList_Warning,

    -- * OperationAggregatedList_Warning_DataItem
    OperationAggregatedList_Warning_DataItem (..),
    newOperationAggregatedList_Warning_DataItem,

    -- * OperationList
    OperationList (..),
    newOperationList,

    -- * OperationList_Warning
    OperationList_Warning (..),
    newOperationList_Warning,

    -- * OperationList_Warning_DataItem
    OperationList_Warning_DataItem (..),
    newOperationList_Warning_DataItem,

    -- * OperationsScopedList
    OperationsScopedList (..),
    newOperationsScopedList,

    -- * OperationsScopedList_Warning
    OperationsScopedList_Warning (..),
    newOperationsScopedList_Warning,

    -- * OperationsScopedList_Warning_DataItem
    OperationsScopedList_Warning_DataItem (..),
    newOperationsScopedList_Warning_DataItem,

    -- * OutlierDetection
    OutlierDetection (..),
    newOutlierDetection,

    -- * PacketIntervals
    PacketIntervals (..),
    newPacketIntervals,

    -- * PacketMirroring
    PacketMirroring (..),
    newPacketMirroring,

    -- * PacketMirroringAggregatedList
    PacketMirroringAggregatedList (..),
    newPacketMirroringAggregatedList,

    -- * PacketMirroringAggregatedList_Items
    PacketMirroringAggregatedList_Items (..),
    newPacketMirroringAggregatedList_Items,

    -- * PacketMirroringAggregatedList_Warning
    PacketMirroringAggregatedList_Warning (..),
    newPacketMirroringAggregatedList_Warning,

    -- * PacketMirroringAggregatedList_Warning_DataItem
    PacketMirroringAggregatedList_Warning_DataItem (..),
    newPacketMirroringAggregatedList_Warning_DataItem,

    -- * PacketMirroringFilter
    PacketMirroringFilter (..),
    newPacketMirroringFilter,

    -- * PacketMirroringForwardingRuleInfo
    PacketMirroringForwardingRuleInfo (..),
    newPacketMirroringForwardingRuleInfo,

    -- * PacketMirroringList
    PacketMirroringList (..),
    newPacketMirroringList,

    -- * PacketMirroringList_Warning
    PacketMirroringList_Warning (..),
    newPacketMirroringList_Warning,

    -- * PacketMirroringList_Warning_DataItem
    PacketMirroringList_Warning_DataItem (..),
    newPacketMirroringList_Warning_DataItem,

    -- * PacketMirroringMirroredResourceInfo
    PacketMirroringMirroredResourceInfo (..),
    newPacketMirroringMirroredResourceInfo,

    -- * PacketMirroringMirroredResourceInfoInstanceInfo
    PacketMirroringMirroredResourceInfoInstanceInfo (..),
    newPacketMirroringMirroredResourceInfoInstanceInfo,

    -- * PacketMirroringMirroredResourceInfoSubnetInfo
    PacketMirroringMirroredResourceInfoSubnetInfo (..),
    newPacketMirroringMirroredResourceInfoSubnetInfo,

    -- * PacketMirroringNetworkInfo
    PacketMirroringNetworkInfo (..),
    newPacketMirroringNetworkInfo,

    -- * PacketMirroringsScopedList
    PacketMirroringsScopedList (..),
    newPacketMirroringsScopedList,

    -- * PacketMirroringsScopedList_Warning
    PacketMirroringsScopedList_Warning (..),
    newPacketMirroringsScopedList_Warning,

    -- * PacketMirroringsScopedList_Warning_DataItem
    PacketMirroringsScopedList_Warning_DataItem (..),
    newPacketMirroringsScopedList_Warning_DataItem,

    -- * PathMatcher
    PathMatcher (..),
    newPathMatcher,

    -- * PathRule
    PathRule (..),
    newPathRule,

    -- * PerInstanceConfig
    PerInstanceConfig (..),
    newPerInstanceConfig,

    -- * Policy
    Policy (..),
    newPolicy,

    -- * PreconfiguredWafSet
    PreconfiguredWafSet (..),
    newPreconfiguredWafSet,

    -- * PreservedState
    PreservedState (..),
    newPreservedState,

    -- * PreservedState_Disks
    PreservedState_Disks (..),
    newPreservedState_Disks,

    -- * PreservedState_Metadata
    PreservedState_Metadata (..),
    newPreservedState_Metadata,

    -- * PreservedStatePreservedDisk
    PreservedStatePreservedDisk (..),
    newPreservedStatePreservedDisk,

    -- * Project
    Project (..),
    newProject,

    -- * ProjectsDisableXpnResourceRequest
    ProjectsDisableXpnResourceRequest (..),
    newProjectsDisableXpnResourceRequest,

    -- * ProjectsEnableXpnResourceRequest
    ProjectsEnableXpnResourceRequest (..),
    newProjectsEnableXpnResourceRequest,

    -- * ProjectsGetXpnResources
    ProjectsGetXpnResources (..),
    newProjectsGetXpnResources,

    -- * ProjectsListXpnHostsRequest
    ProjectsListXpnHostsRequest (..),
    newProjectsListXpnHostsRequest,

    -- * ProjectsSetDefaultNetworkTierRequest
    ProjectsSetDefaultNetworkTierRequest (..),
    newProjectsSetDefaultNetworkTierRequest,

    -- * PublicAdvertisedPrefix
    PublicAdvertisedPrefix (..),
    newPublicAdvertisedPrefix,

    -- * PublicAdvertisedPrefixList
    PublicAdvertisedPrefixList (..),
    newPublicAdvertisedPrefixList,

    -- * PublicAdvertisedPrefixList_Warning
    PublicAdvertisedPrefixList_Warning (..),
    newPublicAdvertisedPrefixList_Warning,

    -- * PublicAdvertisedPrefixList_Warning_DataItem
    PublicAdvertisedPrefixList_Warning_DataItem (..),
    newPublicAdvertisedPrefixList_Warning_DataItem,

    -- * PublicAdvertisedPrefixPublicDelegatedPrefix
    PublicAdvertisedPrefixPublicDelegatedPrefix (..),
    newPublicAdvertisedPrefixPublicDelegatedPrefix,

    -- * PublicDelegatedPrefix
    PublicDelegatedPrefix (..),
    newPublicDelegatedPrefix,

    -- * PublicDelegatedPrefixAggregatedList
    PublicDelegatedPrefixAggregatedList (..),
    newPublicDelegatedPrefixAggregatedList,

    -- * PublicDelegatedPrefixAggregatedList_Items
    PublicDelegatedPrefixAggregatedList_Items (..),
    newPublicDelegatedPrefixAggregatedList_Items,

    -- * PublicDelegatedPrefixAggregatedList_Warning
    PublicDelegatedPrefixAggregatedList_Warning (..),
    newPublicDelegatedPrefixAggregatedList_Warning,

    -- * PublicDelegatedPrefixAggregatedList_Warning_DataItem
    PublicDelegatedPrefixAggregatedList_Warning_DataItem (..),
    newPublicDelegatedPrefixAggregatedList_Warning_DataItem,

    -- * PublicDelegatedPrefixList
    PublicDelegatedPrefixList (..),
    newPublicDelegatedPrefixList,

    -- * PublicDelegatedPrefixList_Warning
    PublicDelegatedPrefixList_Warning (..),
    newPublicDelegatedPrefixList_Warning,

    -- * PublicDelegatedPrefixList_Warning_DataItem
    PublicDelegatedPrefixList_Warning_DataItem (..),
    newPublicDelegatedPrefixList_Warning_DataItem,

    -- * PublicDelegatedPrefixPublicDelegatedSubPrefix
    PublicDelegatedPrefixPublicDelegatedSubPrefix (..),
    newPublicDelegatedPrefixPublicDelegatedSubPrefix,

    -- * PublicDelegatedPrefixesScopedList
    PublicDelegatedPrefixesScopedList (..),
    newPublicDelegatedPrefixesScopedList,

    -- * PublicDelegatedPrefixesScopedList_Warning
    PublicDelegatedPrefixesScopedList_Warning (..),
    newPublicDelegatedPrefixesScopedList_Warning,

    -- * PublicDelegatedPrefixesScopedList_Warning_DataItem
    PublicDelegatedPrefixesScopedList_Warning_DataItem (..),
    newPublicDelegatedPrefixesScopedList_Warning_DataItem,

    -- * Quota
    Quota (..),
    newQuota,

    -- * QuotaExceededInfo
    QuotaExceededInfo (..),
    newQuotaExceededInfo,

    -- * QuotaExceededInfo_Dimensions
    QuotaExceededInfo_Dimensions (..),
    newQuotaExceededInfo_Dimensions,

    -- * Reference
    Reference (..),
    newReference,

    -- * Region
    Region (..),
    newRegion,

    -- * RegionAutoscalerList
    RegionAutoscalerList (..),
    newRegionAutoscalerList,

    -- * RegionAutoscalerList_Warning
    RegionAutoscalerList_Warning (..),
    newRegionAutoscalerList_Warning,

    -- * RegionAutoscalerList_Warning_DataItem
    RegionAutoscalerList_Warning_DataItem (..),
    newRegionAutoscalerList_Warning_DataItem,

    -- * RegionDiskTypeList
    RegionDiskTypeList (..),
    newRegionDiskTypeList,

    -- * RegionDiskTypeList_Warning
    RegionDiskTypeList_Warning (..),
    newRegionDiskTypeList_Warning,

    -- * RegionDiskTypeList_Warning_DataItem
    RegionDiskTypeList_Warning_DataItem (..),
    newRegionDiskTypeList_Warning_DataItem,

    -- * RegionDisksAddResourcePoliciesRequest
    RegionDisksAddResourcePoliciesRequest (..),
    newRegionDisksAddResourcePoliciesRequest,

    -- * RegionDisksRemoveResourcePoliciesRequest
    RegionDisksRemoveResourcePoliciesRequest (..),
    newRegionDisksRemoveResourcePoliciesRequest,

    -- * RegionDisksResizeRequest
    RegionDisksResizeRequest (..),
    newRegionDisksResizeRequest,

    -- * RegionInstanceGroupList
    RegionInstanceGroupList (..),
    newRegionInstanceGroupList,

    -- * RegionInstanceGroupList_Warning
    RegionInstanceGroupList_Warning (..),
    newRegionInstanceGroupList_Warning,

    -- * RegionInstanceGroupList_Warning_DataItem
    RegionInstanceGroupList_Warning_DataItem (..),
    newRegionInstanceGroupList_Warning_DataItem,

    -- * RegionInstanceGroupManagerDeleteInstanceConfigReq
    RegionInstanceGroupManagerDeleteInstanceConfigReq (..),
    newRegionInstanceGroupManagerDeleteInstanceConfigReq,

    -- * RegionInstanceGroupManagerList
    RegionInstanceGroupManagerList (..),
    newRegionInstanceGroupManagerList,

    -- * RegionInstanceGroupManagerList_Warning
    RegionInstanceGroupManagerList_Warning (..),
    newRegionInstanceGroupManagerList_Warning,

    -- * RegionInstanceGroupManagerList_Warning_DataItem
    RegionInstanceGroupManagerList_Warning_DataItem (..),
    newRegionInstanceGroupManagerList_Warning_DataItem,

    -- * RegionInstanceGroupManagerPatchInstanceConfigReq
    RegionInstanceGroupManagerPatchInstanceConfigReq (..),
    newRegionInstanceGroupManagerPatchInstanceConfigReq,

    -- * RegionInstanceGroupManagerUpdateInstanceConfigReq
    RegionInstanceGroupManagerUpdateInstanceConfigReq (..),
    newRegionInstanceGroupManagerUpdateInstanceConfigReq,

    -- * RegionInstanceGroupManagersAbandonInstancesRequest
    RegionInstanceGroupManagersAbandonInstancesRequest (..),
    newRegionInstanceGroupManagersAbandonInstancesRequest,

    -- * RegionInstanceGroupManagersApplyUpdatesRequest
    RegionInstanceGroupManagersApplyUpdatesRequest (..),
    newRegionInstanceGroupManagersApplyUpdatesRequest,

    -- * RegionInstanceGroupManagersCreateInstancesRequest
    RegionInstanceGroupManagersCreateInstancesRequest (..),
    newRegionInstanceGroupManagersCreateInstancesRequest,

    -- * RegionInstanceGroupManagersDeleteInstancesRequest
    RegionInstanceGroupManagersDeleteInstancesRequest (..),
    newRegionInstanceGroupManagersDeleteInstancesRequest,

    -- * RegionInstanceGroupManagersListErrorsResponse
    RegionInstanceGroupManagersListErrorsResponse (..),
    newRegionInstanceGroupManagersListErrorsResponse,

    -- * RegionInstanceGroupManagersListInstanceConfigsResp
    RegionInstanceGroupManagersListInstanceConfigsResp (..),
    newRegionInstanceGroupManagersListInstanceConfigsResp,

    -- * RegionInstanceGroupManagersListInstanceConfigsResp_Warning
    RegionInstanceGroupManagersListInstanceConfigsResp_Warning (..),
    newRegionInstanceGroupManagersListInstanceConfigsResp_Warning,

    -- * RegionInstanceGroupManagersListInstanceConfigsResp_Warning_DataItem
    RegionInstanceGroupManagersListInstanceConfigsResp_Warning_DataItem (..),
    newRegionInstanceGroupManagersListInstanceConfigsResp_Warning_DataItem,

    -- * RegionInstanceGroupManagersListInstancesResponse
    RegionInstanceGroupManagersListInstancesResponse (..),
    newRegionInstanceGroupManagersListInstancesResponse,

    -- * RegionInstanceGroupManagersRecreateRequest
    RegionInstanceGroupManagersRecreateRequest (..),
    newRegionInstanceGroupManagersRecreateRequest,

    -- * RegionInstanceGroupManagersSetTargetPoolsRequest
    RegionInstanceGroupManagersSetTargetPoolsRequest (..),
    newRegionInstanceGroupManagersSetTargetPoolsRequest,

    -- * RegionInstanceGroupManagersSetTemplateRequest
    RegionInstanceGroupManagersSetTemplateRequest (..),
    newRegionInstanceGroupManagersSetTemplateRequest,

    -- * RegionInstanceGroupsListInstances
    RegionInstanceGroupsListInstances (..),
    newRegionInstanceGroupsListInstances,

    -- * RegionInstanceGroupsListInstances_Warning
    RegionInstanceGroupsListInstances_Warning (..),
    newRegionInstanceGroupsListInstances_Warning,

    -- * RegionInstanceGroupsListInstances_Warning_DataItem
    RegionInstanceGroupsListInstances_Warning_DataItem (..),
    newRegionInstanceGroupsListInstances_Warning_DataItem,

    -- * RegionInstanceGroupsListInstancesRequest
    RegionInstanceGroupsListInstancesRequest (..),
    newRegionInstanceGroupsListInstancesRequest,

    -- * RegionInstanceGroupsSetNamedPortsRequest
    RegionInstanceGroupsSetNamedPortsRequest (..),
    newRegionInstanceGroupsSetNamedPortsRequest,

    -- * RegionList
    RegionList (..),
    newRegionList,

    -- * RegionList_Warning
    RegionList_Warning (..),
    newRegionList_Warning,

    -- * RegionList_Warning_DataItem
    RegionList_Warning_DataItem (..),
    newRegionList_Warning_DataItem,

    -- * RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse
    RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse (..),
    newRegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse,

    -- * RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy
    RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy (..),
    newRegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy,

    -- * RegionSetLabelsRequest
    RegionSetLabelsRequest (..),
    newRegionSetLabelsRequest,

    -- * RegionSetLabelsRequest_Labels
    RegionSetLabelsRequest_Labels (..),
    newRegionSetLabelsRequest_Labels,

    -- * RegionSetPolicyRequest
    RegionSetPolicyRequest (..),
    newRegionSetPolicyRequest,

    -- * RegionTargetHttpsProxiesSetSslCertificatesRequest
    RegionTargetHttpsProxiesSetSslCertificatesRequest (..),
    newRegionTargetHttpsProxiesSetSslCertificatesRequest,

    -- * RegionUrlMapsValidateRequest
    RegionUrlMapsValidateRequest (..),
    newRegionUrlMapsValidateRequest,

    -- * RequestMirrorPolicy
    RequestMirrorPolicy (..),
    newRequestMirrorPolicy,

    -- * Reservation
    Reservation (..),
    newReservation,

    -- * Reservation_ResourcePolicies
    Reservation_ResourcePolicies (..),
    newReservation_ResourcePolicies,

    -- * ReservationAffinity
    ReservationAffinity (..),
    newReservationAffinity,

    -- * ReservationAggregatedList
    ReservationAggregatedList (..),
    newReservationAggregatedList,

    -- * ReservationAggregatedList_Items
    ReservationAggregatedList_Items (..),
    newReservationAggregatedList_Items,

    -- * ReservationAggregatedList_Warning
    ReservationAggregatedList_Warning (..),
    newReservationAggregatedList_Warning,

    -- * ReservationAggregatedList_Warning_DataItem
    ReservationAggregatedList_Warning_DataItem (..),
    newReservationAggregatedList_Warning_DataItem,

    -- * ReservationList
    ReservationList (..),
    newReservationList,

    -- * ReservationList_Warning
    ReservationList_Warning (..),
    newReservationList_Warning,

    -- * ReservationList_Warning_DataItem
    ReservationList_Warning_DataItem (..),
    newReservationList_Warning_DataItem,

    -- * ReservationsResizeRequest
    ReservationsResizeRequest (..),
    newReservationsResizeRequest,

    -- * ReservationsScopedList
    ReservationsScopedList (..),
    newReservationsScopedList,

    -- * ReservationsScopedList_Warning
    ReservationsScopedList_Warning (..),
    newReservationsScopedList_Warning,

    -- * ReservationsScopedList_Warning_DataItem
    ReservationsScopedList_Warning_DataItem (..),
    newReservationsScopedList_Warning_DataItem,

    -- * ResourceCommitment
    ResourceCommitment (..),
    newResourceCommitment,

    -- * ResourceGroupReference
    ResourceGroupReference (..),
    newResourceGroupReference,

    -- * ResourcePoliciesScopedList
    ResourcePoliciesScopedList (..),
    newResourcePoliciesScopedList,

    -- * ResourcePoliciesScopedList_Warning
    ResourcePoliciesScopedList_Warning (..),
    newResourcePoliciesScopedList_Warning,

    -- * ResourcePoliciesScopedList_Warning_DataItem
    ResourcePoliciesScopedList_Warning_DataItem (..),
    newResourcePoliciesScopedList_Warning_DataItem,

    -- * ResourcePolicy
    ResourcePolicy (..),
    newResourcePolicy,

    -- * ResourcePolicyAggregatedList
    ResourcePolicyAggregatedList (..),
    newResourcePolicyAggregatedList,

    -- * ResourcePolicyAggregatedList_Items
    ResourcePolicyAggregatedList_Items (..),
    newResourcePolicyAggregatedList_Items,

    -- * ResourcePolicyAggregatedList_Warning
    ResourcePolicyAggregatedList_Warning (..),
    newResourcePolicyAggregatedList_Warning,

    -- * ResourcePolicyAggregatedList_Warning_DataItem
    ResourcePolicyAggregatedList_Warning_DataItem (..),
    newResourcePolicyAggregatedList_Warning_DataItem,

    -- * ResourcePolicyDailyCycle
    ResourcePolicyDailyCycle (..),
    newResourcePolicyDailyCycle,

    -- * ResourcePolicyGroupPlacementPolicy
    ResourcePolicyGroupPlacementPolicy (..),
    newResourcePolicyGroupPlacementPolicy,

    -- * ResourcePolicyHourlyCycle
    ResourcePolicyHourlyCycle (..),
    newResourcePolicyHourlyCycle,

    -- * ResourcePolicyInstanceSchedulePolicy
    ResourcePolicyInstanceSchedulePolicy (..),
    newResourcePolicyInstanceSchedulePolicy,

    -- * ResourcePolicyInstanceSchedulePolicySchedule
    ResourcePolicyInstanceSchedulePolicySchedule (..),
    newResourcePolicyInstanceSchedulePolicySchedule,

    -- * ResourcePolicyList
    ResourcePolicyList (..),
    newResourcePolicyList,

    -- * ResourcePolicyList_Warning
    ResourcePolicyList_Warning (..),
    newResourcePolicyList_Warning,

    -- * ResourcePolicyList_Warning_DataItem
    ResourcePolicyList_Warning_DataItem (..),
    newResourcePolicyList_Warning_DataItem,

    -- * ResourcePolicyResourceStatus
    ResourcePolicyResourceStatus (..),
    newResourcePolicyResourceStatus,

    -- * ResourcePolicyResourceStatusInstanceSchedulePolicyStatus
    ResourcePolicyResourceStatusInstanceSchedulePolicyStatus (..),
    newResourcePolicyResourceStatusInstanceSchedulePolicyStatus,

    -- * ResourcePolicySnapshotSchedulePolicy
    ResourcePolicySnapshotSchedulePolicy (..),
    newResourcePolicySnapshotSchedulePolicy,

    -- * ResourcePolicySnapshotSchedulePolicyRetentionPolicy
    ResourcePolicySnapshotSchedulePolicyRetentionPolicy (..),
    newResourcePolicySnapshotSchedulePolicyRetentionPolicy,

    -- * ResourcePolicySnapshotSchedulePolicySchedule
    ResourcePolicySnapshotSchedulePolicySchedule (..),
    newResourcePolicySnapshotSchedulePolicySchedule,

    -- * ResourcePolicySnapshotSchedulePolicySnapshotProperties
    ResourcePolicySnapshotSchedulePolicySnapshotProperties (..),
    newResourcePolicySnapshotSchedulePolicySnapshotProperties,

    -- * ResourcePolicySnapshotSchedulePolicySnapshotProperties_Labels
    ResourcePolicySnapshotSchedulePolicySnapshotProperties_Labels (..),
    newResourcePolicySnapshotSchedulePolicySnapshotProperties_Labels,

    -- * ResourcePolicyWeeklyCycle
    ResourcePolicyWeeklyCycle (..),
    newResourcePolicyWeeklyCycle,

    -- * ResourcePolicyWeeklyCycleDayOfWeek
    ResourcePolicyWeeklyCycleDayOfWeek (..),
    newResourcePolicyWeeklyCycleDayOfWeek,

    -- * ResourceStatus
    ResourceStatus (..),
    newResourceStatus,

    -- * Route
    Route (..),
    newRoute,

    -- * Route_WarningsItem
    Route_WarningsItem (..),
    newRoute_WarningsItem,

    -- * Route_WarningsItem_DataItem
    Route_WarningsItem_DataItem (..),
    newRoute_WarningsItem_DataItem,

    -- * RouteAsPath
    RouteAsPath (..),
    newRouteAsPath,

    -- * RouteList
    RouteList (..),
    newRouteList,

    -- * RouteList_Warning
    RouteList_Warning (..),
    newRouteList_Warning,

    -- * RouteList_Warning_DataItem
    RouteList_Warning_DataItem (..),
    newRouteList_Warning_DataItem,

    -- * Router
    Router (..),
    newRouter,

    -- * RouterAdvertisedIpRange
    RouterAdvertisedIpRange (..),
    newRouterAdvertisedIpRange,

    -- * RouterAggregatedList
    RouterAggregatedList (..),
    newRouterAggregatedList,

    -- * RouterAggregatedList_Items
    RouterAggregatedList_Items (..),
    newRouterAggregatedList_Items,

    -- * RouterAggregatedList_Warning
    RouterAggregatedList_Warning (..),
    newRouterAggregatedList_Warning,

    -- * RouterAggregatedList_Warning_DataItem
    RouterAggregatedList_Warning_DataItem (..),
    newRouterAggregatedList_Warning_DataItem,

    -- * RouterBgp
    RouterBgp (..),
    newRouterBgp,

    -- * RouterBgpPeer
    RouterBgpPeer (..),
    newRouterBgpPeer,

    -- * RouterBgpPeerBfd
    RouterBgpPeerBfd (..),
    newRouterBgpPeerBfd,

    -- * RouterInterface
    RouterInterface (..),
    newRouterInterface,

    -- * RouterList
    RouterList (..),
    newRouterList,

    -- * RouterList_Warning
    RouterList_Warning (..),
    newRouterList_Warning,

    -- * RouterList_Warning_DataItem
    RouterList_Warning_DataItem (..),
    newRouterList_Warning_DataItem,

    -- * RouterMd5AuthenticationKey
    RouterMd5AuthenticationKey (..),
    newRouterMd5AuthenticationKey,

    -- * RouterNat
    RouterNat (..),
    newRouterNat,

    -- * RouterNatLogConfig
    RouterNatLogConfig (..),
    newRouterNatLogConfig,

    -- * RouterNatRule
    RouterNatRule (..),
    newRouterNatRule,

    -- * RouterNatRuleAction
    RouterNatRuleAction (..),
    newRouterNatRuleAction,

    -- * RouterNatSubnetworkToNat
    RouterNatSubnetworkToNat (..),
    newRouterNatSubnetworkToNat,

    -- * RouterStatus
    RouterStatus (..),
    newRouterStatus,

    -- * RouterStatusBgpPeerStatus
    RouterStatusBgpPeerStatus (..),
    newRouterStatusBgpPeerStatus,

    -- * RouterStatusNatStatus
    RouterStatusNatStatus (..),
    newRouterStatusNatStatus,

    -- * RouterStatusNatStatusNatRuleStatus
    RouterStatusNatStatusNatRuleStatus (..),
    newRouterStatusNatStatusNatRuleStatus,

    -- * RouterStatusResponse
    RouterStatusResponse (..),
    newRouterStatusResponse,

    -- * RoutersPreviewResponse
    RoutersPreviewResponse (..),
    newRoutersPreviewResponse,

    -- * RoutersScopedList
    RoutersScopedList (..),
    newRoutersScopedList,

    -- * RoutersScopedList_Warning
    RoutersScopedList_Warning (..),
    newRoutersScopedList_Warning,

    -- * RoutersScopedList_Warning_DataItem
    RoutersScopedList_Warning_DataItem (..),
    newRoutersScopedList_Warning_DataItem,

    -- * Rule
    Rule (..),
    newRule,

    -- * SSLHealthCheck
    SSLHealthCheck (..),
    newSSLHealthCheck,

    -- * SavedAttachedDisk
    SavedAttachedDisk (..),
    newSavedAttachedDisk,

    -- * SavedDisk
    SavedDisk (..),
    newSavedDisk,

    -- * ScalingScheduleStatus
    ScalingScheduleStatus (..),
    newScalingScheduleStatus,

    -- * Scheduling
    Scheduling (..),
    newScheduling,

    -- * SchedulingNodeAffinity
    SchedulingNodeAffinity (..),
    newSchedulingNodeAffinity,

    -- * Screenshot
    Screenshot (..),
    newScreenshot,

    -- * SecurityPoliciesAggregatedList
    SecurityPoliciesAggregatedList (..),
    newSecurityPoliciesAggregatedList,

    -- * SecurityPoliciesAggregatedList_Items
    SecurityPoliciesAggregatedList_Items (..),
    newSecurityPoliciesAggregatedList_Items,

    -- * SecurityPoliciesAggregatedList_Warning
    SecurityPoliciesAggregatedList_Warning (..),
    newSecurityPoliciesAggregatedList_Warning,

    -- * SecurityPoliciesAggregatedList_Warning_DataItem
    SecurityPoliciesAggregatedList_Warning_DataItem (..),
    newSecurityPoliciesAggregatedList_Warning_DataItem,

    -- * SecurityPoliciesListPreconfiguredExpressionSetsResponse
    SecurityPoliciesListPreconfiguredExpressionSetsResponse (..),
    newSecurityPoliciesListPreconfiguredExpressionSetsResponse,

    -- * SecurityPoliciesScopedList
    SecurityPoliciesScopedList (..),
    newSecurityPoliciesScopedList,

    -- * SecurityPoliciesScopedList_Warning
    SecurityPoliciesScopedList_Warning (..),
    newSecurityPoliciesScopedList_Warning,

    -- * SecurityPoliciesScopedList_Warning_DataItem
    SecurityPoliciesScopedList_Warning_DataItem (..),
    newSecurityPoliciesScopedList_Warning_DataItem,

    -- * SecurityPoliciesWafConfig
    SecurityPoliciesWafConfig (..),
    newSecurityPoliciesWafConfig,

    -- * SecurityPolicy
    SecurityPolicy (..),
    newSecurityPolicy,

    -- * SecurityPolicyAdaptiveProtectionConfig
    SecurityPolicyAdaptiveProtectionConfig (..),
    newSecurityPolicyAdaptiveProtectionConfig,

    -- * SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig
    SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig (..),
    newSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig,

    -- * SecurityPolicyAdvancedOptionsConfig
    SecurityPolicyAdvancedOptionsConfig (..),
    newSecurityPolicyAdvancedOptionsConfig,

    -- * SecurityPolicyAdvancedOptionsConfigJsonCustomConfig
    SecurityPolicyAdvancedOptionsConfigJsonCustomConfig (..),
    newSecurityPolicyAdvancedOptionsConfigJsonCustomConfig,

    -- * SecurityPolicyDdosProtectionConfig
    SecurityPolicyDdosProtectionConfig (..),
    newSecurityPolicyDdosProtectionConfig,

    -- * SecurityPolicyList
    SecurityPolicyList (..),
    newSecurityPolicyList,

    -- * SecurityPolicyList_Warning
    SecurityPolicyList_Warning (..),
    newSecurityPolicyList_Warning,

    -- * SecurityPolicyList_Warning_DataItem
    SecurityPolicyList_Warning_DataItem (..),
    newSecurityPolicyList_Warning_DataItem,

    -- * SecurityPolicyRecaptchaOptionsConfig
    SecurityPolicyRecaptchaOptionsConfig (..),
    newSecurityPolicyRecaptchaOptionsConfig,

    -- * SecurityPolicyReference
    SecurityPolicyReference (..),
    newSecurityPolicyReference,

    -- * SecurityPolicyRule
    SecurityPolicyRule (..),
    newSecurityPolicyRule,

    -- * SecurityPolicyRuleHttpHeaderAction
    SecurityPolicyRuleHttpHeaderAction (..),
    newSecurityPolicyRuleHttpHeaderAction,

    -- * SecurityPolicyRuleHttpHeaderActionHttpHeaderOption
    SecurityPolicyRuleHttpHeaderActionHttpHeaderOption (..),
    newSecurityPolicyRuleHttpHeaderActionHttpHeaderOption,

    -- * SecurityPolicyRuleMatcher
    SecurityPolicyRuleMatcher (..),
    newSecurityPolicyRuleMatcher,

    -- * SecurityPolicyRuleMatcherConfig
    SecurityPolicyRuleMatcherConfig (..),
    newSecurityPolicyRuleMatcherConfig,

    -- * SecurityPolicyRulePreconfiguredWafConfig
    SecurityPolicyRulePreconfiguredWafConfig (..),
    newSecurityPolicyRulePreconfiguredWafConfig,

    -- * SecurityPolicyRulePreconfiguredWafConfigExclusion
    SecurityPolicyRulePreconfiguredWafConfigExclusion (..),
    newSecurityPolicyRulePreconfiguredWafConfigExclusion,

    -- * SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams
    SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams (..),
    newSecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams,

    -- * SecurityPolicyRuleRateLimitOptions
    SecurityPolicyRuleRateLimitOptions (..),
    newSecurityPolicyRuleRateLimitOptions,

    -- * SecurityPolicyRuleRateLimitOptionsThreshold
    SecurityPolicyRuleRateLimitOptionsThreshold (..),
    newSecurityPolicyRuleRateLimitOptionsThreshold,

    -- * SecurityPolicyRuleRedirectOptions
    SecurityPolicyRuleRedirectOptions (..),
    newSecurityPolicyRuleRedirectOptions,

    -- * SecuritySettings
    SecuritySettings (..),
    newSecuritySettings,

    -- * SerialPortOutput
    SerialPortOutput (..),
    newSerialPortOutput,

    -- * ServerBinding
    ServerBinding (..),
    newServerBinding,

    -- * ServiceAccount
    ServiceAccount (..),
    newServiceAccount,

    -- * ServiceAttachment
    ServiceAttachment (..),
    newServiceAttachment,

    -- * ServiceAttachmentAggregatedList
    ServiceAttachmentAggregatedList (..),
    newServiceAttachmentAggregatedList,

    -- * ServiceAttachmentAggregatedList_Items
    ServiceAttachmentAggregatedList_Items (..),
    newServiceAttachmentAggregatedList_Items,

    -- * ServiceAttachmentAggregatedList_Warning
    ServiceAttachmentAggregatedList_Warning (..),
    newServiceAttachmentAggregatedList_Warning,

    -- * ServiceAttachmentAggregatedList_Warning_DataItem
    ServiceAttachmentAggregatedList_Warning_DataItem (..),
    newServiceAttachmentAggregatedList_Warning_DataItem,

    -- * ServiceAttachmentConnectedEndpoint
    ServiceAttachmentConnectedEndpoint (..),
    newServiceAttachmentConnectedEndpoint,

    -- * ServiceAttachmentConsumerProjectLimit
    ServiceAttachmentConsumerProjectLimit (..),
    newServiceAttachmentConsumerProjectLimit,

    -- * ServiceAttachmentList
    ServiceAttachmentList (..),
    newServiceAttachmentList,

    -- * ServiceAttachmentList_Warning
    ServiceAttachmentList_Warning (..),
    newServiceAttachmentList_Warning,

    -- * ServiceAttachmentList_Warning_DataItem
    ServiceAttachmentList_Warning_DataItem (..),
    newServiceAttachmentList_Warning_DataItem,

    -- * ServiceAttachmentsScopedList
    ServiceAttachmentsScopedList (..),
    newServiceAttachmentsScopedList,

    -- * ServiceAttachmentsScopedList_Warning
    ServiceAttachmentsScopedList_Warning (..),
    newServiceAttachmentsScopedList_Warning,

    -- * ServiceAttachmentsScopedList_Warning_DataItem
    ServiceAttachmentsScopedList_Warning_DataItem (..),
    newServiceAttachmentsScopedList_Warning_DataItem,

    -- * ShareSettings
    ShareSettings (..),
    newShareSettings,

    -- * ShareSettings_ProjectMap
    ShareSettings_ProjectMap (..),
    newShareSettings_ProjectMap,

    -- * ShareSettingsProjectConfig
    ShareSettingsProjectConfig (..),
    newShareSettingsProjectConfig,

    -- * ShieldedInstanceConfig
    ShieldedInstanceConfig (..),
    newShieldedInstanceConfig,

    -- * ShieldedInstanceIdentity
    ShieldedInstanceIdentity (..),
    newShieldedInstanceIdentity,

    -- * ShieldedInstanceIdentityEntry
    ShieldedInstanceIdentityEntry (..),
    newShieldedInstanceIdentityEntry,

    -- * ShieldedInstanceIntegrityPolicy
    ShieldedInstanceIntegrityPolicy (..),
    newShieldedInstanceIntegrityPolicy,

    -- * SignedUrlKey
    SignedUrlKey (..),
    newSignedUrlKey,

    -- * Snapshot
    Snapshot (..),
    newSnapshot,

    -- * Snapshot_Labels
    Snapshot_Labels (..),
    newSnapshot_Labels,

    -- * SnapshotList
    SnapshotList (..),
    newSnapshotList,

    -- * SnapshotList_Warning
    SnapshotList_Warning (..),
    newSnapshotList_Warning,

    -- * SnapshotList_Warning_DataItem
    SnapshotList_Warning_DataItem (..),
    newSnapshotList_Warning_DataItem,

    -- * SourceDiskEncryptionKey
    SourceDiskEncryptionKey (..),
    newSourceDiskEncryptionKey,

    -- * SourceInstanceParams
    SourceInstanceParams (..),
    newSourceInstanceParams,

    -- * SourceInstanceProperties
    SourceInstanceProperties (..),
    newSourceInstanceProperties,

    -- * SourceInstanceProperties_Labels
    SourceInstanceProperties_Labels (..),
    newSourceInstanceProperties_Labels,

    -- * SslCertificate
    SslCertificate (..),
    newSslCertificate,

    -- * SslCertificateAggregatedList
    SslCertificateAggregatedList (..),
    newSslCertificateAggregatedList,

    -- * SslCertificateAggregatedList_Items
    SslCertificateAggregatedList_Items (..),
    newSslCertificateAggregatedList_Items,

    -- * SslCertificateAggregatedList_Warning
    SslCertificateAggregatedList_Warning (..),
    newSslCertificateAggregatedList_Warning,

    -- * SslCertificateAggregatedList_Warning_DataItem
    SslCertificateAggregatedList_Warning_DataItem (..),
    newSslCertificateAggregatedList_Warning_DataItem,

    -- * SslCertificateList
    SslCertificateList (..),
    newSslCertificateList,

    -- * SslCertificateList_Warning
    SslCertificateList_Warning (..),
    newSslCertificateList_Warning,

    -- * SslCertificateList_Warning_DataItem
    SslCertificateList_Warning_DataItem (..),
    newSslCertificateList_Warning_DataItem,

    -- * SslCertificateManagedSslCertificate
    SslCertificateManagedSslCertificate (..),
    newSslCertificateManagedSslCertificate,

    -- * SslCertificateManagedSslCertificate_DomainStatus
    SslCertificateManagedSslCertificate_DomainStatus (..),
    newSslCertificateManagedSslCertificate_DomainStatus,

    -- * SslCertificateSelfManagedSslCertificate
    SslCertificateSelfManagedSslCertificate (..),
    newSslCertificateSelfManagedSslCertificate,

    -- * SslCertificatesScopedList
    SslCertificatesScopedList (..),
    newSslCertificatesScopedList,

    -- * SslCertificatesScopedList_Warning
    SslCertificatesScopedList_Warning (..),
    newSslCertificatesScopedList_Warning,

    -- * SslCertificatesScopedList_Warning_DataItem
    SslCertificatesScopedList_Warning_DataItem (..),
    newSslCertificatesScopedList_Warning_DataItem,

    -- * SslPoliciesAggregatedList
    SslPoliciesAggregatedList (..),
    newSslPoliciesAggregatedList,

    -- * SslPoliciesAggregatedList_Items
    SslPoliciesAggregatedList_Items (..),
    newSslPoliciesAggregatedList_Items,

    -- * SslPoliciesAggregatedList_Warning
    SslPoliciesAggregatedList_Warning (..),
    newSslPoliciesAggregatedList_Warning,

    -- * SslPoliciesAggregatedList_Warning_DataItem
    SslPoliciesAggregatedList_Warning_DataItem (..),
    newSslPoliciesAggregatedList_Warning_DataItem,

    -- * SslPoliciesList
    SslPoliciesList (..),
    newSslPoliciesList,

    -- * SslPoliciesList_Warning
    SslPoliciesList_Warning (..),
    newSslPoliciesList_Warning,

    -- * SslPoliciesList_Warning_DataItem
    SslPoliciesList_Warning_DataItem (..),
    newSslPoliciesList_Warning_DataItem,

    -- * SslPoliciesListAvailableFeaturesResponse
    SslPoliciesListAvailableFeaturesResponse (..),
    newSslPoliciesListAvailableFeaturesResponse,

    -- * SslPoliciesScopedList
    SslPoliciesScopedList (..),
    newSslPoliciesScopedList,

    -- * SslPoliciesScopedList_Warning
    SslPoliciesScopedList_Warning (..),
    newSslPoliciesScopedList_Warning,

    -- * SslPoliciesScopedList_Warning_DataItem
    SslPoliciesScopedList_Warning_DataItem (..),
    newSslPoliciesScopedList_Warning_DataItem,

    -- * SslPolicy
    SslPolicy (..),
    newSslPolicy,

    -- * SslPolicy_WarningsItem
    SslPolicy_WarningsItem (..),
    newSslPolicy_WarningsItem,

    -- * SslPolicy_WarningsItem_DataItem
    SslPolicy_WarningsItem_DataItem (..),
    newSslPolicy_WarningsItem_DataItem,

    -- * SslPolicyReference
    SslPolicyReference (..),
    newSslPolicyReference,

    -- * StatefulPolicy
    StatefulPolicy (..),
    newStatefulPolicy,

    -- * StatefulPolicyPreservedState
    StatefulPolicyPreservedState (..),
    newStatefulPolicyPreservedState,

    -- * StatefulPolicyPreservedState_Disks
    StatefulPolicyPreservedState_Disks (..),
    newStatefulPolicyPreservedState_Disks,

    -- * StatefulPolicyPreservedStateDiskDevice
    StatefulPolicyPreservedStateDiskDevice (..),
    newStatefulPolicyPreservedStateDiskDevice,

    -- * Subnetwork
    Subnetwork (..),
    newSubnetwork,

    -- * SubnetworkAggregatedList
    SubnetworkAggregatedList (..),
    newSubnetworkAggregatedList,

    -- * SubnetworkAggregatedList_Items
    SubnetworkAggregatedList_Items (..),
    newSubnetworkAggregatedList_Items,

    -- * SubnetworkAggregatedList_Warning
    SubnetworkAggregatedList_Warning (..),
    newSubnetworkAggregatedList_Warning,

    -- * SubnetworkAggregatedList_Warning_DataItem
    SubnetworkAggregatedList_Warning_DataItem (..),
    newSubnetworkAggregatedList_Warning_DataItem,

    -- * SubnetworkList
    SubnetworkList (..),
    newSubnetworkList,

    -- * SubnetworkList_Warning
    SubnetworkList_Warning (..),
    newSubnetworkList_Warning,

    -- * SubnetworkList_Warning_DataItem
    SubnetworkList_Warning_DataItem (..),
    newSubnetworkList_Warning_DataItem,

    -- * SubnetworkLogConfig
    SubnetworkLogConfig (..),
    newSubnetworkLogConfig,

    -- * SubnetworkSecondaryRange
    SubnetworkSecondaryRange (..),
    newSubnetworkSecondaryRange,

    -- * SubnetworksExpandIpCidrRangeRequest
    SubnetworksExpandIpCidrRangeRequest (..),
    newSubnetworksExpandIpCidrRangeRequest,

    -- * SubnetworksScopedList
    SubnetworksScopedList (..),
    newSubnetworksScopedList,

    -- * SubnetworksScopedList_Warning
    SubnetworksScopedList_Warning (..),
    newSubnetworksScopedList_Warning,

    -- * SubnetworksScopedList_Warning_DataItem
    SubnetworksScopedList_Warning_DataItem (..),
    newSubnetworksScopedList_Warning_DataItem,

    -- * SubnetworksSetPrivateIpGoogleAccessRequest
    SubnetworksSetPrivateIpGoogleAccessRequest (..),
    newSubnetworksSetPrivateIpGoogleAccessRequest,

    -- * Subsetting
    Subsetting (..),
    newSubsetting,

    -- * TCPHealthCheck
    TCPHealthCheck (..),
    newTCPHealthCheck,

    -- * Tags
    Tags (..),
    newTags,

    -- * TargetGrpcProxy
    TargetGrpcProxy (..),
    newTargetGrpcProxy,

    -- * TargetGrpcProxyList
    TargetGrpcProxyList (..),
    newTargetGrpcProxyList,

    -- * TargetGrpcProxyList_Warning
    TargetGrpcProxyList_Warning (..),
    newTargetGrpcProxyList_Warning,

    -- * TargetGrpcProxyList_Warning_DataItem
    TargetGrpcProxyList_Warning_DataItem (..),
    newTargetGrpcProxyList_Warning_DataItem,

    -- * TargetHttpProxiesScopedList
    TargetHttpProxiesScopedList (..),
    newTargetHttpProxiesScopedList,

    -- * TargetHttpProxiesScopedList_Warning
    TargetHttpProxiesScopedList_Warning (..),
    newTargetHttpProxiesScopedList_Warning,

    -- * TargetHttpProxiesScopedList_Warning_DataItem
    TargetHttpProxiesScopedList_Warning_DataItem (..),
    newTargetHttpProxiesScopedList_Warning_DataItem,

    -- * TargetHttpProxy
    TargetHttpProxy (..),
    newTargetHttpProxy,

    -- * TargetHttpProxyAggregatedList
    TargetHttpProxyAggregatedList (..),
    newTargetHttpProxyAggregatedList,

    -- * TargetHttpProxyAggregatedList_Items
    TargetHttpProxyAggregatedList_Items (..),
    newTargetHttpProxyAggregatedList_Items,

    -- * TargetHttpProxyList
    TargetHttpProxyList (..),
    newTargetHttpProxyList,

    -- * TargetHttpProxyList_Warning
    TargetHttpProxyList_Warning (..),
    newTargetHttpProxyList_Warning,

    -- * TargetHttpProxyList_Warning_DataItem
    TargetHttpProxyList_Warning_DataItem (..),
    newTargetHttpProxyList_Warning_DataItem,

    -- * TargetHttpsProxiesScopedList
    TargetHttpsProxiesScopedList (..),
    newTargetHttpsProxiesScopedList,

    -- * TargetHttpsProxiesScopedList_Warning
    TargetHttpsProxiesScopedList_Warning (..),
    newTargetHttpsProxiesScopedList_Warning,

    -- * TargetHttpsProxiesScopedList_Warning_DataItem
    TargetHttpsProxiesScopedList_Warning_DataItem (..),
    newTargetHttpsProxiesScopedList_Warning_DataItem,

    -- * TargetHttpsProxiesSetCertificateMapRequest
    TargetHttpsProxiesSetCertificateMapRequest (..),
    newTargetHttpsProxiesSetCertificateMapRequest,

    -- * TargetHttpsProxiesSetQuicOverrideRequest
    TargetHttpsProxiesSetQuicOverrideRequest (..),
    newTargetHttpsProxiesSetQuicOverrideRequest,

    -- * TargetHttpsProxiesSetSslCertificatesRequest
    TargetHttpsProxiesSetSslCertificatesRequest (..),
    newTargetHttpsProxiesSetSslCertificatesRequest,

    -- * TargetHttpsProxy
    TargetHttpsProxy (..),
    newTargetHttpsProxy,

    -- * TargetHttpsProxyAggregatedList
    TargetHttpsProxyAggregatedList (..),
    newTargetHttpsProxyAggregatedList,

    -- * TargetHttpsProxyAggregatedList_Items
    TargetHttpsProxyAggregatedList_Items (..),
    newTargetHttpsProxyAggregatedList_Items,

    -- * TargetHttpsProxyAggregatedList_Warning
    TargetHttpsProxyAggregatedList_Warning (..),
    newTargetHttpsProxyAggregatedList_Warning,

    -- * TargetHttpsProxyAggregatedList_Warning_DataItem
    TargetHttpsProxyAggregatedList_Warning_DataItem (..),
    newTargetHttpsProxyAggregatedList_Warning_DataItem,

    -- * TargetHttpsProxyList
    TargetHttpsProxyList (..),
    newTargetHttpsProxyList,

    -- * TargetHttpsProxyList_Warning
    TargetHttpsProxyList_Warning (..),
    newTargetHttpsProxyList_Warning,

    -- * TargetHttpsProxyList_Warning_DataItem
    TargetHttpsProxyList_Warning_DataItem (..),
    newTargetHttpsProxyList_Warning_DataItem,

    -- * TargetInstance
    TargetInstance (..),
    newTargetInstance,

    -- * TargetInstanceAggregatedList
    TargetInstanceAggregatedList (..),
    newTargetInstanceAggregatedList,

    -- * TargetInstanceAggregatedList_Items
    TargetInstanceAggregatedList_Items (..),
    newTargetInstanceAggregatedList_Items,

    -- * TargetInstanceAggregatedList_Warning
    TargetInstanceAggregatedList_Warning (..),
    newTargetInstanceAggregatedList_Warning,

    -- * TargetInstanceAggregatedList_Warning_DataItem
    TargetInstanceAggregatedList_Warning_DataItem (..),
    newTargetInstanceAggregatedList_Warning_DataItem,

    -- * TargetInstanceList
    TargetInstanceList (..),
    newTargetInstanceList,

    -- * TargetInstanceList_Warning
    TargetInstanceList_Warning (..),
    newTargetInstanceList_Warning,

    -- * TargetInstanceList_Warning_DataItem
    TargetInstanceList_Warning_DataItem (..),
    newTargetInstanceList_Warning_DataItem,

    -- * TargetInstancesScopedList
    TargetInstancesScopedList (..),
    newTargetInstancesScopedList,

    -- * TargetInstancesScopedList_Warning
    TargetInstancesScopedList_Warning (..),
    newTargetInstancesScopedList_Warning,

    -- * TargetInstancesScopedList_Warning_DataItem
    TargetInstancesScopedList_Warning_DataItem (..),
    newTargetInstancesScopedList_Warning_DataItem,

    -- * TargetPool
    TargetPool (..),
    newTargetPool,

    -- * TargetPoolAggregatedList
    TargetPoolAggregatedList (..),
    newTargetPoolAggregatedList,

    -- * TargetPoolAggregatedList_Items
    TargetPoolAggregatedList_Items (..),
    newTargetPoolAggregatedList_Items,

    -- * TargetPoolAggregatedList_Warning
    TargetPoolAggregatedList_Warning (..),
    newTargetPoolAggregatedList_Warning,

    -- * TargetPoolAggregatedList_Warning_DataItem
    TargetPoolAggregatedList_Warning_DataItem (..),
    newTargetPoolAggregatedList_Warning_DataItem,

    -- * TargetPoolInstanceHealth
    TargetPoolInstanceHealth (..),
    newTargetPoolInstanceHealth,

    -- * TargetPoolList
    TargetPoolList (..),
    newTargetPoolList,

    -- * TargetPoolList_Warning
    TargetPoolList_Warning (..),
    newTargetPoolList_Warning,

    -- * TargetPoolList_Warning_DataItem
    TargetPoolList_Warning_DataItem (..),
    newTargetPoolList_Warning_DataItem,

    -- * TargetPoolsAddHealthCheckRequest
    TargetPoolsAddHealthCheckRequest (..),
    newTargetPoolsAddHealthCheckRequest,

    -- * TargetPoolsAddInstanceRequest
    TargetPoolsAddInstanceRequest (..),
    newTargetPoolsAddInstanceRequest,

    -- * TargetPoolsRemoveHealthCheckRequest
    TargetPoolsRemoveHealthCheckRequest (..),
    newTargetPoolsRemoveHealthCheckRequest,

    -- * TargetPoolsRemoveInstanceRequest
    TargetPoolsRemoveInstanceRequest (..),
    newTargetPoolsRemoveInstanceRequest,

    -- * TargetPoolsScopedList
    TargetPoolsScopedList (..),
    newTargetPoolsScopedList,

    -- * TargetPoolsScopedList_Warning
    TargetPoolsScopedList_Warning (..),
    newTargetPoolsScopedList_Warning,

    -- * TargetPoolsScopedList_Warning_DataItem
    TargetPoolsScopedList_Warning_DataItem (..),
    newTargetPoolsScopedList_Warning_DataItem,

    -- * TargetReference
    TargetReference (..),
    newTargetReference,

    -- * TargetSslProxiesSetBackendServiceRequest
    TargetSslProxiesSetBackendServiceRequest (..),
    newTargetSslProxiesSetBackendServiceRequest,

    -- * TargetSslProxiesSetCertificateMapRequest
    TargetSslProxiesSetCertificateMapRequest (..),
    newTargetSslProxiesSetCertificateMapRequest,

    -- * TargetSslProxiesSetProxyHeaderRequest
    TargetSslProxiesSetProxyHeaderRequest (..),
    newTargetSslProxiesSetProxyHeaderRequest,

    -- * TargetSslProxiesSetSslCertificatesRequest
    TargetSslProxiesSetSslCertificatesRequest (..),
    newTargetSslProxiesSetSslCertificatesRequest,

    -- * TargetSslProxy
    TargetSslProxy (..),
    newTargetSslProxy,

    -- * TargetSslProxyList
    TargetSslProxyList (..),
    newTargetSslProxyList,

    -- * TargetSslProxyList_Warning
    TargetSslProxyList_Warning (..),
    newTargetSslProxyList_Warning,

    -- * TargetSslProxyList_Warning_DataItem
    TargetSslProxyList_Warning_DataItem (..),
    newTargetSslProxyList_Warning_DataItem,

    -- * TargetTcpProxiesScopedList
    TargetTcpProxiesScopedList (..),
    newTargetTcpProxiesScopedList,

    -- * TargetTcpProxiesScopedList_Warning
    TargetTcpProxiesScopedList_Warning (..),
    newTargetTcpProxiesScopedList_Warning,

    -- * TargetTcpProxiesScopedList_Warning_DataItem
    TargetTcpProxiesScopedList_Warning_DataItem (..),
    newTargetTcpProxiesScopedList_Warning_DataItem,

    -- * TargetTcpProxiesSetBackendServiceRequest
    TargetTcpProxiesSetBackendServiceRequest (..),
    newTargetTcpProxiesSetBackendServiceRequest,

    -- * TargetTcpProxiesSetProxyHeaderRequest
    TargetTcpProxiesSetProxyHeaderRequest (..),
    newTargetTcpProxiesSetProxyHeaderRequest,

    -- * TargetTcpProxy
    TargetTcpProxy (..),
    newTargetTcpProxy,

    -- * TargetTcpProxyAggregatedList
    TargetTcpProxyAggregatedList (..),
    newTargetTcpProxyAggregatedList,

    -- * TargetTcpProxyAggregatedList_Items
    TargetTcpProxyAggregatedList_Items (..),
    newTargetTcpProxyAggregatedList_Items,

    -- * TargetTcpProxyAggregatedList_Warning
    TargetTcpProxyAggregatedList_Warning (..),
    newTargetTcpProxyAggregatedList_Warning,

    -- * TargetTcpProxyAggregatedList_Warning_DataItem
    TargetTcpProxyAggregatedList_Warning_DataItem (..),
    newTargetTcpProxyAggregatedList_Warning_DataItem,

    -- * TargetTcpProxyList
    TargetTcpProxyList (..),
    newTargetTcpProxyList,

    -- * TargetTcpProxyList_Warning
    TargetTcpProxyList_Warning (..),
    newTargetTcpProxyList_Warning,

    -- * TargetTcpProxyList_Warning_DataItem
    TargetTcpProxyList_Warning_DataItem (..),
    newTargetTcpProxyList_Warning_DataItem,

    -- * TargetVpnGateway
    TargetVpnGateway (..),
    newTargetVpnGateway,

    -- * TargetVpnGatewayAggregatedList
    TargetVpnGatewayAggregatedList (..),
    newTargetVpnGatewayAggregatedList,

    -- * TargetVpnGatewayAggregatedList_Items
    TargetVpnGatewayAggregatedList_Items (..),
    newTargetVpnGatewayAggregatedList_Items,

    -- * TargetVpnGatewayAggregatedList_Warning
    TargetVpnGatewayAggregatedList_Warning (..),
    newTargetVpnGatewayAggregatedList_Warning,

    -- * TargetVpnGatewayAggregatedList_Warning_DataItem
    TargetVpnGatewayAggregatedList_Warning_DataItem (..),
    newTargetVpnGatewayAggregatedList_Warning_DataItem,

    -- * TargetVpnGatewayList
    TargetVpnGatewayList (..),
    newTargetVpnGatewayList,

    -- * TargetVpnGatewayList_Warning
    TargetVpnGatewayList_Warning (..),
    newTargetVpnGatewayList_Warning,

    -- * TargetVpnGatewayList_Warning_DataItem
    TargetVpnGatewayList_Warning_DataItem (..),
    newTargetVpnGatewayList_Warning_DataItem,

    -- * TargetVpnGatewaysScopedList
    TargetVpnGatewaysScopedList (..),
    newTargetVpnGatewaysScopedList,

    -- * TargetVpnGatewaysScopedList_Warning
    TargetVpnGatewaysScopedList_Warning (..),
    newTargetVpnGatewaysScopedList_Warning,

    -- * TargetVpnGatewaysScopedList_Warning_DataItem
    TargetVpnGatewaysScopedList_Warning_DataItem (..),
    newTargetVpnGatewaysScopedList_Warning_DataItem,

    -- * TestFailure
    TestFailure (..),
    newTestFailure,

    -- * TestPermissionsRequest
    TestPermissionsRequest (..),
    newTestPermissionsRequest,

    -- * TestPermissionsResponse
    TestPermissionsResponse (..),
    newTestPermissionsResponse,

    -- * Uint128
    Uint128 (..),
    newUint128,

    -- * UrlMap
    UrlMap (..),
    newUrlMap,

    -- * UrlMapList
    UrlMapList (..),
    newUrlMapList,

    -- * UrlMapList_Warning
    UrlMapList_Warning (..),
    newUrlMapList_Warning,

    -- * UrlMapList_Warning_DataItem
    UrlMapList_Warning_DataItem (..),
    newUrlMapList_Warning_DataItem,

    -- * UrlMapReference
    UrlMapReference (..),
    newUrlMapReference,

    -- * UrlMapTest
    UrlMapTest (..),
    newUrlMapTest,

    -- * UrlMapTestHeader
    UrlMapTestHeader (..),
    newUrlMapTestHeader,

    -- * UrlMapValidationResult
    UrlMapValidationResult (..),
    newUrlMapValidationResult,

    -- * UrlMapsAggregatedList
    UrlMapsAggregatedList (..),
    newUrlMapsAggregatedList,

    -- * UrlMapsAggregatedList_Items
    UrlMapsAggregatedList_Items (..),
    newUrlMapsAggregatedList_Items,

    -- * UrlMapsAggregatedList_Warning
    UrlMapsAggregatedList_Warning (..),
    newUrlMapsAggregatedList_Warning,

    -- * UrlMapsAggregatedList_Warning_DataItem
    UrlMapsAggregatedList_Warning_DataItem (..),
    newUrlMapsAggregatedList_Warning_DataItem,

    -- * UrlMapsScopedList
    UrlMapsScopedList (..),
    newUrlMapsScopedList,

    -- * UrlMapsScopedList_Warning
    UrlMapsScopedList_Warning (..),
    newUrlMapsScopedList_Warning,

    -- * UrlMapsScopedList_Warning_DataItem
    UrlMapsScopedList_Warning_DataItem (..),
    newUrlMapsScopedList_Warning_DataItem,

    -- * UrlMapsValidateRequest
    UrlMapsValidateRequest (..),
    newUrlMapsValidateRequest,

    -- * UrlMapsValidateResponse
    UrlMapsValidateResponse (..),
    newUrlMapsValidateResponse,

    -- * UrlRewrite
    UrlRewrite (..),
    newUrlRewrite,

    -- * UsableSubnetwork
    UsableSubnetwork (..),
    newUsableSubnetwork,

    -- * UsableSubnetworkSecondaryRange
    UsableSubnetworkSecondaryRange (..),
    newUsableSubnetworkSecondaryRange,

    -- * UsableSubnetworksAggregatedList
    UsableSubnetworksAggregatedList (..),
    newUsableSubnetworksAggregatedList,

    -- * UsableSubnetworksAggregatedList_Warning
    UsableSubnetworksAggregatedList_Warning (..),
    newUsableSubnetworksAggregatedList_Warning,

    -- * UsableSubnetworksAggregatedList_Warning_DataItem
    UsableSubnetworksAggregatedList_Warning_DataItem (..),
    newUsableSubnetworksAggregatedList_Warning_DataItem,

    -- * UsageExportLocation
    UsageExportLocation (..),
    newUsageExportLocation,

    -- * VmEndpointNatMappings
    VmEndpointNatMappings (..),
    newVmEndpointNatMappings,

    -- * VmEndpointNatMappingsInterfaceNatMappings
    VmEndpointNatMappingsInterfaceNatMappings (..),
    newVmEndpointNatMappingsInterfaceNatMappings,

    -- * VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings
    VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings (..),
    newVmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings,

    -- * VmEndpointNatMappingsList
    VmEndpointNatMappingsList (..),
    newVmEndpointNatMappingsList,

    -- * VmEndpointNatMappingsList_Warning
    VmEndpointNatMappingsList_Warning (..),
    newVmEndpointNatMappingsList_Warning,

    -- * VmEndpointNatMappingsList_Warning_DataItem
    VmEndpointNatMappingsList_Warning_DataItem (..),
    newVmEndpointNatMappingsList_Warning_DataItem,

    -- * VpnGateway
    VpnGateway (..),
    newVpnGateway,

    -- * VpnGateway_Labels
    VpnGateway_Labels (..),
    newVpnGateway_Labels,

    -- * VpnGatewayAggregatedList
    VpnGatewayAggregatedList (..),
    newVpnGatewayAggregatedList,

    -- * VpnGatewayAggregatedList_Items
    VpnGatewayAggregatedList_Items (..),
    newVpnGatewayAggregatedList_Items,

    -- * VpnGatewayAggregatedList_Warning
    VpnGatewayAggregatedList_Warning (..),
    newVpnGatewayAggregatedList_Warning,

    -- * VpnGatewayAggregatedList_Warning_DataItem
    VpnGatewayAggregatedList_Warning_DataItem (..),
    newVpnGatewayAggregatedList_Warning_DataItem,

    -- * VpnGatewayList
    VpnGatewayList (..),
    newVpnGatewayList,

    -- * VpnGatewayList_Warning
    VpnGatewayList_Warning (..),
    newVpnGatewayList_Warning,

    -- * VpnGatewayList_Warning_DataItem
    VpnGatewayList_Warning_DataItem (..),
    newVpnGatewayList_Warning_DataItem,

    -- * VpnGatewayStatus
    VpnGatewayStatus (..),
    newVpnGatewayStatus,

    -- * VpnGatewayStatusHighAvailabilityRequirementState
    VpnGatewayStatusHighAvailabilityRequirementState (..),
    newVpnGatewayStatusHighAvailabilityRequirementState,

    -- * VpnGatewayStatusTunnel
    VpnGatewayStatusTunnel (..),
    newVpnGatewayStatusTunnel,

    -- * VpnGatewayStatusVpnConnection
    VpnGatewayStatusVpnConnection (..),
    newVpnGatewayStatusVpnConnection,

    -- * VpnGatewayVpnGatewayInterface
    VpnGatewayVpnGatewayInterface (..),
    newVpnGatewayVpnGatewayInterface,

    -- * VpnGatewaysGetStatusResponse
    VpnGatewaysGetStatusResponse (..),
    newVpnGatewaysGetStatusResponse,

    -- * VpnGatewaysScopedList
    VpnGatewaysScopedList (..),
    newVpnGatewaysScopedList,

    -- * VpnGatewaysScopedList_Warning
    VpnGatewaysScopedList_Warning (..),
    newVpnGatewaysScopedList_Warning,

    -- * VpnGatewaysScopedList_Warning_DataItem
    VpnGatewaysScopedList_Warning_DataItem (..),
    newVpnGatewaysScopedList_Warning_DataItem,

    -- * VpnTunnel
    VpnTunnel (..),
    newVpnTunnel,

    -- * VpnTunnelAggregatedList
    VpnTunnelAggregatedList (..),
    newVpnTunnelAggregatedList,

    -- * VpnTunnelAggregatedList_Items
    VpnTunnelAggregatedList_Items (..),
    newVpnTunnelAggregatedList_Items,

    -- * VpnTunnelAggregatedList_Warning
    VpnTunnelAggregatedList_Warning (..),
    newVpnTunnelAggregatedList_Warning,

    -- * VpnTunnelAggregatedList_Warning_DataItem
    VpnTunnelAggregatedList_Warning_DataItem (..),
    newVpnTunnelAggregatedList_Warning_DataItem,

    -- * VpnTunnelList
    VpnTunnelList (..),
    newVpnTunnelList,

    -- * VpnTunnelList_Warning
    VpnTunnelList_Warning (..),
    newVpnTunnelList_Warning,

    -- * VpnTunnelList_Warning_DataItem
    VpnTunnelList_Warning_DataItem (..),
    newVpnTunnelList_Warning_DataItem,

    -- * VpnTunnelsScopedList
    VpnTunnelsScopedList (..),
    newVpnTunnelsScopedList,

    -- * VpnTunnelsScopedList_Warning
    VpnTunnelsScopedList_Warning (..),
    newVpnTunnelsScopedList_Warning,

    -- * VpnTunnelsScopedList_Warning_DataItem
    VpnTunnelsScopedList_Warning_DataItem (..),
    newVpnTunnelsScopedList_Warning_DataItem,

    -- * WafExpressionSet
    WafExpressionSet (..),
    newWafExpressionSet,

    -- * WafExpressionSetExpression
    WafExpressionSetExpression (..),
    newWafExpressionSetExpression,

    -- * WeightedBackendService
    WeightedBackendService (..),
    newWeightedBackendService,

    -- * XpnHostList
    XpnHostList (..),
    newXpnHostList,

    -- * XpnHostList_Warning
    XpnHostList_Warning (..),
    newXpnHostList_Warning,

    -- * XpnHostList_Warning_DataItem
    XpnHostList_Warning_DataItem (..),
    newXpnHostList_Warning_DataItem,

    -- * XpnResourceId
    XpnResourceId (..),
    newXpnResourceId,

    -- * Zone
    Zone (..),
    newZone,

    -- * ZoneList
    ZoneList (..),
    newZoneList,

    -- * ZoneList_Warning
    ZoneList_Warning (..),
    newZoneList_Warning,

    -- * ZoneList_Warning_DataItem
    ZoneList_Warning_DataItem (..),
    newZoneList_Warning_DataItem,

    -- * ZoneSetLabelsRequest
    ZoneSetLabelsRequest (..),
    newZoneSetLabelsRequest,

    -- * ZoneSetLabelsRequest_Labels
    ZoneSetLabelsRequest_Labels (..),
    newZoneSetLabelsRequest_Labels,

    -- * ZoneSetPolicyRequest
    ZoneSetPolicyRequest (..),
    newZoneSetPolicyRequest,
  )
where

import Gogol.Compute.Internal.Sum
import qualified Gogol.Prelude as Core

-- | A specification of the type and number of accelerator cards attached to the instance.
--
-- /See:/ 'newAcceleratorConfig' smart constructor.
data AcceleratorConfig = AcceleratorConfig
  { -- | The number of the guest accelerator cards exposed to this instance.
    acceleratorCount :: (Core.Maybe Core.Int32),
    -- | Full or partial URL of the accelerator type resource to attach to this instance. For example: projects\/my-project\/zones\/us-central1-c\/acceleratorTypes\/nvidia-tesla-p100 If you are creating an instance template, specify only the accelerator name. See GPUs on Compute Engine for a full list of accelerator types.
    acceleratorType :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AcceleratorConfig' with the minimum fields required to make a request.
newAcceleratorConfig ::
  AcceleratorConfig
newAcceleratorConfig =
  AcceleratorConfig
    { acceleratorCount = Core.Nothing,
      acceleratorType = Core.Nothing
    }

instance Core.FromJSON AcceleratorConfig where
  parseJSON =
    Core.withObject
      "AcceleratorConfig"
      ( \o ->
          AcceleratorConfig
            Core.<$> (o Core..:? "acceleratorCount")
            Core.<*> (o Core..:? "acceleratorType")
      )

instance Core.ToJSON AcceleratorConfig where
  toJSON AcceleratorConfig {..} =
    Core.object
      ( Core.catMaybes
          [ ("acceleratorCount" Core..=)
              Core.<$> acceleratorCount,
            ("acceleratorType" Core..=)
              Core.<$> acceleratorType
          ]
      )

-- | Represents an Accelerator Type resource. Google Cloud Platform provides graphics processing units (accelerators) that you can add to VM instances to improve or accelerate performance when working with intensive workloads. For more information, read GPUs on Compute Engine.
--
-- /See:/ 'newAcceleratorType' smart constructor.
data AcceleratorType = AcceleratorType
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | [Output Only] The deprecation status associated with this accelerator type.
    deprecated :: (Core.Maybe DeprecationStatus),
    -- | [Output Only] An optional textual description of the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] The type of the resource. Always compute#acceleratorType for accelerator types.
    kind :: Core.Text,
    -- | [Output Only] Maximum number of accelerator cards allowed per instance.
    maximumCardsPerInstance :: (Core.Maybe Core.Int32),
    -- | [Output Only] Name of the resource.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined, fully qualified URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] The name of the zone where the accelerator type resides, such as us-central1-a. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    zone :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AcceleratorType' with the minimum fields required to make a request.
newAcceleratorType ::
  AcceleratorType
newAcceleratorType =
  AcceleratorType
    { creationTimestamp = Core.Nothing,
      deprecated = Core.Nothing,
      description = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#acceleratorType",
      maximumCardsPerInstance = Core.Nothing,
      name = Core.Nothing,
      selfLink = Core.Nothing,
      zone = Core.Nothing
    }

instance Core.FromJSON AcceleratorType where
  parseJSON =
    Core.withObject
      "AcceleratorType"
      ( \o ->
          AcceleratorType
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "deprecated")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#acceleratorType"
                     )
            Core.<*> (o Core..:? "maximumCardsPerInstance")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "zone")
      )

instance Core.ToJSON AcceleratorType where
  toJSON AcceleratorType {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("deprecated" Core..=) Core.<$> deprecated,
            ("description" Core..=) Core.<$> description,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("maximumCardsPerInstance" Core..=)
              Core.<$> maximumCardsPerInstance,
            ("name" Core..=) Core.<$> name,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("zone" Core..=) Core.<$> zone
          ]
      )

--
-- /See:/ 'newAcceleratorTypeAggregatedList' smart constructor.
data AcceleratorTypeAggregatedList = AcceleratorTypeAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of AcceleratorTypesScopedList resources.
    items :: (Core.Maybe AcceleratorTypeAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#acceleratorTypeAggregatedList for aggregated lists of accelerator types.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe AcceleratorTypeAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AcceleratorTypeAggregatedList' with the minimum fields required to make a request.
newAcceleratorTypeAggregatedList ::
  AcceleratorTypeAggregatedList
newAcceleratorTypeAggregatedList =
  AcceleratorTypeAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#acceleratorTypeAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON AcceleratorTypeAggregatedList where
  parseJSON =
    Core.withObject
      "AcceleratorTypeAggregatedList"
      ( \o ->
          AcceleratorTypeAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#acceleratorTypeAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON AcceleratorTypeAggregatedList where
  toJSON AcceleratorTypeAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of AcceleratorTypesScopedList resources.
--
-- /See:/ 'newAcceleratorTypeAggregatedList_Items' smart constructor.
newtype AcceleratorTypeAggregatedList_Items = AcceleratorTypeAggregatedList_Items
  { -- | [Output Only] Name of the scope containing this set of accelerator types.
    additional :: (Core.HashMap Core.Text AcceleratorTypesScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AcceleratorTypeAggregatedList_Items' with the minimum fields required to make a request.
newAcceleratorTypeAggregatedList_Items ::
  -- |  [Output Only] Name of the scope containing this set of accelerator types. See 'additional'.
  Core.HashMap Core.Text AcceleratorTypesScopedList ->
  AcceleratorTypeAggregatedList_Items
newAcceleratorTypeAggregatedList_Items additional =
  AcceleratorTypeAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    AcceleratorTypeAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "AcceleratorTypeAggregatedList_Items"
      ( \o ->
          AcceleratorTypeAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    AcceleratorTypeAggregatedList_Items
  where
  toJSON AcceleratorTypeAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newAcceleratorTypeAggregatedList_Warning' smart constructor.
data AcceleratorTypeAggregatedList_Warning = AcceleratorTypeAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe AcceleratorTypeAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [AcceleratorTypeAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AcceleratorTypeAggregatedList_Warning' with the minimum fields required to make a request.
newAcceleratorTypeAggregatedList_Warning ::
  AcceleratorTypeAggregatedList_Warning
newAcceleratorTypeAggregatedList_Warning =
  AcceleratorTypeAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    AcceleratorTypeAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "AcceleratorTypeAggregatedList_Warning"
      ( \o ->
          AcceleratorTypeAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    AcceleratorTypeAggregatedList_Warning
  where
  toJSON AcceleratorTypeAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newAcceleratorTypeAggregatedList_Warning_DataItem' smart constructor.
data AcceleratorTypeAggregatedList_Warning_DataItem = AcceleratorTypeAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AcceleratorTypeAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newAcceleratorTypeAggregatedList_Warning_DataItem ::
  AcceleratorTypeAggregatedList_Warning_DataItem
newAcceleratorTypeAggregatedList_Warning_DataItem =
  AcceleratorTypeAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    AcceleratorTypeAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "AcceleratorTypeAggregatedList_Warning_DataItem"
      ( \o ->
          AcceleratorTypeAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    AcceleratorTypeAggregatedList_Warning_DataItem
  where
  toJSON
    AcceleratorTypeAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | Contains a list of accelerator types.
--
-- /See:/ 'newAcceleratorTypeList' smart constructor.
data AcceleratorTypeList = AcceleratorTypeList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of AcceleratorType resources.
    items :: (Core.Maybe [AcceleratorType]),
    -- | [Output Only] Type of resource. Always compute#acceleratorTypeList for lists of accelerator types.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe AcceleratorTypeList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AcceleratorTypeList' with the minimum fields required to make a request.
newAcceleratorTypeList ::
  AcceleratorTypeList
newAcceleratorTypeList =
  AcceleratorTypeList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#acceleratorTypeList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON AcceleratorTypeList where
  parseJSON =
    Core.withObject
      "AcceleratorTypeList"
      ( \o ->
          AcceleratorTypeList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#acceleratorTypeList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON AcceleratorTypeList where
  toJSON AcceleratorTypeList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newAcceleratorTypeList_Warning' smart constructor.
data AcceleratorTypeList_Warning = AcceleratorTypeList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe AcceleratorTypeList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [AcceleratorTypeList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AcceleratorTypeList_Warning' with the minimum fields required to make a request.
newAcceleratorTypeList_Warning ::
  AcceleratorTypeList_Warning
newAcceleratorTypeList_Warning =
  AcceleratorTypeList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON AcceleratorTypeList_Warning where
  parseJSON =
    Core.withObject
      "AcceleratorTypeList_Warning"
      ( \o ->
          AcceleratorTypeList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON AcceleratorTypeList_Warning where
  toJSON AcceleratorTypeList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newAcceleratorTypeList_Warning_DataItem' smart constructor.
data AcceleratorTypeList_Warning_DataItem = AcceleratorTypeList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AcceleratorTypeList_Warning_DataItem' with the minimum fields required to make a request.
newAcceleratorTypeList_Warning_DataItem ::
  AcceleratorTypeList_Warning_DataItem
newAcceleratorTypeList_Warning_DataItem =
  AcceleratorTypeList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    AcceleratorTypeList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "AcceleratorTypeList_Warning_DataItem"
      ( \o ->
          AcceleratorTypeList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    AcceleratorTypeList_Warning_DataItem
  where
  toJSON AcceleratorTypeList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newAcceleratorTypesScopedList' smart constructor.
data AcceleratorTypesScopedList = AcceleratorTypesScopedList
  { -- | [Output Only] A list of accelerator types contained in this scope.
    acceleratorTypes :: (Core.Maybe [AcceleratorType]),
    -- | [Output Only] An informational warning that appears when the accelerator types list is empty.
    warning :: (Core.Maybe AcceleratorTypesScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AcceleratorTypesScopedList' with the minimum fields required to make a request.
newAcceleratorTypesScopedList ::
  AcceleratorTypesScopedList
newAcceleratorTypesScopedList =
  AcceleratorTypesScopedList
    { acceleratorTypes = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON AcceleratorTypesScopedList where
  parseJSON =
    Core.withObject
      "AcceleratorTypesScopedList"
      ( \o ->
          AcceleratorTypesScopedList
            Core.<$> (o Core..:? "acceleratorTypes")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON AcceleratorTypesScopedList where
  toJSON AcceleratorTypesScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("acceleratorTypes" Core..=)
              Core.<$> acceleratorTypes,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] An informational warning that appears when the accelerator types list is empty.
--
-- /See:/ 'newAcceleratorTypesScopedList_Warning' smart constructor.
data AcceleratorTypesScopedList_Warning = AcceleratorTypesScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe AcceleratorTypesScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [AcceleratorTypesScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AcceleratorTypesScopedList_Warning' with the minimum fields required to make a request.
newAcceleratorTypesScopedList_Warning ::
  AcceleratorTypesScopedList_Warning
newAcceleratorTypesScopedList_Warning =
  AcceleratorTypesScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    AcceleratorTypesScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "AcceleratorTypesScopedList_Warning"
      ( \o ->
          AcceleratorTypesScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    AcceleratorTypesScopedList_Warning
  where
  toJSON AcceleratorTypesScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newAcceleratorTypesScopedList_Warning_DataItem' smart constructor.
data AcceleratorTypesScopedList_Warning_DataItem = AcceleratorTypesScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AcceleratorTypesScopedList_Warning_DataItem' with the minimum fields required to make a request.
newAcceleratorTypesScopedList_Warning_DataItem ::
  AcceleratorTypesScopedList_Warning_DataItem
newAcceleratorTypesScopedList_Warning_DataItem =
  AcceleratorTypesScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    AcceleratorTypesScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "AcceleratorTypesScopedList_Warning_DataItem"
      ( \o ->
          AcceleratorTypesScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    AcceleratorTypesScopedList_Warning_DataItem
  where
  toJSON
    AcceleratorTypesScopedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | An access configuration attached to an instance\'s network interface. Only one access config per instance is supported.
--
-- /See:/ 'newAccessConfig' smart constructor.
data AccessConfig = AccessConfig
  { -- | Applies to ipv6AccessConfigs only. The first IPv6 address of the external IPv6 range associated with this instance, prefix length is stored in externalIpv6PrefixLength in ipv6AccessConfig. To use a static external IP address, it must be unused and in the same region as the instance\'s zone. If not specified, Google Cloud will automatically assign an external IPv6 address from the instance\'s subnetwork.
    externalIpv6 :: (Core.Maybe Core.Text),
    -- | Applies to ipv6AccessConfigs only. The prefix length of the external IPv6 range.
    externalIpv6PrefixLength :: (Core.Maybe Core.Int32),
    -- | [Output Only] Type of the resource. Always compute#accessConfig for access configs.
    kind :: Core.Text,
    -- | The name of this access configuration. In accessConfigs (IPv4), the default and recommended name is External NAT, but you can use any arbitrary string, such as My external IP or Network Access. In ipv6AccessConfigs, the recommend name is External IPv6.
    name :: (Core.Maybe Core.Text),
    -- | Applies to accessConfigs (IPv4) only. An external IP address associated with this instance. Specify an unused static external IP address available to the project or leave this field undefined to use an IP from a shared ephemeral IP address pool. If you specify a static external IP address, it must live in the same region as the zone of the instance.
    natIP :: (Core.Maybe Core.Text),
    -- | This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD. If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier. If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP.
    networkTier :: (Core.Maybe AccessConfig_NetworkTier),
    -- | The DNS domain name for the public PTR record. You can set this field only if the @setPublicPtr@ field is enabled in accessConfig. If this field is unspecified in ipv6AccessConfig, a default PTR record will be createc for first IP in associated external IPv6 range.
    publicPtrDomainName :: (Core.Maybe Core.Text),
    -- | Specifies whether a public DNS \'PTR\' record should be created to map the external IP address of the instance to a DNS domain name. This field is not used in ipv6AccessConfig. A default PTR record will be created if the VM has external IPv6 range associated.
    setPublicPtr :: (Core.Maybe Core.Bool),
    -- | The type of configuration. In accessConfigs (IPv4), the default and only option is ONE/TO/ONE/NAT. In ipv6AccessConfigs, the default and only option is DIRECT/IPV6.
    type' :: (Core.Maybe AccessConfig_Type)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AccessConfig' with the minimum fields required to make a request.
newAccessConfig ::
  AccessConfig
newAccessConfig =
  AccessConfig
    { externalIpv6 = Core.Nothing,
      externalIpv6PrefixLength = Core.Nothing,
      kind = "compute#accessConfig",
      name = Core.Nothing,
      natIP = Core.Nothing,
      networkTier = Core.Nothing,
      publicPtrDomainName = Core.Nothing,
      setPublicPtr = Core.Nothing,
      type' = Core.Nothing
    }

instance Core.FromJSON AccessConfig where
  parseJSON =
    Core.withObject
      "AccessConfig"
      ( \o ->
          AccessConfig
            Core.<$> (o Core..:? "externalIpv6")
            Core.<*> (o Core..:? "externalIpv6PrefixLength")
            Core.<*> (o Core..:? "kind" Core..!= "compute#accessConfig")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "natIP")
            Core.<*> (o Core..:? "networkTier")
            Core.<*> (o Core..:? "publicPtrDomainName")
            Core.<*> (o Core..:? "setPublicPtr")
            Core.<*> (o Core..:? "type")
      )

instance Core.ToJSON AccessConfig where
  toJSON AccessConfig {..} =
    Core.object
      ( Core.catMaybes
          [ ("externalIpv6" Core..=) Core.<$> externalIpv6,
            ("externalIpv6PrefixLength" Core..=)
              Core.<$> externalIpv6PrefixLength,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("natIP" Core..=) Core.<$> natIP,
            ("networkTier" Core..=) Core.<$> networkTier,
            ("publicPtrDomainName" Core..=)
              Core.<$> publicPtrDomainName,
            ("setPublicPtr" Core..=) Core.<$> setPublicPtr,
            ("type" Core..=) Core.<$> type'
          ]
      )

-- | Represents an IP Address resource. Google Compute Engine has two IP Address resources: * <https://cloud.google.com/compute/docs/reference/rest/v1/globalAddresses Global (external and internal)> * <https://cloud.google.com/compute/docs/reference/rest/v1/addresses Regional (external and internal)> For more information, see Reserving a static external IP address.
--
-- /See:/ 'newAddress' smart constructor.
data Address = Address
  { -- | The static IP address represented by this resource.
    address :: (Core.Maybe Core.Text),
    -- | The type of address to reserve, either INTERNAL or EXTERNAL. If unspecified, defaults to EXTERNAL.
    addressType :: (Core.Maybe Address_AddressType),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this field when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | The IP version that will be used by this address. Valid options are IPV4 or IPV6. This can only be specified for a global address.
    ipVersion :: (Core.Maybe Address_IpVersion),
    -- | The endpoint type of this address, which should be VM or NETLB. This is used for deciding which type of endpoint this address can be used after the external IPv6 address reservation.
    ipv6EndpointType :: (Core.Maybe Address_Ipv6EndpointType),
    -- | [Output Only] Type of the resource. Always compute#address for addresses.
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
    name :: (Core.Maybe Core.Text),
    -- | The URL of the network in which to reserve the address. This field can only be used with INTERNAL type with the VPC_PEERING purpose.
    network :: (Core.Maybe Core.Text),
    -- | This signifies the networking tier used for configuring this address and can only take the following values: PREMIUM or STANDARD. Internal IP addresses are always Premium Tier; global external IP addresses are always Premium Tier; regional external IP addresses can be either Standard or Premium Tier. If this field is not specified, it is assumed to be PREMIUM.
    networkTier :: (Core.Maybe Address_NetworkTier),
    -- | The prefix length if the resource represents an IP range.
    prefixLength :: (Core.Maybe Core.Int32),
    -- | The purpose of this resource, which can be one of the following values: - GCE/ENDPOINT for addresses that are used by VM instances, alias IP ranges, load balancers, and similar resources. - DNS/RESOLVER for a DNS resolver address in a subnetwork for a Cloud DNS inbound forwarder IP addresses (regional internal IP address in a subnet of a VPC network) - VPC/PEERING for global internal IP addresses used for private services access allocated ranges. - NAT/AUTO for the regional external IP addresses used by Cloud NAT when allocating addresses using automatic NAT IP address allocation. - IPSEC_INTERCONNECT for addresses created from a private IP range that are reserved for a VLAN attachment in an /HA VPN over Cloud Interconnect/ configuration. These addresses are regional resources. - @SHARED_LOADBALANCER_VIP@ for an internal IP address that is assigned to multiple internal forwarding rules. - @PRIVATE_SERVICE_CONNECT@ for a private network address that is used to configure Private Service Connect. Only global
    -- internal addresses can use this purpose.
    purpose :: (Core.Maybe Address_Purpose),
    -- | [Output Only] The URL of the region where a regional address resides. For regional addresses, you must specify the region as a path parameter in the HTTP request URL. /This field is not applicable to global addresses./
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] The status of the address, which can be one of RESERVING, RESERVED, or IN/USE. An address that is RESERVING is currently in the process of being reserved. A RESERVED address is currently reserved and available to use. An IN/USE address is currently being used by another resource and is not available.
    status :: (Core.Maybe Address_Status),
    -- | The URL of the subnetwork in which to reserve the address. If an IP address is specified, it must be within the subnetwork\'s IP range. This field can only be used with INTERNAL type with a GCE/ENDPOINT or DNS/RESOLVER purpose.
    subnetwork :: (Core.Maybe Core.Text),
    -- | [Output Only] The URLs of the resources that are using this address.
    users :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Address' with the minimum fields required to make a request.
newAddress ::
  Address
newAddress =
  Address
    { address = Core.Nothing,
      addressType = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      id = Core.Nothing,
      ipVersion = Core.Nothing,
      ipv6EndpointType = Core.Nothing,
      kind = "compute#address",
      name = Core.Nothing,
      network = Core.Nothing,
      networkTier = Core.Nothing,
      prefixLength = Core.Nothing,
      purpose = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      status = Core.Nothing,
      subnetwork = Core.Nothing,
      users = Core.Nothing
    }

instance Core.FromJSON Address where
  parseJSON =
    Core.withObject
      "Address"
      ( \o ->
          Address
            Core.<$> (o Core..:? "address")
            Core.<*> (o Core..:? "addressType")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "ipVersion")
            Core.<*> (o Core..:? "ipv6EndpointType")
            Core.<*> (o Core..:? "kind" Core..!= "compute#address")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "network")
            Core.<*> (o Core..:? "networkTier")
            Core.<*> (o Core..:? "prefixLength")
            Core.<*> (o Core..:? "purpose")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "status")
            Core.<*> (o Core..:? "subnetwork")
            Core.<*> (o Core..:? "users")
      )

instance Core.ToJSON Address where
  toJSON Address {..} =
    Core.object
      ( Core.catMaybes
          [ ("address" Core..=) Core.<$> address,
            ("addressType" Core..=) Core.<$> addressType,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("ipVersion" Core..=) Core.<$> ipVersion,
            ("ipv6EndpointType" Core..=)
              Core.<$> ipv6EndpointType,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("network" Core..=) Core.<$> network,
            ("networkTier" Core..=) Core.<$> networkTier,
            ("prefixLength" Core..=) Core.<$> prefixLength,
            ("purpose" Core..=) Core.<$> purpose,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("status" Core..=) Core.<$> status,
            ("subnetwork" Core..=) Core.<$> subnetwork,
            ("users" Core..=) Core.<$> users
          ]
      )

--
-- /See:/ 'newAddressAggregatedList' smart constructor.
data AddressAggregatedList = AddressAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of AddressesScopedList resources.
    items :: (Core.Maybe AddressAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#addressAggregatedList for aggregated lists of addresses.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe AddressAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AddressAggregatedList' with the minimum fields required to make a request.
newAddressAggregatedList ::
  AddressAggregatedList
newAddressAggregatedList =
  AddressAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#addressAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON AddressAggregatedList where
  parseJSON =
    Core.withObject
      "AddressAggregatedList"
      ( \o ->
          AddressAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#addressAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON AddressAggregatedList where
  toJSON AddressAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of AddressesScopedList resources.
--
-- /See:/ 'newAddressAggregatedList_Items' smart constructor.
newtype AddressAggregatedList_Items = AddressAggregatedList_Items
  { -- | [Output Only] Name of the scope containing this set of addresses.
    additional :: (Core.HashMap Core.Text AddressesScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AddressAggregatedList_Items' with the minimum fields required to make a request.
newAddressAggregatedList_Items ::
  -- |  [Output Only] Name of the scope containing this set of addresses. See 'additional'.
  Core.HashMap Core.Text AddressesScopedList ->
  AddressAggregatedList_Items
newAddressAggregatedList_Items additional =
  AddressAggregatedList_Items {additional = additional}

instance Core.FromJSON AddressAggregatedList_Items where
  parseJSON =
    Core.withObject
      "AddressAggregatedList_Items"
      ( \o ->
          AddressAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON AddressAggregatedList_Items where
  toJSON AddressAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newAddressAggregatedList_Warning' smart constructor.
data AddressAggregatedList_Warning = AddressAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe AddressAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [AddressAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AddressAggregatedList_Warning' with the minimum fields required to make a request.
newAddressAggregatedList_Warning ::
  AddressAggregatedList_Warning
newAddressAggregatedList_Warning =
  AddressAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON AddressAggregatedList_Warning where
  parseJSON =
    Core.withObject
      "AddressAggregatedList_Warning"
      ( \o ->
          AddressAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON AddressAggregatedList_Warning where
  toJSON AddressAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newAddressAggregatedList_Warning_DataItem' smart constructor.
data AddressAggregatedList_Warning_DataItem = AddressAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AddressAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newAddressAggregatedList_Warning_DataItem ::
  AddressAggregatedList_Warning_DataItem
newAddressAggregatedList_Warning_DataItem =
  AddressAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    AddressAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "AddressAggregatedList_Warning_DataItem"
      ( \o ->
          AddressAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    AddressAggregatedList_Warning_DataItem
  where
  toJSON AddressAggregatedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Contains a list of addresses.
--
-- /See:/ 'newAddressList' smart constructor.
data AddressList = AddressList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of Address resources.
    items :: (Core.Maybe [Address]),
    -- | [Output Only] Type of resource. Always compute#addressList for lists of addresses.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe AddressList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AddressList' with the minimum fields required to make a request.
newAddressList ::
  AddressList
newAddressList =
  AddressList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#addressList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON AddressList where
  parseJSON =
    Core.withObject
      "AddressList"
      ( \o ->
          AddressList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#addressList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON AddressList where
  toJSON AddressList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newAddressList_Warning' smart constructor.
data AddressList_Warning = AddressList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe AddressList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [AddressList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AddressList_Warning' with the minimum fields required to make a request.
newAddressList_Warning ::
  AddressList_Warning
newAddressList_Warning =
  AddressList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON AddressList_Warning where
  parseJSON =
    Core.withObject
      "AddressList_Warning"
      ( \o ->
          AddressList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON AddressList_Warning where
  toJSON AddressList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newAddressList_Warning_DataItem' smart constructor.
data AddressList_Warning_DataItem = AddressList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AddressList_Warning_DataItem' with the minimum fields required to make a request.
newAddressList_Warning_DataItem ::
  AddressList_Warning_DataItem
newAddressList_Warning_DataItem =
  AddressList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON AddressList_Warning_DataItem where
  parseJSON =
    Core.withObject
      "AddressList_Warning_DataItem"
      ( \o ->
          AddressList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON AddressList_Warning_DataItem where
  toJSON AddressList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newAddressesScopedList' smart constructor.
data AddressesScopedList = AddressesScopedList
  { -- | [Output Only] A list of addresses contained in this scope.
    addresses :: (Core.Maybe [Address]),
    -- | [Output Only] Informational warning which replaces the list of addresses when the list is empty.
    warning :: (Core.Maybe AddressesScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AddressesScopedList' with the minimum fields required to make a request.
newAddressesScopedList ::
  AddressesScopedList
newAddressesScopedList =
  AddressesScopedList {addresses = Core.Nothing, warning = Core.Nothing}

instance Core.FromJSON AddressesScopedList where
  parseJSON =
    Core.withObject
      "AddressesScopedList"
      ( \o ->
          AddressesScopedList
            Core.<$> (o Core..:? "addresses")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON AddressesScopedList where
  toJSON AddressesScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("addresses" Core..=) Core.<$> addresses,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning which replaces the list of addresses when the list is empty.
--
-- /See:/ 'newAddressesScopedList_Warning' smart constructor.
data AddressesScopedList_Warning = AddressesScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe AddressesScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [AddressesScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AddressesScopedList_Warning' with the minimum fields required to make a request.
newAddressesScopedList_Warning ::
  AddressesScopedList_Warning
newAddressesScopedList_Warning =
  AddressesScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON AddressesScopedList_Warning where
  parseJSON =
    Core.withObject
      "AddressesScopedList_Warning"
      ( \o ->
          AddressesScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON AddressesScopedList_Warning where
  toJSON AddressesScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newAddressesScopedList_Warning_DataItem' smart constructor.
data AddressesScopedList_Warning_DataItem = AddressesScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AddressesScopedList_Warning_DataItem' with the minimum fields required to make a request.
newAddressesScopedList_Warning_DataItem ::
  AddressesScopedList_Warning_DataItem
newAddressesScopedList_Warning_DataItem =
  AddressesScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    AddressesScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "AddressesScopedList_Warning_DataItem"
      ( \o ->
          AddressesScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    AddressesScopedList_Warning_DataItem
  where
  toJSON AddressesScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Specifies options for controlling advanced machine features. Options that would traditionally be configured in a BIOS belong here. Features that require operating system support may have corresponding entries in the GuestOsFeatures of an Image (e.g., whether or not the OS in the Image supports nested virtualization being enabled or disabled).
--
-- /See:/ 'newAdvancedMachineFeatures' smart constructor.
data AdvancedMachineFeatures = AdvancedMachineFeatures
  { -- | Whether to enable nested virtualization or not (default is false).
    enableNestedVirtualization :: (Core.Maybe Core.Bool),
    -- | Whether to enable UEFI networking for instance creation.
    enableUefiNetworking :: (Core.Maybe Core.Bool),
    -- | The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
    threadsPerCore :: (Core.Maybe Core.Int32),
    -- | The number of physical cores to expose to an instance. Multiply by the number of threads per core to compute the total number of virtual CPUs to expose to the instance. If unset, the number of cores is inferred from the instance\'s nominal CPU count and the underlying platform\'s SMT width.
    visibleCoreCount :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AdvancedMachineFeatures' with the minimum fields required to make a request.
newAdvancedMachineFeatures ::
  AdvancedMachineFeatures
newAdvancedMachineFeatures =
  AdvancedMachineFeatures
    { enableNestedVirtualization = Core.Nothing,
      enableUefiNetworking = Core.Nothing,
      threadsPerCore = Core.Nothing,
      visibleCoreCount = Core.Nothing
    }

instance Core.FromJSON AdvancedMachineFeatures where
  parseJSON =
    Core.withObject
      "AdvancedMachineFeatures"
      ( \o ->
          AdvancedMachineFeatures
            Core.<$> (o Core..:? "enableNestedVirtualization")
            Core.<*> (o Core..:? "enableUefiNetworking")
            Core.<*> (o Core..:? "threadsPerCore")
            Core.<*> (o Core..:? "visibleCoreCount")
      )

instance Core.ToJSON AdvancedMachineFeatures where
  toJSON AdvancedMachineFeatures {..} =
    Core.object
      ( Core.catMaybes
          [ ("enableNestedVirtualization" Core..=)
              Core.<$> enableNestedVirtualization,
            ("enableUefiNetworking" Core..=)
              Core.<$> enableUefiNetworking,
            ("threadsPerCore" Core..=) Core.<$> threadsPerCore,
            ("visibleCoreCount" Core..=)
              Core.<$> visibleCoreCount
          ]
      )

-- | An alias IP range attached to an instance\'s network interface.
--
-- /See:/ 'newAliasIpRange' smart constructor.
data AliasIpRange = AliasIpRange
  { -- | The IP alias ranges to allocate for this interface. This IP CIDR range must belong to the specified subnetwork and cannot contain IP addresses reserved by system or used by other network interfaces. This range may be a single IP address (such as 10.2.3.4), a netmask (such as \/24) or a CIDR-formatted string (such as 10.1.2.0\/24).
    ipCidrRange :: (Core.Maybe Core.Text),
    -- | The name of a subnetwork secondary IP range from which to allocate an IP alias range. If not specified, the primary range of the subnetwork is used.
    subnetworkRangeName :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AliasIpRange' with the minimum fields required to make a request.
newAliasIpRange ::
  AliasIpRange
newAliasIpRange =
  AliasIpRange {ipCidrRange = Core.Nothing, subnetworkRangeName = Core.Nothing}

instance Core.FromJSON AliasIpRange where
  parseJSON =
    Core.withObject
      "AliasIpRange"
      ( \o ->
          AliasIpRange
            Core.<$> (o Core..:? "ipCidrRange")
            Core.<*> (o Core..:? "subnetworkRangeName")
      )

instance Core.ToJSON AliasIpRange where
  toJSON AliasIpRange {..} =
    Core.object
      ( Core.catMaybes
          [ ("ipCidrRange" Core..=) Core.<$> ipCidrRange,
            ("subnetworkRangeName" Core..=)
              Core.<$> subnetworkRangeName
          ]
      )

-- | [Output Only] Contains output only fields.
--
-- /See:/ 'newAllocationResourceStatus' smart constructor.
newtype AllocationResourceStatus = AllocationResourceStatus
  { -- | Allocation Properties of this reservation.
    specificSkuAllocation :: (Core.Maybe AllocationResourceStatusSpecificSKUAllocation)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AllocationResourceStatus' with the minimum fields required to make a request.
newAllocationResourceStatus ::
  AllocationResourceStatus
newAllocationResourceStatus =
  AllocationResourceStatus {specificSkuAllocation = Core.Nothing}

instance Core.FromJSON AllocationResourceStatus where
  parseJSON =
    Core.withObject
      "AllocationResourceStatus"
      ( \o ->
          AllocationResourceStatus
            Core.<$> (o Core..:? "specificSkuAllocation")
      )

instance Core.ToJSON AllocationResourceStatus where
  toJSON AllocationResourceStatus {..} =
    Core.object
      ( Core.catMaybes
          [ ("specificSkuAllocation" Core..=)
              Core.<$> specificSkuAllocation
          ]
      )

-- | Contains Properties set for the reservation.
--
-- /See:/ 'newAllocationResourceStatusSpecificSKUAllocation' smart constructor.
newtype AllocationResourceStatusSpecificSKUAllocation = AllocationResourceStatusSpecificSKUAllocation
  { -- | ID of the instance template used to populate reservation properties.
    sourceInstanceTemplateId :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AllocationResourceStatusSpecificSKUAllocation' with the minimum fields required to make a request.
newAllocationResourceStatusSpecificSKUAllocation ::
  AllocationResourceStatusSpecificSKUAllocation
newAllocationResourceStatusSpecificSKUAllocation =
  AllocationResourceStatusSpecificSKUAllocation
    { sourceInstanceTemplateId = Core.Nothing
    }

instance
  Core.FromJSON
    AllocationResourceStatusSpecificSKUAllocation
  where
  parseJSON =
    Core.withObject
      "AllocationResourceStatusSpecificSKUAllocation"
      ( \o ->
          AllocationResourceStatusSpecificSKUAllocation
            Core.<$> (o Core..:? "sourceInstanceTemplateId")
      )

instance
  Core.ToJSON
    AllocationResourceStatusSpecificSKUAllocation
  where
  toJSON
    AllocationResourceStatusSpecificSKUAllocation {..} =
      Core.object
        ( Core.catMaybes
            [ ("sourceInstanceTemplateId" Core..=)
                Core.<$> sourceInstanceTemplateId
            ]
        )

--
-- /See:/ 'newAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk' smart constructor.
data AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk = AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk
  { -- | Specifies the size of the disk in base-2 GB.
    diskSizeGb :: (Core.Maybe Core.Int64),
    -- | Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance.
    interface ::
      ( Core.Maybe
          AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk_Interface
      )
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk' with the minimum fields required to make a request.
newAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk ::
  AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk
newAllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk =
  AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk
    { diskSizeGb = Core.Nothing,
      interface = Core.Nothing
    }

instance
  Core.FromJSON
    AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk
  where
  parseJSON =
    Core.withObject
      "AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk"
      ( \o ->
          AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk
            Core.<$> ( o Core..:? "diskSizeGb"
                         Core.<&> Core.fmap Core.fromAsText
                     )
              Core.<*> (o Core..:? "interface")
      )

instance
  Core.ToJSON
    AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk
  where
  toJSON
    AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk {..} =
      Core.object
        ( Core.catMaybes
            [ ("diskSizeGb" Core..=) Core.. Core.AsText
                Core.<$> diskSizeGb,
              ("interface" Core..=) Core.<$> interface
            ]
        )

-- | Properties of the SKU instances being reserved. Next ID: 9
--
-- /See:/ 'newAllocationSpecificSKUAllocationReservedInstanceProperties' smart constructor.
data AllocationSpecificSKUAllocationReservedInstanceProperties = AllocationSpecificSKUAllocationReservedInstanceProperties
  { -- | Specifies accelerator type and count.
    guestAccelerators :: (Core.Maybe [AcceleratorConfig]),
    -- | Specifies amount of local ssd to reserve with each instance. The type of disk is local-ssd.
    localSsds ::
      ( Core.Maybe
          [AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk]
      ),
    -- | An opaque location hint used to place the allocation close to other resources. This field is for use by internal tools that use the public API.
    locationHint :: (Core.Maybe Core.Text),
    -- | Specifies type of machine (name only) which has fixed number of vCPUs and fixed amount of memory. This also includes specifying custom machine type following custom-NUMBER/OF/CPUS-AMOUNT/OF/MEMORY pattern.
    machineType :: (Core.Maybe Core.Text),
    -- | Minimum cpu platform the reservation.
    minCpuPlatform :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AllocationSpecificSKUAllocationReservedInstanceProperties' with the minimum fields required to make a request.
newAllocationSpecificSKUAllocationReservedInstanceProperties ::
  AllocationSpecificSKUAllocationReservedInstanceProperties
newAllocationSpecificSKUAllocationReservedInstanceProperties =
  AllocationSpecificSKUAllocationReservedInstanceProperties
    { guestAccelerators = Core.Nothing,
      localSsds = Core.Nothing,
      locationHint = Core.Nothing,
      machineType = Core.Nothing,
      minCpuPlatform = Core.Nothing
    }

instance
  Core.FromJSON
    AllocationSpecificSKUAllocationReservedInstanceProperties
  where
  parseJSON =
    Core.withObject
      "AllocationSpecificSKUAllocationReservedInstanceProperties"
      ( \o ->
          AllocationSpecificSKUAllocationReservedInstanceProperties
            Core.<$> (o Core..:? "guestAccelerators")
              Core.<*> (o Core..:? "localSsds")
              Core.<*> (o Core..:? "locationHint")
              Core.<*> (o Core..:? "machineType")
              Core.<*> (o Core..:? "minCpuPlatform")
      )

instance
  Core.ToJSON
    AllocationSpecificSKUAllocationReservedInstanceProperties
  where
  toJSON
    AllocationSpecificSKUAllocationReservedInstanceProperties {..} =
      Core.object
        ( Core.catMaybes
            [ ("guestAccelerators" Core..=)
                Core.<$> guestAccelerators,
              ("localSsds" Core..=) Core.<$> localSsds,
              ("locationHint" Core..=) Core.<$> locationHint,
              ("machineType" Core..=) Core.<$> machineType,
              ("minCpuPlatform" Core..=) Core.<$> minCpuPlatform
            ]
        )

-- | This reservation type allows to pre allocate specific instance configuration. Next ID: 6
--
-- /See:/ 'newAllocationSpecificSKUReservation' smart constructor.
data AllocationSpecificSKUReservation = AllocationSpecificSKUReservation
  { -- | [Output Only] Indicates how many instances are actually usable currently.
    assuredCount :: (Core.Maybe Core.Int64),
    -- | Specifies the number of resources that are allocated.
    count :: (Core.Maybe Core.Int64),
    -- | [Output Only] Indicates how many instances are in use.
    inUseCount :: (Core.Maybe Core.Int64),
    -- | The instance properties for the reservation.
    instanceProperties ::
      ( Core.Maybe
          AllocationSpecificSKUAllocationReservedInstanceProperties
      ),
    -- | Specifies the instance template to create the reservation. If you use this field, you must exclude the instanceProperties field. This field is optional, and it can be a full or partial URL. For example, the following are all valid URLs to an instance template: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project \/global\/instanceTemplates\/instanceTemplate - projects\/project\/global\/instanceTemplates\/instanceTemplate - global\/instanceTemplates\/instanceTemplate
    sourceInstanceTemplate :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AllocationSpecificSKUReservation' with the minimum fields required to make a request.
newAllocationSpecificSKUReservation ::
  AllocationSpecificSKUReservation
newAllocationSpecificSKUReservation =
  AllocationSpecificSKUReservation
    { assuredCount = Core.Nothing,
      count = Core.Nothing,
      inUseCount = Core.Nothing,
      instanceProperties = Core.Nothing,
      sourceInstanceTemplate = Core.Nothing
    }

instance
  Core.FromJSON
    AllocationSpecificSKUReservation
  where
  parseJSON =
    Core.withObject
      "AllocationSpecificSKUReservation"
      ( \o ->
          AllocationSpecificSKUReservation
            Core.<$> ( o Core..:? "assuredCount"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> ( o Core..:? "count"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> ( o Core..:? "inUseCount"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "instanceProperties")
            Core.<*> (o Core..:? "sourceInstanceTemplate")
      )

instance Core.ToJSON AllocationSpecificSKUReservation where
  toJSON AllocationSpecificSKUReservation {..} =
    Core.object
      ( Core.catMaybes
          [ ("assuredCount" Core..=) Core.. Core.AsText
              Core.<$> assuredCount,
            ("count" Core..=) Core.. Core.AsText Core.<$> count,
            ("inUseCount" Core..=) Core.. Core.AsText
              Core.<$> inUseCount,
            ("instanceProperties" Core..=)
              Core.<$> instanceProperties,
            ("sourceInstanceTemplate" Core..=)
              Core.<$> sourceInstanceTemplate
          ]
      )

-- | An instance-attached disk resource.
--
-- /See:/ 'newAttachedDisk' smart constructor.
data AttachedDisk = AttachedDisk
  { -- | [Output Only] The architecture of the attached disk. Valid values are ARM64 or X86_64.
    architecture :: (Core.Maybe AttachedDisk_Architecture),
    -- | Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
    autoDelete :: (Core.Maybe Core.Bool),
    -- | Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
    boot :: (Core.Maybe Core.Bool),
    -- | Specifies a unique device name of your choice that is reflected into the \/dev\/disk\/by-id\/google-* tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.
    deviceName :: (Core.Maybe Core.Text),
    -- | Encrypts or decrypts a disk using a customer-supplied encryption key. If you are creating a new disk, this field encrypts the new disk using an encryption key that you provide. If you are attaching an existing disk that is already encrypted, this field decrypts the disk using the customer-supplied encryption key. If you encrypt a disk using a customer-supplied key, you must provide the same key again when you attempt to use this resource at a later time. For example, you must provide the key when you create a snapshot or an image from the disk or when you attach the disk to a virtual machine instance. If you do not provide an encryption key, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the disk later. Instance templates do not store customer-supplied encryption keys, so you cannot use your own keys to encrypt disks in a managed instance group.
    diskEncryptionKey :: (Core.Maybe CustomerEncryptionKey),
    -- | The size of the disk in GB.
    diskSizeGb :: (Core.Maybe Core.Int64),
    -- | [Input Only] Whether to force attach the regional disk even if it\'s currently attached to another instance. If you try to force attach a zonal disk to an instance, you will receive an error.
    forceAttach :: (Core.Maybe Core.Bool),
    -- | A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
    guestOsFeatures :: (Core.Maybe [GuestOsFeature]),
    -- | [Output Only] A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.
    index :: (Core.Maybe Core.Int32),
    -- | [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
    initializeParams :: (Core.Maybe AttachedDiskInitializeParams),
    -- | Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. For most machine types, the default is SCSI. Local SSDs can use either NVME or SCSI. In certain configurations, persistent disks can use NVMe. For more information, see About persistent disks.
    interface :: (Core.Maybe AttachedDisk_Interface),
    -- | [Output Only] Type of the resource. Always compute#attachedDisk for attached disks.
    kind :: Core.Text,
    -- | [Output Only] Any valid publicly visible licenses.
    licenses :: (Core.Maybe [Core.Text]),
    -- | The mode in which to attach this disk, either READ/WRITE or READ/ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
    mode :: (Core.Maybe AttachedDisk_Mode),
    -- | [Output Only] shielded vm initial state stored on disk
    shieldedInstanceInitialState :: (Core.Maybe InitialStateConfig),
    -- | Specifies a valid partial or full URL to an existing Persistent Disk resource. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. If desired, you can also attach existing non-root persistent disks using this property. This field is only applicable for persistent disks. Note that for InstanceTemplate, specify the disk name for zonal disk, and the URL for regional disk.
    source :: (Core.Maybe Core.Text),
    -- | Specifies the type of the disk, either SCRATCH or PERSISTENT. If not specified, the default is PERSISTENT.
    type' :: (Core.Maybe AttachedDisk_Type)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AttachedDisk' with the minimum fields required to make a request.
newAttachedDisk ::
  AttachedDisk
newAttachedDisk =
  AttachedDisk
    { architecture = Core.Nothing,
      autoDelete = Core.Nothing,
      boot = Core.Nothing,
      deviceName = Core.Nothing,
      diskEncryptionKey = Core.Nothing,
      diskSizeGb = Core.Nothing,
      forceAttach = Core.Nothing,
      guestOsFeatures = Core.Nothing,
      index = Core.Nothing,
      initializeParams = Core.Nothing,
      interface = Core.Nothing,
      kind = "compute#attachedDisk",
      licenses = Core.Nothing,
      mode = Core.Nothing,
      shieldedInstanceInitialState = Core.Nothing,
      source = Core.Nothing,
      type' = Core.Nothing
    }

instance Core.FromJSON AttachedDisk where
  parseJSON =
    Core.withObject
      "AttachedDisk"
      ( \o ->
          AttachedDisk
            Core.<$> (o Core..:? "architecture")
            Core.<*> (o Core..:? "autoDelete")
            Core.<*> (o Core..:? "boot")
            Core.<*> (o Core..:? "deviceName")
            Core.<*> (o Core..:? "diskEncryptionKey")
            Core.<*> ( o Core..:? "diskSizeGb"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "forceAttach")
            Core.<*> (o Core..:? "guestOsFeatures")
            Core.<*> (o Core..:? "index")
            Core.<*> (o Core..:? "initializeParams")
            Core.<*> (o Core..:? "interface")
            Core.<*> (o Core..:? "kind" Core..!= "compute#attachedDisk")
            Core.<*> (o Core..:? "licenses")
            Core.<*> (o Core..:? "mode")
            Core.<*> (o Core..:? "shieldedInstanceInitialState")
            Core.<*> (o Core..:? "source")
            Core.<*> (o Core..:? "type")
      )

instance Core.ToJSON AttachedDisk where
  toJSON AttachedDisk {..} =
    Core.object
      ( Core.catMaybes
          [ ("architecture" Core..=) Core.<$> architecture,
            ("autoDelete" Core..=) Core.<$> autoDelete,
            ("boot" Core..=) Core.<$> boot,
            ("deviceName" Core..=) Core.<$> deviceName,
            ("diskEncryptionKey" Core..=)
              Core.<$> diskEncryptionKey,
            ("diskSizeGb" Core..=) Core.. Core.AsText
              Core.<$> diskSizeGb,
            ("forceAttach" Core..=) Core.<$> forceAttach,
            ("guestOsFeatures" Core..=) Core.<$> guestOsFeatures,
            ("index" Core..=) Core.<$> index,
            ("initializeParams" Core..=)
              Core.<$> initializeParams,
            ("interface" Core..=) Core.<$> interface,
            Core.Just ("kind" Core..= kind),
            ("licenses" Core..=) Core.<$> licenses,
            ("mode" Core..=) Core.<$> mode,
            ("shieldedInstanceInitialState" Core..=)
              Core.<$> shieldedInstanceInitialState,
            ("source" Core..=) Core.<$> source,
            ("type" Core..=) Core.<$> type'
          ]
      )

-- | [Input Only] Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new instance. This field is persisted and returned for instanceTemplate and not returned in the context of instance. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
--
-- /See:/ 'newAttachedDiskInitializeParams' smart constructor.
data AttachedDiskInitializeParams = AttachedDiskInitializeParams
  { -- | The architecture of the attached disk. Valid values are arm64 or x86_64.
    architecture :: (Core.Maybe AttachedDiskInitializeParams_Architecture),
    -- | An optional description. Provide this property when creating the disk.
    description :: (Core.Maybe Core.Text),
    -- | Specifies the disk name. If not specified, the default is to use the name of the instance. If a disk with the same name already exists in the given region, the existing disk is attached to the new instance and the new disk is not created.
    diskName :: (Core.Maybe Core.Text),
    -- | Specifies the size of the disk in base-2 GB. The size must be at least 10 GB. If you specify a sourceImage, which is required for boot disks, the default size is the size of the sourceImage. If you do not specify a sourceImage, the default disk size is 500 GB.
    diskSizeGb :: (Core.Maybe Core.Int64),
    -- | Specifies the disk type to use to create the instance. If not specified, the default is pd-standard, specified using the full URL. For example: https:\/\/www.googleapis.com\/compute\/v1\/projects\/project\/zones\/zone \/diskTypes\/pd-standard For a full list of acceptable values, see Persistent disk types. If you specify this field when creating a VM, you can provide either the full or partial URL. For example, the following values are valid: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project\/zones\/zone \/diskTypes\/diskType - projects\/project\/zones\/zone\/diskTypes\/diskType - zones\/zone\/diskTypes\/diskType If you specify this field when creating or updating an instance template or all-instances configuration, specify the type of the disk, not the URL. For example: pd-standard.
    diskType :: (Core.Maybe Core.Text),
    -- | Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
    labels :: (Core.Maybe AttachedDiskInitializeParams_Labels),
    -- | A list of publicly visible licenses. Reserved for Google\'s use.
    licenses :: (Core.Maybe [Core.Text]),
    -- | Specifies which action to take on instance update with this disk. Default is to use the existing disk.
    onUpdateAction :: (Core.Maybe AttachedDiskInitializeParams_OnUpdateAction),
    -- | Indicates how many IOPS to provision for the disk. This sets the number of I\/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation.
    provisionedIops :: (Core.Maybe Core.Int64),
    -- | Resource manager tags to be bound to the disk. Tag keys and values have the same definition as resource manager tags. Keys must be in the format @tagKeys\/{tag_key_id}@, and values are in the format @tagValues\/456@. The field is ignored (both PUT & PATCH) when empty.
    resourceManagerTags :: (Core.Maybe AttachedDiskInitializeParams_ResourceManagerTags),
    -- | Resource policies applied to this disk for automatic snapshot creations. Specified using the full or partial URL. For instance template, specify only the resource policy name.
    resourcePolicies :: (Core.Maybe [Core.Text]),
    -- | The source image to create this disk. When creating a new instance, one of initializeParams.sourceImage or initializeParams.sourceSnapshot or disks.source is required except for local SSD. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family\/debian-9 to use the latest Debian 9 image: projects\/debian-cloud\/global\/images\/family\/debian-9 Alternatively, use a specific version of a public operating system image: projects\/debian-cloud\/global\/images\/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global\/images\/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family\/family-name: global\/images\/family\/my-image-family If the source image is deleted later, this field will not be set.
    sourceImage :: (Core.Maybe Core.Text),
    -- | The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key. InstanceTemplate and InstancePropertiesPatch do not store customer-supplied encryption keys, so you cannot create disks for instances in a managed instance group if the source images are encrypted with your own keys.
    sourceImageEncryptionKey :: (Core.Maybe CustomerEncryptionKey),
    -- | The source snapshot to create this disk. When creating a new instance, one of initializeParams.sourceSnapshot or initializeParams.sourceImage or disks.source is required except for local SSD. To create a disk with a snapshot that you created, specify the snapshot name in the following format: global\/snapshots\/my-backup If the source snapshot is deleted later, this field will not be set.
    sourceSnapshot :: (Core.Maybe Core.Text),
    -- | The customer-supplied encryption key of the source snapshot.
    sourceSnapshotEncryptionKey :: (Core.Maybe CustomerEncryptionKey)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AttachedDiskInitializeParams' with the minimum fields required to make a request.
newAttachedDiskInitializeParams ::
  AttachedDiskInitializeParams
newAttachedDiskInitializeParams =
  AttachedDiskInitializeParams
    { architecture = Core.Nothing,
      description = Core.Nothing,
      diskName = Core.Nothing,
      diskSizeGb = Core.Nothing,
      diskType = Core.Nothing,
      labels = Core.Nothing,
      licenses = Core.Nothing,
      onUpdateAction = Core.Nothing,
      provisionedIops = Core.Nothing,
      resourceManagerTags = Core.Nothing,
      resourcePolicies = Core.Nothing,
      sourceImage = Core.Nothing,
      sourceImageEncryptionKey = Core.Nothing,
      sourceSnapshot = Core.Nothing,
      sourceSnapshotEncryptionKey = Core.Nothing
    }

instance Core.FromJSON AttachedDiskInitializeParams where
  parseJSON =
    Core.withObject
      "AttachedDiskInitializeParams"
      ( \o ->
          AttachedDiskInitializeParams
            Core.<$> (o Core..:? "architecture")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "diskName")
            Core.<*> ( o Core..:? "diskSizeGb"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "diskType")
            Core.<*> (o Core..:? "labels")
            Core.<*> (o Core..:? "licenses")
            Core.<*> (o Core..:? "onUpdateAction")
            Core.<*> ( o Core..:? "provisionedIops"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "resourceManagerTags")
            Core.<*> (o Core..:? "resourcePolicies")
            Core.<*> (o Core..:? "sourceImage")
            Core.<*> (o Core..:? "sourceImageEncryptionKey")
            Core.<*> (o Core..:? "sourceSnapshot")
            Core.<*> (o Core..:? "sourceSnapshotEncryptionKey")
      )

instance Core.ToJSON AttachedDiskInitializeParams where
  toJSON AttachedDiskInitializeParams {..} =
    Core.object
      ( Core.catMaybes
          [ ("architecture" Core..=) Core.<$> architecture,
            ("description" Core..=) Core.<$> description,
            ("diskName" Core..=) Core.<$> diskName,
            ("diskSizeGb" Core..=) Core.. Core.AsText
              Core.<$> diskSizeGb,
            ("diskType" Core..=) Core.<$> diskType,
            ("labels" Core..=) Core.<$> labels,
            ("licenses" Core..=) Core.<$> licenses,
            ("onUpdateAction" Core..=) Core.<$> onUpdateAction,
            ("provisionedIops" Core..=) Core.. Core.AsText
              Core.<$> provisionedIops,
            ("resourceManagerTags" Core..=)
              Core.<$> resourceManagerTags,
            ("resourcePolicies" Core..=)
              Core.<$> resourcePolicies,
            ("sourceImage" Core..=) Core.<$> sourceImage,
            ("sourceImageEncryptionKey" Core..=)
              Core.<$> sourceImageEncryptionKey,
            ("sourceSnapshot" Core..=) Core.<$> sourceSnapshot,
            ("sourceSnapshotEncryptionKey" Core..=)
              Core.<$> sourceSnapshotEncryptionKey
          ]
      )

-- | Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
--
-- /See:/ 'newAttachedDiskInitializeParams_Labels' smart constructor.
newtype AttachedDiskInitializeParams_Labels = AttachedDiskInitializeParams_Labels
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AttachedDiskInitializeParams_Labels' with the minimum fields required to make a request.
newAttachedDiskInitializeParams_Labels ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  AttachedDiskInitializeParams_Labels
newAttachedDiskInitializeParams_Labels additional =
  AttachedDiskInitializeParams_Labels {additional = additional}

instance
  Core.FromJSON
    AttachedDiskInitializeParams_Labels
  where
  parseJSON =
    Core.withObject
      "AttachedDiskInitializeParams_Labels"
      ( \o ->
          AttachedDiskInitializeParams_Labels
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    AttachedDiskInitializeParams_Labels
  where
  toJSON AttachedDiskInitializeParams_Labels {..} =
    Core.toJSON additional

-- | Resource manager tags to be bound to the disk. Tag keys and values have the same definition as resource manager tags. Keys must be in the format @tagKeys\/{tag_key_id}@, and values are in the format @tagValues\/456@. The field is ignored (both PUT & PATCH) when empty.
--
-- /See:/ 'newAttachedDiskInitializeParams_ResourceManagerTags' smart constructor.
newtype AttachedDiskInitializeParams_ResourceManagerTags = AttachedDiskInitializeParams_ResourceManagerTags
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AttachedDiskInitializeParams_ResourceManagerTags' with the minimum fields required to make a request.
newAttachedDiskInitializeParams_ResourceManagerTags ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  AttachedDiskInitializeParams_ResourceManagerTags
newAttachedDiskInitializeParams_ResourceManagerTags additional =
  AttachedDiskInitializeParams_ResourceManagerTags {additional = additional}

instance
  Core.FromJSON
    AttachedDiskInitializeParams_ResourceManagerTags
  where
  parseJSON =
    Core.withObject
      "AttachedDiskInitializeParams_ResourceManagerTags"
      ( \o ->
          AttachedDiskInitializeParams_ResourceManagerTags
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    AttachedDiskInitializeParams_ResourceManagerTags
  where
  toJSON
    AttachedDiskInitializeParams_ResourceManagerTags {..} =
      Core.toJSON additional

-- | Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both @allServices@ and a specific service, the union of the two AuditConfigs is used for that service: the log/types specified in each AuditConfig are enabled, and the exempted/members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { \"audit/configs\": [ { \"service\": \"allServices\", \"audit/log/configs\": [ { \"log/type\": \"DATA/READ\", \"exempted/members\": [ \"user:jose\@example.com\" ] }, { \"log/type\": \"DATA/WRITE\" }, { \"log/type\": \"ADMIN/READ\" } ] }, { \"service\": \"sampleservice.googleapis.com\", \"audit/log/configs\": [ { \"log/type\": \"DATA/READ\" }, { \"log/type\": \"DATA/WRITE\", \"exempted/members\": [ \"user:aliya\@example.com\" ] } ] } ] } For sampleservice, this policy enables DATA/READ, DATA/WRITE and
-- ADMIN/READ logging. It also exempts jose\@example.com from DATA/READ logging, and aliya\@example.com from DATA/WRITE logging.
--
-- /See:/ 'newAuditConfig' smart constructor.
data AuditConfig = AuditConfig
  { -- | The configuration for logging of each type of permission.
    auditLogConfigs :: (Core.Maybe [AuditLogConfig]),
    -- | This is deprecated and has no effect. Do not use.
    exemptedMembers :: (Core.Maybe [Core.Text]),
    -- | Specifies a service that will be enabled for audit logging. For example, @storage.googleapis.com@, @cloudsql.googleapis.com@. @allServices@ is a special value that covers all services.
    service :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AuditConfig' with the minimum fields required to make a request.
newAuditConfig ::
  AuditConfig
newAuditConfig =
  AuditConfig
    { auditLogConfigs = Core.Nothing,
      exemptedMembers = Core.Nothing,
      service = Core.Nothing
    }

instance Core.FromJSON AuditConfig where
  parseJSON =
    Core.withObject
      "AuditConfig"
      ( \o ->
          AuditConfig
            Core.<$> (o Core..:? "auditLogConfigs")
            Core.<*> (o Core..:? "exemptedMembers")
            Core.<*> (o Core..:? "service")
      )

instance Core.ToJSON AuditConfig where
  toJSON AuditConfig {..} =
    Core.object
      ( Core.catMaybes
          [ ("auditLogConfigs" Core..=)
              Core.<$> auditLogConfigs,
            ("exemptedMembers" Core..=) Core.<$> exemptedMembers,
            ("service" Core..=) Core.<$> service
          ]
      )

-- | Provides the configuration for logging a type of permissions. Example: { \"audit/log/configs\": [ { \"log/type\": \"DATA/READ\", \"exempted/members\": [ \"user:jose\@example.com\" ] }, { \"log/type\": \"DATA/WRITE\" } ] } This enables \'DATA/READ\' and \'DATA/WRITE\' logging, while exempting jose\@example.com from DATA/READ logging.
--
-- /See:/ 'newAuditLogConfig' smart constructor.
data AuditLogConfig = AuditLogConfig
  { -- | Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
    exemptedMembers :: (Core.Maybe [Core.Text]),
    -- | This is deprecated and has no effect. Do not use.
    ignoreChildExemptions :: (Core.Maybe Core.Bool),
    -- | The log type that this config enables.
    logType :: (Core.Maybe AuditLogConfig_LogType)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AuditLogConfig' with the minimum fields required to make a request.
newAuditLogConfig ::
  AuditLogConfig
newAuditLogConfig =
  AuditLogConfig
    { exemptedMembers = Core.Nothing,
      ignoreChildExemptions = Core.Nothing,
      logType = Core.Nothing
    }

instance Core.FromJSON AuditLogConfig where
  parseJSON =
    Core.withObject
      "AuditLogConfig"
      ( \o ->
          AuditLogConfig
            Core.<$> (o Core..:? "exemptedMembers")
            Core.<*> (o Core..:? "ignoreChildExemptions")
            Core.<*> (o Core..:? "logType")
      )

instance Core.ToJSON AuditLogConfig where
  toJSON AuditLogConfig {..} =
    Core.object
      ( Core.catMaybes
          [ ("exemptedMembers" Core..=)
              Core.<$> exemptedMembers,
            ("ignoreChildExemptions" Core..=)
              Core.<$> ignoreChildExemptions,
            ("logType" Core..=) Core.<$> logType
          ]
      )

-- | This is deprecated and has no effect. Do not use.
--
-- /See:/ 'newAuthorizationLoggingOptions' smart constructor.
newtype AuthorizationLoggingOptions = AuthorizationLoggingOptions
  { -- | This is deprecated and has no effect. Do not use.
    permissionType :: (Core.Maybe AuthorizationLoggingOptions_PermissionType)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AuthorizationLoggingOptions' with the minimum fields required to make a request.
newAuthorizationLoggingOptions ::
  AuthorizationLoggingOptions
newAuthorizationLoggingOptions =
  AuthorizationLoggingOptions {permissionType = Core.Nothing}

instance Core.FromJSON AuthorizationLoggingOptions where
  parseJSON =
    Core.withObject
      "AuthorizationLoggingOptions"
      ( \o ->
          AuthorizationLoggingOptions
            Core.<$> (o Core..:? "permissionType")
      )

instance Core.ToJSON AuthorizationLoggingOptions where
  toJSON AuthorizationLoggingOptions {..} =
    Core.object
      ( Core.catMaybes
          [("permissionType" Core..=) Core.<$> permissionType]
      )

-- | Represents an Autoscaler resource. Google Compute Engine has two Autoscaler resources: * </compute/docs/reference/rest/v1/autoscalers Zonal> * </compute/docs/reference/rest/v1/regionAutoscalers Regional> Use autoscalers to automatically add or delete instances from a managed instance group according to your defined autoscaling policy. For more information, read Autoscaling Groups of Instances. For zonal managed instance groups resource, use the autoscaler resource. For regional managed instance groups, use the regionAutoscalers resource.
--
-- /See:/ 'newAutoscaler' smart constructor.
data Autoscaler = Autoscaler
  { -- | The configuration parameters for the autoscaling algorithm. You can define one or more signals for an autoscaler: cpuUtilization, customMetricUtilizations, and loadBalancingUtilization. If none of these are specified, the default will be to autoscale based on cpuUtilization to 0.6 or 60%.
    autoscalingPolicy :: (Core.Maybe AutoscalingPolicy),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#autoscaler for autoscalers.
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] Target recommended MIG size (number of instances) computed by autoscaler. Autoscaler calculates the recommended MIG size even when the autoscaling policy mode is different from ON. This field is empty when autoscaler is not connected to an existing managed instance group or autoscaler did not generate its prediction.
    recommendedSize :: (Core.Maybe Core.Int32),
    -- | [Output Only] URL of the region where the instance group resides (for autoscalers living in regional scope).
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Status information of existing scaling schedules.
    scalingScheduleStatus :: (Core.Maybe Autoscaler_ScalingScheduleStatus),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] The status of the autoscaler configuration. Current set of possible values: - PENDING: Autoscaler backend hasn\'t read new\/updated configuration. - DELETING: Configuration is being deleted. - ACTIVE: Configuration is acknowledged to be effective. Some warnings might be present in the statusDetails field. - ERROR: Configuration has errors. Actionable for users. Details are present in the statusDetails field. New values might be added in the future.
    status :: (Core.Maybe Autoscaler_Status),
    -- | [Output Only] Human-readable details about the current state of the autoscaler. Read the documentation for Commonly returned status messages for examples of status messages you might encounter.
    statusDetails :: (Core.Maybe [AutoscalerStatusDetails]),
    -- | URL of the managed instance group that this autoscaler will scale. This field is required when creating an autoscaler.
    target :: (Core.Maybe Core.Text),
    -- | [Output Only] URL of the zone where the instance group resides (for autoscalers living in zonal scope).
    zone :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Autoscaler' with the minimum fields required to make a request.
newAutoscaler ::
  Autoscaler
newAutoscaler =
  Autoscaler
    { autoscalingPolicy = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#autoscaler",
      name = Core.Nothing,
      recommendedSize = Core.Nothing,
      region = Core.Nothing,
      scalingScheduleStatus = Core.Nothing,
      selfLink = Core.Nothing,
      status = Core.Nothing,
      statusDetails = Core.Nothing,
      target = Core.Nothing,
      zone = Core.Nothing
    }

instance Core.FromJSON Autoscaler where
  parseJSON =
    Core.withObject
      "Autoscaler"
      ( \o ->
          Autoscaler
            Core.<$> (o Core..:? "autoscalingPolicy")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#autoscaler")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "recommendedSize")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "scalingScheduleStatus")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "status")
            Core.<*> (o Core..:? "statusDetails")
            Core.<*> (o Core..:? "target")
            Core.<*> (o Core..:? "zone")
      )

instance Core.ToJSON Autoscaler where
  toJSON Autoscaler {..} =
    Core.object
      ( Core.catMaybes
          [ ("autoscalingPolicy" Core..=)
              Core.<$> autoscalingPolicy,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("recommendedSize" Core..=) Core.<$> recommendedSize,
            ("region" Core..=) Core.<$> region,
            ("scalingScheduleStatus" Core..=)
              Core.<$> scalingScheduleStatus,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("status" Core..=) Core.<$> status,
            ("statusDetails" Core..=) Core.<$> statusDetails,
            ("target" Core..=) Core.<$> target,
            ("zone" Core..=) Core.<$> zone
          ]
      )

-- | [Output Only] Status information of existing scaling schedules.
--
-- /See:/ 'newAutoscaler_ScalingScheduleStatus' smart constructor.
newtype Autoscaler_ScalingScheduleStatus = Autoscaler_ScalingScheduleStatus
  { -- |
    additional :: (Core.HashMap Core.Text ScalingScheduleStatus)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Autoscaler_ScalingScheduleStatus' with the minimum fields required to make a request.
newAutoscaler_ScalingScheduleStatus ::
  -- |  See 'additional'.
  Core.HashMap Core.Text ScalingScheduleStatus ->
  Autoscaler_ScalingScheduleStatus
newAutoscaler_ScalingScheduleStatus additional =
  Autoscaler_ScalingScheduleStatus {additional = additional}

instance
  Core.FromJSON
    Autoscaler_ScalingScheduleStatus
  where
  parseJSON =
    Core.withObject
      "Autoscaler_ScalingScheduleStatus"
      ( \o ->
          Autoscaler_ScalingScheduleStatus
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON Autoscaler_ScalingScheduleStatus where
  toJSON Autoscaler_ScalingScheduleStatus {..} =
    Core.toJSON additional

--
-- /See:/ 'newAutoscalerAggregatedList' smart constructor.
data AutoscalerAggregatedList = AutoscalerAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of AutoscalersScopedList resources.
    items :: (Core.Maybe AutoscalerAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#autoscalerAggregatedList for aggregated lists of autoscalers.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources. end_interface: MixerListResponseWithEtagBuilder
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe AutoscalerAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AutoscalerAggregatedList' with the minimum fields required to make a request.
newAutoscalerAggregatedList ::
  AutoscalerAggregatedList
newAutoscalerAggregatedList =
  AutoscalerAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#autoscalerAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON AutoscalerAggregatedList where
  parseJSON =
    Core.withObject
      "AutoscalerAggregatedList"
      ( \o ->
          AutoscalerAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#autoscalerAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON AutoscalerAggregatedList where
  toJSON AutoscalerAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of AutoscalersScopedList resources.
--
-- /See:/ 'newAutoscalerAggregatedList_Items' smart constructor.
newtype AutoscalerAggregatedList_Items = AutoscalerAggregatedList_Items
  { -- | [Output Only] Name of the scope containing this set of autoscalers.
    additional :: (Core.HashMap Core.Text AutoscalersScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AutoscalerAggregatedList_Items' with the minimum fields required to make a request.
newAutoscalerAggregatedList_Items ::
  -- |  [Output Only] Name of the scope containing this set of autoscalers. See 'additional'.
  Core.HashMap Core.Text AutoscalersScopedList ->
  AutoscalerAggregatedList_Items
newAutoscalerAggregatedList_Items additional =
  AutoscalerAggregatedList_Items {additional = additional}

instance Core.FromJSON AutoscalerAggregatedList_Items where
  parseJSON =
    Core.withObject
      "AutoscalerAggregatedList_Items"
      ( \o ->
          AutoscalerAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON AutoscalerAggregatedList_Items where
  toJSON AutoscalerAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newAutoscalerAggregatedList_Warning' smart constructor.
data AutoscalerAggregatedList_Warning = AutoscalerAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe AutoscalerAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [AutoscalerAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AutoscalerAggregatedList_Warning' with the minimum fields required to make a request.
newAutoscalerAggregatedList_Warning ::
  AutoscalerAggregatedList_Warning
newAutoscalerAggregatedList_Warning =
  AutoscalerAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    AutoscalerAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "AutoscalerAggregatedList_Warning"
      ( \o ->
          AutoscalerAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON AutoscalerAggregatedList_Warning where
  toJSON AutoscalerAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newAutoscalerAggregatedList_Warning_DataItem' smart constructor.
data AutoscalerAggregatedList_Warning_DataItem = AutoscalerAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AutoscalerAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newAutoscalerAggregatedList_Warning_DataItem ::
  AutoscalerAggregatedList_Warning_DataItem
newAutoscalerAggregatedList_Warning_DataItem =
  AutoscalerAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    AutoscalerAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "AutoscalerAggregatedList_Warning_DataItem"
      ( \o ->
          AutoscalerAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    AutoscalerAggregatedList_Warning_DataItem
  where
  toJSON AutoscalerAggregatedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Contains a list of Autoscaler resources.
--
-- /See:/ 'newAutoscalerList' smart constructor.
data AutoscalerList = AutoscalerList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of Autoscaler resources.
    items :: (Core.Maybe [Autoscaler]),
    -- | [Output Only] Type of resource. Always compute#autoscalerList for lists of autoscalers.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe AutoscalerList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AutoscalerList' with the minimum fields required to make a request.
newAutoscalerList ::
  AutoscalerList
newAutoscalerList =
  AutoscalerList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#autoscalerList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON AutoscalerList where
  parseJSON =
    Core.withObject
      "AutoscalerList"
      ( \o ->
          AutoscalerList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#autoscalerList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON AutoscalerList where
  toJSON AutoscalerList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newAutoscalerList_Warning' smart constructor.
data AutoscalerList_Warning = AutoscalerList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe AutoscalerList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [AutoscalerList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AutoscalerList_Warning' with the minimum fields required to make a request.
newAutoscalerList_Warning ::
  AutoscalerList_Warning
newAutoscalerList_Warning =
  AutoscalerList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON AutoscalerList_Warning where
  parseJSON =
    Core.withObject
      "AutoscalerList_Warning"
      ( \o ->
          AutoscalerList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON AutoscalerList_Warning where
  toJSON AutoscalerList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newAutoscalerList_Warning_DataItem' smart constructor.
data AutoscalerList_Warning_DataItem = AutoscalerList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AutoscalerList_Warning_DataItem' with the minimum fields required to make a request.
newAutoscalerList_Warning_DataItem ::
  AutoscalerList_Warning_DataItem
newAutoscalerList_Warning_DataItem =
  AutoscalerList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    AutoscalerList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "AutoscalerList_Warning_DataItem"
      ( \o ->
          AutoscalerList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON AutoscalerList_Warning_DataItem where
  toJSON AutoscalerList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newAutoscalerStatusDetails' smart constructor.
data AutoscalerStatusDetails = AutoscalerStatusDetails
  { -- | The status message.
    message :: (Core.Maybe Core.Text),
    -- | The type of error, warning, or notice returned. Current set of possible values: - ALL/INSTANCES/UNHEALTHY (WARNING): All instances in the instance group are unhealthy (not in RUNNING state). - BACKEND/SERVICE/DOES/NOT/EXIST (ERROR): There is no backend service attached to the instance group. - CAPPED/AT/MAX/NUM/REPLICAS (WARNING): Autoscaler recommends a size greater than maxNumReplicas. - CUSTOM/METRIC/DATA/POINTS/TOO/SPARSE (WARNING): The custom metric samples are not exported often enough to be a credible base for autoscaling. - CUSTOM/METRIC/INVALID (ERROR): The custom metric that was specified does not exist or does not have the necessary labels. - MIN/EQUALS/MAX (WARNING): The minNumReplicas is equal to maxNumReplicas. This means the autoscaler cannot add or remove instances from the instance group. - MISSING/CUSTOM/METRIC/DATA/POINTS (WARNING): The autoscaler did not receive any data from the custom metric configured for autoscaling. - MISSING/LOAD/BALANCING/DATA/POINTS (WARNING): The autoscaler is
    -- configured to scale based on a load balancing signal but the instance group has not received any requests from the load balancer. - MODE/OFF (WARNING): Autoscaling is turned off. The number of instances in the group won\'t change automatically. The autoscaling configuration is preserved. - MODE/ONLY/UP (WARNING): Autoscaling is in the \"Autoscale only out\" mode. The autoscaler can add instances but not remove any. - MORE/THAN/ONE/BACKEND/SERVICE (ERROR): The instance group cannot be autoscaled because it has more than one backend service attached to it. - NOT/ENOUGH/QUOTA/AVAILABLE (ERROR): There is insufficient quota for the necessary resources, such as CPU or number of instances. - REGION/RESOURCE/STOCKOUT (ERROR): Shown only for regional autoscalers: there is a resource stockout in the chosen region. - SCALING/TARGET/DOES/NOT/EXIST (ERROR): The target to be scaled does not exist. - UNSUPPORTED/MAX/RATE/LOAD/BALANCING/CONFIGURATION (ERROR): Autoscaling does not work with an HTTP\/S load balancer that has
    -- been configured for maxRate. - ZONE/RESOURCE/STOCKOUT (ERROR): For zonal autoscalers: there is a resource stockout in the chosen zone. For regional autoscalers: in at least one of the zones you\'re using there is a resource stockout. New values might be added in the future. Some of the values might not be available in all API versions.
    type' :: (Core.Maybe AutoscalerStatusDetails_Type)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AutoscalerStatusDetails' with the minimum fields required to make a request.
newAutoscalerStatusDetails ::
  AutoscalerStatusDetails
newAutoscalerStatusDetails =
  AutoscalerStatusDetails {message = Core.Nothing, type' = Core.Nothing}

instance Core.FromJSON AutoscalerStatusDetails where
  parseJSON =
    Core.withObject
      "AutoscalerStatusDetails"
      ( \o ->
          AutoscalerStatusDetails
            Core.<$> (o Core..:? "message") Core.<*> (o Core..:? "type")
      )

instance Core.ToJSON AutoscalerStatusDetails where
  toJSON AutoscalerStatusDetails {..} =
    Core.object
      ( Core.catMaybes
          [ ("message" Core..=) Core.<$> message,
            ("type" Core..=) Core.<$> type'
          ]
      )

--
-- /See:/ 'newAutoscalersScopedList' smart constructor.
data AutoscalersScopedList = AutoscalersScopedList
  { -- | [Output Only] A list of autoscalers contained in this scope.
    autoscalers :: (Core.Maybe [Autoscaler]),
    -- | [Output Only] Informational warning which replaces the list of autoscalers when the list is empty.
    warning :: (Core.Maybe AutoscalersScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AutoscalersScopedList' with the minimum fields required to make a request.
newAutoscalersScopedList ::
  AutoscalersScopedList
newAutoscalersScopedList =
  AutoscalersScopedList {autoscalers = Core.Nothing, warning = Core.Nothing}

instance Core.FromJSON AutoscalersScopedList where
  parseJSON =
    Core.withObject
      "AutoscalersScopedList"
      ( \o ->
          AutoscalersScopedList
            Core.<$> (o Core..:? "autoscalers")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON AutoscalersScopedList where
  toJSON AutoscalersScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("autoscalers" Core..=) Core.<$> autoscalers,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning which replaces the list of autoscalers when the list is empty.
--
-- /See:/ 'newAutoscalersScopedList_Warning' smart constructor.
data AutoscalersScopedList_Warning = AutoscalersScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe AutoscalersScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [AutoscalersScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AutoscalersScopedList_Warning' with the minimum fields required to make a request.
newAutoscalersScopedList_Warning ::
  AutoscalersScopedList_Warning
newAutoscalersScopedList_Warning =
  AutoscalersScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON AutoscalersScopedList_Warning where
  parseJSON =
    Core.withObject
      "AutoscalersScopedList_Warning"
      ( \o ->
          AutoscalersScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON AutoscalersScopedList_Warning where
  toJSON AutoscalersScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newAutoscalersScopedList_Warning_DataItem' smart constructor.
data AutoscalersScopedList_Warning_DataItem = AutoscalersScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AutoscalersScopedList_Warning_DataItem' with the minimum fields required to make a request.
newAutoscalersScopedList_Warning_DataItem ::
  AutoscalersScopedList_Warning_DataItem
newAutoscalersScopedList_Warning_DataItem =
  AutoscalersScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    AutoscalersScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "AutoscalersScopedList_Warning_DataItem"
      ( \o ->
          AutoscalersScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    AutoscalersScopedList_Warning_DataItem
  where
  toJSON AutoscalersScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Cloud Autoscaler policy.
--
-- /See:/ 'newAutoscalingPolicy' smart constructor.
data AutoscalingPolicy = AutoscalingPolicy
  { -- | The number of seconds that the autoscaler waits before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. The default time autoscaler waits is 60 seconds. Virtual machine initialization times might vary because of numerous factors. We recommend that you test how long an instance may take to initialize. To do this, create an instance and time the startup process.
    coolDownPeriodSec :: (Core.Maybe Core.Int32),
    -- | Defines the CPU utilization policy that allows the autoscaler to scale based on the average CPU utilization of a managed instance group.
    cpuUtilization :: (Core.Maybe AutoscalingPolicyCpuUtilization),
    -- | Configuration parameters of autoscaling based on a custom metric.
    customMetricUtilizations :: (Core.Maybe [AutoscalingPolicyCustomMetricUtilization]),
    -- | Configuration parameters of autoscaling based on load balancer.
    loadBalancingUtilization :: (Core.Maybe AutoscalingPolicyLoadBalancingUtilization),
    -- | The maximum number of instances that the autoscaler can scale out to. This is required when creating or updating an autoscaler. The maximum number of replicas must not be lower than minimal number of replicas.
    maxNumReplicas :: (Core.Maybe Core.Int32),
    -- | The minimum number of replicas that the autoscaler can scale in to. This cannot be less than 0. If not provided, autoscaler chooses a default value depending on maximum number of instances allowed.
    minNumReplicas :: (Core.Maybe Core.Int32),
    -- | Defines operating mode for this policy.
    mode :: (Core.Maybe AutoscalingPolicy_Mode),
    -- |
    scaleInControl :: (Core.Maybe AutoscalingPolicyScaleInControl),
    -- | Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min/required/replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed.
    scalingSchedules :: (Core.Maybe AutoscalingPolicy_ScalingSchedules)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AutoscalingPolicy' with the minimum fields required to make a request.
newAutoscalingPolicy ::
  AutoscalingPolicy
newAutoscalingPolicy =
  AutoscalingPolicy
    { coolDownPeriodSec = Core.Nothing,
      cpuUtilization = Core.Nothing,
      customMetricUtilizations = Core.Nothing,
      loadBalancingUtilization = Core.Nothing,
      maxNumReplicas = Core.Nothing,
      minNumReplicas = Core.Nothing,
      mode = Core.Nothing,
      scaleInControl = Core.Nothing,
      scalingSchedules = Core.Nothing
    }

instance Core.FromJSON AutoscalingPolicy where
  parseJSON =
    Core.withObject
      "AutoscalingPolicy"
      ( \o ->
          AutoscalingPolicy
            Core.<$> (o Core..:? "coolDownPeriodSec")
            Core.<*> (o Core..:? "cpuUtilization")
            Core.<*> (o Core..:? "customMetricUtilizations")
            Core.<*> (o Core..:? "loadBalancingUtilization")
            Core.<*> (o Core..:? "maxNumReplicas")
            Core.<*> (o Core..:? "minNumReplicas")
            Core.<*> (o Core..:? "mode")
            Core.<*> (o Core..:? "scaleInControl")
            Core.<*> (o Core..:? "scalingSchedules")
      )

instance Core.ToJSON AutoscalingPolicy where
  toJSON AutoscalingPolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("coolDownPeriodSec" Core..=)
              Core.<$> coolDownPeriodSec,
            ("cpuUtilization" Core..=) Core.<$> cpuUtilization,
            ("customMetricUtilizations" Core..=)
              Core.<$> customMetricUtilizations,
            ("loadBalancingUtilization" Core..=)
              Core.<$> loadBalancingUtilization,
            ("maxNumReplicas" Core..=) Core.<$> maxNumReplicas,
            ("minNumReplicas" Core..=) Core.<$> minNumReplicas,
            ("mode" Core..=) Core.<$> mode,
            ("scaleInControl" Core..=) Core.<$> scaleInControl,
            ("scalingSchedules" Core..=)
              Core.<$> scalingSchedules
          ]
      )

-- | Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler, and they can overlap. During overlapping periods the greatest min/required/replicas of all scaling schedules is applied. Up to 128 scaling schedules are allowed.
--
-- /See:/ 'newAutoscalingPolicy_ScalingSchedules' smart constructor.
newtype AutoscalingPolicy_ScalingSchedules = AutoscalingPolicy_ScalingSchedules
  { -- |
    additional :: (Core.HashMap Core.Text AutoscalingPolicyScalingSchedule)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AutoscalingPolicy_ScalingSchedules' with the minimum fields required to make a request.
newAutoscalingPolicy_ScalingSchedules ::
  -- |  See 'additional'.
  Core.HashMap Core.Text AutoscalingPolicyScalingSchedule ->
  AutoscalingPolicy_ScalingSchedules
newAutoscalingPolicy_ScalingSchedules additional =
  AutoscalingPolicy_ScalingSchedules {additional = additional}

instance
  Core.FromJSON
    AutoscalingPolicy_ScalingSchedules
  where
  parseJSON =
    Core.withObject
      "AutoscalingPolicy_ScalingSchedules"
      ( \o ->
          AutoscalingPolicy_ScalingSchedules
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    AutoscalingPolicy_ScalingSchedules
  where
  toJSON AutoscalingPolicy_ScalingSchedules {..} =
    Core.toJSON additional

-- | CPU utilization policy.
--
-- /See:/ 'newAutoscalingPolicyCpuUtilization' smart constructor.
data AutoscalingPolicyCpuUtilization = AutoscalingPolicyCpuUtilization
  { -- | Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are: * NONE (default). No predictive method is used. The autoscaler scales the group to meet current demand based on real-time metrics. * OPTIMIZE_AVAILABILITY. Predictive autoscaling improves availability by monitoring daily and weekly load patterns and scaling out ahead of anticipated demand.
    predictiveMethod :: (Core.Maybe AutoscalingPolicyCpuUtilization_PredictiveMethod),
    -- | The target CPU utilization that the autoscaler maintains. Must be a float value in the range (0, 1]. If not specified, the default is 0.6. If the CPU level is below the target utilization, the autoscaler scales in the number of instances until it reaches the minimum number of instances you specified or until the average CPU of your instances reaches the target utilization. If the average CPU is above the target utilization, the autoscaler scales out until it reaches the maximum number of instances you specified or until the average utilization reaches the target utilization.
    utilizationTarget :: (Core.Maybe Core.Double)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AutoscalingPolicyCpuUtilization' with the minimum fields required to make a request.
newAutoscalingPolicyCpuUtilization ::
  AutoscalingPolicyCpuUtilization
newAutoscalingPolicyCpuUtilization =
  AutoscalingPolicyCpuUtilization
    { predictiveMethod = Core.Nothing,
      utilizationTarget = Core.Nothing
    }

instance
  Core.FromJSON
    AutoscalingPolicyCpuUtilization
  where
  parseJSON =
    Core.withObject
      "AutoscalingPolicyCpuUtilization"
      ( \o ->
          AutoscalingPolicyCpuUtilization
            Core.<$> (o Core..:? "predictiveMethod")
            Core.<*> (o Core..:? "utilizationTarget")
      )

instance Core.ToJSON AutoscalingPolicyCpuUtilization where
  toJSON AutoscalingPolicyCpuUtilization {..} =
    Core.object
      ( Core.catMaybes
          [ ("predictiveMethod" Core..=)
              Core.<$> predictiveMethod,
            ("utilizationTarget" Core..=)
              Core.<$> utilizationTarget
          ]
      )

-- | Custom utilization metric policy.
--
-- /See:/ 'newAutoscalingPolicyCustomMetricUtilization' smart constructor.
data AutoscalingPolicyCustomMetricUtilization = AutoscalingPolicyCustomMetricUtilization
  { -- | A filter string, compatible with a Stackdriver Monitoring filter string for TimeSeries.list API call. This filter is used to select a specific TimeSeries for the purpose of autoscaling and to determine whether the metric is exporting per-instance or per-group data. For the filter to be valid for autoscaling purposes, the following rules apply: - You can only use the AND operator for joining selectors. - You can only use direct equality comparison operator (=) without any functions for each selector. - You can specify the metric in both the filter string and in the metric field. However, if specified in both places, the metric must be identical. - The monitored resource type determines what kind of values are expected for the metric. If it is a gce/instance, the autoscaler expects the metric to include a separate TimeSeries for each instance in a group. In such a case, you cannot filter on resource labels. If the resource type is any other value, the autoscaler expects this metric to contain values that apply
    -- to the entire autoscaled instance group and resource label filtering can be performed to point autoscaler at the correct TimeSeries to scale upon. This is called a /per-group metric/ for the purpose of autoscaling. If not specified, the type defaults to gce/instance. Try to provide a filter that is selective enough to pick just one TimeSeries for the autoscaled group or for each of the instances (if you are using gce_instance resource type). If multiple TimeSeries are returned upon the query execution, the autoscaler will sum their respective values to obtain its scaling value.
    filter :: (Core.Maybe Core.Text),
    -- | The identifier (type) of the Stackdriver Monitoring metric. The metric cannot have negative values. The metric must have a value type of INT64 or DOUBLE.
    metric :: (Core.Maybe Core.Text),
    -- | If scaling is based on a per-group metric value that represents the total amount of work to be done or resource usage, set this value to an amount assigned for a single instance of the scaled group. Autoscaler keeps the number of instances proportional to the value of this metric. The metric itself does not change value due to group resizing. A good metric to use with the target is for example pubsub.googleapis.com\/subscription\/num/undelivered/messages or a custom metric exporting the total number of requests coming to your instances. A bad example would be a metric exporting an average or median latency, since this value can\'t include a chunk assignable to a single instance, it could be better used with utilization_target instead.
    singleInstanceAssignment :: (Core.Maybe Core.Double),
    -- | The target value of the metric that autoscaler maintains. This must be a positive value. A utilization metric scales number of virtual machines handling requests to increase or decrease proportionally to the metric. For example, a good metric to use as a utilization/target is https:\/\/www.googleapis.com\/compute\/v1\/instance\/network\/received/bytes_count. The autoscaler works to keep this value constant for each of the instances.
    utilizationTarget :: (Core.Maybe Core.Double),
    -- | Defines how target utilization value is expressed for a Stackdriver Monitoring metric. Either GAUGE, DELTA/PER/SECOND, or DELTA/PER/MINUTE.
    utilizationTargetType ::
      ( Core.Maybe
          AutoscalingPolicyCustomMetricUtilization_UtilizationTargetType
      )
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AutoscalingPolicyCustomMetricUtilization' with the minimum fields required to make a request.
newAutoscalingPolicyCustomMetricUtilization ::
  AutoscalingPolicyCustomMetricUtilization
newAutoscalingPolicyCustomMetricUtilization =
  AutoscalingPolicyCustomMetricUtilization
    { filter = Core.Nothing,
      metric = Core.Nothing,
      singleInstanceAssignment = Core.Nothing,
      utilizationTarget = Core.Nothing,
      utilizationTargetType = Core.Nothing
    }

instance
  Core.FromJSON
    AutoscalingPolicyCustomMetricUtilization
  where
  parseJSON =
    Core.withObject
      "AutoscalingPolicyCustomMetricUtilization"
      ( \o ->
          AutoscalingPolicyCustomMetricUtilization
            Core.<$> (o Core..:? "filter")
            Core.<*> (o Core..:? "metric")
            Core.<*> (o Core..:? "singleInstanceAssignment")
            Core.<*> (o Core..:? "utilizationTarget")
            Core.<*> (o Core..:? "utilizationTargetType")
      )

instance
  Core.ToJSON
    AutoscalingPolicyCustomMetricUtilization
  where
  toJSON AutoscalingPolicyCustomMetricUtilization {..} =
    Core.object
      ( Core.catMaybes
          [ ("filter" Core..=) Core.<$> filter,
            ("metric" Core..=) Core.<$> metric,
            ("singleInstanceAssignment" Core..=)
              Core.<$> singleInstanceAssignment,
            ("utilizationTarget" Core..=)
              Core.<$> utilizationTarget,
            ("utilizationTargetType" Core..=)
              Core.<$> utilizationTargetType
          ]
      )

-- | Configuration parameters of autoscaling based on load balancing.
--
-- /See:/ 'newAutoscalingPolicyLoadBalancingUtilization' smart constructor.
newtype AutoscalingPolicyLoadBalancingUtilization = AutoscalingPolicyLoadBalancingUtilization
  { -- | Fraction of backend capacity utilization (set in HTTP(S) load balancing configuration) that the autoscaler maintains. Must be a positive float value. If not defined, the default is 0.8.
    utilizationTarget :: (Core.Maybe Core.Double)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AutoscalingPolicyLoadBalancingUtilization' with the minimum fields required to make a request.
newAutoscalingPolicyLoadBalancingUtilization ::
  AutoscalingPolicyLoadBalancingUtilization
newAutoscalingPolicyLoadBalancingUtilization =
  AutoscalingPolicyLoadBalancingUtilization {utilizationTarget = Core.Nothing}

instance
  Core.FromJSON
    AutoscalingPolicyLoadBalancingUtilization
  where
  parseJSON =
    Core.withObject
      "AutoscalingPolicyLoadBalancingUtilization"
      ( \o ->
          AutoscalingPolicyLoadBalancingUtilization
            Core.<$> (o Core..:? "utilizationTarget")
      )

instance
  Core.ToJSON
    AutoscalingPolicyLoadBalancingUtilization
  where
  toJSON AutoscalingPolicyLoadBalancingUtilization {..} =
    Core.object
      ( Core.catMaybes
          [ ("utilizationTarget" Core..=)
              Core.<$> utilizationTarget
          ]
      )

-- | Configuration that allows for slower scale in so that even if Autoscaler recommends an abrupt scale in of a MIG, it will be throttled as specified by the parameters below.
--
-- /See:/ 'newAutoscalingPolicyScaleInControl' smart constructor.
data AutoscalingPolicyScaleInControl = AutoscalingPolicyScaleInControl
  { -- | Maximum allowed number (or %) of VMs that can be deducted from the peak recommendation during the window autoscaler looks at when computing recommendations. Possibly all these VMs can be deleted at once so user service needs to be prepared to lose that many VMs in one step.
    maxScaledInReplicas :: (Core.Maybe FixedOrPercent),
    -- | How far back autoscaling looks when computing recommendations to include directives regarding slower scale in, as described above.
    timeWindowSec :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AutoscalingPolicyScaleInControl' with the minimum fields required to make a request.
newAutoscalingPolicyScaleInControl ::
  AutoscalingPolicyScaleInControl
newAutoscalingPolicyScaleInControl =
  AutoscalingPolicyScaleInControl
    { maxScaledInReplicas = Core.Nothing,
      timeWindowSec = Core.Nothing
    }

instance
  Core.FromJSON
    AutoscalingPolicyScaleInControl
  where
  parseJSON =
    Core.withObject
      "AutoscalingPolicyScaleInControl"
      ( \o ->
          AutoscalingPolicyScaleInControl
            Core.<$> (o Core..:? "maxScaledInReplicas")
            Core.<*> (o Core..:? "timeWindowSec")
      )

instance Core.ToJSON AutoscalingPolicyScaleInControl where
  toJSON AutoscalingPolicyScaleInControl {..} =
    Core.object
      ( Core.catMaybes
          [ ("maxScaledInReplicas" Core..=)
              Core.<$> maxScaledInReplicas,
            ("timeWindowSec" Core..=) Core.<$> timeWindowSec
          ]
      )

-- | Scaling based on user-defined schedule. The message describes a single scaling schedule. A scaling schedule changes the minimum number of VM instances an autoscaler can recommend, which can trigger scaling out.
--
-- /See:/ 'newAutoscalingPolicyScalingSchedule' smart constructor.
data AutoscalingPolicyScalingSchedule = AutoscalingPolicyScalingSchedule
  { -- | A description of a scaling schedule.
    description :: (Core.Maybe Core.Text),
    -- | A boolean value that specifies whether a scaling schedule can influence autoscaler recommendations. If set to true, then a scaling schedule has no effect. This field is optional, and its value is false by default.
    disabled :: (Core.Maybe Core.Bool),
    -- | The duration of time intervals, in seconds, for which this scaling schedule is to run. The minimum allowed value is 300. This field is required.
    durationSec :: (Core.Maybe Core.Int32),
    -- | The minimum number of VM instances that the autoscaler will recommend in time intervals starting according to schedule. This field is required.
    minRequiredReplicas :: (Core.Maybe Core.Int32),
    -- | The start timestamps of time intervals when this scaling schedule is to provide a scaling signal. This field uses the extended cron format (with an optional year field). The expression can describe a single timestamp if the optional year is set, in which case the scaling schedule runs once. The schedule is interpreted with respect to time_zone. This field is required. Note: These timestamps only describe when autoscaler starts providing the scaling signal. The VMs need additional time to become serving.
    schedule :: (Core.Maybe Core.Text),
    -- | The time zone to use when interpreting the schedule. The value of this field must be a time zone name from the tz database: http:\/\/en.wikipedia.org\/wiki\/Tz_database. This field is assigned a default value of “UTC” if left empty.
    timeZone :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'AutoscalingPolicyScalingSchedule' with the minimum fields required to make a request.
newAutoscalingPolicyScalingSchedule ::
  AutoscalingPolicyScalingSchedule
newAutoscalingPolicyScalingSchedule =
  AutoscalingPolicyScalingSchedule
    { description = Core.Nothing,
      disabled = Core.Nothing,
      durationSec = Core.Nothing,
      minRequiredReplicas = Core.Nothing,
      schedule = Core.Nothing,
      timeZone = Core.Nothing
    }

instance
  Core.FromJSON
    AutoscalingPolicyScalingSchedule
  where
  parseJSON =
    Core.withObject
      "AutoscalingPolicyScalingSchedule"
      ( \o ->
          AutoscalingPolicyScalingSchedule
            Core.<$> (o Core..:? "description")
            Core.<*> (o Core..:? "disabled")
            Core.<*> (o Core..:? "durationSec")
            Core.<*> (o Core..:? "minRequiredReplicas")
            Core.<*> (o Core..:? "schedule")
            Core.<*> (o Core..:? "timeZone")
      )

instance Core.ToJSON AutoscalingPolicyScalingSchedule where
  toJSON AutoscalingPolicyScalingSchedule {..} =
    Core.object
      ( Core.catMaybes
          [ ("description" Core..=) Core.<$> description,
            ("disabled" Core..=) Core.<$> disabled,
            ("durationSec" Core..=) Core.<$> durationSec,
            ("minRequiredReplicas" Core..=)
              Core.<$> minRequiredReplicas,
            ("schedule" Core..=) Core.<$> schedule,
            ("timeZone" Core..=) Core.<$> timeZone
          ]
      )

-- | Message containing information of one individual backend.
--
-- /See:/ 'newBackend' smart constructor.
data Backend = Backend
  { -- | Specifies how to determine whether the backend of a load balancer can handle additional traffic or is fully loaded. For usage guidelines, see Connection balancing mode. Backends must use compatible balancing modes. For more information, see Supported balancing modes and target capacity settings and Restrictions and guidance for instance groups. Note: Currently, if you use the API to configure incompatible balancing modes, the configuration might be accepted even though it has no impact and is ignored. Specifically, Backend.maxUtilization is ignored when Backend.balancingMode is RATE. In the future, this incompatible combination will be rejected.
    balancingMode :: (Core.Maybe Backend_BalancingMode),
    -- | A multiplier applied to the backend\'s target capacity of its balancing mode. The default value is 1, which means the group serves up to 100% of its configured capacity (depending on balancingMode). A setting of 0 means the group is completely drained, offering 0% of its available capacity. The valid ranges are 0.0 and [0.1,1.0]. You cannot configure a setting larger than 0 and smaller than 0.1. You cannot configure a setting of 0 when there is only one backend attached to the backend service. Not available with backends that don\'t support using a balancingMode. This includes backends such as global internet NEGs, regional serverless NEGs, and PSC NEGs.
    capacityScaler :: (Core.Maybe Core.Double),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | This field designates whether this is a failover backend. More than one failover backend can be configured for a given BackendService.
    failover :: (Core.Maybe Core.Bool),
    -- | The fully-qualified URL of an instance group or network endpoint group (NEG) resource. To determine what types of backends a load balancer supports, see the <https://cloud.google.com/load-balancing/docs/backend-service#backends Backend services overview>. You must use the /fully-qualified/ URL (starting with https:\/\/www.googleapis.com\/) to specify the instance group or NEG. Partial URLs are not supported.
    group' :: (Core.Maybe Core.Text),
    -- | Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend\'s balancingMode is RATE.
    maxConnections :: (Core.Maybe Core.Int32),
    -- | Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend\'s balancingMode is RATE.
    maxConnectionsPerEndpoint :: (Core.Maybe Core.Int32),
    -- | Defines a target maximum number of simultaneous connections. For usage guidelines, see Connection balancing mode and Utilization balancing mode. Not available if the backend\'s balancingMode is RATE.
    maxConnectionsPerInstance :: (Core.Maybe Core.Int32),
    -- | Defines a maximum number of HTTP requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend\'s balancingMode is CONNECTION.
    maxRate :: (Core.Maybe Core.Int32),
    -- | Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend\'s balancingMode is CONNECTION.
    maxRatePerEndpoint :: (Core.Maybe Core.Double),
    -- | Defines a maximum target for requests per second (RPS). For usage guidelines, see Rate balancing mode and Utilization balancing mode. Not available if the backend\'s balancingMode is CONNECTION.
    maxRatePerInstance :: (Core.Maybe Core.Double),
    -- | Optional parameter to define a target capacity for the UTILIZATION balancing mode. The valid range is [0.0, 1.0]. For usage guidelines, see Utilization balancing mode.
    maxUtilization :: (Core.Maybe Core.Double)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Backend' with the minimum fields required to make a request.
newBackend ::
  Backend
newBackend =
  Backend
    { balancingMode = Core.Nothing,
      capacityScaler = Core.Nothing,
      description = Core.Nothing,
      failover = Core.Nothing,
      group' = Core.Nothing,
      maxConnections = Core.Nothing,
      maxConnectionsPerEndpoint = Core.Nothing,
      maxConnectionsPerInstance = Core.Nothing,
      maxRate = Core.Nothing,
      maxRatePerEndpoint = Core.Nothing,
      maxRatePerInstance = Core.Nothing,
      maxUtilization = Core.Nothing
    }

instance Core.FromJSON Backend where
  parseJSON =
    Core.withObject
      "Backend"
      ( \o ->
          Backend
            Core.<$> (o Core..:? "balancingMode")
            Core.<*> (o Core..:? "capacityScaler")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "failover")
            Core.<*> (o Core..:? "group")
            Core.<*> (o Core..:? "maxConnections")
            Core.<*> (o Core..:? "maxConnectionsPerEndpoint")
            Core.<*> (o Core..:? "maxConnectionsPerInstance")
            Core.<*> (o Core..:? "maxRate")
            Core.<*> (o Core..:? "maxRatePerEndpoint")
            Core.<*> (o Core..:? "maxRatePerInstance")
            Core.<*> (o Core..:? "maxUtilization")
      )

instance Core.ToJSON Backend where
  toJSON Backend {..} =
    Core.object
      ( Core.catMaybes
          [ ("balancingMode" Core..=) Core.<$> balancingMode,
            ("capacityScaler" Core..=) Core.<$> capacityScaler,
            ("description" Core..=) Core.<$> description,
            ("failover" Core..=) Core.<$> failover,
            ("group" Core..=) Core.<$> group',
            ("maxConnections" Core..=) Core.<$> maxConnections,
            ("maxConnectionsPerEndpoint" Core..=)
              Core.<$> maxConnectionsPerEndpoint,
            ("maxConnectionsPerInstance" Core..=)
              Core.<$> maxConnectionsPerInstance,
            ("maxRate" Core..=) Core.<$> maxRate,
            ("maxRatePerEndpoint" Core..=)
              Core.<$> maxRatePerEndpoint,
            ("maxRatePerInstance" Core..=)
              Core.<$> maxRatePerInstance,
            ("maxUtilization" Core..=) Core.<$> maxUtilization
          ]
      )

-- | Represents a Cloud Storage Bucket resource. This Cloud Storage bucket resource is referenced by a URL map of a load balancer. For more information, read Backend Buckets.
--
-- /See:/ 'newBackendBucket' smart constructor.
data BackendBucket = BackendBucket
  { -- | Cloud Storage bucket name.
    bucketName :: (Core.Maybe Core.Text),
    -- | Cloud CDN configuration for this BackendBucket.
    cdnPolicy :: (Core.Maybe BackendBucketCdnPolicy),
    -- | Compress text responses using Brotli or gzip compression, based on the client\'s Accept-Encoding header.
    compressionMode :: (Core.Maybe BackendBucket_CompressionMode),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | Headers that the HTTP\/S load balancer should add to proxied responses.
    customResponseHeaders :: (Core.Maybe [Core.Text]),
    -- | An optional textual description of the resource; provided by the client when the resource is created.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The resource URL for the edge security policy associated with this backend bucket.
    edgeSecurityPolicy :: (Core.Maybe Core.Text),
    -- | If true, enable Cloud CDN for this BackendBucket.
    enableCdn :: (Core.Maybe Core.Bool),
    -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | Type of the resource.
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendBucket' with the minimum fields required to make a request.
newBackendBucket ::
  BackendBucket
newBackendBucket =
  BackendBucket
    { bucketName = Core.Nothing,
      cdnPolicy = Core.Nothing,
      compressionMode = Core.Nothing,
      creationTimestamp = Core.Nothing,
      customResponseHeaders = Core.Nothing,
      description = Core.Nothing,
      edgeSecurityPolicy = Core.Nothing,
      enableCdn = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#backendBucket",
      name = Core.Nothing,
      selfLink = Core.Nothing
    }

instance Core.FromJSON BackendBucket where
  parseJSON =
    Core.withObject
      "BackendBucket"
      ( \o ->
          BackendBucket
            Core.<$> (o Core..:? "bucketName")
            Core.<*> (o Core..:? "cdnPolicy")
            Core.<*> (o Core..:? "compressionMode")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "customResponseHeaders")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "edgeSecurityPolicy")
            Core.<*> (o Core..:? "enableCdn")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#backendBucket")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "selfLink")
      )

instance Core.ToJSON BackendBucket where
  toJSON BackendBucket {..} =
    Core.object
      ( Core.catMaybes
          [ ("bucketName" Core..=) Core.<$> bucketName,
            ("cdnPolicy" Core..=) Core.<$> cdnPolicy,
            ("compressionMode" Core..=) Core.<$> compressionMode,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("customResponseHeaders" Core..=)
              Core.<$> customResponseHeaders,
            ("description" Core..=) Core.<$> description,
            ("edgeSecurityPolicy" Core..=)
              Core.<$> edgeSecurityPolicy,
            ("enableCdn" Core..=) Core.<$> enableCdn,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("selfLink" Core..=) Core.<$> selfLink
          ]
      )

-- | Message containing Cloud CDN configuration for a backend bucket.
--
-- /See:/ 'newBackendBucketCdnPolicy' smart constructor.
data BackendBucketCdnPolicy = BackendBucketCdnPolicy
  { -- | Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
    bypassCacheOnRequestHeaders :: (Core.Maybe [BackendBucketCdnPolicyBypassCacheOnRequestHeader]),
    -- | The CacheKeyPolicy for this CdnPolicy.
    cacheKeyPolicy :: (Core.Maybe BackendBucketCdnPolicyCacheKeyPolicy),
    -- | Specifies the cache setting for all responses from this backend. The possible values are: USE/ORIGIN/HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google\'s edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE/CACHE/ALL Cache all content, ignoring any \"private\", \"no-store\" or \"no-cache\" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE/ALL/STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
    cacheMode :: (Core.Maybe BackendBucketCdnPolicy_CacheMode),
    -- | Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE/CACHE/ALL, the lesser of client/ttl and default/ttl is used for the response max-age directive, along with a \"public\" directive. For cacheable content in CACHE/ALL/STATIC mode, client/ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client/ttl and default_ttl, and also ensures a \"public\" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 31,622,400s (1 year).
    clientTtl :: (Core.Maybe Core.Int32),
    -- | Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of \"0\" means \"always revalidate\". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE/CACHE/ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    defaultTtl :: (Core.Maybe Core.Int32),
    -- | Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of \"0\" means \"always revalidate\". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    maxTtl :: (Core.Maybe Core.Int32),
    -- | Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE/ALL/STATIC or USE/ORIGIN/HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE/CACHE/ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative/caching/policy.
    negativeCaching :: (Core.Maybe Core.Bool),
    -- | Sets a cache TTL for the specified HTTP status code. negative/caching must be enabled to configure negative/caching/policy. Omitting the policy and leaving negative/caching enabled will use Cloud CDN\'s default cache TTLs. Note that when specifying an explicit negative/caching/policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
    negativeCachingPolicy :: (Core.Maybe [BackendBucketCdnPolicyNegativeCachingPolicy]),
    -- | If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
    requestCoalescing :: (Core.Maybe Core.Bool),
    -- | Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default \"max-stale\" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
    serveWhileStale :: (Core.Maybe Core.Int32),
    -- | Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a \"Cache-Control: public, max-age=[TTL]\" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
    signedUrlCacheMaxAgeSec :: (Core.Maybe Core.Int64),
    -- | [Output Only] Names of the keys for signing request URLs.
    signedUrlKeyNames :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendBucketCdnPolicy' with the minimum fields required to make a request.
newBackendBucketCdnPolicy ::
  BackendBucketCdnPolicy
newBackendBucketCdnPolicy =
  BackendBucketCdnPolicy
    { bypassCacheOnRequestHeaders = Core.Nothing,
      cacheKeyPolicy = Core.Nothing,
      cacheMode = Core.Nothing,
      clientTtl = Core.Nothing,
      defaultTtl = Core.Nothing,
      maxTtl = Core.Nothing,
      negativeCaching = Core.Nothing,
      negativeCachingPolicy = Core.Nothing,
      requestCoalescing = Core.Nothing,
      serveWhileStale = Core.Nothing,
      signedUrlCacheMaxAgeSec = Core.Nothing,
      signedUrlKeyNames = Core.Nothing
    }

instance Core.FromJSON BackendBucketCdnPolicy where
  parseJSON =
    Core.withObject
      "BackendBucketCdnPolicy"
      ( \o ->
          BackendBucketCdnPolicy
            Core.<$> (o Core..:? "bypassCacheOnRequestHeaders")
            Core.<*> (o Core..:? "cacheKeyPolicy")
            Core.<*> (o Core..:? "cacheMode")
            Core.<*> (o Core..:? "clientTtl")
            Core.<*> (o Core..:? "defaultTtl")
            Core.<*> (o Core..:? "maxTtl")
            Core.<*> (o Core..:? "negativeCaching")
            Core.<*> (o Core..:? "negativeCachingPolicy")
            Core.<*> (o Core..:? "requestCoalescing")
            Core.<*> (o Core..:? "serveWhileStale")
            Core.<*> ( o Core..:? "signedUrlCacheMaxAgeSec"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "signedUrlKeyNames")
      )

instance Core.ToJSON BackendBucketCdnPolicy where
  toJSON BackendBucketCdnPolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("bypassCacheOnRequestHeaders" Core..=)
              Core.<$> bypassCacheOnRequestHeaders,
            ("cacheKeyPolicy" Core..=) Core.<$> cacheKeyPolicy,
            ("cacheMode" Core..=) Core.<$> cacheMode,
            ("clientTtl" Core..=) Core.<$> clientTtl,
            ("defaultTtl" Core..=) Core.<$> defaultTtl,
            ("maxTtl" Core..=) Core.<$> maxTtl,
            ("negativeCaching" Core..=) Core.<$> negativeCaching,
            ("negativeCachingPolicy" Core..=)
              Core.<$> negativeCachingPolicy,
            ("requestCoalescing" Core..=)
              Core.<$> requestCoalescing,
            ("serveWhileStale" Core..=) Core.<$> serveWhileStale,
            ("signedUrlCacheMaxAgeSec" Core..=)
              Core.. Core.AsText
              Core.<$> signedUrlCacheMaxAgeSec,
            ("signedUrlKeyNames" Core..=)
              Core.<$> signedUrlKeyNames
          ]
      )

-- | Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting.
--
-- /See:/ 'newBackendBucketCdnPolicyBypassCacheOnRequestHeader' smart constructor.
newtype BackendBucketCdnPolicyBypassCacheOnRequestHeader = BackendBucketCdnPolicyBypassCacheOnRequestHeader
  { -- | The header field name to match on when bypassing cache. Values are case-insensitive.
    headerName :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendBucketCdnPolicyBypassCacheOnRequestHeader' with the minimum fields required to make a request.
newBackendBucketCdnPolicyBypassCacheOnRequestHeader ::
  BackendBucketCdnPolicyBypassCacheOnRequestHeader
newBackendBucketCdnPolicyBypassCacheOnRequestHeader =
  BackendBucketCdnPolicyBypassCacheOnRequestHeader {headerName = Core.Nothing}

instance
  Core.FromJSON
    BackendBucketCdnPolicyBypassCacheOnRequestHeader
  where
  parseJSON =
    Core.withObject
      "BackendBucketCdnPolicyBypassCacheOnRequestHeader"
      ( \o ->
          BackendBucketCdnPolicyBypassCacheOnRequestHeader
            Core.<$> (o Core..:? "headerName")
      )

instance
  Core.ToJSON
    BackendBucketCdnPolicyBypassCacheOnRequestHeader
  where
  toJSON
    BackendBucketCdnPolicyBypassCacheOnRequestHeader {..} =
      Core.object
        ( Core.catMaybes
            [("headerName" Core..=) Core.<$> headerName]
        )

-- | Message containing what to include in the cache key for a request for Cloud CDN.
--
-- /See:/ 'newBackendBucketCdnPolicyCacheKeyPolicy' smart constructor.
data BackendBucketCdnPolicyCacheKeyPolicy = BackendBucketCdnPolicyCacheKeyPolicy
  { -- | Allows HTTP request headers (by name) to be used in the cache key.
    includeHttpHeaders :: (Core.Maybe [Core.Text]),
    -- | Names of query string parameters to include in cache keys. Default parameters are always included. \'&\' and \'=\' will be percent encoded and not treated as delimiters.
    queryStringWhitelist :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendBucketCdnPolicyCacheKeyPolicy' with the minimum fields required to make a request.
newBackendBucketCdnPolicyCacheKeyPolicy ::
  BackendBucketCdnPolicyCacheKeyPolicy
newBackendBucketCdnPolicyCacheKeyPolicy =
  BackendBucketCdnPolicyCacheKeyPolicy
    { includeHttpHeaders = Core.Nothing,
      queryStringWhitelist = Core.Nothing
    }

instance
  Core.FromJSON
    BackendBucketCdnPolicyCacheKeyPolicy
  where
  parseJSON =
    Core.withObject
      "BackendBucketCdnPolicyCacheKeyPolicy"
      ( \o ->
          BackendBucketCdnPolicyCacheKeyPolicy
            Core.<$> (o Core..:? "includeHttpHeaders")
            Core.<*> (o Core..:? "queryStringWhitelist")
      )

instance
  Core.ToJSON
    BackendBucketCdnPolicyCacheKeyPolicy
  where
  toJSON BackendBucketCdnPolicyCacheKeyPolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("includeHttpHeaders" Core..=)
              Core.<$> includeHttpHeaders,
            ("queryStringWhitelist" Core..=)
              Core.<$> queryStringWhitelist
          ]
      )

-- | Specify CDN TTLs for response error codes.
--
-- /See:/ 'newBackendBucketCdnPolicyNegativeCachingPolicy' smart constructor.
data BackendBucketCdnPolicyNegativeCachingPolicy = BackendBucketCdnPolicyNegativeCachingPolicy
  { -- | The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
    code :: (Core.Maybe Core.Int32),
    -- | The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    ttl :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendBucketCdnPolicyNegativeCachingPolicy' with the minimum fields required to make a request.
newBackendBucketCdnPolicyNegativeCachingPolicy ::
  BackendBucketCdnPolicyNegativeCachingPolicy
newBackendBucketCdnPolicyNegativeCachingPolicy =
  BackendBucketCdnPolicyNegativeCachingPolicy
    { code = Core.Nothing,
      ttl = Core.Nothing
    }

instance
  Core.FromJSON
    BackendBucketCdnPolicyNegativeCachingPolicy
  where
  parseJSON =
    Core.withObject
      "BackendBucketCdnPolicyNegativeCachingPolicy"
      ( \o ->
          BackendBucketCdnPolicyNegativeCachingPolicy
            Core.<$> (o Core..:? "code") Core.<*> (o Core..:? "ttl")
      )

instance
  Core.ToJSON
    BackendBucketCdnPolicyNegativeCachingPolicy
  where
  toJSON
    BackendBucketCdnPolicyNegativeCachingPolicy {..} =
      Core.object
        ( Core.catMaybes
            [ ("code" Core..=) Core.<$> code,
              ("ttl" Core..=) Core.<$> ttl
            ]
        )

-- | Contains a list of BackendBucket resources.
--
-- /See:/ 'newBackendBucketList' smart constructor.
data BackendBucketList = BackendBucketList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of BackendBucket resources.
    items :: (Core.Maybe [BackendBucket]),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe BackendBucketList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendBucketList' with the minimum fields required to make a request.
newBackendBucketList ::
  BackendBucketList
newBackendBucketList =
  BackendBucketList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#backendBucketList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON BackendBucketList where
  parseJSON =
    Core.withObject
      "BackendBucketList"
      ( \o ->
          BackendBucketList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#backendBucketList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON BackendBucketList where
  toJSON BackendBucketList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newBackendBucketList_Warning' smart constructor.
data BackendBucketList_Warning = BackendBucketList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe BackendBucketList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [BackendBucketList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendBucketList_Warning' with the minimum fields required to make a request.
newBackendBucketList_Warning ::
  BackendBucketList_Warning
newBackendBucketList_Warning =
  BackendBucketList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON BackendBucketList_Warning where
  parseJSON =
    Core.withObject
      "BackendBucketList_Warning"
      ( \o ->
          BackendBucketList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON BackendBucketList_Warning where
  toJSON BackendBucketList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newBackendBucketList_Warning_DataItem' smart constructor.
data BackendBucketList_Warning_DataItem = BackendBucketList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendBucketList_Warning_DataItem' with the minimum fields required to make a request.
newBackendBucketList_Warning_DataItem ::
  BackendBucketList_Warning_DataItem
newBackendBucketList_Warning_DataItem =
  BackendBucketList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    BackendBucketList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "BackendBucketList_Warning_DataItem"
      ( \o ->
          BackendBucketList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    BackendBucketList_Warning_DataItem
  where
  toJSON BackendBucketList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Represents a Backend Service resource. A backend service defines how Google Cloud load balancers distribute traffic. The backend service configuration contains a set of values, such as the protocol used to connect to backends, various distribution and session settings, health checks, and timeouts. These settings provide fine-grained control over how your load balancer behaves. Most of the settings have default values that allow for easy configuration if you need to get started quickly. Backend services in Google Compute Engine can be either regionally or globally scoped. * <https://cloud.google.com/compute/docs/reference/rest/v1/backendServices Global> * <https://cloud.google.com/compute/docs/reference/rest/v1/regionBackendServices Regional> For more information, see Backend Services.
--
-- /See:/ 'newBackendService' smart constructor.
data BackendService = BackendService
  { -- | Lifetime of cookies in seconds. This setting is applicable to external and internal HTTP(S) load balancers and Traffic Director and requires GENERATED/COOKIE or HTTP/COOKIE session affinity. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value is two weeks (1,209,600). Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    affinityCookieTtlSec :: (Core.Maybe Core.Int32),
    -- | The list of backends that serve this BackendService.
    backends :: (Core.Maybe [Backend]),
    -- | Cloud CDN configuration for this BackendService. Only available for specified load balancer types.
    cdnPolicy :: (Core.Maybe BackendServiceCdnPolicy),
    -- |
    circuitBreakers :: (Core.Maybe CircuitBreakers),
    -- | Compress text responses using Brotli or gzip compression, based on the client\'s Accept-Encoding header.
    compressionMode :: (Core.Maybe BackendService_CompressionMode),
    -- |
    connectionDraining :: (Core.Maybe ConnectionDraining),
    -- | Connection Tracking configuration for this BackendService. Connection tracking policy settings are only available for Network Load Balancing and Internal TCP\/UDP Load Balancing.
    connectionTrackingPolicy :: (Core.Maybe BackendServiceConnectionTrackingPolicy),
    -- | Consistent Hash-based load balancing can be used to provide soft session affinity based on HTTP headers, cookies or other properties. This load balancing policy is applicable only for HTTP connections. The affinity to a particular destination host will be lost when one or more hosts are added\/removed from the destination service. This field specifies parameters that control consistent hashing. This field is only applicable when localityLbPolicy is set to MAGLEV or RING/HASH. This field is applicable to either: - A regional backend service with the service/protocol set to HTTP, HTTPS, or HTTP2, and load/balancing/scheme set to INTERNAL/MANAGED. - A global backend service with the load/balancing/scheme set to INTERNAL/SELF_MANAGED.
    consistentHash :: (Core.Maybe ConsistentHashLoadBalancerSettings),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | Headers that the load balancer adds to proxied requests. See <https://cloud.google.com/load-balancing/docs/custom-headers Creating custom headers>.
    customRequestHeaders :: (Core.Maybe [Core.Text]),
    -- | Headers that the load balancer adds to proxied responses. See <https://cloud.google.com/load-balancing/docs/custom-headers Creating custom headers>.
    customResponseHeaders :: (Core.Maybe [Core.Text]),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The resource URL for the edge security policy associated with this backend service.
    edgeSecurityPolicy :: (Core.Maybe Core.Text),
    -- | If true, enables Cloud CDN for the backend service of an external HTTP(S) load balancer.
    enableCDN :: (Core.Maybe Core.Bool),
    -- | Requires at least one backend instance group to be defined as a backup (failover) backend. For load balancers that have configurable failover: <https://cloud.google.com/load-balancing/docs/internal/failover-overview Internal TCP\/UDP Load Balancing> and <https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview external TCP\/UDP Load Balancing>.
    failoverPolicy :: (Core.Maybe BackendServiceFailoverPolicy),
    -- | Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a BackendService. An up-to-date fingerprint must be provided in order to update the BackendService, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a BackendService.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | The list of URLs to the healthChecks, httpHealthChecks (legacy), or httpsHealthChecks (legacy) resource for health checking this backend service. Not all backend services support legacy health checks. See Load balancer guide. Currently, at most one health check can be specified for each backend service. Backend services with instance group or zonal NEG backends must have a health check. Backend services with internet or serverless NEG backends must not have a health check.
    healthChecks :: (Core.Maybe [Core.Text]),
    -- | The configurations for Identity-Aware Proxy on this resource. Not available for Internal TCP\/UDP Load Balancing and Network Load Balancing.
    iap :: (Core.Maybe BackendServiceIAP),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of resource. Always compute#backendService for backend services.
    kind :: Core.Text,
    -- | Specifies the load balancer type. A backend service created for one type of load balancer cannot be used with another. For more information, refer to Choosing a load balancer.
    loadBalancingScheme :: (Core.Maybe BackendService_LoadBalancingScheme),
    -- | A list of locality load-balancing policies to be used in order of preference. When you use localityLbPolicies, you must set at least one value for either the localityLbPolicies[].policy or the localityLbPolicies[].customPolicy field. localityLbPolicies overrides any value set in the localityLbPolicy field. For an example of how to use this field, see Define a list of preferred policies. Caution: This field and its children are intended for use in a service mesh that includes gRPC clients only. Envoy proxies can\'t use backend services that have this configuration.
    localityLbPolicies :: (Core.Maybe [BackendServiceLocalityLoadBalancingPolicyConfig]),
    -- | The load balancing algorithm used within the scope of the locality. The possible values are: - ROUND/ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default. - LEAST/REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests. - RING/HASH: The ring\/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition\/removal of a host from a set of N hosts only affects 1\/N of the requests. - RANDOM: The load balancer selects a random healthy host. - ORIGINAL/DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer. - MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and
    -- host selection times. For more information about Maglev, see https:\/\/ai.google\/research\/pubs\/pub44824 This field is applicable to either: - A regional backend service with the service/protocol set to HTTP, HTTPS, or HTTP2, and load/balancing/scheme set to INTERNAL/MANAGED. - A global backend service with the load/balancing/scheme set to INTERNAL/SELF/MANAGED. If sessionAffinity is not NONE, and this field is not set to MAGLEV or RING/HASH, session affinity settings will not take effect. Only ROUND/ROBIN and RING_HASH are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    localityLbPolicy :: (Core.Maybe BackendService_LocalityLbPolicy),
    -- | This field denotes the logging options for the load balancer traffic served by this backend service. If logging is enabled, logs will be exported to Stackdriver.
    logConfig :: (Core.Maybe BackendServiceLogConfig),
    -- | Specifies the default maximum duration (timeout) for streams to this service. Duration is computed from the beginning of the stream until the response has been completely processed, including all retries. A stream that does not complete in this duration is closed. If not specified, there will be no timeout limit, i.e. the maximum duration is infinite. This value can be overridden in the PathMatcher configuration of the UrlMap that references this backend service. This field is only allowed when the loadBalancingScheme of the backend service is INTERNAL/SELF/MANAGED.
    maxStreamDuration :: (Core.Maybe Duration),
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | The URL of the network to which this backend service belongs. This field can only be specified when the load balancing scheme is set to INTERNAL.
    network :: (Core.Maybe Core.Text),
    -- | Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service. If not set, this feature is considered disabled. This field is applicable to either: - A regional backend service with the service/protocol set to HTTP, HTTPS, HTTP2, or GRPC, and load/balancing/scheme set to INTERNAL/MANAGED. - A global backend service with the load/balancing/scheme set to INTERNAL/SELF/MANAGED.
    outlierDetection :: (Core.Maybe OutlierDetection),
    -- | Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80. For Internal TCP\/UDP Load Balancing and Network Load Balancing, omit port.
    port :: (Core.Maybe Core.Int32),
    -- | A named port on a backend instance group representing the port for communication to the backend VMs in that group. The named port must be <https://cloud.google.com/load-balancing/docs/backend-service#named_ports defined on each backend instance group>. This parameter has no meaning if the backends are NEGs. For Internal TCP\/UDP Load Balancing and Network Load Balancing, omit port_name.
    portName :: (Core.Maybe Core.Text),
    -- | The protocol this BackendService uses to communicate with backends. Possible values are HTTP, HTTPS, HTTP2, TCP, SSL, UDP or GRPC. depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancers or for Traffic Director for more information. Must be set to GRPC when the backend service is referenced by a URL map that is bound to target gRPC proxy.
    protocol :: (Core.Maybe BackendService_Protocol),
    -- | [Output Only] URL of the region where the regional backend service resides. This field is not applicable to global backend services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] The resource URL for the security policy associated with this backend service.
    securityPolicy :: (Core.Maybe Core.Text),
    -- | This field specifies the security settings that apply to this backend service. This field is applicable to a global backend service with the load/balancing/scheme set to INTERNAL/SELF/MANAGED.
    securitySettings :: (Core.Maybe SecuritySettings),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | URLs of networkservices.ServiceBinding resources. Can only be set if load balancing scheme is INTERNAL/SELF/MANAGED. If set, lists of backends and health checks must be both empty.
    serviceBindings :: (Core.Maybe [Core.Text]),
    -- | Type of session affinity to use. The default is NONE. Only NONE and HEADER_FIELD are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. For more details, see: <https://cloud.google.com/load-balancing/docs/backend-service#session_affinity Session Affinity>.
    sessionAffinity :: (Core.Maybe BackendService_SessionAffinity),
    -- |
    subsetting :: (Core.Maybe Subsetting),
    -- | The backend service timeout has a different meaning depending on the type of load balancer. For more information see, Backend service settings. The default is 30 seconds. The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds. This value can be overridden in the PathMatcher configuration of the UrlMap that references this backend service. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. Instead, use maxStreamDuration.
    timeoutSec :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendService' with the minimum fields required to make a request.
newBackendService ::
  BackendService
newBackendService =
  BackendService
    { affinityCookieTtlSec = Core.Nothing,
      backends = Core.Nothing,
      cdnPolicy = Core.Nothing,
      circuitBreakers = Core.Nothing,
      compressionMode = Core.Nothing,
      connectionDraining = Core.Nothing,
      connectionTrackingPolicy = Core.Nothing,
      consistentHash = Core.Nothing,
      creationTimestamp = Core.Nothing,
      customRequestHeaders = Core.Nothing,
      customResponseHeaders = Core.Nothing,
      description = Core.Nothing,
      edgeSecurityPolicy = Core.Nothing,
      enableCDN = Core.Nothing,
      failoverPolicy = Core.Nothing,
      fingerprint = Core.Nothing,
      healthChecks = Core.Nothing,
      iap = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#backendService",
      loadBalancingScheme = Core.Nothing,
      localityLbPolicies = Core.Nothing,
      localityLbPolicy = Core.Nothing,
      logConfig = Core.Nothing,
      maxStreamDuration = Core.Nothing,
      name = Core.Nothing,
      network = Core.Nothing,
      outlierDetection = Core.Nothing,
      port = Core.Nothing,
      portName = Core.Nothing,
      protocol = Core.Nothing,
      region = Core.Nothing,
      securityPolicy = Core.Nothing,
      securitySettings = Core.Nothing,
      selfLink = Core.Nothing,
      serviceBindings = Core.Nothing,
      sessionAffinity = Core.Nothing,
      subsetting = Core.Nothing,
      timeoutSec = Core.Nothing
    }

instance Core.FromJSON BackendService where
  parseJSON =
    Core.withObject
      "BackendService"
      ( \o ->
          BackendService
            Core.<$> (o Core..:? "affinityCookieTtlSec")
            Core.<*> (o Core..:? "backends")
            Core.<*> (o Core..:? "cdnPolicy")
            Core.<*> (o Core..:? "circuitBreakers")
            Core.<*> (o Core..:? "compressionMode")
            Core.<*> (o Core..:? "connectionDraining")
            Core.<*> (o Core..:? "connectionTrackingPolicy")
            Core.<*> (o Core..:? "consistentHash")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "customRequestHeaders")
            Core.<*> (o Core..:? "customResponseHeaders")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "edgeSecurityPolicy")
            Core.<*> (o Core..:? "enableCDN")
            Core.<*> (o Core..:? "failoverPolicy")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "healthChecks")
            Core.<*> (o Core..:? "iap")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#backendService")
            Core.<*> (o Core..:? "loadBalancingScheme")
            Core.<*> (o Core..:? "localityLbPolicies")
            Core.<*> (o Core..:? "localityLbPolicy")
            Core.<*> (o Core..:? "logConfig")
            Core.<*> (o Core..:? "maxStreamDuration")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "network")
            Core.<*> (o Core..:? "outlierDetection")
            Core.<*> (o Core..:? "port")
            Core.<*> (o Core..:? "portName")
            Core.<*> (o Core..:? "protocol")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "securityPolicy")
            Core.<*> (o Core..:? "securitySettings")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "serviceBindings")
            Core.<*> (o Core..:? "sessionAffinity")
            Core.<*> (o Core..:? "subsetting")
            Core.<*> (o Core..:? "timeoutSec")
      )

instance Core.ToJSON BackendService where
  toJSON BackendService {..} =
    Core.object
      ( Core.catMaybes
          [ ("affinityCookieTtlSec" Core..=)
              Core.<$> affinityCookieTtlSec,
            ("backends" Core..=) Core.<$> backends,
            ("cdnPolicy" Core..=) Core.<$> cdnPolicy,
            ("circuitBreakers" Core..=) Core.<$> circuitBreakers,
            ("compressionMode" Core..=) Core.<$> compressionMode,
            ("connectionDraining" Core..=)
              Core.<$> connectionDraining,
            ("connectionTrackingPolicy" Core..=)
              Core.<$> connectionTrackingPolicy,
            ("consistentHash" Core..=) Core.<$> consistentHash,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("customRequestHeaders" Core..=)
              Core.<$> customRequestHeaders,
            ("customResponseHeaders" Core..=)
              Core.<$> customResponseHeaders,
            ("description" Core..=) Core.<$> description,
            ("edgeSecurityPolicy" Core..=)
              Core.<$> edgeSecurityPolicy,
            ("enableCDN" Core..=) Core.<$> enableCDN,
            ("failoverPolicy" Core..=) Core.<$> failoverPolicy,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("healthChecks" Core..=) Core.<$> healthChecks,
            ("iap" Core..=) Core.<$> iap,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("loadBalancingScheme" Core..=)
              Core.<$> loadBalancingScheme,
            ("localityLbPolicies" Core..=)
              Core.<$> localityLbPolicies,
            ("localityLbPolicy" Core..=)
              Core.<$> localityLbPolicy,
            ("logConfig" Core..=) Core.<$> logConfig,
            ("maxStreamDuration" Core..=)
              Core.<$> maxStreamDuration,
            ("name" Core..=) Core.<$> name,
            ("network" Core..=) Core.<$> network,
            ("outlierDetection" Core..=)
              Core.<$> outlierDetection,
            ("port" Core..=) Core.<$> port,
            ("portName" Core..=) Core.<$> portName,
            ("protocol" Core..=) Core.<$> protocol,
            ("region" Core..=) Core.<$> region,
            ("securityPolicy" Core..=) Core.<$> securityPolicy,
            ("securitySettings" Core..=)
              Core.<$> securitySettings,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("serviceBindings" Core..=) Core.<$> serviceBindings,
            ("sessionAffinity" Core..=) Core.<$> sessionAffinity,
            ("subsetting" Core..=) Core.<$> subsetting,
            ("timeoutSec" Core..=) Core.<$> timeoutSec
          ]
      )

-- | Contains a list of BackendServicesScopedList.
--
-- /See:/ 'newBackendServiceAggregatedList' smart constructor.
data BackendServiceAggregatedList = BackendServiceAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of BackendServicesScopedList resources.
    items :: (Core.Maybe BackendServiceAggregatedList_Items),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe BackendServiceAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServiceAggregatedList' with the minimum fields required to make a request.
newBackendServiceAggregatedList ::
  BackendServiceAggregatedList
newBackendServiceAggregatedList =
  BackendServiceAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#backendServiceAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON BackendServiceAggregatedList where
  parseJSON =
    Core.withObject
      "BackendServiceAggregatedList"
      ( \o ->
          BackendServiceAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#backendServiceAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON BackendServiceAggregatedList where
  toJSON BackendServiceAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of BackendServicesScopedList resources.
--
-- /See:/ 'newBackendServiceAggregatedList_Items' smart constructor.
newtype BackendServiceAggregatedList_Items = BackendServiceAggregatedList_Items
  { -- | Name of the scope containing this set of BackendServices.
    additional :: (Core.HashMap Core.Text BackendServicesScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServiceAggregatedList_Items' with the minimum fields required to make a request.
newBackendServiceAggregatedList_Items ::
  -- |  Name of the scope containing this set of BackendServices. See 'additional'.
  Core.HashMap Core.Text BackendServicesScopedList ->
  BackendServiceAggregatedList_Items
newBackendServiceAggregatedList_Items additional =
  BackendServiceAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    BackendServiceAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "BackendServiceAggregatedList_Items"
      ( \o ->
          BackendServiceAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    BackendServiceAggregatedList_Items
  where
  toJSON BackendServiceAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newBackendServiceAggregatedList_Warning' smart constructor.
data BackendServiceAggregatedList_Warning = BackendServiceAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe BackendServiceAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [BackendServiceAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServiceAggregatedList_Warning' with the minimum fields required to make a request.
newBackendServiceAggregatedList_Warning ::
  BackendServiceAggregatedList_Warning
newBackendServiceAggregatedList_Warning =
  BackendServiceAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    BackendServiceAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "BackendServiceAggregatedList_Warning"
      ( \o ->
          BackendServiceAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    BackendServiceAggregatedList_Warning
  where
  toJSON BackendServiceAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newBackendServiceAggregatedList_Warning_DataItem' smart constructor.
data BackendServiceAggregatedList_Warning_DataItem = BackendServiceAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServiceAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newBackendServiceAggregatedList_Warning_DataItem ::
  BackendServiceAggregatedList_Warning_DataItem
newBackendServiceAggregatedList_Warning_DataItem =
  BackendServiceAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    BackendServiceAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "BackendServiceAggregatedList_Warning_DataItem"
      ( \o ->
          BackendServiceAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    BackendServiceAggregatedList_Warning_DataItem
  where
  toJSON
    BackendServiceAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | Message containing Cloud CDN configuration for a backend service.
--
-- /See:/ 'newBackendServiceCdnPolicy' smart constructor.
data BackendServiceCdnPolicy = BackendServiceCdnPolicy
  { -- | Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
    bypassCacheOnRequestHeaders :: (Core.Maybe [BackendServiceCdnPolicyBypassCacheOnRequestHeader]),
    -- | The CacheKeyPolicy for this CdnPolicy.
    cacheKeyPolicy :: (Core.Maybe CacheKeyPolicy),
    -- | Specifies the cache setting for all responses from this backend. The possible values are: USE/ORIGIN/HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google\'s edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE/CACHE/ALL Cache all content, ignoring any \"private\", \"no-store\" or \"no-cache\" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE/ALL/STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.
    cacheMode :: (Core.Maybe BackendServiceCdnPolicy_CacheMode),
    -- | Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE/CACHE/ALL, the lesser of client/ttl and default/ttl is used for the response max-age directive, along with a \"public\" directive. For cacheable content in CACHE/ALL/STATIC mode, client/ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client/ttl and default_ttl, and also ensures a \"public\" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 31,622,400s (1 year).
    clientTtl :: (Core.Maybe Core.Int32),
    -- | Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of \"0\" means \"always revalidate\". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE/CACHE/ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    defaultTtl :: (Core.Maybe Core.Int32),
    -- | Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of \"0\" means \"always revalidate\". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    maxTtl :: (Core.Maybe Core.Int32),
    -- | Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE/ALL/STATIC or USE/ORIGIN/HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE/CACHE/ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative/caching/policy.
    negativeCaching :: (Core.Maybe Core.Bool),
    -- | Sets a cache TTL for the specified HTTP status code. negative/caching must be enabled to configure negative/caching/policy. Omitting the policy and leaving negative/caching enabled will use Cloud CDN\'s default cache TTLs. Note that when specifying an explicit negative/caching/policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.
    negativeCachingPolicy :: (Core.Maybe [BackendServiceCdnPolicyNegativeCachingPolicy]),
    -- | If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
    requestCoalescing :: (Core.Maybe Core.Bool),
    -- | Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default \"max-stale\" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.
    serveWhileStale :: (Core.Maybe Core.Int32),
    -- | Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a \"Cache-Control: public, max-age=[TTL]\" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.
    signedUrlCacheMaxAgeSec :: (Core.Maybe Core.Int64),
    -- | [Output Only] Names of the keys for signing request URLs.
    signedUrlKeyNames :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServiceCdnPolicy' with the minimum fields required to make a request.
newBackendServiceCdnPolicy ::
  BackendServiceCdnPolicy
newBackendServiceCdnPolicy =
  BackendServiceCdnPolicy
    { bypassCacheOnRequestHeaders = Core.Nothing,
      cacheKeyPolicy = Core.Nothing,
      cacheMode = Core.Nothing,
      clientTtl = Core.Nothing,
      defaultTtl = Core.Nothing,
      maxTtl = Core.Nothing,
      negativeCaching = Core.Nothing,
      negativeCachingPolicy = Core.Nothing,
      requestCoalescing = Core.Nothing,
      serveWhileStale = Core.Nothing,
      signedUrlCacheMaxAgeSec = Core.Nothing,
      signedUrlKeyNames = Core.Nothing
    }

instance Core.FromJSON BackendServiceCdnPolicy where
  parseJSON =
    Core.withObject
      "BackendServiceCdnPolicy"
      ( \o ->
          BackendServiceCdnPolicy
            Core.<$> (o Core..:? "bypassCacheOnRequestHeaders")
            Core.<*> (o Core..:? "cacheKeyPolicy")
            Core.<*> (o Core..:? "cacheMode")
            Core.<*> (o Core..:? "clientTtl")
            Core.<*> (o Core..:? "defaultTtl")
            Core.<*> (o Core..:? "maxTtl")
            Core.<*> (o Core..:? "negativeCaching")
            Core.<*> (o Core..:? "negativeCachingPolicy")
            Core.<*> (o Core..:? "requestCoalescing")
            Core.<*> (o Core..:? "serveWhileStale")
            Core.<*> ( o Core..:? "signedUrlCacheMaxAgeSec"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "signedUrlKeyNames")
      )

instance Core.ToJSON BackendServiceCdnPolicy where
  toJSON BackendServiceCdnPolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("bypassCacheOnRequestHeaders" Core..=)
              Core.<$> bypassCacheOnRequestHeaders,
            ("cacheKeyPolicy" Core..=) Core.<$> cacheKeyPolicy,
            ("cacheMode" Core..=) Core.<$> cacheMode,
            ("clientTtl" Core..=) Core.<$> clientTtl,
            ("defaultTtl" Core..=) Core.<$> defaultTtl,
            ("maxTtl" Core..=) Core.<$> maxTtl,
            ("negativeCaching" Core..=) Core.<$> negativeCaching,
            ("negativeCachingPolicy" Core..=)
              Core.<$> negativeCachingPolicy,
            ("requestCoalescing" Core..=)
              Core.<$> requestCoalescing,
            ("serveWhileStale" Core..=) Core.<$> serveWhileStale,
            ("signedUrlCacheMaxAgeSec" Core..=)
              Core.. Core.AsText
              Core.<$> signedUrlCacheMaxAgeSec,
            ("signedUrlKeyNames" Core..=)
              Core.<$> signedUrlKeyNames
          ]
      )

-- | Bypass the cache when the specified request headers are present, e.g. Pragma or Authorization headers. Values are case insensitive. The presence of such a header overrides the cache_mode setting.
--
-- /See:/ 'newBackendServiceCdnPolicyBypassCacheOnRequestHeader' smart constructor.
newtype BackendServiceCdnPolicyBypassCacheOnRequestHeader = BackendServiceCdnPolicyBypassCacheOnRequestHeader
  { -- | The header field name to match on when bypassing cache. Values are case-insensitive.
    headerName :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServiceCdnPolicyBypassCacheOnRequestHeader' with the minimum fields required to make a request.
newBackendServiceCdnPolicyBypassCacheOnRequestHeader ::
  BackendServiceCdnPolicyBypassCacheOnRequestHeader
newBackendServiceCdnPolicyBypassCacheOnRequestHeader =
  BackendServiceCdnPolicyBypassCacheOnRequestHeader {headerName = Core.Nothing}

instance
  Core.FromJSON
    BackendServiceCdnPolicyBypassCacheOnRequestHeader
  where
  parseJSON =
    Core.withObject
      "BackendServiceCdnPolicyBypassCacheOnRequestHeader"
      ( \o ->
          BackendServiceCdnPolicyBypassCacheOnRequestHeader
            Core.<$> (o Core..:? "headerName")
      )

instance
  Core.ToJSON
    BackendServiceCdnPolicyBypassCacheOnRequestHeader
  where
  toJSON
    BackendServiceCdnPolicyBypassCacheOnRequestHeader {..} =
      Core.object
        ( Core.catMaybes
            [("headerName" Core..=) Core.<$> headerName]
        )

-- | Specify CDN TTLs for response error codes.
--
-- /See:/ 'newBackendServiceCdnPolicyNegativeCachingPolicy' smart constructor.
data BackendServiceCdnPolicyNegativeCachingPolicy = BackendServiceCdnPolicyNegativeCachingPolicy
  { -- | The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 302, 307, 308, 404, 405, 410, 421, 451 and 501 are can be specified as values, and you cannot specify a status code more than once.
    code :: (Core.Maybe Core.Int32),
    -- | The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    ttl :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServiceCdnPolicyNegativeCachingPolicy' with the minimum fields required to make a request.
newBackendServiceCdnPolicyNegativeCachingPolicy ::
  BackendServiceCdnPolicyNegativeCachingPolicy
newBackendServiceCdnPolicyNegativeCachingPolicy =
  BackendServiceCdnPolicyNegativeCachingPolicy
    { code = Core.Nothing,
      ttl = Core.Nothing
    }

instance
  Core.FromJSON
    BackendServiceCdnPolicyNegativeCachingPolicy
  where
  parseJSON =
    Core.withObject
      "BackendServiceCdnPolicyNegativeCachingPolicy"
      ( \o ->
          BackendServiceCdnPolicyNegativeCachingPolicy
            Core.<$> (o Core..:? "code") Core.<*> (o Core..:? "ttl")
      )

instance
  Core.ToJSON
    BackendServiceCdnPolicyNegativeCachingPolicy
  where
  toJSON
    BackendServiceCdnPolicyNegativeCachingPolicy {..} =
      Core.object
        ( Core.catMaybes
            [ ("code" Core..=) Core.<$> code,
              ("ttl" Core..=) Core.<$> ttl
            ]
        )

-- | Connection Tracking configuration for this BackendService.
--
-- /See:/ 'newBackendServiceConnectionTrackingPolicy' smart constructor.
data BackendServiceConnectionTrackingPolicy = BackendServiceConnectionTrackingPolicy
  { -- | Specifies connection persistence when backends are unhealthy. The default value is DEFAULT/FOR/PROTOCOL. If set to DEFAULT/FOR/PROTOCOL, the existing connections persist on unhealthy backends only for connection-oriented protocols (TCP and SCTP) and only if the Tracking Mode is PER/CONNECTION (default tracking mode) or the Session Affinity is configured for 5-tuple. They do not persist for UDP. If set to NEVER/PERSIST, after a backend becomes unhealthy, the existing connections on the unhealthy backend are never persisted on the unhealthy backend. They are always diverted to newly selected healthy backends (unless all backends are unhealthy). If set to ALWAYS_PERSIST, existing connections always persist on unhealthy backends regardless of protocol and session affinity. It is generally not recommended to use this mode overriding the default. For more details, see
    -- <https://cloud.google.com/load-balancing/docs/network/networklb-backend-service#connection-persistence Connection Persistence for Network Load Balancing> and <https://cloud.google.com/load-balancing/docs/internal#connection-persistence Connection Persistence for Internal TCP\/UDP Load Balancing>.
    connectionPersistenceOnUnhealthyBackends ::
      ( Core.Maybe
          BackendServiceConnectionTrackingPolicy_ConnectionPersistenceOnUnhealthyBackends
      ),
    -- | Enable Strong Session Affinity for Network Load Balancing. This option is not available publicly.
    enableStrongAffinity :: (Core.Maybe Core.Bool),
    -- | Specifies how long to keep a Connection Tracking entry while there is no matching traffic (in seconds). For Internal TCP\/UDP Load Balancing: - The minimum (default) is 10 minutes and the maximum is 16 hours. - It can be set only if Connection Tracking is less than 5-tuple (i.e. Session Affinity is CLIENT/IP/NO/DESTINATION, CLIENT/IP or CLIENT/IP/PROTO, and Tracking Mode is PER_SESSION). For Network Load Balancer the default is 60 seconds. This option is not available publicly.
    idleTimeoutSec :: (Core.Maybe Core.Int32),
    -- | Specifies the key used for connection tracking. There are two options: - PER/CONNECTION: This is the default mode. The Connection Tracking is performed as per the Connection Key (default Hash Method) for the specific protocol. - PER/SESSION: The Connection Tracking is performed as per the configured Session Affinity. It matches the configured Session Affinity. For more details, see <https://cloud.google.com/load-balancing/docs/network/networklb-backend-service#tracking-mode Tracking Mode for Network Load Balancing> and <https://cloud.google.com/load-balancing/docs/internal#tracking-mode Tracking Mode for Internal TCP\/UDP Load Balancing>.
    trackingMode :: (Core.Maybe BackendServiceConnectionTrackingPolicy_TrackingMode)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServiceConnectionTrackingPolicy' with the minimum fields required to make a request.
newBackendServiceConnectionTrackingPolicy ::
  BackendServiceConnectionTrackingPolicy
newBackendServiceConnectionTrackingPolicy =
  BackendServiceConnectionTrackingPolicy
    { connectionPersistenceOnUnhealthyBackends = Core.Nothing,
      enableStrongAffinity = Core.Nothing,
      idleTimeoutSec = Core.Nothing,
      trackingMode = Core.Nothing
    }

instance
  Core.FromJSON
    BackendServiceConnectionTrackingPolicy
  where
  parseJSON =
    Core.withObject
      "BackendServiceConnectionTrackingPolicy"
      ( \o ->
          BackendServiceConnectionTrackingPolicy
            Core.<$> ( o
                         Core..:? "connectionPersistenceOnUnhealthyBackends"
                     )
            Core.<*> (o Core..:? "enableStrongAffinity")
            Core.<*> (o Core..:? "idleTimeoutSec")
            Core.<*> (o Core..:? "trackingMode")
      )

instance
  Core.ToJSON
    BackendServiceConnectionTrackingPolicy
  where
  toJSON BackendServiceConnectionTrackingPolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("connectionPersistenceOnUnhealthyBackends" Core..=)
              Core.<$> connectionPersistenceOnUnhealthyBackends,
            ("enableStrongAffinity" Core..=)
              Core.<$> enableStrongAffinity,
            ("idleTimeoutSec" Core..=) Core.<$> idleTimeoutSec,
            ("trackingMode" Core..=) Core.<$> trackingMode
          ]
      )

-- | For load balancers that have configurable failover: <https://cloud.google.com/load-balancing/docs/internal/failover-overview Internal TCP\/UDP Load Balancing> and <https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview external TCP\/UDP Load Balancing>. On failover or failback, this field indicates whether connection draining will be honored. Google Cloud has a fixed connection draining timeout of 10 minutes. A setting of true terminates existing TCP connections to the active pool during failover and failback, immediately draining traffic. A setting of false allows existing TCP connections to persist, even on VMs no longer in the active pool, for up to the duration of the connection draining timeout (10 minutes).
--
-- /See:/ 'newBackendServiceFailoverPolicy' smart constructor.
data BackendServiceFailoverPolicy = BackendServiceFailoverPolicy
  { -- | This can be set to true only if the protocol is TCP. The default is false.
    disableConnectionDrainOnFailover :: (Core.Maybe Core.Bool),
    -- | If set to true, connections to the load balancer are dropped when all primary and all backup backend VMs are unhealthy.If set to false, connections are distributed among all primary VMs when all primary and all backup backend VMs are unhealthy. For load balancers that have configurable failover: <https://cloud.google.com/load-balancing/docs/internal/failover-overview Internal TCP\/UDP Load Balancing> and <https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview external TCP\/UDP Load Balancing>. The default is false.
    dropTrafficIfUnhealthy :: (Core.Maybe Core.Bool),
    -- | The value of the field must be in the range [0, 1]. If the value is 0, the load balancer performs a failover when the number of healthy primary VMs equals zero. For all other values, the load balancer performs a failover when the total number of healthy primary VMs is less than this ratio. For load balancers that have configurable failover: <https://cloud.google.com/load-balancing/docs/internal/failover-overview Internal TCP\/UDP Load Balancing> and <https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview external TCP\/UDP Load Balancing>.
    failoverRatio :: (Core.Maybe Core.Double)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServiceFailoverPolicy' with the minimum fields required to make a request.
newBackendServiceFailoverPolicy ::
  BackendServiceFailoverPolicy
newBackendServiceFailoverPolicy =
  BackendServiceFailoverPolicy
    { disableConnectionDrainOnFailover = Core.Nothing,
      dropTrafficIfUnhealthy = Core.Nothing,
      failoverRatio = Core.Nothing
    }

instance Core.FromJSON BackendServiceFailoverPolicy where
  parseJSON =
    Core.withObject
      "BackendServiceFailoverPolicy"
      ( \o ->
          BackendServiceFailoverPolicy
            Core.<$> (o Core..:? "disableConnectionDrainOnFailover")
            Core.<*> (o Core..:? "dropTrafficIfUnhealthy")
            Core.<*> (o Core..:? "failoverRatio")
      )

instance Core.ToJSON BackendServiceFailoverPolicy where
  toJSON BackendServiceFailoverPolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("disableConnectionDrainOnFailover" Core..=)
              Core.<$> disableConnectionDrainOnFailover,
            ("dropTrafficIfUnhealthy" Core..=)
              Core.<$> dropTrafficIfUnhealthy,
            ("failoverRatio" Core..=) Core.<$> failoverRatio
          ]
      )

--
-- /See:/ 'newBackendServiceGroupHealth' smart constructor.
data BackendServiceGroupHealth = BackendServiceGroupHealth
  { -- | Metadata defined as annotations on the network endpoint group.
    annotations :: (Core.Maybe BackendServiceGroupHealth_Annotations),
    -- | Health state of the backend instances or endpoints in requested instance or network endpoint group, determined based on configured health checks.
    healthStatus :: (Core.Maybe [HealthStatus]),
    -- | [Output Only] Type of resource. Always compute#backendServiceGroupHealth for the health of backend services.
    kind :: Core.Text
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServiceGroupHealth' with the minimum fields required to make a request.
newBackendServiceGroupHealth ::
  BackendServiceGroupHealth
newBackendServiceGroupHealth =
  BackendServiceGroupHealth
    { annotations = Core.Nothing,
      healthStatus = Core.Nothing,
      kind = "compute#backendServiceGroupHealth"
    }

instance Core.FromJSON BackendServiceGroupHealth where
  parseJSON =
    Core.withObject
      "BackendServiceGroupHealth"
      ( \o ->
          BackendServiceGroupHealth
            Core.<$> (o Core..:? "annotations")
            Core.<*> (o Core..:? "healthStatus")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#backendServiceGroupHealth"
                     )
      )

instance Core.ToJSON BackendServiceGroupHealth where
  toJSON BackendServiceGroupHealth {..} =
    Core.object
      ( Core.catMaybes
          [ ("annotations" Core..=) Core.<$> annotations,
            ("healthStatus" Core..=) Core.<$> healthStatus,
            Core.Just ("kind" Core..= kind)
          ]
      )

-- | Metadata defined as annotations on the network endpoint group.
--
-- /See:/ 'newBackendServiceGroupHealth_Annotations' smart constructor.
newtype BackendServiceGroupHealth_Annotations = BackendServiceGroupHealth_Annotations
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServiceGroupHealth_Annotations' with the minimum fields required to make a request.
newBackendServiceGroupHealth_Annotations ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  BackendServiceGroupHealth_Annotations
newBackendServiceGroupHealth_Annotations additional =
  BackendServiceGroupHealth_Annotations {additional = additional}

instance
  Core.FromJSON
    BackendServiceGroupHealth_Annotations
  where
  parseJSON =
    Core.withObject
      "BackendServiceGroupHealth_Annotations"
      ( \o ->
          BackendServiceGroupHealth_Annotations
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    BackendServiceGroupHealth_Annotations
  where
  toJSON BackendServiceGroupHealth_Annotations {..} =
    Core.toJSON additional

-- | Identity-Aware Proxy
--
-- /See:/ 'newBackendServiceIAP' smart constructor.
data BackendServiceIAP = BackendServiceIAP
  { -- | Whether the serving infrastructure will authenticate and authorize all incoming requests. If true, the oauth2ClientId and oauth2ClientSecret fields must be non-empty.
    enabled :: (Core.Maybe Core.Bool),
    -- | OAuth2 client ID to use for the authentication flow.
    oauth2ClientId :: (Core.Maybe Core.Text),
    -- | OAuth2 client secret to use for the authentication flow. For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field. \@InputOnly
    oauth2ClientSecret :: (Core.Maybe Core.Text),
    -- | [Output Only] SHA256 hash value for the field oauth2/client/secret above.
    oauth2ClientSecretSha256 :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServiceIAP' with the minimum fields required to make a request.
newBackendServiceIAP ::
  BackendServiceIAP
newBackendServiceIAP =
  BackendServiceIAP
    { enabled = Core.Nothing,
      oauth2ClientId = Core.Nothing,
      oauth2ClientSecret = Core.Nothing,
      oauth2ClientSecretSha256 = Core.Nothing
    }

instance Core.FromJSON BackendServiceIAP where
  parseJSON =
    Core.withObject
      "BackendServiceIAP"
      ( \o ->
          BackendServiceIAP
            Core.<$> (o Core..:? "enabled")
            Core.<*> (o Core..:? "oauth2ClientId")
            Core.<*> (o Core..:? "oauth2ClientSecret")
            Core.<*> (o Core..:? "oauth2ClientSecretSha256")
      )

instance Core.ToJSON BackendServiceIAP where
  toJSON BackendServiceIAP {..} =
    Core.object
      ( Core.catMaybes
          [ ("enabled" Core..=) Core.<$> enabled,
            ("oauth2ClientId" Core..=) Core.<$> oauth2ClientId,
            ("oauth2ClientSecret" Core..=)
              Core.<$> oauth2ClientSecret,
            ("oauth2ClientSecretSha256" Core..=)
              Core.<$> oauth2ClientSecretSha256
          ]
      )

-- | Contains a list of BackendService resources.
--
-- /See:/ 'newBackendServiceList' smart constructor.
data BackendServiceList = BackendServiceList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of BackendService resources.
    items :: (Core.Maybe [BackendService]),
    -- | [Output Only] Type of resource. Always compute#backendServiceList for lists of backend services.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe BackendServiceList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServiceList' with the minimum fields required to make a request.
newBackendServiceList ::
  BackendServiceList
newBackendServiceList =
  BackendServiceList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#backendServiceList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON BackendServiceList where
  parseJSON =
    Core.withObject
      "BackendServiceList"
      ( \o ->
          BackendServiceList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#backendServiceList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON BackendServiceList where
  toJSON BackendServiceList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newBackendServiceList_Warning' smart constructor.
data BackendServiceList_Warning = BackendServiceList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe BackendServiceList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [BackendServiceList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServiceList_Warning' with the minimum fields required to make a request.
newBackendServiceList_Warning ::
  BackendServiceList_Warning
newBackendServiceList_Warning =
  BackendServiceList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON BackendServiceList_Warning where
  parseJSON =
    Core.withObject
      "BackendServiceList_Warning"
      ( \o ->
          BackendServiceList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON BackendServiceList_Warning where
  toJSON BackendServiceList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newBackendServiceList_Warning_DataItem' smart constructor.
data BackendServiceList_Warning_DataItem = BackendServiceList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServiceList_Warning_DataItem' with the minimum fields required to make a request.
newBackendServiceList_Warning_DataItem ::
  BackendServiceList_Warning_DataItem
newBackendServiceList_Warning_DataItem =
  BackendServiceList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    BackendServiceList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "BackendServiceList_Warning_DataItem"
      ( \o ->
          BackendServiceList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    BackendServiceList_Warning_DataItem
  where
  toJSON BackendServiceList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Container for either a built-in LB policy supported by gRPC or Envoy or a custom one implemented by the end user.
--
-- /See:/ 'newBackendServiceLocalityLoadBalancingPolicyConfig' smart constructor.
data BackendServiceLocalityLoadBalancingPolicyConfig = BackendServiceLocalityLoadBalancingPolicyConfig
  { -- |
    customPolicy ::
      ( Core.Maybe
          BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy
      ),
    -- |
    policy :: (Core.Maybe BackendServiceLocalityLoadBalancingPolicyConfigPolicy)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServiceLocalityLoadBalancingPolicyConfig' with the minimum fields required to make a request.
newBackendServiceLocalityLoadBalancingPolicyConfig ::
  BackendServiceLocalityLoadBalancingPolicyConfig
newBackendServiceLocalityLoadBalancingPolicyConfig =
  BackendServiceLocalityLoadBalancingPolicyConfig
    { customPolicy = Core.Nothing,
      policy = Core.Nothing
    }

instance
  Core.FromJSON
    BackendServiceLocalityLoadBalancingPolicyConfig
  where
  parseJSON =
    Core.withObject
      "BackendServiceLocalityLoadBalancingPolicyConfig"
      ( \o ->
          BackendServiceLocalityLoadBalancingPolicyConfig
            Core.<$> (o Core..:? "customPolicy")
              Core.<*> (o Core..:? "policy")
      )

instance
  Core.ToJSON
    BackendServiceLocalityLoadBalancingPolicyConfig
  where
  toJSON
    BackendServiceLocalityLoadBalancingPolicyConfig {..} =
      Core.object
        ( Core.catMaybes
            [ ("customPolicy" Core..=) Core.<$> customPolicy,
              ("policy" Core..=) Core.<$> policy
            ]
        )

-- | The configuration for a custom policy implemented by the user and deployed with the client.
--
-- /See:/ 'newBackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy' smart constructor.
data BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy = BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy
  { -- | An optional, arbitrary JSON object with configuration data, understood by a locally installed custom policy implementation.
    data' :: (Core.Maybe Core.Text),
    -- | Identifies the custom policy. The value should match the name of a custom implementation registered on the gRPC clients. It should follow protocol buffer message naming conventions and include the full path (for example, myorg.CustomLbPolicy). The maximum length is 256 characters. Do not specify the same custom policy more than once for a backend. If you do, the configuration is rejected. For an example of how to use this field, see Use a custom policy.
    name :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy' with the minimum fields required to make a request.
newBackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy ::
  BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy
newBackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy =
  BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy
    { data' = Core.Nothing,
      name = Core.Nothing
    }

instance
  Core.FromJSON
    BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy
  where
  parseJSON =
    Core.withObject
      "BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy"
      ( \o ->
          BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy
            Core.<$> (o Core..:? "data") Core.<*> (o Core..:? "name")
      )

instance
  Core.ToJSON
    BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy
  where
  toJSON
    BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy {..} =
      Core.object
        ( Core.catMaybes
            [ ("data" Core..=) Core.<$> data',
              ("name" Core..=) Core.<$> name
            ]
        )

-- | The configuration for a built-in load balancing policy.
--
-- /See:/ 'newBackendServiceLocalityLoadBalancingPolicyConfigPolicy' smart constructor.
newtype BackendServiceLocalityLoadBalancingPolicyConfigPolicy = BackendServiceLocalityLoadBalancingPolicyConfigPolicy
  { -- | The name of a locality load-balancing policy. Valid values include ROUND/ROBIN and, for Java clients, LEAST/REQUEST. For information about these values, see the description of localityLbPolicy. Do not specify the same policy more than once for a backend. If you do, the configuration is rejected.
    name ::
      ( Core.Maybe
          BackendServiceLocalityLoadBalancingPolicyConfigPolicy_Name
      )
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServiceLocalityLoadBalancingPolicyConfigPolicy' with the minimum fields required to make a request.
newBackendServiceLocalityLoadBalancingPolicyConfigPolicy ::
  BackendServiceLocalityLoadBalancingPolicyConfigPolicy
newBackendServiceLocalityLoadBalancingPolicyConfigPolicy =
  BackendServiceLocalityLoadBalancingPolicyConfigPolicy {name = Core.Nothing}

instance
  Core.FromJSON
    BackendServiceLocalityLoadBalancingPolicyConfigPolicy
  where
  parseJSON =
    Core.withObject
      "BackendServiceLocalityLoadBalancingPolicyConfigPolicy"
      ( \o ->
          BackendServiceLocalityLoadBalancingPolicyConfigPolicy
            Core.<$> (o Core..:? "name")
      )

instance
  Core.ToJSON
    BackendServiceLocalityLoadBalancingPolicyConfigPolicy
  where
  toJSON
    BackendServiceLocalityLoadBalancingPolicyConfigPolicy {..} =
      Core.object
        (Core.catMaybes [("name" Core..=) Core.<$> name])

-- | The available logging options for the load balancer traffic served by this backend service.
--
-- /See:/ 'newBackendServiceLogConfig' smart constructor.
data BackendServiceLogConfig = BackendServiceLogConfig
  { -- | Denotes whether to enable logging for the load balancer traffic served by this backend service. The default value is false.
    enable :: (Core.Maybe Core.Bool),
    -- | This field can only be specified if logging is enabled for this backend service and \"logConfig.optionalMode\" was set to CUSTOM. Contains a list of optional fields you want to include in the logs. For example: serverInstance, serverGkeDetails.cluster, serverGkeDetails.pod.podNamespace
    optionalFields :: (Core.Maybe [Core.Text]),
    -- | This field can only be specified if logging is enabled for this backend service. Configures whether all, none or a subset of optional fields should be added to the reported logs. One of [INCLUDE/ALL/OPTIONAL, EXCLUDE/ALL/OPTIONAL, CUSTOM]. Default is EXCLUDE/ALL/OPTIONAL.
    optionalMode :: (Core.Maybe BackendServiceLogConfig_OptionalMode),
    -- | This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0.
    sampleRate :: (Core.Maybe Core.Double)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServiceLogConfig' with the minimum fields required to make a request.
newBackendServiceLogConfig ::
  BackendServiceLogConfig
newBackendServiceLogConfig =
  BackendServiceLogConfig
    { enable = Core.Nothing,
      optionalFields = Core.Nothing,
      optionalMode = Core.Nothing,
      sampleRate = Core.Nothing
    }

instance Core.FromJSON BackendServiceLogConfig where
  parseJSON =
    Core.withObject
      "BackendServiceLogConfig"
      ( \o ->
          BackendServiceLogConfig
            Core.<$> (o Core..:? "enable")
            Core.<*> (o Core..:? "optionalFields")
            Core.<*> (o Core..:? "optionalMode")
            Core.<*> (o Core..:? "sampleRate")
      )

instance Core.ToJSON BackendServiceLogConfig where
  toJSON BackendServiceLogConfig {..} =
    Core.object
      ( Core.catMaybes
          [ ("enable" Core..=) Core.<$> enable,
            ("optionalFields" Core..=) Core.<$> optionalFields,
            ("optionalMode" Core..=) Core.<$> optionalMode,
            ("sampleRate" Core..=) Core.<$> sampleRate
          ]
      )

--
-- /See:/ 'newBackendServiceReference' smart constructor.
newtype BackendServiceReference = BackendServiceReference
  { -- |
    backendService :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServiceReference' with the minimum fields required to make a request.
newBackendServiceReference ::
  BackendServiceReference
newBackendServiceReference =
  BackendServiceReference {backendService = Core.Nothing}

instance Core.FromJSON BackendServiceReference where
  parseJSON =
    Core.withObject
      "BackendServiceReference"
      ( \o ->
          BackendServiceReference
            Core.<$> (o Core..:? "backendService")
      )

instance Core.ToJSON BackendServiceReference where
  toJSON BackendServiceReference {..} =
    Core.object
      ( Core.catMaybes
          [("backendService" Core..=) Core.<$> backendService]
      )

--
-- /See:/ 'newBackendServicesScopedList' smart constructor.
data BackendServicesScopedList = BackendServicesScopedList
  { -- | A list of BackendServices contained in this scope.
    backendServices :: (Core.Maybe [BackendService]),
    -- | Informational warning which replaces the list of backend services when the list is empty.
    warning :: (Core.Maybe BackendServicesScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServicesScopedList' with the minimum fields required to make a request.
newBackendServicesScopedList ::
  BackendServicesScopedList
newBackendServicesScopedList =
  BackendServicesScopedList
    { backendServices = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON BackendServicesScopedList where
  parseJSON =
    Core.withObject
      "BackendServicesScopedList"
      ( \o ->
          BackendServicesScopedList
            Core.<$> (o Core..:? "backendServices")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON BackendServicesScopedList where
  toJSON BackendServicesScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("backendServices" Core..=)
              Core.<$> backendServices,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of backend services when the list is empty.
--
-- /See:/ 'newBackendServicesScopedList_Warning' smart constructor.
data BackendServicesScopedList_Warning = BackendServicesScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe BackendServicesScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [BackendServicesScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServicesScopedList_Warning' with the minimum fields required to make a request.
newBackendServicesScopedList_Warning ::
  BackendServicesScopedList_Warning
newBackendServicesScopedList_Warning =
  BackendServicesScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    BackendServicesScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "BackendServicesScopedList_Warning"
      ( \o ->
          BackendServicesScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    BackendServicesScopedList_Warning
  where
  toJSON BackendServicesScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newBackendServicesScopedList_Warning_DataItem' smart constructor.
data BackendServicesScopedList_Warning_DataItem = BackendServicesScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BackendServicesScopedList_Warning_DataItem' with the minimum fields required to make a request.
newBackendServicesScopedList_Warning_DataItem ::
  BackendServicesScopedList_Warning_DataItem
newBackendServicesScopedList_Warning_DataItem =
  BackendServicesScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    BackendServicesScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "BackendServicesScopedList_Warning_DataItem"
      ( \o ->
          BackendServicesScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    BackendServicesScopedList_Warning_DataItem
  where
  toJSON BackendServicesScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newBfdPacket' smart constructor.
data BfdPacket = BfdPacket
  { -- | The Authentication Present bit of the BFD packet. This is specified in section 4.1 of RFC5880
    authenticationPresent :: (Core.Maybe Core.Bool),
    -- | The Control Plane Independent bit of the BFD packet. This is specified in section 4.1 of RFC5880
    controlPlaneIndependent :: (Core.Maybe Core.Bool),
    -- | The demand bit of the BFD packet. This is specified in section 4.1 of RFC5880
    demand :: (Core.Maybe Core.Bool),
    -- | The diagnostic code specifies the local system\'s reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed, for example. These diagnostic codes are specified in section 4.1 of RFC5880
    diagnostic :: (Core.Maybe BfdPacket_Diagnostic),
    -- | The Final bit of the BFD packet. This is specified in section 4.1 of RFC5880
    final :: (Core.Maybe Core.Bool),
    -- | The length of the BFD Control packet in bytes. This is specified in section 4.1 of RFC5880
    length :: (Core.Maybe Core.Word32),
    -- | The Required Min Echo RX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880
    minEchoRxIntervalMs :: (Core.Maybe Core.Word32),
    -- | The Required Min RX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880
    minRxIntervalMs :: (Core.Maybe Core.Word32),
    -- | The Desired Min TX Interval value in the BFD packet. This is specified in section 4.1 of RFC5880
    minTxIntervalMs :: (Core.Maybe Core.Word32),
    -- | The detection time multiplier of the BFD packet. This is specified in section 4.1 of RFC5880
    multiplier :: (Core.Maybe Core.Word32),
    -- | The multipoint bit of the BFD packet. This is specified in section 4.1 of RFC5880
    multipoint :: (Core.Maybe Core.Bool),
    -- | The My Discriminator value in the BFD packet. This is specified in section 4.1 of RFC5880
    myDiscriminator :: (Core.Maybe Core.Word32),
    -- | The Poll bit of the BFD packet. This is specified in section 4.1 of RFC5880
    poll :: (Core.Maybe Core.Bool),
    -- | The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880
    state :: (Core.Maybe BfdPacket_State),
    -- | The version number of the BFD protocol, as specified in section 4.1 of RFC5880.
    version :: (Core.Maybe Core.Word32),
    -- | The Your Discriminator value in the BFD packet. This is specified in section 4.1 of RFC5880
    yourDiscriminator :: (Core.Maybe Core.Word32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BfdPacket' with the minimum fields required to make a request.
newBfdPacket ::
  BfdPacket
newBfdPacket =
  BfdPacket
    { authenticationPresent = Core.Nothing,
      controlPlaneIndependent = Core.Nothing,
      demand = Core.Nothing,
      diagnostic = Core.Nothing,
      final = Core.Nothing,
      length = Core.Nothing,
      minEchoRxIntervalMs = Core.Nothing,
      minRxIntervalMs = Core.Nothing,
      minTxIntervalMs = Core.Nothing,
      multiplier = Core.Nothing,
      multipoint = Core.Nothing,
      myDiscriminator = Core.Nothing,
      poll = Core.Nothing,
      state = Core.Nothing,
      version = Core.Nothing,
      yourDiscriminator = Core.Nothing
    }

instance Core.FromJSON BfdPacket where
  parseJSON =
    Core.withObject
      "BfdPacket"
      ( \o ->
          BfdPacket
            Core.<$> (o Core..:? "authenticationPresent")
            Core.<*> (o Core..:? "controlPlaneIndependent")
            Core.<*> (o Core..:? "demand")
            Core.<*> (o Core..:? "diagnostic")
            Core.<*> (o Core..:? "final")
            Core.<*> (o Core..:? "length")
            Core.<*> (o Core..:? "minEchoRxIntervalMs")
            Core.<*> (o Core..:? "minRxIntervalMs")
            Core.<*> (o Core..:? "minTxIntervalMs")
            Core.<*> (o Core..:? "multiplier")
            Core.<*> (o Core..:? "multipoint")
            Core.<*> (o Core..:? "myDiscriminator")
            Core.<*> (o Core..:? "poll")
            Core.<*> (o Core..:? "state")
            Core.<*> (o Core..:? "version")
            Core.<*> (o Core..:? "yourDiscriminator")
      )

instance Core.ToJSON BfdPacket where
  toJSON BfdPacket {..} =
    Core.object
      ( Core.catMaybes
          [ ("authenticationPresent" Core..=)
              Core.<$> authenticationPresent,
            ("controlPlaneIndependent" Core..=)
              Core.<$> controlPlaneIndependent,
            ("demand" Core..=) Core.<$> demand,
            ("diagnostic" Core..=) Core.<$> diagnostic,
            ("final" Core..=) Core.<$> final,
            ("length" Core..=) Core.<$> length,
            ("minEchoRxIntervalMs" Core..=)
              Core.<$> minEchoRxIntervalMs,
            ("minRxIntervalMs" Core..=) Core.<$> minRxIntervalMs,
            ("minTxIntervalMs" Core..=) Core.<$> minTxIntervalMs,
            ("multiplier" Core..=) Core.<$> multiplier,
            ("multipoint" Core..=) Core.<$> multipoint,
            ("myDiscriminator" Core..=) Core.<$> myDiscriminator,
            ("poll" Core..=) Core.<$> poll,
            ("state" Core..=) Core.<$> state,
            ("version" Core..=) Core.<$> version,
            ("yourDiscriminator" Core..=)
              Core.<$> yourDiscriminator
          ]
      )

-- | Next free: 15
--
-- /See:/ 'newBfdStatus' smart constructor.
data BfdStatus = BfdStatus
  { -- | The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer.
    bfdSessionInitializationMode :: (Core.Maybe BfdStatus_BfdSessionInitializationMode),
    -- | Unix timestamp of the most recent config update.
    configUpdateTimestampMicros :: (Core.Maybe Core.Int64),
    -- | Control packet counts for the current BFD session.
    controlPacketCounts :: (Core.Maybe BfdStatusPacketCounts),
    -- | Inter-packet time interval statistics for control packets.
    controlPacketIntervals :: (Core.Maybe [PacketIntervals]),
    -- | The diagnostic code specifies the local system\'s reason for the last change in session state. This allows remote systems to determine the reason that the previous session failed, for example. These diagnostic codes are specified in section 4.1 of RFC5880
    localDiagnostic :: (Core.Maybe BfdStatus_LocalDiagnostic),
    -- | The current BFD session state as seen by the transmitting system. These states are specified in section 4.1 of RFC5880
    localState :: (Core.Maybe BfdStatus_LocalState),
    -- | Negotiated transmit interval for control packets.
    negotiatedLocalControlTxIntervalMs :: (Core.Maybe Core.Word32),
    -- | The most recent Rx control packet for this BFD session.
    rxPacket :: (Core.Maybe BfdPacket),
    -- | The most recent Tx control packet for this BFD session.
    txPacket :: (Core.Maybe BfdPacket),
    -- | Session uptime in milliseconds. Value will be 0 if session is not up.
    uptimeMs :: (Core.Maybe Core.Int64)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BfdStatus' with the minimum fields required to make a request.
newBfdStatus ::
  BfdStatus
newBfdStatus =
  BfdStatus
    { bfdSessionInitializationMode = Core.Nothing,
      configUpdateTimestampMicros = Core.Nothing,
      controlPacketCounts = Core.Nothing,
      controlPacketIntervals = Core.Nothing,
      localDiagnostic = Core.Nothing,
      localState = Core.Nothing,
      negotiatedLocalControlTxIntervalMs = Core.Nothing,
      rxPacket = Core.Nothing,
      txPacket = Core.Nothing,
      uptimeMs = Core.Nothing
    }

instance Core.FromJSON BfdStatus where
  parseJSON =
    Core.withObject
      "BfdStatus"
      ( \o ->
          BfdStatus
            Core.<$> (o Core..:? "bfdSessionInitializationMode")
            Core.<*> ( o Core..:? "configUpdateTimestampMicros"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "controlPacketCounts")
            Core.<*> (o Core..:? "controlPacketIntervals")
            Core.<*> (o Core..:? "localDiagnostic")
            Core.<*> (o Core..:? "localState")
            Core.<*> (o Core..:? "negotiatedLocalControlTxIntervalMs")
            Core.<*> (o Core..:? "rxPacket")
            Core.<*> (o Core..:? "txPacket")
            Core.<*> ( o Core..:? "uptimeMs"
                         Core.<&> Core.fmap Core.fromAsText
                     )
      )

instance Core.ToJSON BfdStatus where
  toJSON BfdStatus {..} =
    Core.object
      ( Core.catMaybes
          [ ("bfdSessionInitializationMode" Core..=)
              Core.<$> bfdSessionInitializationMode,
            ("configUpdateTimestampMicros" Core..=)
              Core.. Core.AsText
              Core.<$> configUpdateTimestampMicros,
            ("controlPacketCounts" Core..=)
              Core.<$> controlPacketCounts,
            ("controlPacketIntervals" Core..=)
              Core.<$> controlPacketIntervals,
            ("localDiagnostic" Core..=) Core.<$> localDiagnostic,
            ("localState" Core..=) Core.<$> localState,
            ("negotiatedLocalControlTxIntervalMs" Core..=)
              Core.<$> negotiatedLocalControlTxIntervalMs,
            ("rxPacket" Core..=) Core.<$> rxPacket,
            ("txPacket" Core..=) Core.<$> txPacket,
            ("uptimeMs" Core..=) Core.. Core.AsText
              Core.<$> uptimeMs
          ]
      )

--
-- /See:/ 'newBfdStatusPacketCounts' smart constructor.
data BfdStatusPacketCounts = BfdStatusPacketCounts
  { -- | Number of packets received since the beginning of the current BFD session.
    numRx :: (Core.Maybe Core.Word32),
    -- | Number of packets received that were rejected because of errors since the beginning of the current BFD session.
    numRxRejected :: (Core.Maybe Core.Word32),
    -- | Number of packets received that were successfully processed since the beginning of the current BFD session.
    numRxSuccessful :: (Core.Maybe Core.Word32),
    -- | Number of packets transmitted since the beginning of the current BFD session.
    numTx :: (Core.Maybe Core.Word32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BfdStatusPacketCounts' with the minimum fields required to make a request.
newBfdStatusPacketCounts ::
  BfdStatusPacketCounts
newBfdStatusPacketCounts =
  BfdStatusPacketCounts
    { numRx = Core.Nothing,
      numRxRejected = Core.Nothing,
      numRxSuccessful = Core.Nothing,
      numTx = Core.Nothing
    }

instance Core.FromJSON BfdStatusPacketCounts where
  parseJSON =
    Core.withObject
      "BfdStatusPacketCounts"
      ( \o ->
          BfdStatusPacketCounts
            Core.<$> (o Core..:? "numRx")
            Core.<*> (o Core..:? "numRxRejected")
            Core.<*> (o Core..:? "numRxSuccessful")
            Core.<*> (o Core..:? "numTx")
      )

instance Core.ToJSON BfdStatusPacketCounts where
  toJSON BfdStatusPacketCounts {..} =
    Core.object
      ( Core.catMaybes
          [ ("numRx" Core..=) Core.<$> numRx,
            ("numRxRejected" Core..=) Core.<$> numRxRejected,
            ("numRxSuccessful" Core..=) Core.<$> numRxSuccessful,
            ("numTx" Core..=) Core.<$> numTx
          ]
      )

-- | Associates @members@, or principals, with a @role@.
--
-- /See:/ 'newBinding' smart constructor.
data Binding = Binding
  { -- | This is deprecated and has no effect. Do not use.
    bindingId :: (Core.Maybe Core.Text),
    -- | The condition that is associated with this binding. If the condition evaluates to @true@, then this binding applies to the current request. If the condition evaluates to @false@, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the <https://cloud.google.com/iam/help/conditions/resource-policies IAM documentation>.
    condition :: (Core.Maybe Expr),
    -- | Specifies the principals requesting access for a Google Cloud resource. @members@ can have the following values: * @allUsers@: A special identifier that represents anyone who is on the internet; with or without a Google account. * @allAuthenticatedUsers@: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * @user:{emailid}@: An email address that represents a specific Google account. For example, @alice\@example.com@ . * @serviceAccount:{emailid}@: An email address that represents a Google service account. For example, @my-other-app\@appspot.gserviceaccount.com@. * @serviceAccount:{projectid}.svc.id.goog[{namespace}\/{kubernetes-sa}]@: An identifier for a <https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts Kubernetes service account>. For example, @my-project.svc.id.goog[my-namespace\/my-kubernetes-sa]@. *
    -- @group:{emailid}@: An email address that represents a Google group. For example, @admins\@example.com@. * @domain:{domain}@: The G Suite domain (primary) that represents all the users of that domain. For example, @google.com@ or @example.com@. * @deleted:user:{emailid}?uid={uniqueid}@: An email address (plus unique identifier) representing a user that has been recently deleted. For example, @alice\@example.com?uid=123456789012345678901@. If the user is recovered, this value reverts to @user:{emailid}@ and the recovered user retains the role in the binding. * @deleted:serviceAccount:{emailid}?uid={uniqueid}@: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, @my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901@. If the service account is undeleted, this value reverts to @serviceAccount:{emailid}@ and the undeleted service account retains the role in the binding. * @deleted:group:{emailid}?uid={uniqueid}@: An email address (plus
    -- unique identifier) representing a Google group that has been recently deleted. For example, @admins\@example.com?uid=123456789012345678901@. If the group is recovered, this value reverts to @group:{emailid}@ and the recovered group retains the role in the binding.
    members :: (Core.Maybe [Core.Text]),
    -- | Role that is assigned to the list of @members@, or principals. For example, @roles\/viewer@, @roles\/editor@, or @roles\/owner@.
    role' :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Binding' with the minimum fields required to make a request.
newBinding ::
  Binding
newBinding =
  Binding
    { bindingId = Core.Nothing,
      condition = Core.Nothing,
      members = Core.Nothing,
      role' = Core.Nothing
    }

instance Core.FromJSON Binding where
  parseJSON =
    Core.withObject
      "Binding"
      ( \o ->
          Binding
            Core.<$> (o Core..:? "bindingId")
            Core.<*> (o Core..:? "condition")
            Core.<*> (o Core..:? "members")
            Core.<*> (o Core..:? "role")
      )

instance Core.ToJSON Binding where
  toJSON Binding {..} =
    Core.object
      ( Core.catMaybes
          [ ("bindingId" Core..=) Core.<$> bindingId,
            ("condition" Core..=) Core.<$> condition,
            ("members" Core..=) Core.<$> members,
            ("role" Core..=) Core.<$> role'
          ]
      )

-- | A transient resource used in compute.instances.bulkInsert and compute.regionInstances.bulkInsert . This resource is not persisted anywhere, it is used only for processing the requests.
--
-- /See:/ 'newBulkInsertInstanceResource' smart constructor.
data BulkInsertInstanceResource = BulkInsertInstanceResource
  { -- | The maximum number of instances to create.
    count :: (Core.Maybe Core.Int64),
    -- | The instance properties defining the VM instances to be created. Required if sourceInstanceTemplate is not provided.
    instanceProperties :: (Core.Maybe InstanceProperties),
    -- | Policy for chosing target zone. For more information, see Create VMs in bulk .
    locationPolicy :: (Core.Maybe LocationPolicy),
    -- | The minimum number of instances to create. If no min/count is specified then count is used as the default value. If min/count instances cannot be created, then no instances will be created and instances already created will be deleted.
    minCount :: (Core.Maybe Core.Int64),
    -- | The string pattern used for the names of the VMs. Either name/pattern or per/instance/properties must be set. The pattern must contain one continuous sequence of placeholder hash characters (#) with each character corresponding to one digit of the generated instance name. Example: a name/pattern of inst-#### generates instance names such as inst-0001 and inst-0002. If existing instances in the same project and zone have names that match the name pattern then the generated instance numbers start after the biggest existing number. For example, if there exists an instance with name inst-0050, then instance names generated using the pattern inst-#### begin with inst-0051. The name pattern placeholder #...# can contain up to 18 characters.
    namePattern :: (Core.Maybe Core.Text),
    -- | Per-instance properties to be set on individual instances. Keys of this map specify requested instance names. Can be empty if name_pattern is used.
    perInstanceProperties :: (Core.Maybe BulkInsertInstanceResource_PerInstanceProperties),
    -- | Specifies the instance template from which to create instances. You may combine sourceInstanceTemplate with instanceProperties to override specific values from an existing instance template. Bulk API follows the semantics of JSON Merge Patch described by RFC 7396. It can be a full or partial URL. For example, the following are all valid URLs to an instance template: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project \/global\/instanceTemplates\/instanceTemplate - projects\/project\/global\/instanceTemplates\/instanceTemplate - global\/instanceTemplates\/instanceTemplate This field is optional.
    sourceInstanceTemplate :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BulkInsertInstanceResource' with the minimum fields required to make a request.
newBulkInsertInstanceResource ::
  BulkInsertInstanceResource
newBulkInsertInstanceResource =
  BulkInsertInstanceResource
    { count = Core.Nothing,
      instanceProperties = Core.Nothing,
      locationPolicy = Core.Nothing,
      minCount = Core.Nothing,
      namePattern = Core.Nothing,
      perInstanceProperties = Core.Nothing,
      sourceInstanceTemplate = Core.Nothing
    }

instance Core.FromJSON BulkInsertInstanceResource where
  parseJSON =
    Core.withObject
      "BulkInsertInstanceResource"
      ( \o ->
          BulkInsertInstanceResource
            Core.<$> ( o Core..:? "count"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "instanceProperties")
            Core.<*> (o Core..:? "locationPolicy")
            Core.<*> ( o Core..:? "minCount"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "namePattern")
            Core.<*> (o Core..:? "perInstanceProperties")
            Core.<*> (o Core..:? "sourceInstanceTemplate")
      )

instance Core.ToJSON BulkInsertInstanceResource where
  toJSON BulkInsertInstanceResource {..} =
    Core.object
      ( Core.catMaybes
          [ ("count" Core..=) Core.. Core.AsText Core.<$> count,
            ("instanceProperties" Core..=)
              Core.<$> instanceProperties,
            ("locationPolicy" Core..=) Core.<$> locationPolicy,
            ("minCount" Core..=) Core.. Core.AsText
              Core.<$> minCount,
            ("namePattern" Core..=) Core.<$> namePattern,
            ("perInstanceProperties" Core..=)
              Core.<$> perInstanceProperties,
            ("sourceInstanceTemplate" Core..=)
              Core.<$> sourceInstanceTemplate
          ]
      )

-- | Per-instance properties to be set on individual instances. Keys of this map specify requested instance names. Can be empty if name_pattern is used.
--
-- /See:/ 'newBulkInsertInstanceResource_PerInstanceProperties' smart constructor.
newtype BulkInsertInstanceResource_PerInstanceProperties = BulkInsertInstanceResource_PerInstanceProperties
  { -- |
    additional ::
      ( Core.HashMap
          Core.Text
          BulkInsertInstanceResourcePerInstanceProperties
      )
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BulkInsertInstanceResource_PerInstanceProperties' with the minimum fields required to make a request.
newBulkInsertInstanceResource_PerInstanceProperties ::
  -- |  See 'additional'.
  Core.HashMap Core.Text BulkInsertInstanceResourcePerInstanceProperties ->
  BulkInsertInstanceResource_PerInstanceProperties
newBulkInsertInstanceResource_PerInstanceProperties additional =
  BulkInsertInstanceResource_PerInstanceProperties {additional = additional}

instance
  Core.FromJSON
    BulkInsertInstanceResource_PerInstanceProperties
  where
  parseJSON =
    Core.withObject
      "BulkInsertInstanceResource_PerInstanceProperties"
      ( \o ->
          BulkInsertInstanceResource_PerInstanceProperties
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    BulkInsertInstanceResource_PerInstanceProperties
  where
  toJSON
    BulkInsertInstanceResource_PerInstanceProperties {..} =
      Core.toJSON additional

-- | Per-instance properties to be set on individual instances. To be extended in the future.
--
-- /See:/ 'newBulkInsertInstanceResourcePerInstanceProperties' smart constructor.
newtype BulkInsertInstanceResourcePerInstanceProperties = BulkInsertInstanceResourcePerInstanceProperties
  { -- | This field is only temporary. It will be removed. Do not use it.
    name :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'BulkInsertInstanceResourcePerInstanceProperties' with the minimum fields required to make a request.
newBulkInsertInstanceResourcePerInstanceProperties ::
  BulkInsertInstanceResourcePerInstanceProperties
newBulkInsertInstanceResourcePerInstanceProperties =
  BulkInsertInstanceResourcePerInstanceProperties {name = Core.Nothing}

instance
  Core.FromJSON
    BulkInsertInstanceResourcePerInstanceProperties
  where
  parseJSON =
    Core.withObject
      "BulkInsertInstanceResourcePerInstanceProperties"
      ( \o ->
          BulkInsertInstanceResourcePerInstanceProperties
            Core.<$> (o Core..:? "name")
      )

instance
  Core.ToJSON
    BulkInsertInstanceResourcePerInstanceProperties
  where
  toJSON
    BulkInsertInstanceResourcePerInstanceProperties {..} =
      Core.object
        (Core.catMaybes [("name" Core..=) Core.<$> name])

--
-- /See:/ 'newCacheInvalidationRule' smart constructor.
data CacheInvalidationRule = CacheInvalidationRule
  { -- | If set, this invalidation rule will only apply to requests with a Host header matching host.
    host :: (Core.Maybe Core.Text),
    -- |
    path :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'CacheInvalidationRule' with the minimum fields required to make a request.
newCacheInvalidationRule ::
  CacheInvalidationRule
newCacheInvalidationRule =
  CacheInvalidationRule {host = Core.Nothing, path = Core.Nothing}

instance Core.FromJSON CacheInvalidationRule where
  parseJSON =
    Core.withObject
      "CacheInvalidationRule"
      ( \o ->
          CacheInvalidationRule
            Core.<$> (o Core..:? "host") Core.<*> (o Core..:? "path")
      )

instance Core.ToJSON CacheInvalidationRule where
  toJSON CacheInvalidationRule {..} =
    Core.object
      ( Core.catMaybes
          [ ("host" Core..=) Core.<$> host,
            ("path" Core..=) Core.<$> path
          ]
      )

-- | Message containing what to include in the cache key for a request for Cloud CDN.
--
-- /See:/ 'newCacheKeyPolicy' smart constructor.
data CacheKeyPolicy = CacheKeyPolicy
  { -- | If true, requests to different hosts will be cached separately.
    includeHost :: (Core.Maybe Core.Bool),
    -- | Allows HTTP request headers (by name) to be used in the cache key.
    includeHttpHeaders :: (Core.Maybe [Core.Text]),
    -- | Allows HTTP cookies (by name) to be used in the cache key. The name=value pair will be used in the cache key Cloud CDN generates.
    includeNamedCookies :: (Core.Maybe [Core.Text]),
    -- | If true, http and https requests will be cached separately.
    includeProtocol :: (Core.Maybe Core.Bool),
    -- | If true, include query string parameters in the cache key according to query/string/whitelist and query/string/blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.
    includeQueryString :: (Core.Maybe Core.Bool),
    -- | Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query/string/whitelist or query/string/blacklist, not both. \'&\' and \'=\' will be percent encoded and not treated as delimiters.
    queryStringBlacklist :: (Core.Maybe [Core.Text]),
    -- | Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query/string/whitelist or query/string/blacklist, not both. \'&\' and \'=\' will be percent encoded and not treated as delimiters.
    queryStringWhitelist :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'CacheKeyPolicy' with the minimum fields required to make a request.
newCacheKeyPolicy ::
  CacheKeyPolicy
newCacheKeyPolicy =
  CacheKeyPolicy
    { includeHost = Core.Nothing,
      includeHttpHeaders = Core.Nothing,
      includeNamedCookies = Core.Nothing,
      includeProtocol = Core.Nothing,
      includeQueryString = Core.Nothing,
      queryStringBlacklist = Core.Nothing,
      queryStringWhitelist = Core.Nothing
    }

instance Core.FromJSON CacheKeyPolicy where
  parseJSON =
    Core.withObject
      "CacheKeyPolicy"
      ( \o ->
          CacheKeyPolicy
            Core.<$> (o Core..:? "includeHost")
            Core.<*> (o Core..:? "includeHttpHeaders")
            Core.<*> (o Core..:? "includeNamedCookies")
            Core.<*> (o Core..:? "includeProtocol")
            Core.<*> (o Core..:? "includeQueryString")
            Core.<*> (o Core..:? "queryStringBlacklist")
            Core.<*> (o Core..:? "queryStringWhitelist")
      )

instance Core.ToJSON CacheKeyPolicy where
  toJSON CacheKeyPolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("includeHost" Core..=) Core.<$> includeHost,
            ("includeHttpHeaders" Core..=)
              Core.<$> includeHttpHeaders,
            ("includeNamedCookies" Core..=)
              Core.<$> includeNamedCookies,
            ("includeProtocol" Core..=) Core.<$> includeProtocol,
            ("includeQueryString" Core..=)
              Core.<$> includeQueryString,
            ("queryStringBlacklist" Core..=)
              Core.<$> queryStringBlacklist,
            ("queryStringWhitelist" Core..=)
              Core.<$> queryStringWhitelist
          ]
      )

-- | Settings controlling the volume of requests, connections and retries to this backend service.
--
-- /See:/ 'newCircuitBreakers' smart constructor.
data CircuitBreakers = CircuitBreakers
  { -- | The maximum number of connections to the backend service. If not specified, there is no limit. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    maxConnections :: (Core.Maybe Core.Int32),
    -- | The maximum number of pending requests allowed to the backend service. If not specified, there is no limit. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    maxPendingRequests :: (Core.Maybe Core.Int32),
    -- | The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit.
    maxRequests :: (Core.Maybe Core.Int32),
    -- | Maximum requests for a single connection to the backend service. This parameter is respected by both the HTTP\/1.1 and HTTP\/2 implementations. If not specified, there is no limit. Setting this parameter to 1 will effectively disable keep alive. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    maxRequestsPerConnection :: (Core.Maybe Core.Int32),
    -- | The maximum number of parallel retries allowed to the backend cluster. If not specified, the default is 1. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    maxRetries :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'CircuitBreakers' with the minimum fields required to make a request.
newCircuitBreakers ::
  CircuitBreakers
newCircuitBreakers =
  CircuitBreakers
    { maxConnections = Core.Nothing,
      maxPendingRequests = Core.Nothing,
      maxRequests = Core.Nothing,
      maxRequestsPerConnection = Core.Nothing,
      maxRetries = Core.Nothing
    }

instance Core.FromJSON CircuitBreakers where
  parseJSON =
    Core.withObject
      "CircuitBreakers"
      ( \o ->
          CircuitBreakers
            Core.<$> (o Core..:? "maxConnections")
            Core.<*> (o Core..:? "maxPendingRequests")
            Core.<*> (o Core..:? "maxRequests")
            Core.<*> (o Core..:? "maxRequestsPerConnection")
            Core.<*> (o Core..:? "maxRetries")
      )

instance Core.ToJSON CircuitBreakers where
  toJSON CircuitBreakers {..} =
    Core.object
      ( Core.catMaybes
          [ ("maxConnections" Core..=) Core.<$> maxConnections,
            ("maxPendingRequests" Core..=)
              Core.<$> maxPendingRequests,
            ("maxRequests" Core..=) Core.<$> maxRequests,
            ("maxRequestsPerConnection" Core..=)
              Core.<$> maxRequestsPerConnection,
            ("maxRetries" Core..=) Core.<$> maxRetries
          ]
      )

-- | Represents a regional Commitment resource. Creating a commitment resource means that you are purchasing a committed use contract with an explicit start and end time. You can create commitments based on vCPUs and memory usage and receive discounted rates. For full details, read Signing Up for Committed Use Discounts.
--
-- /See:/ 'newCommitment' smart constructor.
data Commitment = Commitment
  { -- | Specifies whether to enable automatic renewal for the commitment. The default value is false if not specified. The field can be updated until the day of the commitment expiration at 12:00am PST. If the field is set to true, the commitment will be automatically renewed for either one or three years according to the terms of the existing commitment.
    autoRenew :: (Core.Maybe Core.Bool),
    -- | The category of the commitment. Category MACHINE specifies commitments composed of machine resources such as VCPU or MEMORY, listed in resources. Category LICENSE specifies commitments composed of software licenses, listed in licenseResources. Note that only MACHINE commitments should have a Type specified.
    category :: (Core.Maybe Commitment_Category),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] Commitment end time in RFC3339 text format.
    endTimestamp :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#commitment for commitments.
    kind :: Core.Text,
    -- | The license specification required as part of a license commitment.
    licenseResource :: (Core.Maybe LicenseResourceCommitment),
    -- | List of source commitments to be merged into a new commitment.
    mergeSourceCommitments :: (Core.Maybe [Core.Text]),
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | The plan for this commitment, which determines duration and discount rate. The currently supported plans are TWELVE/MONTH (1 year), and THIRTY/SIX_MONTH (3 years).
    plan :: (Core.Maybe Commitment_Plan),
    -- | [Output Only] URL of the region where this commitment may be used.
    region :: (Core.Maybe Core.Text),
    -- | List of reservations in this commitment.
    reservations :: (Core.Maybe [Reservation]),
    -- | A list of commitment amounts for particular resources. Note that VCPU and MEMORY resource commitments must occur together.
    resources :: (Core.Maybe [ResourceCommitment]),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | Source commitment to be splitted into a new commitment.
    splitSourceCommitment :: (Core.Maybe Core.Text),
    -- | [Output Only] Commitment start time in RFC3339 text format.
    startTimestamp :: (Core.Maybe Core.Text),
    -- | [Output Only] Status of the commitment with regards to eventual expiration (each commitment has an end date defined). One of the following values: NOT/YET/ACTIVE, ACTIVE, EXPIRED.
    status :: (Core.Maybe Commitment_Status),
    -- | [Output Only] An optional, human-readable explanation of the status.
    statusMessage :: (Core.Maybe Core.Text),
    -- | The type of commitment, which affects the discount rate and the eligible resources. Type MEMORY/OPTIMIZED specifies a commitment that will only apply to memory optimized machines. Type ACCELERATOR/OPTIMIZED specifies a commitment that will only apply to accelerator optimized machines.
    type' :: (Core.Maybe Commitment_Type)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Commitment' with the minimum fields required to make a request.
newCommitment ::
  Commitment
newCommitment =
  Commitment
    { autoRenew = Core.Nothing,
      category = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      endTimestamp = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#commitment",
      licenseResource = Core.Nothing,
      mergeSourceCommitments = Core.Nothing,
      name = Core.Nothing,
      plan = Core.Nothing,
      region = Core.Nothing,
      reservations = Core.Nothing,
      resources = Core.Nothing,
      selfLink = Core.Nothing,
      splitSourceCommitment = Core.Nothing,
      startTimestamp = Core.Nothing,
      status = Core.Nothing,
      statusMessage = Core.Nothing,
      type' = Core.Nothing
    }

instance Core.FromJSON Commitment where
  parseJSON =
    Core.withObject
      "Commitment"
      ( \o ->
          Commitment
            Core.<$> (o Core..:? "autoRenew")
            Core.<*> (o Core..:? "category")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "endTimestamp")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#commitment")
            Core.<*> (o Core..:? "licenseResource")
            Core.<*> (o Core..:? "mergeSourceCommitments")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "plan")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "reservations")
            Core.<*> (o Core..:? "resources")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "splitSourceCommitment")
            Core.<*> (o Core..:? "startTimestamp")
            Core.<*> (o Core..:? "status")
            Core.<*> (o Core..:? "statusMessage")
            Core.<*> (o Core..:? "type")
      )

instance Core.ToJSON Commitment where
  toJSON Commitment {..} =
    Core.object
      ( Core.catMaybes
          [ ("autoRenew" Core..=) Core.<$> autoRenew,
            ("category" Core..=) Core.<$> category,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("endTimestamp" Core..=) Core.<$> endTimestamp,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("licenseResource" Core..=) Core.<$> licenseResource,
            ("mergeSourceCommitments" Core..=)
              Core.<$> mergeSourceCommitments,
            ("name" Core..=) Core.<$> name,
            ("plan" Core..=) Core.<$> plan,
            ("region" Core..=) Core.<$> region,
            ("reservations" Core..=) Core.<$> reservations,
            ("resources" Core..=) Core.<$> resources,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("splitSourceCommitment" Core..=)
              Core.<$> splitSourceCommitment,
            ("startTimestamp" Core..=) Core.<$> startTimestamp,
            ("status" Core..=) Core.<$> status,
            ("statusMessage" Core..=) Core.<$> statusMessage,
            ("type" Core..=) Core.<$> type'
          ]
      )

--
-- /See:/ 'newCommitmentAggregatedList' smart constructor.
data CommitmentAggregatedList = CommitmentAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of CommitmentsScopedList resources.
    items :: (Core.Maybe CommitmentAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#commitmentAggregatedList for aggregated lists of commitments.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe CommitmentAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'CommitmentAggregatedList' with the minimum fields required to make a request.
newCommitmentAggregatedList ::
  CommitmentAggregatedList
newCommitmentAggregatedList =
  CommitmentAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#commitmentAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON CommitmentAggregatedList where
  parseJSON =
    Core.withObject
      "CommitmentAggregatedList"
      ( \o ->
          CommitmentAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#commitmentAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON CommitmentAggregatedList where
  toJSON CommitmentAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of CommitmentsScopedList resources.
--
-- /See:/ 'newCommitmentAggregatedList_Items' smart constructor.
newtype CommitmentAggregatedList_Items = CommitmentAggregatedList_Items
  { -- | [Output Only] Name of the scope containing this set of commitments.
    additional :: (Core.HashMap Core.Text CommitmentsScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'CommitmentAggregatedList_Items' with the minimum fields required to make a request.
newCommitmentAggregatedList_Items ::
  -- |  [Output Only] Name of the scope containing this set of commitments. See 'additional'.
  Core.HashMap Core.Text CommitmentsScopedList ->
  CommitmentAggregatedList_Items
newCommitmentAggregatedList_Items additional =
  CommitmentAggregatedList_Items {additional = additional}

instance Core.FromJSON CommitmentAggregatedList_Items where
  parseJSON =
    Core.withObject
      "CommitmentAggregatedList_Items"
      ( \o ->
          CommitmentAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON CommitmentAggregatedList_Items where
  toJSON CommitmentAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newCommitmentAggregatedList_Warning' smart constructor.
data CommitmentAggregatedList_Warning = CommitmentAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe CommitmentAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [CommitmentAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'CommitmentAggregatedList_Warning' with the minimum fields required to make a request.
newCommitmentAggregatedList_Warning ::
  CommitmentAggregatedList_Warning
newCommitmentAggregatedList_Warning =
  CommitmentAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    CommitmentAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "CommitmentAggregatedList_Warning"
      ( \o ->
          CommitmentAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON CommitmentAggregatedList_Warning where
  toJSON CommitmentAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newCommitmentAggregatedList_Warning_DataItem' smart constructor.
data CommitmentAggregatedList_Warning_DataItem = CommitmentAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'CommitmentAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newCommitmentAggregatedList_Warning_DataItem ::
  CommitmentAggregatedList_Warning_DataItem
newCommitmentAggregatedList_Warning_DataItem =
  CommitmentAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    CommitmentAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "CommitmentAggregatedList_Warning_DataItem"
      ( \o ->
          CommitmentAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    CommitmentAggregatedList_Warning_DataItem
  where
  toJSON CommitmentAggregatedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Contains a list of Commitment resources.
--
-- /See:/ 'newCommitmentList' smart constructor.
data CommitmentList = CommitmentList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of Commitment resources.
    items :: (Core.Maybe [Commitment]),
    -- | [Output Only] Type of resource. Always compute#commitmentList for lists of commitments.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe CommitmentList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'CommitmentList' with the minimum fields required to make a request.
newCommitmentList ::
  CommitmentList
newCommitmentList =
  CommitmentList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#commitmentList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON CommitmentList where
  parseJSON =
    Core.withObject
      "CommitmentList"
      ( \o ->
          CommitmentList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#commitmentList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON CommitmentList where
  toJSON CommitmentList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newCommitmentList_Warning' smart constructor.
data CommitmentList_Warning = CommitmentList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe CommitmentList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [CommitmentList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'CommitmentList_Warning' with the minimum fields required to make a request.
newCommitmentList_Warning ::
  CommitmentList_Warning
newCommitmentList_Warning =
  CommitmentList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON CommitmentList_Warning where
  parseJSON =
    Core.withObject
      "CommitmentList_Warning"
      ( \o ->
          CommitmentList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON CommitmentList_Warning where
  toJSON CommitmentList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newCommitmentList_Warning_DataItem' smart constructor.
data CommitmentList_Warning_DataItem = CommitmentList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'CommitmentList_Warning_DataItem' with the minimum fields required to make a request.
newCommitmentList_Warning_DataItem ::
  CommitmentList_Warning_DataItem
newCommitmentList_Warning_DataItem =
  CommitmentList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    CommitmentList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "CommitmentList_Warning_DataItem"
      ( \o ->
          CommitmentList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON CommitmentList_Warning_DataItem where
  toJSON CommitmentList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newCommitmentsScopedList' smart constructor.
data CommitmentsScopedList = CommitmentsScopedList
  { -- | [Output Only] A list of commitments contained in this scope.
    commitments :: (Core.Maybe [Commitment]),
    -- | [Output Only] Informational warning which replaces the list of commitments when the list is empty.
    warning :: (Core.Maybe CommitmentsScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'CommitmentsScopedList' with the minimum fields required to make a request.
newCommitmentsScopedList ::
  CommitmentsScopedList
newCommitmentsScopedList =
  CommitmentsScopedList {commitments = Core.Nothing, warning = Core.Nothing}

instance Core.FromJSON CommitmentsScopedList where
  parseJSON =
    Core.withObject
      "CommitmentsScopedList"
      ( \o ->
          CommitmentsScopedList
            Core.<$> (o Core..:? "commitments")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON CommitmentsScopedList where
  toJSON CommitmentsScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("commitments" Core..=) Core.<$> commitments,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning which replaces the list of commitments when the list is empty.
--
-- /See:/ 'newCommitmentsScopedList_Warning' smart constructor.
data CommitmentsScopedList_Warning = CommitmentsScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe CommitmentsScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [CommitmentsScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'CommitmentsScopedList_Warning' with the minimum fields required to make a request.
newCommitmentsScopedList_Warning ::
  CommitmentsScopedList_Warning
newCommitmentsScopedList_Warning =
  CommitmentsScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON CommitmentsScopedList_Warning where
  parseJSON =
    Core.withObject
      "CommitmentsScopedList_Warning"
      ( \o ->
          CommitmentsScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON CommitmentsScopedList_Warning where
  toJSON CommitmentsScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newCommitmentsScopedList_Warning_DataItem' smart constructor.
data CommitmentsScopedList_Warning_DataItem = CommitmentsScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'CommitmentsScopedList_Warning_DataItem' with the minimum fields required to make a request.
newCommitmentsScopedList_Warning_DataItem ::
  CommitmentsScopedList_Warning_DataItem
newCommitmentsScopedList_Warning_DataItem =
  CommitmentsScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    CommitmentsScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "CommitmentsScopedList_Warning_DataItem"
      ( \o ->
          CommitmentsScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    CommitmentsScopedList_Warning_DataItem
  where
  toJSON CommitmentsScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | This is deprecated and has no effect. Do not use.
--
-- /See:/ 'newCondition' smart constructor.
data Condition = Condition
  { -- | This is deprecated and has no effect. Do not use.
    iam :: (Core.Maybe Condition_Iam),
    -- | This is deprecated and has no effect. Do not use.
    op :: (Core.Maybe Condition_Op),
    -- | This is deprecated and has no effect. Do not use.
    svc :: (Core.Maybe Core.Text),
    -- | This is deprecated and has no effect. Do not use.
    sys :: (Core.Maybe Condition_Sys),
    -- | This is deprecated and has no effect. Do not use.
    values :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Condition' with the minimum fields required to make a request.
newCondition ::
  Condition
newCondition =
  Condition
    { iam = Core.Nothing,
      op = Core.Nothing,
      svc = Core.Nothing,
      sys = Core.Nothing,
      values = Core.Nothing
    }

instance Core.FromJSON Condition where
  parseJSON =
    Core.withObject
      "Condition"
      ( \o ->
          Condition
            Core.<$> (o Core..:? "iam")
            Core.<*> (o Core..:? "op")
            Core.<*> (o Core..:? "svc")
            Core.<*> (o Core..:? "sys")
            Core.<*> (o Core..:? "values")
      )

instance Core.ToJSON Condition where
  toJSON Condition {..} =
    Core.object
      ( Core.catMaybes
          [ ("iam" Core..=) Core.<$> iam,
            ("op" Core..=) Core.<$> op,
            ("svc" Core..=) Core.<$> svc,
            ("sys" Core..=) Core.<$> sys,
            ("values" Core..=) Core.<$> values
          ]
      )

-- | A set of Confidential Instance options.
--
-- /See:/ 'newConfidentialInstanceConfig' smart constructor.
newtype ConfidentialInstanceConfig = ConfidentialInstanceConfig
  { -- | Defines whether the instance should have confidential compute enabled.
    enableConfidentialCompute :: (Core.Maybe Core.Bool)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ConfidentialInstanceConfig' with the minimum fields required to make a request.
newConfidentialInstanceConfig ::
  ConfidentialInstanceConfig
newConfidentialInstanceConfig =
  ConfidentialInstanceConfig {enableConfidentialCompute = Core.Nothing}

instance Core.FromJSON ConfidentialInstanceConfig where
  parseJSON =
    Core.withObject
      "ConfidentialInstanceConfig"
      ( \o ->
          ConfidentialInstanceConfig
            Core.<$> (o Core..:? "enableConfidentialCompute")
      )

instance Core.ToJSON ConfidentialInstanceConfig where
  toJSON ConfidentialInstanceConfig {..} =
    Core.object
      ( Core.catMaybes
          [ ("enableConfidentialCompute" Core..=)
              Core.<$> enableConfidentialCompute
          ]
      )

-- | Message containing connection draining configuration.
--
-- /See:/ 'newConnectionDraining' smart constructor.
newtype ConnectionDraining = ConnectionDraining
  { -- | Configures a duration timeout for existing requests on a removed backend instance. For supported load balancers and protocols, as described in Enabling connection draining.
    drainingTimeoutSec :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ConnectionDraining' with the minimum fields required to make a request.
newConnectionDraining ::
  ConnectionDraining
newConnectionDraining = ConnectionDraining {drainingTimeoutSec = Core.Nothing}

instance Core.FromJSON ConnectionDraining where
  parseJSON =
    Core.withObject
      "ConnectionDraining"
      ( \o ->
          ConnectionDraining
            Core.<$> (o Core..:? "drainingTimeoutSec")
      )

instance Core.ToJSON ConnectionDraining where
  toJSON ConnectionDraining {..} =
    Core.object
      ( Core.catMaybes
          [ ("drainingTimeoutSec" Core..=)
              Core.<$> drainingTimeoutSec
          ]
      )

-- | This message defines settings for a consistent hash style load balancer.
--
-- /See:/ 'newConsistentHashLoadBalancerSettings' smart constructor.
data ConsistentHashLoadBalancerSettings = ConsistentHashLoadBalancerSettings
  { -- | Hash is based on HTTP Cookie. This field describes a HTTP cookie that will be used as the hash key for the consistent hash load balancer. If the cookie is not present, it will be generated. This field is applicable if the sessionAffinity is set to HTTP_COOKIE. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    httpCookie :: (Core.Maybe ConsistentHashLoadBalancerSettingsHttpCookie),
    -- | The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.
    httpHeaderName :: (Core.Maybe Core.Text),
    -- | The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node.
    minimumRingSize :: (Core.Maybe Core.Int64)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ConsistentHashLoadBalancerSettings' with the minimum fields required to make a request.
newConsistentHashLoadBalancerSettings ::
  ConsistentHashLoadBalancerSettings
newConsistentHashLoadBalancerSettings =
  ConsistentHashLoadBalancerSettings
    { httpCookie = Core.Nothing,
      httpHeaderName = Core.Nothing,
      minimumRingSize = Core.Nothing
    }

instance
  Core.FromJSON
    ConsistentHashLoadBalancerSettings
  where
  parseJSON =
    Core.withObject
      "ConsistentHashLoadBalancerSettings"
      ( \o ->
          ConsistentHashLoadBalancerSettings
            Core.<$> (o Core..:? "httpCookie")
            Core.<*> (o Core..:? "httpHeaderName")
            Core.<*> ( o Core..:? "minimumRingSize"
                         Core.<&> Core.fmap Core.fromAsText
                     )
      )

instance
  Core.ToJSON
    ConsistentHashLoadBalancerSettings
  where
  toJSON ConsistentHashLoadBalancerSettings {..} =
    Core.object
      ( Core.catMaybes
          [ ("httpCookie" Core..=) Core.<$> httpCookie,
            ("httpHeaderName" Core..=) Core.<$> httpHeaderName,
            ("minimumRingSize" Core..=) Core.. Core.AsText
              Core.<$> minimumRingSize
          ]
      )

-- | The information about the HTTP Cookie on which the hash function is based for load balancing policies that use a consistent hash.
--
-- /See:/ 'newConsistentHashLoadBalancerSettingsHttpCookie' smart constructor.
data ConsistentHashLoadBalancerSettingsHttpCookie = ConsistentHashLoadBalancerSettingsHttpCookie
  { -- | Name of the cookie.
    name :: (Core.Maybe Core.Text),
    -- | Path to set for the cookie.
    path :: (Core.Maybe Core.Text),
    -- | Lifetime of the cookie.
    ttl :: (Core.Maybe Duration)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ConsistentHashLoadBalancerSettingsHttpCookie' with the minimum fields required to make a request.
newConsistentHashLoadBalancerSettingsHttpCookie ::
  ConsistentHashLoadBalancerSettingsHttpCookie
newConsistentHashLoadBalancerSettingsHttpCookie =
  ConsistentHashLoadBalancerSettingsHttpCookie
    { name = Core.Nothing,
      path = Core.Nothing,
      ttl = Core.Nothing
    }

instance
  Core.FromJSON
    ConsistentHashLoadBalancerSettingsHttpCookie
  where
  parseJSON =
    Core.withObject
      "ConsistentHashLoadBalancerSettingsHttpCookie"
      ( \o ->
          ConsistentHashLoadBalancerSettingsHttpCookie
            Core.<$> (o Core..:? "name")
            Core.<*> (o Core..:? "path")
            Core.<*> (o Core..:? "ttl")
      )

instance
  Core.ToJSON
    ConsistentHashLoadBalancerSettingsHttpCookie
  where
  toJSON
    ConsistentHashLoadBalancerSettingsHttpCookie {..} =
      Core.object
        ( Core.catMaybes
            [ ("name" Core..=) Core.<$> name,
              ("path" Core..=) Core.<$> path,
              ("ttl" Core..=) Core.<$> ttl
            ]
        )

-- | The specification for allowing client-side cross-origin requests. For more information about the W3C recommendation for cross-origin resource sharing (CORS), see Fetch API Living Standard.
--
-- /See:/ 'newCorsPolicy' smart constructor.
data CorsPolicy = CorsPolicy
  { -- | In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This field translates to the Access-Control-Allow-Credentials header. Default is false.
    allowCredentials :: (Core.Maybe Core.Bool),
    -- | Specifies the content for the Access-Control-Allow-Headers header.
    allowHeaders :: (Core.Maybe [Core.Text]),
    -- | Specifies the content for the Access-Control-Allow-Methods header.
    allowMethods :: (Core.Maybe [Core.Text]),
    -- | Specifies a regular expression that matches allowed origins. For more information about the regular expression syntax, see Syntax. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL/SELF/MANAGED.
    allowOriginRegexes :: (Core.Maybe [Core.Text]),
    -- | Specifies the list of origins that is allowed to do CORS requests. An origin is allowed if it matches either an item in allowOrigins or an item in allowOriginRegexes.
    allowOrigins :: (Core.Maybe [Core.Text]),
    -- | If true, the setting specifies the CORS policy is disabled. The default value of false, which indicates that the CORS policy is in effect.
    disabled :: (Core.Maybe Core.Bool),
    -- | Specifies the content for the Access-Control-Expose-Headers header.
    exposeHeaders :: (Core.Maybe [Core.Text]),
    -- | Specifies how long results of a preflight request can be cached in seconds. This field translates to the Access-Control-Max-Age header.
    maxAge :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'CorsPolicy' with the minimum fields required to make a request.
newCorsPolicy ::
  CorsPolicy
newCorsPolicy =
  CorsPolicy
    { allowCredentials = Core.Nothing,
      allowHeaders = Core.Nothing,
      allowMethods = Core.Nothing,
      allowOriginRegexes = Core.Nothing,
      allowOrigins = Core.Nothing,
      disabled = Core.Nothing,
      exposeHeaders = Core.Nothing,
      maxAge = Core.Nothing
    }

instance Core.FromJSON CorsPolicy where
  parseJSON =
    Core.withObject
      "CorsPolicy"
      ( \o ->
          CorsPolicy
            Core.<$> (o Core..:? "allowCredentials")
            Core.<*> (o Core..:? "allowHeaders")
            Core.<*> (o Core..:? "allowMethods")
            Core.<*> (o Core..:? "allowOriginRegexes")
            Core.<*> (o Core..:? "allowOrigins")
            Core.<*> (o Core..:? "disabled")
            Core.<*> (o Core..:? "exposeHeaders")
            Core.<*> (o Core..:? "maxAge")
      )

instance Core.ToJSON CorsPolicy where
  toJSON CorsPolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("allowCredentials" Core..=)
              Core.<$> allowCredentials,
            ("allowHeaders" Core..=) Core.<$> allowHeaders,
            ("allowMethods" Core..=) Core.<$> allowMethods,
            ("allowOriginRegexes" Core..=)
              Core.<$> allowOriginRegexes,
            ("allowOrigins" Core..=) Core.<$> allowOrigins,
            ("disabled" Core..=) Core.<$> disabled,
            ("exposeHeaders" Core..=) Core.<$> exposeHeaders,
            ("maxAge" Core..=) Core.<$> maxAge
          ]
      )

--
-- /See:/ 'newCustomerEncryptionKey' smart constructor.
data CustomerEncryptionKey = CustomerEncryptionKey
  { -- | The name of the encryption key that is stored in Google Cloud KMS. For example: \"kmsKeyName\": \"projects\/kms/project/id\/locations\/region\/keyRings\/ key_region\/cryptoKeys\/key
    kmsKeyName :: (Core.Maybe Core.Text),
    -- | The service account being used for the encryption request for the given KMS key. If absent, the Compute Engine default service account is used. For example: \"kmsKeyServiceAccount\": \"name\@project_id.iam.gserviceaccount.com\/
    kmsKeyServiceAccount :: (Core.Maybe Core.Text),
    -- | Specifies a 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to either encrypt or decrypt this resource. You can provide either the rawKey or the rsaEncryptedKey. For example: \"rawKey\": \"SGVsbG8gZnJvbSBHb29nbGUgQ2xvdWQgUGxhdGZvcm0=\"
    rawKey :: (Core.Maybe Core.Text),
    -- | Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit customer-supplied encryption key to either encrypt or decrypt this resource. You can provide either the rawKey or the rsaEncryptedKey. For example: \"rsaEncryptedKey\": \"ieCx\/NcW06PcT7Ep1X6LUTc\/hLvUDYyzSZPPVCVPTVEohpeHASqC8uw5TzyO9U+Fka9JFH z0mBibXUInrC\/jEk014kCK\/NPjYgEMOyssZ4ZINPKxlUh2zn1bV+MCaTICrdmuSBTWlUUiFoD D6PYznLwh8ZNdaheCeZ8ewEXgFQ8V+sDroLaN3Xs3MDTXQEMMoNUXMCZEIpg9Vtp9x2oe==\" The key must meet the following requirements before you can provide it to Compute Engine: 1. The key is wrapped using a RSA public key certificate provided by Google. 2. After being wrapped, the key must be encoded in RFC 4648 base64 encoding. Gets the RSA public key certificate provided by Google at: https:\/\/cloud-certs.storage.googleapis.com\/google-cloud-csek-ingress.pem
    rsaEncryptedKey :: (Core.Maybe Core.Text),
    -- | [Output only] The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.
    sha256 :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'CustomerEncryptionKey' with the minimum fields required to make a request.
newCustomerEncryptionKey ::
  CustomerEncryptionKey
newCustomerEncryptionKey =
  CustomerEncryptionKey
    { kmsKeyName = Core.Nothing,
      kmsKeyServiceAccount = Core.Nothing,
      rawKey = Core.Nothing,
      rsaEncryptedKey = Core.Nothing,
      sha256 = Core.Nothing
    }

instance Core.FromJSON CustomerEncryptionKey where
  parseJSON =
    Core.withObject
      "CustomerEncryptionKey"
      ( \o ->
          CustomerEncryptionKey
            Core.<$> (o Core..:? "kmsKeyName")
            Core.<*> (o Core..:? "kmsKeyServiceAccount")
            Core.<*> (o Core..:? "rawKey")
            Core.<*> (o Core..:? "rsaEncryptedKey")
            Core.<*> (o Core..:? "sha256")
      )

instance Core.ToJSON CustomerEncryptionKey where
  toJSON CustomerEncryptionKey {..} =
    Core.object
      ( Core.catMaybes
          [ ("kmsKeyName" Core..=) Core.<$> kmsKeyName,
            ("kmsKeyServiceAccount" Core..=)
              Core.<$> kmsKeyServiceAccount,
            ("rawKey" Core..=) Core.<$> rawKey,
            ("rsaEncryptedKey" Core..=) Core.<$> rsaEncryptedKey,
            ("sha256" Core..=) Core.<$> sha256
          ]
      )

--
-- /See:/ 'newCustomerEncryptionKeyProtectedDisk' smart constructor.
data CustomerEncryptionKeyProtectedDisk = CustomerEncryptionKeyProtectedDisk
  { -- | Decrypts data associated with the disk with a customer-supplied encryption key.
    diskEncryptionKey :: (Core.Maybe CustomerEncryptionKey),
    -- | Specifies a valid partial or full URL to an existing Persistent Disk resource. This field is only applicable for persistent disks. For example: \"source\": \"\/compute\/v1\/projects\/project/id\/zones\/zone\/disks\/ disk/name
    source :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'CustomerEncryptionKeyProtectedDisk' with the minimum fields required to make a request.
newCustomerEncryptionKeyProtectedDisk ::
  CustomerEncryptionKeyProtectedDisk
newCustomerEncryptionKeyProtectedDisk =
  CustomerEncryptionKeyProtectedDisk
    { diskEncryptionKey = Core.Nothing,
      source = Core.Nothing
    }

instance
  Core.FromJSON
    CustomerEncryptionKeyProtectedDisk
  where
  parseJSON =
    Core.withObject
      "CustomerEncryptionKeyProtectedDisk"
      ( \o ->
          CustomerEncryptionKeyProtectedDisk
            Core.<$> (o Core..:? "diskEncryptionKey")
            Core.<*> (o Core..:? "source")
      )

instance
  Core.ToJSON
    CustomerEncryptionKeyProtectedDisk
  where
  toJSON CustomerEncryptionKeyProtectedDisk {..} =
    Core.object
      ( Core.catMaybes
          [ ("diskEncryptionKey" Core..=)
              Core.<$> diskEncryptionKey,
            ("source" Core..=) Core.<$> source
          ]
      )

-- | Deprecation status for a public resource.
--
-- /See:/ 'newDeprecationStatus' smart constructor.
data DeprecationStatus = DeprecationStatus
  { -- | An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it.
    deleted :: (Core.Maybe Core.Text),
    -- | An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it.
    deprecated :: (Core.Maybe Core.Text),
    -- | An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it.
    obsolete :: (Core.Maybe Core.Text),
    -- | The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource.
    replacement :: (Core.Maybe Core.Text),
    -- | The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
    state :: (Core.Maybe DeprecationStatus_State)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DeprecationStatus' with the minimum fields required to make a request.
newDeprecationStatus ::
  DeprecationStatus
newDeprecationStatus =
  DeprecationStatus
    { deleted = Core.Nothing,
      deprecated = Core.Nothing,
      obsolete = Core.Nothing,
      replacement = Core.Nothing,
      state = Core.Nothing
    }

instance Core.FromJSON DeprecationStatus where
  parseJSON =
    Core.withObject
      "DeprecationStatus"
      ( \o ->
          DeprecationStatus
            Core.<$> (o Core..:? "deleted")
            Core.<*> (o Core..:? "deprecated")
            Core.<*> (o Core..:? "obsolete")
            Core.<*> (o Core..:? "replacement")
            Core.<*> (o Core..:? "state")
      )

instance Core.ToJSON DeprecationStatus where
  toJSON DeprecationStatus {..} =
    Core.object
      ( Core.catMaybes
          [ ("deleted" Core..=) Core.<$> deleted,
            ("deprecated" Core..=) Core.<$> deprecated,
            ("obsolete" Core..=) Core.<$> obsolete,
            ("replacement" Core..=) Core.<$> replacement,
            ("state" Core..=) Core.<$> state
          ]
      )

-- | Represents a Persistent Disk resource. Google Compute Engine has two Disk resources: * </compute/docs/reference/rest/v1/disks Zonal> * </compute/docs/reference/rest/v1/regionDisks Regional> Persistent disks are required for running your VM instances. Create both boot and non-boot (data) persistent disks. For more information, read Persistent Disks. For more storage options, read Storage options. The disks resource represents a zonal persistent disk. For more information, read Zonal persistent disks. The regionDisks resource represents a regional persistent disk. For more information, read Regional resources.
--
-- /See:/ 'newDisk' smart constructor.
data Disk = Disk
  { -- | The architecture of the disk. Valid values are ARM64 or X86_64.
    architecture :: (Core.Maybe Disk_Architecture),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | Encrypts the disk using a customer-supplied encryption key or a customer-managed encryption key. Encryption keys do not protect access to metadata of the disk. After you encrypt a disk with a customer-supplied key, you must provide the same key if you use the disk later. For example, to create a disk snapshot, to create a disk image, to create a machine image, or to attach the disk to a virtual machine. After you encrypt a disk with a customer-managed key, the diskEncryptionKey.kmsKeyName is set to a key /version/ name once the disk is created. The disk is encrypted with this version of the key. In the response, diskEncryptionKey.kmsKeyName appears in the following format: \"diskEncryptionKey.kmsKeyName\": \"projects\/kms/project/id\/locations\/region\/keyRings\/ key_region\/cryptoKeys\/key \/cryptoKeysVersions\/version If you do not provide an encryption key when creating the disk, then the disk is encrypted using an automatically generated key and you don\'t need to provide a key to use the disk later.
    diskEncryptionKey :: (Core.Maybe CustomerEncryptionKey),
    -- | A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
    guestOsFeatures :: (Core.Maybe [GuestOsFeature]),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#disk for disks.
    kind :: Core.Text,
    -- | A fingerprint for the labels being applied to this disk, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a disk.
    labelFingerprint :: (Core.Maybe Core.Base64),
    -- | Labels to apply to this disk. These can be later modified by the setLabels method.
    labels :: (Core.Maybe Disk_Labels),
    -- | [Output Only] Last attach timestamp in RFC3339 text format.
    lastAttachTimestamp :: (Core.Maybe Core.Text),
    -- | [Output Only] Last detach timestamp in RFC3339 text format.
    lastDetachTimestamp :: (Core.Maybe Core.Text),
    -- | Integer license codes indicating which licenses are attached to this disk.
    licenseCodes :: (Core.Maybe [Core.Int64]),
    -- | A list of publicly visible licenses. Reserved for Google\'s use.
    licenses :: (Core.Maybe [Core.Text]),
    -- | An opaque location hint used to place the disk close to other resources. This field is for use by internal tools that use the public API.
    locationHint :: (Core.Maybe Core.Text),
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | Internal use only.
    options :: (Core.Maybe Core.Text),
    -- | Input only. [Input Only] Additional params passed with the request, but not persisted as part of resource payload.
    params :: (Core.Maybe DiskParams),
    -- | Physical block size of the persistent disk, in bytes. If not present in a request, a default value is used. The currently supported size is 4096, other sizes may be added in the future. If an unsupported value is requested, the error message will list the supported values for the caller\'s project.
    physicalBlockSizeBytes :: (Core.Maybe Core.Int64),
    -- | Indicates how many IOPS to provision for the disk. This sets the number of I\/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation.
    provisionedIops :: (Core.Maybe Core.Int64),
    -- | [Output Only] URL of the region where the disk resides. Only applicable for regional resources. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    region :: (Core.Maybe Core.Text),
    -- | URLs of the zones where the disk should be replicated to. Only applicable for regional resources.
    replicaZones :: (Core.Maybe [Core.Text]),
    -- | Resource policies applied to this disk for automatic snapshot creations.
    resourcePolicies :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Reserved for future use.
    satisfiesPzs :: (Core.Maybe Core.Bool),
    -- | [Output Only] Server-defined fully-qualified URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | Size, in GB, of the persistent disk. You can specify this field when creating a persistent disk using the sourceImage, sourceSnapshot, or sourceDisk parameter, or specify it alone to create an empty persistent disk. If you specify this field along with a source, the value of sizeGb must not be less than the size of the source. Acceptable values are 1 to 65536, inclusive.
    sizeGb :: (Core.Maybe Core.Int64),
    -- | The source disk used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project\/zones\/zone \/disks\/disk - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project\/regions\/region \/disks\/disk - projects\/project\/zones\/zone\/disks\/disk - projects\/project\/regions\/region\/disks\/disk - zones\/zone\/disks\/disk - regions\/region\/disks\/disk
    sourceDisk :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique ID of the disk used to create this disk. This value identifies the exact disk that was used to create this persistent disk. For example, if you created the persistent disk from a disk that was later deleted and recreated under the same name, the source disk ID would identify the exact version of the disk that was used.
    sourceDiskId :: (Core.Maybe Core.Text),
    -- | The source image used to create this disk. If the source image is deleted, this field will not be set. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family\/debian-9 to use the latest Debian 9 image: projects\/debian-cloud\/global\/images\/family\/debian-9 Alternatively, use a specific version of a public operating system image: projects\/debian-cloud\/global\/images\/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global\/images\/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family\/family-name: global\/images\/family\/my-image-family
    sourceImage :: (Core.Maybe Core.Text),
    -- | The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key.
    sourceImageEncryptionKey :: (Core.Maybe CustomerEncryptionKey),
    -- | [Output Only] The ID value of the image used to create this disk. This value identifies the exact image that was used to create this persistent disk. For example, if you created the persistent disk from an image that was later deleted and recreated under the same name, the source image ID would identify the exact version of the image that was used.
    sourceImageId :: (Core.Maybe Core.Text),
    -- | The source snapshot used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project \/global\/snapshots\/snapshot - projects\/project\/global\/snapshots\/snapshot - global\/snapshots\/snapshot
    sourceSnapshot :: (Core.Maybe Core.Text),
    -- | The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a customer-supplied encryption key.
    sourceSnapshotEncryptionKey :: (Core.Maybe CustomerEncryptionKey),
    -- | [Output Only] The unique ID of the snapshot used to create this disk. This value identifies the exact snapshot that was used to create this persistent disk. For example, if you created the persistent disk from a snapshot that was later deleted and recreated under the same name, the source snapshot ID would identify the exact version of the snapshot that was used.
    sourceSnapshotId :: (Core.Maybe Core.Text),
    -- | The full Google Cloud Storage URI where the disk image is stored. This file must be a gzip-compressed tarball whose name ends in .tar.gz or virtual machine disk whose name ends in vmdk. Valid URIs may start with gs:\/\/ or https:\/\/storage.googleapis.com\/. This flag is not optimized for creating multiple disks from a source storage object. To create many disks from a source storage object, use gcloud compute images import instead.
    sourceStorageObject :: (Core.Maybe Core.Text),
    -- | [Output Only] The status of disk creation. - CREATING: Disk is provisioning. - RESTORING: Source data is being copied into the disk. - FAILED: Disk creation failed. - READY: Disk is ready for use. - DELETING: Disk is deleting.
    status :: (Core.Maybe Disk_Status),
    -- | URL of the disk type resource describing which disk type to use to create the disk. Provide this when creating the disk. For example: projects\/project \/zones\/zone\/diskTypes\/pd-ssd . See Persistent disk types.
    type' :: (Core.Maybe Core.Text),
    -- | [Output Only] Links to the users of the disk (attached instances) in form: projects\/project\/zones\/zone\/instances\/instance
    users :: (Core.Maybe [Core.Text]),
    -- | [Output Only] URL of the zone where the disk resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    zone :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Disk' with the minimum fields required to make a request.
newDisk ::
  Disk
newDisk =
  Disk
    { architecture = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      diskEncryptionKey = Core.Nothing,
      guestOsFeatures = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#disk",
      labelFingerprint = Core.Nothing,
      labels = Core.Nothing,
      lastAttachTimestamp = Core.Nothing,
      lastDetachTimestamp = Core.Nothing,
      licenseCodes = Core.Nothing,
      licenses = Core.Nothing,
      locationHint = Core.Nothing,
      name = Core.Nothing,
      options = Core.Nothing,
      params = Core.Nothing,
      physicalBlockSizeBytes = Core.Nothing,
      provisionedIops = Core.Nothing,
      region = Core.Nothing,
      replicaZones = Core.Nothing,
      resourcePolicies = Core.Nothing,
      satisfiesPzs = Core.Nothing,
      selfLink = Core.Nothing,
      sizeGb = Core.Nothing,
      sourceDisk = Core.Nothing,
      sourceDiskId = Core.Nothing,
      sourceImage = Core.Nothing,
      sourceImageEncryptionKey = Core.Nothing,
      sourceImageId = Core.Nothing,
      sourceSnapshot = Core.Nothing,
      sourceSnapshotEncryptionKey = Core.Nothing,
      sourceSnapshotId = Core.Nothing,
      sourceStorageObject = Core.Nothing,
      status = Core.Nothing,
      type' = Core.Nothing,
      users = Core.Nothing,
      zone = Core.Nothing
    }

instance Core.FromJSON Disk where
  parseJSON =
    Core.withObject
      "Disk"
      ( \o ->
          Disk
            Core.<$> (o Core..:? "architecture")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "diskEncryptionKey")
            Core.<*> (o Core..:? "guestOsFeatures")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#disk")
            Core.<*> (o Core..:? "labelFingerprint")
            Core.<*> (o Core..:? "labels")
            Core.<*> (o Core..:? "lastAttachTimestamp")
            Core.<*> (o Core..:? "lastDetachTimestamp")
            Core.<*> ( o Core..:? "licenseCodes"
                         Core.<&> Core.fmap (Core.fmap Core.fromAsText)
                     )
            Core.<*> (o Core..:? "licenses")
            Core.<*> (o Core..:? "locationHint")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "options")
            Core.<*> (o Core..:? "params")
            Core.<*> ( o Core..:? "physicalBlockSizeBytes"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> ( o Core..:? "provisionedIops"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "replicaZones")
            Core.<*> (o Core..:? "resourcePolicies")
            Core.<*> (o Core..:? "satisfiesPzs")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> ( o Core..:? "sizeGb"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "sourceDisk")
            Core.<*> (o Core..:? "sourceDiskId")
            Core.<*> (o Core..:? "sourceImage")
            Core.<*> (o Core..:? "sourceImageEncryptionKey")
            Core.<*> (o Core..:? "sourceImageId")
            Core.<*> (o Core..:? "sourceSnapshot")
            Core.<*> (o Core..:? "sourceSnapshotEncryptionKey")
            Core.<*> (o Core..:? "sourceSnapshotId")
            Core.<*> (o Core..:? "sourceStorageObject")
            Core.<*> (o Core..:? "status")
            Core.<*> (o Core..:? "type")
            Core.<*> (o Core..:? "users")
            Core.<*> (o Core..:? "zone")
      )

instance Core.ToJSON Disk where
  toJSON Disk {..} =
    Core.object
      ( Core.catMaybes
          [ ("architecture" Core..=) Core.<$> architecture,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("diskEncryptionKey" Core..=)
              Core.<$> diskEncryptionKey,
            ("guestOsFeatures" Core..=) Core.<$> guestOsFeatures,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("labelFingerprint" Core..=)
              Core.<$> labelFingerprint,
            ("labels" Core..=) Core.<$> labels,
            ("lastAttachTimestamp" Core..=)
              Core.<$> lastAttachTimestamp,
            ("lastDetachTimestamp" Core..=)
              Core.<$> lastDetachTimestamp,
            ("licenseCodes" Core..=) Core.. Core.fmap Core.AsText
              Core.<$> licenseCodes,
            ("licenses" Core..=) Core.<$> licenses,
            ("locationHint" Core..=) Core.<$> locationHint,
            ("name" Core..=) Core.<$> name,
            ("options" Core..=) Core.<$> options,
            ("params" Core..=) Core.<$> params,
            ("physicalBlockSizeBytes" Core..=) Core.. Core.AsText
              Core.<$> physicalBlockSizeBytes,
            ("provisionedIops" Core..=) Core.. Core.AsText
              Core.<$> provisionedIops,
            ("region" Core..=) Core.<$> region,
            ("replicaZones" Core..=) Core.<$> replicaZones,
            ("resourcePolicies" Core..=)
              Core.<$> resourcePolicies,
            ("satisfiesPzs" Core..=) Core.<$> satisfiesPzs,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("sizeGb" Core..=) Core.. Core.AsText
              Core.<$> sizeGb,
            ("sourceDisk" Core..=) Core.<$> sourceDisk,
            ("sourceDiskId" Core..=) Core.<$> sourceDiskId,
            ("sourceImage" Core..=) Core.<$> sourceImage,
            ("sourceImageEncryptionKey" Core..=)
              Core.<$> sourceImageEncryptionKey,
            ("sourceImageId" Core..=) Core.<$> sourceImageId,
            ("sourceSnapshot" Core..=) Core.<$> sourceSnapshot,
            ("sourceSnapshotEncryptionKey" Core..=)
              Core.<$> sourceSnapshotEncryptionKey,
            ("sourceSnapshotId" Core..=)
              Core.<$> sourceSnapshotId,
            ("sourceStorageObject" Core..=)
              Core.<$> sourceStorageObject,
            ("status" Core..=) Core.<$> status,
            ("type" Core..=) Core.<$> type',
            ("users" Core..=) Core.<$> users,
            ("zone" Core..=) Core.<$> zone
          ]
      )

-- | Labels to apply to this disk. These can be later modified by the setLabels method.
--
-- /See:/ 'newDisk_Labels' smart constructor.
newtype Disk_Labels = Disk_Labels
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Disk_Labels' with the minimum fields required to make a request.
newDisk_Labels ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  Disk_Labels
newDisk_Labels additional = Disk_Labels {additional = additional}

instance Core.FromJSON Disk_Labels where
  parseJSON =
    Core.withObject
      "Disk_Labels"
      ( \o ->
          Disk_Labels Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON Disk_Labels where
  toJSON Disk_Labels {..} = Core.toJSON additional

--
-- /See:/ 'newDiskAggregatedList' smart constructor.
data DiskAggregatedList = DiskAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of DisksScopedList resources.
    items :: (Core.Maybe DiskAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#diskAggregatedList for aggregated lists of persistent disks.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe DiskAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskAggregatedList' with the minimum fields required to make a request.
newDiskAggregatedList ::
  DiskAggregatedList
newDiskAggregatedList =
  DiskAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#diskAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON DiskAggregatedList where
  parseJSON =
    Core.withObject
      "DiskAggregatedList"
      ( \o ->
          DiskAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#diskAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON DiskAggregatedList where
  toJSON DiskAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of DisksScopedList resources.
--
-- /See:/ 'newDiskAggregatedList_Items' smart constructor.
newtype DiskAggregatedList_Items = DiskAggregatedList_Items
  { -- | [Output Only] Name of the scope containing this set of disks.
    additional :: (Core.HashMap Core.Text DisksScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskAggregatedList_Items' with the minimum fields required to make a request.
newDiskAggregatedList_Items ::
  -- |  [Output Only] Name of the scope containing this set of disks. See 'additional'.
  Core.HashMap Core.Text DisksScopedList ->
  DiskAggregatedList_Items
newDiskAggregatedList_Items additional =
  DiskAggregatedList_Items {additional = additional}

instance Core.FromJSON DiskAggregatedList_Items where
  parseJSON =
    Core.withObject
      "DiskAggregatedList_Items"
      ( \o ->
          DiskAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON DiskAggregatedList_Items where
  toJSON DiskAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newDiskAggregatedList_Warning' smart constructor.
data DiskAggregatedList_Warning = DiskAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe DiskAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [DiskAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskAggregatedList_Warning' with the minimum fields required to make a request.
newDiskAggregatedList_Warning ::
  DiskAggregatedList_Warning
newDiskAggregatedList_Warning =
  DiskAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON DiskAggregatedList_Warning where
  parseJSON =
    Core.withObject
      "DiskAggregatedList_Warning"
      ( \o ->
          DiskAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON DiskAggregatedList_Warning where
  toJSON DiskAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newDiskAggregatedList_Warning_DataItem' smart constructor.
data DiskAggregatedList_Warning_DataItem = DiskAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newDiskAggregatedList_Warning_DataItem ::
  DiskAggregatedList_Warning_DataItem
newDiskAggregatedList_Warning_DataItem =
  DiskAggregatedList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    DiskAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "DiskAggregatedList_Warning_DataItem"
      ( \o ->
          DiskAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    DiskAggregatedList_Warning_DataItem
  where
  toJSON DiskAggregatedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | A specification of the desired way to instantiate a disk in the instance template when its created from a source instance.
--
-- /See:/ 'newDiskInstantiationConfig' smart constructor.
data DiskInstantiationConfig = DiskInstantiationConfig
  { -- | Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
    autoDelete :: (Core.Maybe Core.Bool),
    -- | The custom source image to be used to restore this disk when instantiating this instance template.
    customImage :: (Core.Maybe Core.Text),
    -- | Specifies the device name of the disk to which the configurations apply to.
    deviceName :: (Core.Maybe Core.Text),
    -- | Specifies whether to include the disk and what image to use. Possible values are: - source-image: to use the same image that was used to create the source instance\'s corresponding disk. Applicable to the boot disk and additional read-write disks. - source-image-family: to use the same image family that was used to create the source instance\'s corresponding disk. Applicable to the boot disk and additional read-write disks. - custom-image: to use a user-provided image url for disk creation. Applicable to the boot disk and additional read-write disks. - attach-read-only: to attach a read-only disk. Applicable to read-only disks. - do-not-include: to exclude a disk from the template. Applicable to additional read-write disks, local SSDs, and read-only disks.
    instantiateFrom :: (Core.Maybe DiskInstantiationConfig_InstantiateFrom)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskInstantiationConfig' with the minimum fields required to make a request.
newDiskInstantiationConfig ::
  DiskInstantiationConfig
newDiskInstantiationConfig =
  DiskInstantiationConfig
    { autoDelete = Core.Nothing,
      customImage = Core.Nothing,
      deviceName = Core.Nothing,
      instantiateFrom = Core.Nothing
    }

instance Core.FromJSON DiskInstantiationConfig where
  parseJSON =
    Core.withObject
      "DiskInstantiationConfig"
      ( \o ->
          DiskInstantiationConfig
            Core.<$> (o Core..:? "autoDelete")
            Core.<*> (o Core..:? "customImage")
            Core.<*> (o Core..:? "deviceName")
            Core.<*> (o Core..:? "instantiateFrom")
      )

instance Core.ToJSON DiskInstantiationConfig where
  toJSON DiskInstantiationConfig {..} =
    Core.object
      ( Core.catMaybes
          [ ("autoDelete" Core..=) Core.<$> autoDelete,
            ("customImage" Core..=) Core.<$> customImage,
            ("deviceName" Core..=) Core.<$> deviceName,
            ("instantiateFrom" Core..=)
              Core.<$> instantiateFrom
          ]
      )

-- | A list of Disk resources.
--
-- /See:/ 'newDiskList' smart constructor.
data DiskList = DiskList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of Disk resources.
    items :: (Core.Maybe [Disk]),
    -- | [Output Only] Type of resource. Always compute#diskList for lists of disks.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe DiskList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskList' with the minimum fields required to make a request.
newDiskList ::
  DiskList
newDiskList =
  DiskList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#diskList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON DiskList where
  parseJSON =
    Core.withObject
      "DiskList"
      ( \o ->
          DiskList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#diskList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON DiskList where
  toJSON DiskList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newDiskList_Warning' smart constructor.
data DiskList_Warning = DiskList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe DiskList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [DiskList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskList_Warning' with the minimum fields required to make a request.
newDiskList_Warning ::
  DiskList_Warning
newDiskList_Warning =
  DiskList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON DiskList_Warning where
  parseJSON =
    Core.withObject
      "DiskList_Warning"
      ( \o ->
          DiskList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON DiskList_Warning where
  toJSON DiskList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newDiskList_Warning_DataItem' smart constructor.
data DiskList_Warning_DataItem = DiskList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskList_Warning_DataItem' with the minimum fields required to make a request.
newDiskList_Warning_DataItem ::
  DiskList_Warning_DataItem
newDiskList_Warning_DataItem =
  DiskList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON DiskList_Warning_DataItem where
  parseJSON =
    Core.withObject
      "DiskList_Warning_DataItem"
      ( \o ->
          DiskList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON DiskList_Warning_DataItem where
  toJSON DiskList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newDiskMoveRequest' smart constructor.
data DiskMoveRequest = DiskMoveRequest
  { -- | The URL of the destination zone to move the disk. This can be a full or partial URL. For example, the following are all valid URLs to a zone: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project\/zones\/zone - projects\/project\/zones\/zone - zones\/zone
    destinationZone :: (Core.Maybe Core.Text),
    -- | The URL of the target disk to move. This can be a full or partial URL. For example, the following are all valid URLs to a disk: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project\/zones\/zone \/disks\/disk - projects\/project\/zones\/zone\/disks\/disk - zones\/zone\/disks\/disk
    targetDisk :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskMoveRequest' with the minimum fields required to make a request.
newDiskMoveRequest ::
  DiskMoveRequest
newDiskMoveRequest =
  DiskMoveRequest {destinationZone = Core.Nothing, targetDisk = Core.Nothing}

instance Core.FromJSON DiskMoveRequest where
  parseJSON =
    Core.withObject
      "DiskMoveRequest"
      ( \o ->
          DiskMoveRequest
            Core.<$> (o Core..:? "destinationZone")
            Core.<*> (o Core..:? "targetDisk")
      )

instance Core.ToJSON DiskMoveRequest where
  toJSON DiskMoveRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("destinationZone" Core..=)
              Core.<$> destinationZone,
            ("targetDisk" Core..=) Core.<$> targetDisk
          ]
      )

-- | Additional disk params.
--
-- /See:/ 'newDiskParams' smart constructor.
newtype DiskParams = DiskParams
  { -- | Resource manager tags to be bound to the disk. Tag keys and values have the same definition as resource manager tags. Keys must be in the format @tagKeys\/{tag_key_id}@, and values are in the format @tagValues\/456@. The field is ignored (both PUT & PATCH) when empty.
    resourceManagerTags :: (Core.Maybe DiskParams_ResourceManagerTags)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskParams' with the minimum fields required to make a request.
newDiskParams ::
  DiskParams
newDiskParams = DiskParams {resourceManagerTags = Core.Nothing}

instance Core.FromJSON DiskParams where
  parseJSON =
    Core.withObject
      "DiskParams"
      ( \o ->
          DiskParams
            Core.<$> (o Core..:? "resourceManagerTags")
      )

instance Core.ToJSON DiskParams where
  toJSON DiskParams {..} =
    Core.object
      ( Core.catMaybes
          [ ("resourceManagerTags" Core..=)
              Core.<$> resourceManagerTags
          ]
      )

-- | Resource manager tags to be bound to the disk. Tag keys and values have the same definition as resource manager tags. Keys must be in the format @tagKeys\/{tag_key_id}@, and values are in the format @tagValues\/456@. The field is ignored (both PUT & PATCH) when empty.
--
-- /See:/ 'newDiskParams_ResourceManagerTags' smart constructor.
newtype DiskParams_ResourceManagerTags = DiskParams_ResourceManagerTags
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskParams_ResourceManagerTags' with the minimum fields required to make a request.
newDiskParams_ResourceManagerTags ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  DiskParams_ResourceManagerTags
newDiskParams_ResourceManagerTags additional =
  DiskParams_ResourceManagerTags {additional = additional}

instance Core.FromJSON DiskParams_ResourceManagerTags where
  parseJSON =
    Core.withObject
      "DiskParams_ResourceManagerTags"
      ( \o ->
          DiskParams_ResourceManagerTags
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON DiskParams_ResourceManagerTags where
  toJSON DiskParams_ResourceManagerTags {..} =
    Core.toJSON additional

-- | Represents a Disk Type resource. Google Compute Engine has two Disk Type resources: * </compute/docs/reference/rest/v1/regionDiskTypes Regional> * </compute/docs/reference/rest/v1/diskTypes Zonal> You can choose from a variety of disk types based on your needs. For more information, read Storage options. The diskTypes resource represents disk types for a zonal persistent disk. For more information, read Zonal persistent disks. The regionDiskTypes resource represents disk types for a regional persistent disk. For more information, read Regional persistent disks.
--
-- /See:/ 'newDiskType' smart constructor.
data DiskType = DiskType
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined default disk size in GB.
    defaultDiskSizeGb :: (Core.Maybe Core.Int64),
    -- | [Output Only] The deprecation status associated with this disk type.
    deprecated :: (Core.Maybe DeprecationStatus),
    -- | [Output Only] An optional description of this resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#diskType for disk types.
    kind :: Core.Text,
    -- | [Output Only] Name of the resource.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] URL of the region where the disk type resides. Only applicable for regional resources. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] An optional textual description of the valid disk size, such as \"10GB-10TB\".
    validDiskSize :: (Core.Maybe Core.Text),
    -- | [Output Only] URL of the zone where the disk type resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    zone :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskType' with the minimum fields required to make a request.
newDiskType ::
  DiskType
newDiskType =
  DiskType
    { creationTimestamp = Core.Nothing,
      defaultDiskSizeGb = Core.Nothing,
      deprecated = Core.Nothing,
      description = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#diskType",
      name = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      validDiskSize = Core.Nothing,
      zone = Core.Nothing
    }

instance Core.FromJSON DiskType where
  parseJSON =
    Core.withObject
      "DiskType"
      ( \o ->
          DiskType
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> ( o Core..:? "defaultDiskSizeGb"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "deprecated")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#diskType")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "validDiskSize")
            Core.<*> (o Core..:? "zone")
      )

instance Core.ToJSON DiskType where
  toJSON DiskType {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("defaultDiskSizeGb" Core..=) Core.. Core.AsText
              Core.<$> defaultDiskSizeGb,
            ("deprecated" Core..=) Core.<$> deprecated,
            ("description" Core..=) Core.<$> description,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("validDiskSize" Core..=) Core.<$> validDiskSize,
            ("zone" Core..=) Core.<$> zone
          ]
      )

--
-- /See:/ 'newDiskTypeAggregatedList' smart constructor.
data DiskTypeAggregatedList = DiskTypeAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of DiskTypesScopedList resources.
    items :: (Core.Maybe DiskTypeAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#diskTypeAggregatedList.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe DiskTypeAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskTypeAggregatedList' with the minimum fields required to make a request.
newDiskTypeAggregatedList ::
  DiskTypeAggregatedList
newDiskTypeAggregatedList =
  DiskTypeAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#diskTypeAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON DiskTypeAggregatedList where
  parseJSON =
    Core.withObject
      "DiskTypeAggregatedList"
      ( \o ->
          DiskTypeAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#diskTypeAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON DiskTypeAggregatedList where
  toJSON DiskTypeAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of DiskTypesScopedList resources.
--
-- /See:/ 'newDiskTypeAggregatedList_Items' smart constructor.
newtype DiskTypeAggregatedList_Items = DiskTypeAggregatedList_Items
  { -- | [Output Only] Name of the scope containing this set of disk types.
    additional :: (Core.HashMap Core.Text DiskTypesScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskTypeAggregatedList_Items' with the minimum fields required to make a request.
newDiskTypeAggregatedList_Items ::
  -- |  [Output Only] Name of the scope containing this set of disk types. See 'additional'.
  Core.HashMap Core.Text DiskTypesScopedList ->
  DiskTypeAggregatedList_Items
newDiskTypeAggregatedList_Items additional =
  DiskTypeAggregatedList_Items {additional = additional}

instance Core.FromJSON DiskTypeAggregatedList_Items where
  parseJSON =
    Core.withObject
      "DiskTypeAggregatedList_Items"
      ( \o ->
          DiskTypeAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON DiskTypeAggregatedList_Items where
  toJSON DiskTypeAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newDiskTypeAggregatedList_Warning' smart constructor.
data DiskTypeAggregatedList_Warning = DiskTypeAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe DiskTypeAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [DiskTypeAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskTypeAggregatedList_Warning' with the minimum fields required to make a request.
newDiskTypeAggregatedList_Warning ::
  DiskTypeAggregatedList_Warning
newDiskTypeAggregatedList_Warning =
  DiskTypeAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON DiskTypeAggregatedList_Warning where
  parseJSON =
    Core.withObject
      "DiskTypeAggregatedList_Warning"
      ( \o ->
          DiskTypeAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON DiskTypeAggregatedList_Warning where
  toJSON DiskTypeAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newDiskTypeAggregatedList_Warning_DataItem' smart constructor.
data DiskTypeAggregatedList_Warning_DataItem = DiskTypeAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskTypeAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newDiskTypeAggregatedList_Warning_DataItem ::
  DiskTypeAggregatedList_Warning_DataItem
newDiskTypeAggregatedList_Warning_DataItem =
  DiskTypeAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    DiskTypeAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "DiskTypeAggregatedList_Warning_DataItem"
      ( \o ->
          DiskTypeAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    DiskTypeAggregatedList_Warning_DataItem
  where
  toJSON DiskTypeAggregatedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Contains a list of disk types.
--
-- /See:/ 'newDiskTypeList' smart constructor.
data DiskTypeList = DiskTypeList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of DiskType resources.
    items :: (Core.Maybe [DiskType]),
    -- | [Output Only] Type of resource. Always compute#diskTypeList for disk types.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe DiskTypeList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskTypeList' with the minimum fields required to make a request.
newDiskTypeList ::
  DiskTypeList
newDiskTypeList =
  DiskTypeList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#diskTypeList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON DiskTypeList where
  parseJSON =
    Core.withObject
      "DiskTypeList"
      ( \o ->
          DiskTypeList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#diskTypeList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON DiskTypeList where
  toJSON DiskTypeList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newDiskTypeList_Warning' smart constructor.
data DiskTypeList_Warning = DiskTypeList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe DiskTypeList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [DiskTypeList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskTypeList_Warning' with the minimum fields required to make a request.
newDiskTypeList_Warning ::
  DiskTypeList_Warning
newDiskTypeList_Warning =
  DiskTypeList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON DiskTypeList_Warning where
  parseJSON =
    Core.withObject
      "DiskTypeList_Warning"
      ( \o ->
          DiskTypeList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON DiskTypeList_Warning where
  toJSON DiskTypeList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newDiskTypeList_Warning_DataItem' smart constructor.
data DiskTypeList_Warning_DataItem = DiskTypeList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskTypeList_Warning_DataItem' with the minimum fields required to make a request.
newDiskTypeList_Warning_DataItem ::
  DiskTypeList_Warning_DataItem
newDiskTypeList_Warning_DataItem =
  DiskTypeList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON DiskTypeList_Warning_DataItem where
  parseJSON =
    Core.withObject
      "DiskTypeList_Warning_DataItem"
      ( \o ->
          DiskTypeList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON DiskTypeList_Warning_DataItem where
  toJSON DiskTypeList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newDiskTypesScopedList' smart constructor.
data DiskTypesScopedList = DiskTypesScopedList
  { -- | [Output Only] A list of disk types contained in this scope.
    diskTypes :: (Core.Maybe [DiskType]),
    -- | [Output Only] Informational warning which replaces the list of disk types when the list is empty.
    warning :: (Core.Maybe DiskTypesScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskTypesScopedList' with the minimum fields required to make a request.
newDiskTypesScopedList ::
  DiskTypesScopedList
newDiskTypesScopedList =
  DiskTypesScopedList {diskTypes = Core.Nothing, warning = Core.Nothing}

instance Core.FromJSON DiskTypesScopedList where
  parseJSON =
    Core.withObject
      "DiskTypesScopedList"
      ( \o ->
          DiskTypesScopedList
            Core.<$> (o Core..:? "diskTypes")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON DiskTypesScopedList where
  toJSON DiskTypesScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("diskTypes" Core..=) Core.<$> diskTypes,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning which replaces the list of disk types when the list is empty.
--
-- /See:/ 'newDiskTypesScopedList_Warning' smart constructor.
data DiskTypesScopedList_Warning = DiskTypesScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe DiskTypesScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [DiskTypesScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskTypesScopedList_Warning' with the minimum fields required to make a request.
newDiskTypesScopedList_Warning ::
  DiskTypesScopedList_Warning
newDiskTypesScopedList_Warning =
  DiskTypesScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON DiskTypesScopedList_Warning where
  parseJSON =
    Core.withObject
      "DiskTypesScopedList_Warning"
      ( \o ->
          DiskTypesScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON DiskTypesScopedList_Warning where
  toJSON DiskTypesScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newDiskTypesScopedList_Warning_DataItem' smart constructor.
data DiskTypesScopedList_Warning_DataItem = DiskTypesScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DiskTypesScopedList_Warning_DataItem' with the minimum fields required to make a request.
newDiskTypesScopedList_Warning_DataItem ::
  DiskTypesScopedList_Warning_DataItem
newDiskTypesScopedList_Warning_DataItem =
  DiskTypesScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    DiskTypesScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "DiskTypesScopedList_Warning_DataItem"
      ( \o ->
          DiskTypesScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    DiskTypesScopedList_Warning_DataItem
  where
  toJSON DiskTypesScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newDisksAddResourcePoliciesRequest' smart constructor.
newtype DisksAddResourcePoliciesRequest = DisksAddResourcePoliciesRequest
  { -- | Full or relative path to the resource policy to be added to this disk. You can only specify one resource policy.
    resourcePolicies :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DisksAddResourcePoliciesRequest' with the minimum fields required to make a request.
newDisksAddResourcePoliciesRequest ::
  DisksAddResourcePoliciesRequest
newDisksAddResourcePoliciesRequest =
  DisksAddResourcePoliciesRequest {resourcePolicies = Core.Nothing}

instance
  Core.FromJSON
    DisksAddResourcePoliciesRequest
  where
  parseJSON =
    Core.withObject
      "DisksAddResourcePoliciesRequest"
      ( \o ->
          DisksAddResourcePoliciesRequest
            Core.<$> (o Core..:? "resourcePolicies")
      )

instance Core.ToJSON DisksAddResourcePoliciesRequest where
  toJSON DisksAddResourcePoliciesRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("resourcePolicies" Core..=)
              Core.<$> resourcePolicies
          ]
      )

--
-- /See:/ 'newDisksRemoveResourcePoliciesRequest' smart constructor.
newtype DisksRemoveResourcePoliciesRequest = DisksRemoveResourcePoliciesRequest
  { -- | Resource policies to be removed from this disk.
    resourcePolicies :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DisksRemoveResourcePoliciesRequest' with the minimum fields required to make a request.
newDisksRemoveResourcePoliciesRequest ::
  DisksRemoveResourcePoliciesRequest
newDisksRemoveResourcePoliciesRequest =
  DisksRemoveResourcePoliciesRequest {resourcePolicies = Core.Nothing}

instance
  Core.FromJSON
    DisksRemoveResourcePoliciesRequest
  where
  parseJSON =
    Core.withObject
      "DisksRemoveResourcePoliciesRequest"
      ( \o ->
          DisksRemoveResourcePoliciesRequest
            Core.<$> (o Core..:? "resourcePolicies")
      )

instance
  Core.ToJSON
    DisksRemoveResourcePoliciesRequest
  where
  toJSON DisksRemoveResourcePoliciesRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("resourcePolicies" Core..=)
              Core.<$> resourcePolicies
          ]
      )

--
-- /See:/ 'newDisksResizeRequest' smart constructor.
newtype DisksResizeRequest = DisksResizeRequest
  { -- | The new size of the persistent disk, which is specified in GB.
    sizeGb :: (Core.Maybe Core.Int64)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DisksResizeRequest' with the minimum fields required to make a request.
newDisksResizeRequest ::
  DisksResizeRequest
newDisksResizeRequest = DisksResizeRequest {sizeGb = Core.Nothing}

instance Core.FromJSON DisksResizeRequest where
  parseJSON =
    Core.withObject
      "DisksResizeRequest"
      ( \o ->
          DisksResizeRequest
            Core.<$> ( o Core..:? "sizeGb"
                         Core.<&> Core.fmap Core.fromAsText
                     )
      )

instance Core.ToJSON DisksResizeRequest where
  toJSON DisksResizeRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("sizeGb" Core..=) Core.. Core.AsText
              Core.<$> sizeGb
          ]
      )

--
-- /See:/ 'newDisksScopedList' smart constructor.
data DisksScopedList = DisksScopedList
  { -- | [Output Only] A list of disks contained in this scope.
    disks :: (Core.Maybe [Disk]),
    -- | [Output Only] Informational warning which replaces the list of disks when the list is empty.
    warning :: (Core.Maybe DisksScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DisksScopedList' with the minimum fields required to make a request.
newDisksScopedList ::
  DisksScopedList
newDisksScopedList =
  DisksScopedList {disks = Core.Nothing, warning = Core.Nothing}

instance Core.FromJSON DisksScopedList where
  parseJSON =
    Core.withObject
      "DisksScopedList"
      ( \o ->
          DisksScopedList
            Core.<$> (o Core..:? "disks") Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON DisksScopedList where
  toJSON DisksScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("disks" Core..=) Core.<$> disks,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning which replaces the list of disks when the list is empty.
--
-- /See:/ 'newDisksScopedList_Warning' smart constructor.
data DisksScopedList_Warning = DisksScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe DisksScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [DisksScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DisksScopedList_Warning' with the minimum fields required to make a request.
newDisksScopedList_Warning ::
  DisksScopedList_Warning
newDisksScopedList_Warning =
  DisksScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON DisksScopedList_Warning where
  parseJSON =
    Core.withObject
      "DisksScopedList_Warning"
      ( \o ->
          DisksScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON DisksScopedList_Warning where
  toJSON DisksScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newDisksScopedList_Warning_DataItem' smart constructor.
data DisksScopedList_Warning_DataItem = DisksScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DisksScopedList_Warning_DataItem' with the minimum fields required to make a request.
newDisksScopedList_Warning_DataItem ::
  DisksScopedList_Warning_DataItem
newDisksScopedList_Warning_DataItem =
  DisksScopedList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    DisksScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "DisksScopedList_Warning_DataItem"
      ( \o ->
          DisksScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON DisksScopedList_Warning_DataItem where
  toJSON DisksScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | A set of Display Device options
--
-- /See:/ 'newDisplayDevice' smart constructor.
newtype DisplayDevice = DisplayDevice
  { -- | Defines whether the instance has Display enabled.
    enableDisplay :: (Core.Maybe Core.Bool)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DisplayDevice' with the minimum fields required to make a request.
newDisplayDevice ::
  DisplayDevice
newDisplayDevice = DisplayDevice {enableDisplay = Core.Nothing}

instance Core.FromJSON DisplayDevice where
  parseJSON =
    Core.withObject
      "DisplayDevice"
      ( \o ->
          DisplayDevice Core.<$> (o Core..:? "enableDisplay")
      )

instance Core.ToJSON DisplayDevice where
  toJSON DisplayDevice {..} =
    Core.object
      ( Core.catMaybes
          [("enableDisplay" Core..=) Core.<$> enableDisplay]
      )

--
-- /See:/ 'newDistributionPolicy' smart constructor.
data DistributionPolicy = DistributionPolicy
  { -- | The distribution shape to which the group converges either proactively or on resize events (depending on the value set in updatePolicy.instanceRedistributionType).
    targetShape :: (Core.Maybe DistributionPolicy_TargetShape),
    -- | Zones where the regional managed instance group will create and manage its instances.
    zones :: (Core.Maybe [DistributionPolicyZoneConfiguration])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DistributionPolicy' with the minimum fields required to make a request.
newDistributionPolicy ::
  DistributionPolicy
newDistributionPolicy =
  DistributionPolicy {targetShape = Core.Nothing, zones = Core.Nothing}

instance Core.FromJSON DistributionPolicy where
  parseJSON =
    Core.withObject
      "DistributionPolicy"
      ( \o ->
          DistributionPolicy
            Core.<$> (o Core..:? "targetShape")
            Core.<*> (o Core..:? "zones")
      )

instance Core.ToJSON DistributionPolicy where
  toJSON DistributionPolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("targetShape" Core..=) Core.<$> targetShape,
            ("zones" Core..=) Core.<$> zones
          ]
      )

--
-- /See:/ 'newDistributionPolicyZoneConfiguration' smart constructor.
newtype DistributionPolicyZoneConfiguration = DistributionPolicyZoneConfiguration
  { -- | The URL of the zone. The zone must exist in the region where the managed instance group is located.
    zone :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'DistributionPolicyZoneConfiguration' with the minimum fields required to make a request.
newDistributionPolicyZoneConfiguration ::
  DistributionPolicyZoneConfiguration
newDistributionPolicyZoneConfiguration =
  DistributionPolicyZoneConfiguration {zone = Core.Nothing}

instance
  Core.FromJSON
    DistributionPolicyZoneConfiguration
  where
  parseJSON =
    Core.withObject
      "DistributionPolicyZoneConfiguration"
      ( \o ->
          DistributionPolicyZoneConfiguration
            Core.<$> (o Core..:? "zone")
      )

instance
  Core.ToJSON
    DistributionPolicyZoneConfiguration
  where
  toJSON DistributionPolicyZoneConfiguration {..} =
    Core.object
      (Core.catMaybes [("zone" Core..=) Core.<$> zone])

-- | A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like \"day\" or \"month\". Range is approximately 10,000 years.
--
-- /See:/ 'newDuration' smart constructor.
data Duration = Duration
  { -- | Span of time that\'s a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 @seconds@ field and a positive @nanos@ field. Must be from 0 to 999,999,999 inclusive.
    nanos :: (Core.Maybe Core.Int32),
    -- | Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec\/min * 60 min\/hr * 24 hr\/day * 365.25 days\/year * 10000 years
    seconds :: (Core.Maybe Core.Int64)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Duration' with the minimum fields required to make a request.
newDuration ::
  Duration
newDuration = Duration {nanos = Core.Nothing, seconds = Core.Nothing}

instance Core.FromJSON Duration where
  parseJSON =
    Core.withObject
      "Duration"
      ( \o ->
          Duration
            Core.<$> (o Core..:? "nanos")
            Core.<*> ( o Core..:? "seconds"
                         Core.<&> Core.fmap Core.fromAsText
                     )
      )

instance Core.ToJSON Duration where
  toJSON Duration {..} =
    Core.object
      ( Core.catMaybes
          [ ("nanos" Core..=) Core.<$> nanos,
            ("seconds" Core..=) Core.. Core.AsText
              Core.<$> seconds
          ]
      )

-- | Describes the cause of the error with structured details. Example of an error when contacting the \"pubsub.googleapis.com\" API when it is not enabled: { \"reason\": \"API_DISABLED\" \"domain\": \"googleapis.com\" \"metadata\": { \"resource\": \"projects\/123\", \"service\": \"pubsub.googleapis.com\" } } This response indicates that the pubsub.googleapis.com API is not enabled. Example of an error that is returned when attempting to create a Spanner instance in a region that is out of stock: { \"reason\": \"STOCKOUT\" \"domain\": \"spanner.googleapis.com\", \"metadata\": { \"availableRegions\": \"us-central1,us-east2\" } }
--
-- /See:/ 'newErrorInfo' smart constructor.
data ErrorInfo = ErrorInfo
  { -- | The logical grouping to which the \"reason\" belongs. The error domain is typically the registered service name of the tool or product that generates the error. Example: \"pubsub.googleapis.com\". If the error is generated by some common infrastructure, the error domain must be a globally unique value that identifies the infrastructure. For Google API infrastructure, the error domain is \"googleapis.com\".
    domain :: (Core.Maybe Core.Text),
    -- | Additional structured details about this error. Keys should match \/[a-zA-Z0-9-_]\/ and be limited to 64 characters in length. When identifying the current value of an exceeded limit, the units should be contained in the key, not the value. For example, rather than {\"instanceLimit\": \"100\/request\"}, should be returned as, {\"instanceLimitPerRequest\": \"100\"}, if the client exceeds the number of instances that can be created in a single (batch) request.
    metadatas :: (Core.Maybe ErrorInfo_Metadatas),
    -- | The reason of the error. This is a constant value that identifies the proximate cause of the error. Error reasons are unique within a particular domain of errors. This should be at most 63 characters and match a regular expression of @A-Z+[A-Z0-9]@, which represents UPPER/SNAKE/CASE.
    reason :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ErrorInfo' with the minimum fields required to make a request.
newErrorInfo ::
  ErrorInfo
newErrorInfo =
  ErrorInfo
    { domain = Core.Nothing,
      metadatas = Core.Nothing,
      reason = Core.Nothing
    }

instance Core.FromJSON ErrorInfo where
  parseJSON =
    Core.withObject
      "ErrorInfo"
      ( \o ->
          ErrorInfo
            Core.<$> (o Core..:? "domain")
            Core.<*> (o Core..:? "metadatas")
            Core.<*> (o Core..:? "reason")
      )

instance Core.ToJSON ErrorInfo where
  toJSON ErrorInfo {..} =
    Core.object
      ( Core.catMaybes
          [ ("domain" Core..=) Core.<$> domain,
            ("metadatas" Core..=) Core.<$> metadatas,
            ("reason" Core..=) Core.<$> reason
          ]
      )

-- | Additional structured details about this error. Keys should match \/[a-zA-Z0-9-_]\/ and be limited to 64 characters in length. When identifying the current value of an exceeded limit, the units should be contained in the key, not the value. For example, rather than {\"instanceLimit\": \"100\/request\"}, should be returned as, {\"instanceLimitPerRequest\": \"100\"}, if the client exceeds the number of instances that can be created in a single (batch) request.
--
-- /See:/ 'newErrorInfo_Metadatas' smart constructor.
newtype ErrorInfo_Metadatas = ErrorInfo_Metadatas
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ErrorInfo_Metadatas' with the minimum fields required to make a request.
newErrorInfo_Metadatas ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  ErrorInfo_Metadatas
newErrorInfo_Metadatas additional =
  ErrorInfo_Metadatas {additional = additional}

instance Core.FromJSON ErrorInfo_Metadatas where
  parseJSON =
    Core.withObject
      "ErrorInfo_Metadatas"
      ( \o ->
          ErrorInfo_Metadatas
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON ErrorInfo_Metadatas where
  toJSON ErrorInfo_Metadatas {..} =
    Core.toJSON additional

--
-- /See:/ 'newExchangedPeeringRoute' smart constructor.
data ExchangedPeeringRoute = ExchangedPeeringRoute
  { -- | The destination range of the route.
    destRange :: (Core.Maybe Core.Text),
    -- | True if the peering route has been imported from a peer. The actual import happens if the field networkPeering.importCustomRoutes is true for this network, and networkPeering.exportCustomRoutes is true for the peer network, and the import does not result in a route conflict.
    imported :: (Core.Maybe Core.Bool),
    -- | The region of peering route next hop, only applies to dynamic routes.
    nextHopRegion :: (Core.Maybe Core.Text),
    -- | The priority of the peering route.
    priority :: (Core.Maybe Core.Word32),
    -- | The type of the peering route.
    type' :: (Core.Maybe ExchangedPeeringRoute_Type)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ExchangedPeeringRoute' with the minimum fields required to make a request.
newExchangedPeeringRoute ::
  ExchangedPeeringRoute
newExchangedPeeringRoute =
  ExchangedPeeringRoute
    { destRange = Core.Nothing,
      imported = Core.Nothing,
      nextHopRegion = Core.Nothing,
      priority = Core.Nothing,
      type' = Core.Nothing
    }

instance Core.FromJSON ExchangedPeeringRoute where
  parseJSON =
    Core.withObject
      "ExchangedPeeringRoute"
      ( \o ->
          ExchangedPeeringRoute
            Core.<$> (o Core..:? "destRange")
            Core.<*> (o Core..:? "imported")
            Core.<*> (o Core..:? "nextHopRegion")
            Core.<*> (o Core..:? "priority")
            Core.<*> (o Core..:? "type")
      )

instance Core.ToJSON ExchangedPeeringRoute where
  toJSON ExchangedPeeringRoute {..} =
    Core.object
      ( Core.catMaybes
          [ ("destRange" Core..=) Core.<$> destRange,
            ("imported" Core..=) Core.<$> imported,
            ("nextHopRegion" Core..=) Core.<$> nextHopRegion,
            ("priority" Core..=) Core.<$> priority,
            ("type" Core..=) Core.<$> type'
          ]
      )

--
-- /See:/ 'newExchangedPeeringRoutesList' smart constructor.
data ExchangedPeeringRoutesList = ExchangedPeeringRoutesList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of ExchangedPeeringRoute resources.
    items :: (Core.Maybe [ExchangedPeeringRoute]),
    -- | [Output Only] Type of resource. Always compute#exchangedPeeringRoutesList for exchanged peering routes lists.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe ExchangedPeeringRoutesList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ExchangedPeeringRoutesList' with the minimum fields required to make a request.
newExchangedPeeringRoutesList ::
  ExchangedPeeringRoutesList
newExchangedPeeringRoutesList =
  ExchangedPeeringRoutesList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#exchangedPeeringRoutesList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON ExchangedPeeringRoutesList where
  parseJSON =
    Core.withObject
      "ExchangedPeeringRoutesList"
      ( \o ->
          ExchangedPeeringRoutesList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#exchangedPeeringRoutesList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON ExchangedPeeringRoutesList where
  toJSON ExchangedPeeringRoutesList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newExchangedPeeringRoutesList_Warning' smart constructor.
data ExchangedPeeringRoutesList_Warning = ExchangedPeeringRoutesList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe ExchangedPeeringRoutesList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [ExchangedPeeringRoutesList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ExchangedPeeringRoutesList_Warning' with the minimum fields required to make a request.
newExchangedPeeringRoutesList_Warning ::
  ExchangedPeeringRoutesList_Warning
newExchangedPeeringRoutesList_Warning =
  ExchangedPeeringRoutesList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    ExchangedPeeringRoutesList_Warning
  where
  parseJSON =
    Core.withObject
      "ExchangedPeeringRoutesList_Warning"
      ( \o ->
          ExchangedPeeringRoutesList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    ExchangedPeeringRoutesList_Warning
  where
  toJSON ExchangedPeeringRoutesList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newExchangedPeeringRoutesList_Warning_DataItem' smart constructor.
data ExchangedPeeringRoutesList_Warning_DataItem = ExchangedPeeringRoutesList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ExchangedPeeringRoutesList_Warning_DataItem' with the minimum fields required to make a request.
newExchangedPeeringRoutesList_Warning_DataItem ::
  ExchangedPeeringRoutesList_Warning_DataItem
newExchangedPeeringRoutesList_Warning_DataItem =
  ExchangedPeeringRoutesList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    ExchangedPeeringRoutesList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "ExchangedPeeringRoutesList_Warning_DataItem"
      ( \o ->
          ExchangedPeeringRoutesList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    ExchangedPeeringRoutesList_Warning_DataItem
  where
  toJSON
    ExchangedPeeringRoutesList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https:\/\/github.com\/google\/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() \< 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != \'private\' && document.type != \'internal\'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"\'New message received at \' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are
-- determined by the service that evaluates it. See the service documentation for additional information.
--
-- /See:/ 'newExpr' smart constructor.
data Expr = Expr
  { -- | Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
    description :: (Core.Maybe Core.Text),
    -- | Textual representation of an expression in Common Expression Language syntax.
    expression :: (Core.Maybe Core.Text),
    -- | Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
    location :: (Core.Maybe Core.Text),
    -- | Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
    title :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Expr' with the minimum fields required to make a request.
newExpr ::
  Expr
newExpr =
  Expr
    { description = Core.Nothing,
      expression = Core.Nothing,
      location = Core.Nothing,
      title = Core.Nothing
    }

instance Core.FromJSON Expr where
  parseJSON =
    Core.withObject
      "Expr"
      ( \o ->
          Expr
            Core.<$> (o Core..:? "description")
            Core.<*> (o Core..:? "expression")
            Core.<*> (o Core..:? "location")
            Core.<*> (o Core..:? "title")
      )

instance Core.ToJSON Expr where
  toJSON Expr {..} =
    Core.object
      ( Core.catMaybes
          [ ("description" Core..=) Core.<$> description,
            ("expression" Core..=) Core.<$> expression,
            ("location" Core..=) Core.<$> location,
            ("title" Core..=) Core.<$> title
          ]
      )

-- | Represents an external VPN gateway. External VPN gateway is the on-premises VPN gateway(s) or another cloud provider\'s VPN gateway that connects to your Google Cloud VPN gateway. To create a highly available VPN from Google Cloud Platform to your VPN gateway or another cloud provider\'s VPN gateway, you must create a external VPN gateway resource with information about the other gateway. For more information about using external VPN gateways, see Creating an HA VPN gateway and tunnel pair to a peer VPN.
--
-- /See:/ 'newExternalVpnGateway' smart constructor.
data ExternalVpnGateway = ExternalVpnGateway
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | A list of interfaces for this external VPN gateway. If your peer-side gateway is an on-premises gateway and non-AWS cloud providers\' gateway, at most two interfaces can be provided for an external VPN gateway. If your peer side is an AWS virtual private gateway, four interfaces should be provided for an external VPN gateway.
    interfaces :: (Core.Maybe [ExternalVpnGatewayInterface]),
    -- | [Output Only] Type of the resource. Always compute#externalVpnGateway for externalVpnGateways.
    kind :: Core.Text,
    -- | A fingerprint for the labels being applied to this ExternalVpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an ExternalVpnGateway.
    labelFingerprint :: (Core.Maybe Core.Base64),
    -- | Labels for this resource. These can only be added or modified by the setLabels method. Each label key\/value pair must comply with RFC1035. Label values may be empty.
    labels :: (Core.Maybe ExternalVpnGateway_Labels),
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | Indicates the user-supplied redundancy type of this external VPN gateway.
    redundancyType :: (Core.Maybe ExternalVpnGateway_RedundancyType),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ExternalVpnGateway' with the minimum fields required to make a request.
newExternalVpnGateway ::
  ExternalVpnGateway
newExternalVpnGateway =
  ExternalVpnGateway
    { creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      id = Core.Nothing,
      interfaces = Core.Nothing,
      kind = "compute#externalVpnGateway",
      labelFingerprint = Core.Nothing,
      labels = Core.Nothing,
      name = Core.Nothing,
      redundancyType = Core.Nothing,
      selfLink = Core.Nothing
    }

instance Core.FromJSON ExternalVpnGateway where
  parseJSON =
    Core.withObject
      "ExternalVpnGateway"
      ( \o ->
          ExternalVpnGateway
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "interfaces")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#externalVpnGateway"
                     )
            Core.<*> (o Core..:? "labelFingerprint")
            Core.<*> (o Core..:? "labels")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "redundancyType")
            Core.<*> (o Core..:? "selfLink")
      )

instance Core.ToJSON ExternalVpnGateway where
  toJSON ExternalVpnGateway {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("interfaces" Core..=) Core.<$> interfaces,
            Core.Just ("kind" Core..= kind),
            ("labelFingerprint" Core..=)
              Core.<$> labelFingerprint,
            ("labels" Core..=) Core.<$> labels,
            ("name" Core..=) Core.<$> name,
            ("redundancyType" Core..=) Core.<$> redundancyType,
            ("selfLink" Core..=) Core.<$> selfLink
          ]
      )

-- | Labels for this resource. These can only be added or modified by the setLabels method. Each label key\/value pair must comply with RFC1035. Label values may be empty.
--
-- /See:/ 'newExternalVpnGateway_Labels' smart constructor.
newtype ExternalVpnGateway_Labels = ExternalVpnGateway_Labels
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ExternalVpnGateway_Labels' with the minimum fields required to make a request.
newExternalVpnGateway_Labels ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  ExternalVpnGateway_Labels
newExternalVpnGateway_Labels additional =
  ExternalVpnGateway_Labels {additional = additional}

instance Core.FromJSON ExternalVpnGateway_Labels where
  parseJSON =
    Core.withObject
      "ExternalVpnGateway_Labels"
      ( \o ->
          ExternalVpnGateway_Labels
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON ExternalVpnGateway_Labels where
  toJSON ExternalVpnGateway_Labels {..} =
    Core.toJSON additional

-- | The interface for the external VPN gateway.
--
-- /See:/ 'newExternalVpnGatewayInterface' smart constructor.
data ExternalVpnGatewayInterface = ExternalVpnGatewayInterface
  { -- | The numeric ID of this interface. The allowed input values for this id for different redundancy types of external VPN gateway: - SINGLE/IP/INTERNALLY/REDUNDANT - 0 - TWO/IPS/REDUNDANCY - 0, 1 - FOUR/IPS_REDUNDANCY - 0, 1, 2, 3
    id :: (Core.Maybe Core.Word32),
    -- | IP address of the interface in the external VPN gateway. Only IPv4 is supported. This IP address can be either from your on-premise gateway or another Cloud provider\'s VPN gateway, it cannot be an IP address from Google Compute Engine.
    ipAddress :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ExternalVpnGatewayInterface' with the minimum fields required to make a request.
newExternalVpnGatewayInterface ::
  ExternalVpnGatewayInterface
newExternalVpnGatewayInterface =
  ExternalVpnGatewayInterface {id = Core.Nothing, ipAddress = Core.Nothing}

instance Core.FromJSON ExternalVpnGatewayInterface where
  parseJSON =
    Core.withObject
      "ExternalVpnGatewayInterface"
      ( \o ->
          ExternalVpnGatewayInterface
            Core.<$> (o Core..:? "id") Core.<*> (o Core..:? "ipAddress")
      )

instance Core.ToJSON ExternalVpnGatewayInterface where
  toJSON ExternalVpnGatewayInterface {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("ipAddress" Core..=) Core.<$> ipAddress
          ]
      )

-- | Response to the list request, and contains a list of externalVpnGateways.
--
-- /See:/ 'newExternalVpnGatewayList' smart constructor.
data ExternalVpnGatewayList = ExternalVpnGatewayList
  { -- |
    etag :: (Core.Maybe Core.Text),
    -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of ExternalVpnGateway resources.
    items :: (Core.Maybe [ExternalVpnGateway]),
    -- | [Output Only] Type of resource. Always compute#externalVpnGatewayList for lists of externalVpnGateways.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe ExternalVpnGatewayList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ExternalVpnGatewayList' with the minimum fields required to make a request.
newExternalVpnGatewayList ::
  ExternalVpnGatewayList
newExternalVpnGatewayList =
  ExternalVpnGatewayList
    { etag = Core.Nothing,
      id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#externalVpnGatewayList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON ExternalVpnGatewayList where
  parseJSON =
    Core.withObject
      "ExternalVpnGatewayList"
      ( \o ->
          ExternalVpnGatewayList
            Core.<$> (o Core..:? "etag")
            Core.<*> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#externalVpnGatewayList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON ExternalVpnGatewayList where
  toJSON ExternalVpnGatewayList {..} =
    Core.object
      ( Core.catMaybes
          [ ("etag" Core..=) Core.<$> etag,
            ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newExternalVpnGatewayList_Warning' smart constructor.
data ExternalVpnGatewayList_Warning = ExternalVpnGatewayList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe ExternalVpnGatewayList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [ExternalVpnGatewayList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ExternalVpnGatewayList_Warning' with the minimum fields required to make a request.
newExternalVpnGatewayList_Warning ::
  ExternalVpnGatewayList_Warning
newExternalVpnGatewayList_Warning =
  ExternalVpnGatewayList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON ExternalVpnGatewayList_Warning where
  parseJSON =
    Core.withObject
      "ExternalVpnGatewayList_Warning"
      ( \o ->
          ExternalVpnGatewayList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON ExternalVpnGatewayList_Warning where
  toJSON ExternalVpnGatewayList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newExternalVpnGatewayList_Warning_DataItem' smart constructor.
data ExternalVpnGatewayList_Warning_DataItem = ExternalVpnGatewayList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ExternalVpnGatewayList_Warning_DataItem' with the minimum fields required to make a request.
newExternalVpnGatewayList_Warning_DataItem ::
  ExternalVpnGatewayList_Warning_DataItem
newExternalVpnGatewayList_Warning_DataItem =
  ExternalVpnGatewayList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    ExternalVpnGatewayList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "ExternalVpnGatewayList_Warning_DataItem"
      ( \o ->
          ExternalVpnGatewayList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    ExternalVpnGatewayList_Warning_DataItem
  where
  toJSON ExternalVpnGatewayList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newFileContentBuffer' smart constructor.
data FileContentBuffer = FileContentBuffer
  { -- | The raw content in the secure keys file.
    content :: (Core.Maybe Core.Base64),
    -- | The file type of source file.
    fileType :: (Core.Maybe FileContentBuffer_FileType)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'FileContentBuffer' with the minimum fields required to make a request.
newFileContentBuffer ::
  FileContentBuffer
newFileContentBuffer =
  FileContentBuffer {content = Core.Nothing, fileType = Core.Nothing}

instance Core.FromJSON FileContentBuffer where
  parseJSON =
    Core.withObject
      "FileContentBuffer"
      ( \o ->
          FileContentBuffer
            Core.<$> (o Core..:? "content")
            Core.<*> (o Core..:? "fileType")
      )

instance Core.ToJSON FileContentBuffer where
  toJSON FileContentBuffer {..} =
    Core.object
      ( Core.catMaybes
          [ ("content" Core..=) Core.<$> content,
            ("fileType" Core..=) Core.<$> fileType
          ]
      )

-- | Represents a Firewall Rule resource. Firewall rules allow or deny ingress traffic to, and egress traffic from your instances. For more information, read Firewall rules.
--
-- /See:/ 'newFirewall' smart constructor.
data Firewall = Firewall
  { -- | The list of ALLOW rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a permitted connection.
    allowed :: (Core.Maybe [Firewall_AllowedItem]),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | The list of DENY rules specified by this firewall. Each rule specifies a protocol and port-range tuple that describes a denied connection.
    denied :: (Core.Maybe [Firewall_DeniedItem]),
    -- | An optional description of this resource. Provide this field when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | If destination ranges are specified, the firewall rule applies only to traffic that has destination IP address in these ranges. These ranges must be expressed in CIDR format. Both IPv4 and IPv6 are supported.
    destinationRanges :: (Core.Maybe [Core.Text]),
    -- | Direction of traffic to which this firewall applies, either @INGRESS@ or @EGRESS@. The default is @INGRESS@. For @EGRESS@ traffic, you cannot specify the sourceTags fields.
    direction :: (Core.Maybe Firewall_Direction),
    -- | Denotes whether the firewall rule is disabled. When set to true, the firewall rule is not enforced and the network behaves as if it did not exist. If this is unspecified, the firewall rule will be enabled.
    disabled :: (Core.Maybe Core.Bool),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#firewall for firewall rules.
    kind :: Core.Text,
    -- | This field denotes the logging options for a particular firewall rule. If logging is enabled, logs will be exported to Cloud Logging.
    logConfig :: (Core.Maybe FirewallLogConfig),
    -- | Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
    name :: (Core.Maybe Core.Text),
    -- | URL of the network resource for this firewall rule. If not specified when creating a firewall rule, the default network is used: global\/networks\/default If you choose to specify this field, you can specify the network as a full or partial URL. For example, the following are all valid URLs: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/myproject\/global\/networks\/my-network - projects\/myproject\/global\/networks\/my-network - global\/networks\/default
    network :: (Core.Maybe Core.Text),
    -- | Priority for this rule. This is an integer between @0@ and @65535@, both inclusive. The default value is @1000@. Relative priorities determine which rule takes effect if multiple rules apply. Lower values indicate higher priority. For example, a rule with priority @0@ has higher precedence than a rule with priority @1@. DENY rules take precedence over ALLOW rules if they have equal priority. Note that VPC networks have implied rules with a priority of @65535@. To avoid conflicts with the implied rules, use a priority number less than @65535@.
    priority :: (Core.Maybe Core.Int32),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | If source ranges are specified, the firewall rule applies only to traffic that has a source IP address in these ranges. These ranges must be expressed in CIDR format. One or both of sourceRanges and sourceTags may be set. If both fields are set, the rule applies to traffic that has a source IP address within sourceRanges OR a source IP from a resource with a matching tag listed in the sourceTags field. The connection does not need to match both fields for the rule to apply. Both IPv4 and IPv6 are supported.
    sourceRanges :: (Core.Maybe [Core.Text]),
    -- | If source service accounts are specified, the firewall rules apply only to traffic originating from an instance with a service account in this list. Source service accounts cannot be used to control traffic to an instance\'s external IP address because service accounts are associated with an instance, not an IP address. sourceRanges can be set at the same time as sourceServiceAccounts. If both are set, the firewall applies to traffic that has a source IP address within the sourceRanges OR a source IP that belongs to an instance with service account listed in sourceServiceAccount. The connection does not need to match both fields for the firewall to apply. sourceServiceAccounts cannot be used at the same time as sourceTags or targetTags.
    sourceServiceAccounts :: (Core.Maybe [Core.Text]),
    -- | If source tags are specified, the firewall rule applies only to traffic with source IPs that match the primary network interfaces of VM instances that have the tag and are in the same VPC network. Source tags cannot be used to control traffic to an instance\'s external IP address, it only applies to traffic between instances in the same virtual network. Because tags are associated with instances, not IP addresses. One or both of sourceRanges and sourceTags may be set. If both fields are set, the firewall applies to traffic that has a source IP address within sourceRanges OR a source IP from a resource with a matching tag listed in the sourceTags field. The connection does not need to match both fields for the firewall to apply.
    sourceTags :: (Core.Maybe [Core.Text]),
    -- | A list of service accounts indicating sets of instances located in the network that may make network connections as specified in allowed[]. targetServiceAccounts cannot be used at the same time as targetTags or sourceTags. If neither targetServiceAccounts nor targetTags are specified, the firewall rule applies to all instances on the specified network.
    targetServiceAccounts :: (Core.Maybe [Core.Text]),
    -- | A list of tags that controls which instances the firewall rule applies to. If targetTags are specified, then the firewall rule applies only to instances in the VPC network that have one of those tags. If no targetTags are specified, the firewall rule applies to all instances on the specified network.
    targetTags :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Firewall' with the minimum fields required to make a request.
newFirewall ::
  Firewall
newFirewall =
  Firewall
    { allowed = Core.Nothing,
      creationTimestamp = Core.Nothing,
      denied = Core.Nothing,
      description = Core.Nothing,
      destinationRanges = Core.Nothing,
      direction = Core.Nothing,
      disabled = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#firewall",
      logConfig = Core.Nothing,
      name = Core.Nothing,
      network = Core.Nothing,
      priority = Core.Nothing,
      selfLink = Core.Nothing,
      sourceRanges = Core.Nothing,
      sourceServiceAccounts = Core.Nothing,
      sourceTags = Core.Nothing,
      targetServiceAccounts = Core.Nothing,
      targetTags = Core.Nothing
    }

instance Core.FromJSON Firewall where
  parseJSON =
    Core.withObject
      "Firewall"
      ( \o ->
          Firewall
            Core.<$> (o Core..:? "allowed")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "denied")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "destinationRanges")
            Core.<*> (o Core..:? "direction")
            Core.<*> (o Core..:? "disabled")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#firewall")
            Core.<*> (o Core..:? "logConfig")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "network")
            Core.<*> (o Core..:? "priority")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "sourceRanges")
            Core.<*> (o Core..:? "sourceServiceAccounts")
            Core.<*> (o Core..:? "sourceTags")
            Core.<*> (o Core..:? "targetServiceAccounts")
            Core.<*> (o Core..:? "targetTags")
      )

instance Core.ToJSON Firewall where
  toJSON Firewall {..} =
    Core.object
      ( Core.catMaybes
          [ ("allowed" Core..=) Core.<$> allowed,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("denied" Core..=) Core.<$> denied,
            ("description" Core..=) Core.<$> description,
            ("destinationRanges" Core..=)
              Core.<$> destinationRanges,
            ("direction" Core..=) Core.<$> direction,
            ("disabled" Core..=) Core.<$> disabled,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("logConfig" Core..=) Core.<$> logConfig,
            ("name" Core..=) Core.<$> name,
            ("network" Core..=) Core.<$> network,
            ("priority" Core..=) Core.<$> priority,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("sourceRanges" Core..=) Core.<$> sourceRanges,
            ("sourceServiceAccounts" Core..=)
              Core.<$> sourceServiceAccounts,
            ("sourceTags" Core..=) Core.<$> sourceTags,
            ("targetServiceAccounts" Core..=)
              Core.<$> targetServiceAccounts,
            ("targetTags" Core..=) Core.<$> targetTags
          ]
      )

--
-- /See:/ 'newFirewall_AllowedItem' smart constructor.
data Firewall_AllowedItem = Firewall_AllowedItem
  { -- | The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number.
    iPProtocol :: (Core.Maybe Core.Text),
    -- | An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: [\"22\"], [\"80\",\"443\"], and [\"12345-12349\"].
    ports :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Firewall_AllowedItem' with the minimum fields required to make a request.
newFirewall_AllowedItem ::
  Firewall_AllowedItem
newFirewall_AllowedItem =
  Firewall_AllowedItem {iPProtocol = Core.Nothing, ports = Core.Nothing}

instance Core.FromJSON Firewall_AllowedItem where
  parseJSON =
    Core.withObject
      "Firewall_AllowedItem"
      ( \o ->
          Firewall_AllowedItem
            Core.<$> (o Core..:? "IPProtocol")
            Core.<*> (o Core..:? "ports")
      )

instance Core.ToJSON Firewall_AllowedItem where
  toJSON Firewall_AllowedItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("IPProtocol" Core..=) Core.<$> iPProtocol,
            ("ports" Core..=) Core.<$> ports
          ]
      )

--
-- /See:/ 'newFirewall_DeniedItem' smart constructor.
data Firewall_DeniedItem = Firewall_DeniedItem
  { -- | The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp) or the IP protocol number.
    iPProtocol :: (Core.Maybe Core.Text),
    -- | An optional list of ports to which this rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: [\"22\"], [\"80\",\"443\"], and [\"12345-12349\"].
    ports :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Firewall_DeniedItem' with the minimum fields required to make a request.
newFirewall_DeniedItem ::
  Firewall_DeniedItem
newFirewall_DeniedItem =
  Firewall_DeniedItem {iPProtocol = Core.Nothing, ports = Core.Nothing}

instance Core.FromJSON Firewall_DeniedItem where
  parseJSON =
    Core.withObject
      "Firewall_DeniedItem"
      ( \o ->
          Firewall_DeniedItem
            Core.<$> (o Core..:? "IPProtocol")
            Core.<*> (o Core..:? "ports")
      )

instance Core.ToJSON Firewall_DeniedItem where
  toJSON Firewall_DeniedItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("IPProtocol" Core..=) Core.<$> iPProtocol,
            ("ports" Core..=) Core.<$> ports
          ]
      )

-- | Contains a list of firewalls.
--
-- /See:/ 'newFirewallList' smart constructor.
data FirewallList = FirewallList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of Firewall resources.
    items :: (Core.Maybe [Firewall]),
    -- | [Output Only] Type of resource. Always compute#firewallList for lists of firewalls.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe FirewallList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'FirewallList' with the minimum fields required to make a request.
newFirewallList ::
  FirewallList
newFirewallList =
  FirewallList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#firewallList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON FirewallList where
  parseJSON =
    Core.withObject
      "FirewallList"
      ( \o ->
          FirewallList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#firewallList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON FirewallList where
  toJSON FirewallList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newFirewallList_Warning' smart constructor.
data FirewallList_Warning = FirewallList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe FirewallList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [FirewallList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'FirewallList_Warning' with the minimum fields required to make a request.
newFirewallList_Warning ::
  FirewallList_Warning
newFirewallList_Warning =
  FirewallList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON FirewallList_Warning where
  parseJSON =
    Core.withObject
      "FirewallList_Warning"
      ( \o ->
          FirewallList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON FirewallList_Warning where
  toJSON FirewallList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newFirewallList_Warning_DataItem' smart constructor.
data FirewallList_Warning_DataItem = FirewallList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'FirewallList_Warning_DataItem' with the minimum fields required to make a request.
newFirewallList_Warning_DataItem ::
  FirewallList_Warning_DataItem
newFirewallList_Warning_DataItem =
  FirewallList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON FirewallList_Warning_DataItem where
  parseJSON =
    Core.withObject
      "FirewallList_Warning_DataItem"
      ( \o ->
          FirewallList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON FirewallList_Warning_DataItem where
  toJSON FirewallList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | The available logging options for a firewall rule.
--
-- /See:/ 'newFirewallLogConfig' smart constructor.
data FirewallLogConfig = FirewallLogConfig
  { -- | This field denotes whether to enable logging for a particular firewall rule.
    enable :: (Core.Maybe Core.Bool),
    -- | This field can only be specified for a particular firewall rule if logging is enabled for that rule. This field denotes whether to include or exclude metadata for firewall logs.
    metadata :: (Core.Maybe FirewallLogConfig_Metadata)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'FirewallLogConfig' with the minimum fields required to make a request.
newFirewallLogConfig ::
  FirewallLogConfig
newFirewallLogConfig =
  FirewallLogConfig {enable = Core.Nothing, metadata = Core.Nothing}

instance Core.FromJSON FirewallLogConfig where
  parseJSON =
    Core.withObject
      "FirewallLogConfig"
      ( \o ->
          FirewallLogConfig
            Core.<$> (o Core..:? "enable")
            Core.<*> (o Core..:? "metadata")
      )

instance Core.ToJSON FirewallLogConfig where
  toJSON FirewallLogConfig {..} =
    Core.object
      ( Core.catMaybes
          [ ("enable" Core..=) Core.<$> enable,
            ("metadata" Core..=) Core.<$> metadata
          ]
      )

--
-- /See:/ 'newFirewallPoliciesListAssociationsResponse' smart constructor.
data FirewallPoliciesListAssociationsResponse = FirewallPoliciesListAssociationsResponse
  { -- | A list of associations.
    associations :: (Core.Maybe [FirewallPolicyAssociation]),
    -- | [Output Only] Type of firewallPolicy associations. Always compute#FirewallPoliciesListAssociations for lists of firewallPolicy associations.
    kind :: Core.Text
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'FirewallPoliciesListAssociationsResponse' with the minimum fields required to make a request.
newFirewallPoliciesListAssociationsResponse ::
  FirewallPoliciesListAssociationsResponse
newFirewallPoliciesListAssociationsResponse =
  FirewallPoliciesListAssociationsResponse
    { associations = Core.Nothing,
      kind = "compute#firewallPoliciesListAssociationsResponse"
    }

instance
  Core.FromJSON
    FirewallPoliciesListAssociationsResponse
  where
  parseJSON =
    Core.withObject
      "FirewallPoliciesListAssociationsResponse"
      ( \o ->
          FirewallPoliciesListAssociationsResponse
            Core.<$> (o Core..:? "associations")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#firewallPoliciesListAssociationsResponse"
                     )
      )

instance
  Core.ToJSON
    FirewallPoliciesListAssociationsResponse
  where
  toJSON FirewallPoliciesListAssociationsResponse {..} =
    Core.object
      ( Core.catMaybes
          [ ("associations" Core..=) Core.<$> associations,
            Core.Just ("kind" Core..= kind)
          ]
      )

-- | Represents a Firewall Policy resource.
--
-- /See:/ 'newFirewallPolicy' smart constructor.
data FirewallPolicy = FirewallPolicy
  { -- | A list of associations that belong to this firewall policy.
    associations :: (Core.Maybe [FirewallPolicyAssociation]),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | Deprecated, please use short name instead. User-provided name of the Organization firewall policy. The name should be unique in the organization in which the firewall policy is created. This field is not applicable to network firewall policies. This name must be set on creation and cannot be changed. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    displayName :: (Core.Maybe Core.Text),
    -- | Specifies a fingerprint for this resource, which is essentially a hash of the metadata\'s contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make get() request to the firewall policy.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output only] Type of the resource. Always compute#firewallPolicyfor firewall policies
    kind :: Core.Text,
    -- | Name of the resource. For Organization Firewall Policies it\'s a [Output Only] numeric ID allocated by Google Cloud which uniquely identifies the Organization Firewall Policy.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] The parent of the firewall policy. This field is not applicable to network firewall policies.
    parent :: (Core.Maybe Core.Text),
    -- | [Output Only] URL of the region where the regional firewall policy resides. This field is not applicable to global firewall policies. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Total count of all firewall policy rule tuples. A firewall policy can not exceed a set number of tuples.
    ruleTupleCount :: (Core.Maybe Core.Int32),
    -- | A list of rules that belong to this policy. There must always be a default rule (rule with priority 2147483647 and match \"*\"). If no rules are provided when creating a firewall policy, a default rule with action \"allow\" will be added.
    rules :: (Core.Maybe [FirewallPolicyRule]),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource with the resource id.
    selfLinkWithId :: (Core.Maybe Core.Text),
    -- | User-provided name of the Organization firewall policy. The name should be unique in the organization in which the firewall policy is created. This field is not applicable to network firewall policies. This name must be set on creation and cannot be changed. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    shortName :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'FirewallPolicy' with the minimum fields required to make a request.
newFirewallPolicy ::
  FirewallPolicy
newFirewallPolicy =
  FirewallPolicy
    { associations = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      displayName = Core.Nothing,
      fingerprint = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#firewallPolicy",
      name = Core.Nothing,
      parent = Core.Nothing,
      region = Core.Nothing,
      ruleTupleCount = Core.Nothing,
      rules = Core.Nothing,
      selfLink = Core.Nothing,
      selfLinkWithId = Core.Nothing,
      shortName = Core.Nothing
    }

instance Core.FromJSON FirewallPolicy where
  parseJSON =
    Core.withObject
      "FirewallPolicy"
      ( \o ->
          FirewallPolicy
            Core.<$> (o Core..:? "associations")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "displayName")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#firewallPolicy")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "parent")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "ruleTupleCount")
            Core.<*> (o Core..:? "rules")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "selfLinkWithId")
            Core.<*> (o Core..:? "shortName")
      )

instance Core.ToJSON FirewallPolicy where
  toJSON FirewallPolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("associations" Core..=) Core.<$> associations,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("displayName" Core..=) Core.<$> displayName,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("parent" Core..=) Core.<$> parent,
            ("region" Core..=) Core.<$> region,
            ("ruleTupleCount" Core..=) Core.<$> ruleTupleCount,
            ("rules" Core..=) Core.<$> rules,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("selfLinkWithId" Core..=) Core.<$> selfLinkWithId,
            ("shortName" Core..=) Core.<$> shortName
          ]
      )

--
-- /See:/ 'newFirewallPolicyAssociation' smart constructor.
data FirewallPolicyAssociation = FirewallPolicyAssociation
  { -- | The target that the firewall policy is attached to.
    attachmentTarget :: (Core.Maybe Core.Text),
    -- | [Output Only] Deprecated, please use short name instead. The display name of the firewall policy of the association.
    displayName :: (Core.Maybe Core.Text),
    -- | [Output Only] The firewall policy ID of the association.
    firewallPolicyId :: (Core.Maybe Core.Text),
    -- | The name for an association.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] The short name of the firewall policy of the association.
    shortName :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'FirewallPolicyAssociation' with the minimum fields required to make a request.
newFirewallPolicyAssociation ::
  FirewallPolicyAssociation
newFirewallPolicyAssociation =
  FirewallPolicyAssociation
    { attachmentTarget = Core.Nothing,
      displayName = Core.Nothing,
      firewallPolicyId = Core.Nothing,
      name = Core.Nothing,
      shortName = Core.Nothing
    }

instance Core.FromJSON FirewallPolicyAssociation where
  parseJSON =
    Core.withObject
      "FirewallPolicyAssociation"
      ( \o ->
          FirewallPolicyAssociation
            Core.<$> (o Core..:? "attachmentTarget")
            Core.<*> (o Core..:? "displayName")
            Core.<*> (o Core..:? "firewallPolicyId")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "shortName")
      )

instance Core.ToJSON FirewallPolicyAssociation where
  toJSON FirewallPolicyAssociation {..} =
    Core.object
      ( Core.catMaybes
          [ ("attachmentTarget" Core..=)
              Core.<$> attachmentTarget,
            ("displayName" Core..=) Core.<$> displayName,
            ("firewallPolicyId" Core..=)
              Core.<$> firewallPolicyId,
            ("name" Core..=) Core.<$> name,
            ("shortName" Core..=) Core.<$> shortName
          ]
      )

--
-- /See:/ 'newFirewallPolicyList' smart constructor.
data FirewallPolicyList = FirewallPolicyList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of FirewallPolicy resources.
    items :: (Core.Maybe [FirewallPolicy]),
    -- | [Output Only] Type of resource. Always compute#firewallPolicyList for listsof FirewallPolicies
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe FirewallPolicyList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'FirewallPolicyList' with the minimum fields required to make a request.
newFirewallPolicyList ::
  FirewallPolicyList
newFirewallPolicyList =
  FirewallPolicyList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#firewallPolicyList",
      nextPageToken = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON FirewallPolicyList where
  parseJSON =
    Core.withObject
      "FirewallPolicyList"
      ( \o ->
          FirewallPolicyList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#firewallPolicyList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON FirewallPolicyList where
  toJSON FirewallPolicyList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newFirewallPolicyList_Warning' smart constructor.
data FirewallPolicyList_Warning = FirewallPolicyList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe FirewallPolicyList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [FirewallPolicyList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'FirewallPolicyList_Warning' with the minimum fields required to make a request.
newFirewallPolicyList_Warning ::
  FirewallPolicyList_Warning
newFirewallPolicyList_Warning =
  FirewallPolicyList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON FirewallPolicyList_Warning where
  parseJSON =
    Core.withObject
      "FirewallPolicyList_Warning"
      ( \o ->
          FirewallPolicyList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON FirewallPolicyList_Warning where
  toJSON FirewallPolicyList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newFirewallPolicyList_Warning_DataItem' smart constructor.
data FirewallPolicyList_Warning_DataItem = FirewallPolicyList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'FirewallPolicyList_Warning_DataItem' with the minimum fields required to make a request.
newFirewallPolicyList_Warning_DataItem ::
  FirewallPolicyList_Warning_DataItem
newFirewallPolicyList_Warning_DataItem =
  FirewallPolicyList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    FirewallPolicyList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "FirewallPolicyList_Warning_DataItem"
      ( \o ->
          FirewallPolicyList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    FirewallPolicyList_Warning_DataItem
  where
  toJSON FirewallPolicyList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
--
-- /See:/ 'newFirewallPolicyRule' smart constructor.
data FirewallPolicyRule = FirewallPolicyRule
  { -- | The Action to perform when the client connection triggers the rule. Valid actions are \"allow\", \"deny\" and \"goto_next\".
    action :: (Core.Maybe Core.Text),
    -- | An optional description for this resource.
    description :: (Core.Maybe Core.Text),
    -- | The direction in which this rule applies.
    direction :: (Core.Maybe FirewallPolicyRule_Direction),
    -- | Denotes whether the firewall policy rule is disabled. When set to true, the firewall policy rule is not enforced and traffic behaves as if it did not exist. If this is unspecified, the firewall policy rule will be enabled.
    disabled :: (Core.Maybe Core.Bool),
    -- | Denotes whether to enable logging for a particular rule. If logging is enabled, logs will be exported to the configured export destination in Stackdriver. Logs may be exported to BigQuery or Pub\/Sub. Note: you cannot enable logging on \"goto_next\" rules.
    enableLogging :: (Core.Maybe Core.Bool),
    -- | [Output only] Type of the resource. Always compute#firewallPolicyRule for firewall policy rules
    kind :: Core.Text,
    -- | A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding \'action\' is enforced.
    match :: (Core.Maybe FirewallPolicyRuleMatcher),
    -- | An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest prority.
    priority :: (Core.Maybe Core.Int32),
    -- | An optional name for the rule. This field is not a unique identifier and can be updated.
    ruleName :: (Core.Maybe Core.Text),
    -- | [Output Only] Calculation of the complexity of a single firewall policy rule.
    ruleTupleCount :: (Core.Maybe Core.Int32),
    -- | A list of network resource URLs to which this rule applies. This field allows you to control which network\'s VMs get this rule. If this field is left blank, all VMs within the organization will receive the rule.
    targetResources :: (Core.Maybe [Core.Text]),
    -- | A list of secure tags that controls which instances the firewall rule applies to. If targetSecureTag are specified, then the firewall rule applies only to instances in the VPC network that have one of those EFFECTIVE secure tags, if all the target/secure/tag are in INEFFECTIVE state, then this rule will be ignored. targetSecureTag may not be set at the same time as targetServiceAccounts. If neither targetServiceAccounts nor targetSecureTag are specified, the firewall rule applies to all instances on the specified network. Maximum number of target label tags allowed is 256.
    targetSecureTags :: (Core.Maybe [FirewallPolicyRuleSecureTag]),
    -- | A list of service accounts indicating the sets of instances that are applied with this rule.
    targetServiceAccounts :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'FirewallPolicyRule' with the minimum fields required to make a request.
newFirewallPolicyRule ::
  FirewallPolicyRule
newFirewallPolicyRule =
  FirewallPolicyRule
    { action = Core.Nothing,
      description = Core.Nothing,
      direction = Core.Nothing,
      disabled = Core.Nothing,
      enableLogging = Core.Nothing,
      kind = "compute#firewallPolicyRule",
      match = Core.Nothing,
      priority = Core.Nothing,
      ruleName = Core.Nothing,
      ruleTupleCount = Core.Nothing,
      targetResources = Core.Nothing,
      targetSecureTags = Core.Nothing,
      targetServiceAccounts = Core.Nothing
    }

instance Core.FromJSON FirewallPolicyRule where
  parseJSON =
    Core.withObject
      "FirewallPolicyRule"
      ( \o ->
          FirewallPolicyRule
            Core.<$> (o Core..:? "action")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "direction")
            Core.<*> (o Core..:? "disabled")
            Core.<*> (o Core..:? "enableLogging")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#firewallPolicyRule"
                     )
            Core.<*> (o Core..:? "match")
            Core.<*> (o Core..:? "priority")
            Core.<*> (o Core..:? "ruleName")
            Core.<*> (o Core..:? "ruleTupleCount")
            Core.<*> (o Core..:? "targetResources")
            Core.<*> (o Core..:? "targetSecureTags")
            Core.<*> (o Core..:? "targetServiceAccounts")
      )

instance Core.ToJSON FirewallPolicyRule where
  toJSON FirewallPolicyRule {..} =
    Core.object
      ( Core.catMaybes
          [ ("action" Core..=) Core.<$> action,
            ("description" Core..=) Core.<$> description,
            ("direction" Core..=) Core.<$> direction,
            ("disabled" Core..=) Core.<$> disabled,
            ("enableLogging" Core..=) Core.<$> enableLogging,
            Core.Just ("kind" Core..= kind),
            ("match" Core..=) Core.<$> match,
            ("priority" Core..=) Core.<$> priority,
            ("ruleName" Core..=) Core.<$> ruleName,
            ("ruleTupleCount" Core..=) Core.<$> ruleTupleCount,
            ("targetResources" Core..=) Core.<$> targetResources,
            ("targetSecureTags" Core..=)
              Core.<$> targetSecureTags,
            ("targetServiceAccounts" Core..=)
              Core.<$> targetServiceAccounts
          ]
      )

-- | Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
--
-- /See:/ 'newFirewallPolicyRuleMatcher' smart constructor.
data FirewallPolicyRuleMatcher = FirewallPolicyRuleMatcher
  { -- | Address groups which should be matched against the traffic destination. Maximum number of destination address groups is 10.
    destAddressGroups :: (Core.Maybe [Core.Text]),
    -- | Fully Qualified Domain Name (FQDN) which should be matched against traffic destination. Maximum number of destination fqdn allowed is 100.
    destFqdns :: (Core.Maybe [Core.Text]),
    -- | CIDR IP address range. Maximum number of destination CIDR IP ranges allowed is 5000.
    destIpRanges :: (Core.Maybe [Core.Text]),
    -- | Region codes whose IP addresses will be used to match for destination of traffic. Should be specified as 2 letter country code defined as per ISO 3166 alpha-2 country codes. ex.\"US\" Maximum number of dest region codes allowed is 5000.
    destRegionCodes :: (Core.Maybe [Core.Text]),
    -- | Names of Network Threat Intelligence lists. The IPs in these lists will be matched against traffic destination.
    destThreatIntelligences :: (Core.Maybe [Core.Text]),
    -- | Pairs of IP protocols and ports that the rule should match.
    layer4Configs :: (Core.Maybe [FirewallPolicyRuleMatcherLayer4Config]),
    -- | Address groups which should be matched against the traffic source. Maximum number of source address groups is 10.
    srcAddressGroups :: (Core.Maybe [Core.Text]),
    -- | Fully Qualified Domain Name (FQDN) which should be matched against traffic source. Maximum number of source fqdn allowed is 100.
    srcFqdns :: (Core.Maybe [Core.Text]),
    -- | CIDR IP address range. Maximum number of source CIDR IP ranges allowed is 5000.
    srcIpRanges :: (Core.Maybe [Core.Text]),
    -- | Region codes whose IP addresses will be used to match for source of traffic. Should be specified as 2 letter country code defined as per ISO 3166 alpha-2 country codes. ex.\"US\" Maximum number of source region codes allowed is 5000.
    srcRegionCodes :: (Core.Maybe [Core.Text]),
    -- | List of secure tag values, which should be matched at the source of the traffic. For INGRESS rule, if all the srcSecureTag are INEFFECTIVE, and there is no srcIpRange, this rule will be ignored. Maximum number of source tag values allowed is 256.
    srcSecureTags :: (Core.Maybe [FirewallPolicyRuleSecureTag]),
    -- | Names of Network Threat Intelligence lists. The IPs in these lists will be matched against traffic source.
    srcThreatIntelligences :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'FirewallPolicyRuleMatcher' with the minimum fields required to make a request.
newFirewallPolicyRuleMatcher ::
  FirewallPolicyRuleMatcher
newFirewallPolicyRuleMatcher =
  FirewallPolicyRuleMatcher
    { destAddressGroups = Core.Nothing,
      destFqdns = Core.Nothing,
      destIpRanges = Core.Nothing,
      destRegionCodes = Core.Nothing,
      destThreatIntelligences = Core.Nothing,
      layer4Configs = Core.Nothing,
      srcAddressGroups = Core.Nothing,
      srcFqdns = Core.Nothing,
      srcIpRanges = Core.Nothing,
      srcRegionCodes = Core.Nothing,
      srcSecureTags = Core.Nothing,
      srcThreatIntelligences = Core.Nothing
    }

instance Core.FromJSON FirewallPolicyRuleMatcher where
  parseJSON =
    Core.withObject
      "FirewallPolicyRuleMatcher"
      ( \o ->
          FirewallPolicyRuleMatcher
            Core.<$> (o Core..:? "destAddressGroups")
            Core.<*> (o Core..:? "destFqdns")
            Core.<*> (o Core..:? "destIpRanges")
            Core.<*> (o Core..:? "destRegionCodes")
            Core.<*> (o Core..:? "destThreatIntelligences")
            Core.<*> (o Core..:? "layer4Configs")
            Core.<*> (o Core..:? "srcAddressGroups")
            Core.<*> (o Core..:? "srcFqdns")
            Core.<*> (o Core..:? "srcIpRanges")
            Core.<*> (o Core..:? "srcRegionCodes")
            Core.<*> (o Core..:? "srcSecureTags")
            Core.<*> (o Core..:? "srcThreatIntelligences")
      )

instance Core.ToJSON FirewallPolicyRuleMatcher where
  toJSON FirewallPolicyRuleMatcher {..} =
    Core.object
      ( Core.catMaybes
          [ ("destAddressGroups" Core..=)
              Core.<$> destAddressGroups,
            ("destFqdns" Core..=) Core.<$> destFqdns,
            ("destIpRanges" Core..=) Core.<$> destIpRanges,
            ("destRegionCodes" Core..=) Core.<$> destRegionCodes,
            ("destThreatIntelligences" Core..=)
              Core.<$> destThreatIntelligences,
            ("layer4Configs" Core..=) Core.<$> layer4Configs,
            ("srcAddressGroups" Core..=)
              Core.<$> srcAddressGroups,
            ("srcFqdns" Core..=) Core.<$> srcFqdns,
            ("srcIpRanges" Core..=) Core.<$> srcIpRanges,
            ("srcRegionCodes" Core..=) Core.<$> srcRegionCodes,
            ("srcSecureTags" Core..=) Core.<$> srcSecureTags,
            ("srcThreatIntelligences" Core..=)
              Core.<$> srcThreatIntelligences
          ]
      )

--
-- /See:/ 'newFirewallPolicyRuleMatcherLayer4Config' smart constructor.
data FirewallPolicyRuleMatcherLayer4Config = FirewallPolicyRuleMatcherLayer4Config
  { -- | The IP protocol to which this rule applies. The protocol type is required when creating a firewall rule. This value can either be one of the following well known protocol strings (tcp, udp, icmp, esp, ah, ipip, sctp), or the IP protocol number.
    ipProtocol :: (Core.Maybe Core.Text),
    -- | An optional list of ports to which this rule applies. This field is only applicable for UDP or TCP protocol. Each entry must be either an integer or a range. If not specified, this rule applies to connections through any port. Example inputs include: [\"22\"], [\"80\",\"443\"], and [\"12345-12349\"].
    ports :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'FirewallPolicyRuleMatcherLayer4Config' with the minimum fields required to make a request.
newFirewallPolicyRuleMatcherLayer4Config ::
  FirewallPolicyRuleMatcherLayer4Config
newFirewallPolicyRuleMatcherLayer4Config =
  FirewallPolicyRuleMatcherLayer4Config
    { ipProtocol = Core.Nothing,
      ports = Core.Nothing
    }

instance
  Core.FromJSON
    FirewallPolicyRuleMatcherLayer4Config
  where
  parseJSON =
    Core.withObject
      "FirewallPolicyRuleMatcherLayer4Config"
      ( \o ->
          FirewallPolicyRuleMatcherLayer4Config
            Core.<$> (o Core..:? "ipProtocol")
            Core.<*> (o Core..:? "ports")
      )

instance
  Core.ToJSON
    FirewallPolicyRuleMatcherLayer4Config
  where
  toJSON FirewallPolicyRuleMatcherLayer4Config {..} =
    Core.object
      ( Core.catMaybes
          [ ("ipProtocol" Core..=) Core.<$> ipProtocol,
            ("ports" Core..=) Core.<$> ports
          ]
      )

--
-- /See:/ 'newFirewallPolicyRuleSecureTag' smart constructor.
data FirewallPolicyRuleSecureTag = FirewallPolicyRuleSecureTag
  { -- | Name of the secure tag, created with TagManager\'s TagValue API.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] State of the secure tag, either @EFFECTIVE@ or @INEFFECTIVE@. A secure tag is @INEFFECTIVE@ when it is deleted or its network is deleted.
    state :: (Core.Maybe FirewallPolicyRuleSecureTag_State)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'FirewallPolicyRuleSecureTag' with the minimum fields required to make a request.
newFirewallPolicyRuleSecureTag ::
  FirewallPolicyRuleSecureTag
newFirewallPolicyRuleSecureTag =
  FirewallPolicyRuleSecureTag {name = Core.Nothing, state = Core.Nothing}

instance Core.FromJSON FirewallPolicyRuleSecureTag where
  parseJSON =
    Core.withObject
      "FirewallPolicyRuleSecureTag"
      ( \o ->
          FirewallPolicyRuleSecureTag
            Core.<$> (o Core..:? "name") Core.<*> (o Core..:? "state")
      )

instance Core.ToJSON FirewallPolicyRuleSecureTag where
  toJSON FirewallPolicyRuleSecureTag {..} =
    Core.object
      ( Core.catMaybes
          [ ("name" Core..=) Core.<$> name,
            ("state" Core..=) Core.<$> state
          ]
      )

-- | Encapsulates numeric value that can be either absolute or relative.
--
-- /See:/ 'newFixedOrPercent' smart constructor.
data FixedOrPercent = FixedOrPercent
  { -- | [Output Only] Absolute value of VM instances calculated based on the specific mode. - If the value is fixed, then the calculated value is equal to the fixed value. - If the value is a percent, then the calculated value is percent\/100 * targetSize. For example, the calculated value of a 80% of a managed instance group with 150 instances would be (80\/100 * 150) = 120 VM instances. If there is a remainder, the number is rounded.
    calculated :: (Core.Maybe Core.Int32),
    -- | Specifies a fixed number of VM instances. This must be a positive integer.
    fixed :: (Core.Maybe Core.Int32),
    -- | Specifies a percentage of instances between 0 to 100%, inclusive. For example, specify 80 for 80%.
    percent :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'FixedOrPercent' with the minimum fields required to make a request.
newFixedOrPercent ::
  FixedOrPercent
newFixedOrPercent =
  FixedOrPercent
    { calculated = Core.Nothing,
      fixed = Core.Nothing,
      percent = Core.Nothing
    }

instance Core.FromJSON FixedOrPercent where
  parseJSON =
    Core.withObject
      "FixedOrPercent"
      ( \o ->
          FixedOrPercent
            Core.<$> (o Core..:? "calculated")
            Core.<*> (o Core..:? "fixed")
            Core.<*> (o Core..:? "percent")
      )

instance Core.ToJSON FixedOrPercent where
  toJSON FixedOrPercent {..} =
    Core.object
      ( Core.catMaybes
          [ ("calculated" Core..=) Core.<$> calculated,
            ("fixed" Core..=) Core.<$> fixed,
            ("percent" Core..=) Core.<$> percent
          ]
      )

-- | Represents a Forwarding Rule resource. Forwarding rule resources in Google Cloud can be either regional or global in scope: * <https://cloud.google.com/compute/docs/reference/rest/v1/globalForwardingRules Global> * <https://cloud.google.com/compute/docs/reference/rest/v1/forwardingRules Regional> A forwarding rule and its corresponding IP address represent the frontend configuration of a Google Cloud Platform load balancer. Forwarding rules can also reference target instances and Cloud VPN Classic gateways (targetVpnGateway). For more information, read Forwarding rule concepts and Using protocol forwarding.
--
-- /See:/ 'newForwardingRule' smart constructor.
data ForwardingRule = ForwardingRule
  { -- | IP address for which this forwarding rule accepts traffic. When a client sends traffic to this IP address, the forwarding rule directs the traffic to the referenced target or backendService. While creating a forwarding rule, specifying an IPAddress is required under the following circumstances: - When the target is set to targetGrpcProxy and validateForProxyless is set to true, the IPAddress should be set to 0.0.0.0. - When the target is a Private Service Connect Google APIs bundle, you must specify an IPAddress. Otherwise, you can optionally specify an IP address that references an existing static (reserved) IP address resource. When omitted, Google Cloud assigns an ephemeral IP address. Use one of the following formats to specify an IP address while creating a forwarding rule: * IP address number, as in @100.1.2.3@ * IPv6 address range, as in @2600:1234::\/96@ * Full resource URL, as in https:\/\/www.googleapis.com\/compute\/v1\/projects\/ project/id\/regions\/region\/addresses\/address-name * Partial URL
    -- or by name, as in: - projects\/project/id\/regions\/region\/addresses\/address-name - regions\/region\/addresses\/address-name - global\/addresses\/address-name - address-name The forwarding rule\'s target or backendService, and in most cases, also the loadBalancingScheme, determine the type of IP address that you can use. For detailed information, see <https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications IP address specifications>. When reading an IPAddress, the API always returns the IP address number.
    iPAddress :: (Core.Maybe Core.Text),
    -- | The IP protocol to which this rule applies. For protocol forwarding, valid options are TCP, UDP, ESP, AH, SCTP, ICMP and L3_DEFAULT. The valid IP protocols are different for different load balancing products as described in <https://cloud.google.com/load-balancing/docs/features#protocols_from_the_load_balancer_to_the_backends Load balancing features>.
    iPProtocol :: (Core.Maybe ForwardingRule_IPProtocol),
    -- | This field can only be used: - If IPProtocol is one of TCP, UDP, or SCTP. - By internal TCP\/UDP load balancers, backend service-based network load balancers, and internal and external protocol forwarding. Set this field to true to allow packets addressed to any port or packets lacking destination port information (for example, UDP fragments after the first fragment) to be forwarded to the backends configured with this forwarding rule. The ports, port_range, and allPorts fields are mutually exclusive.
    allPorts :: (Core.Maybe Core.Bool),
    -- | This field is used along with the backend_service field for internal load balancing or with the target field for internal TargetInstance. If the field is set to TRUE, clients can access ILB from all regions. Otherwise only allows access from clients in the same region as the internal load balancer.
    allowGlobalAccess :: (Core.Maybe Core.Bool),
    -- | Identifies the backend service to which the forwarding rule sends traffic. Required for Internal TCP\/UDP Load Balancing and Network Load Balancing; must be omitted for all other load balancer types.
    backendService :: (Core.Maybe Core.Text),
    -- | [Output Only] The URL for the corresponding base Forwarding Rule. By base Forwarding Rule, we mean the Forwarding Rule that has the same IP address, protocol, and port settings with the current Forwarding Rule, but without sourceIPRanges specified. Always empty if the current Forwarding Rule does not have sourceIPRanges specified.
    baseForwardingRule :: (Core.Maybe Core.Text),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a ForwardingRule. Include the fingerprint in patch request to ensure that you do not overwrite changes that were applied from another concurrent request. To see the latest fingerprint, make a get() request to retrieve a ForwardingRule.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | The IP Version that will be used by this forwarding rule. Valid options are IPV4 or IPV6.
    ipVersion :: (Core.Maybe ForwardingRule_IpVersion),
    -- | Indicates whether or not this load balancer can be used as a collector for packet mirroring. To prevent mirroring loops, instances behind this load balancer will not have their traffic mirrored even if a PacketMirroring rule applies to them. This can only be set to true for load balancers that have their loadBalancingScheme set to INTERNAL.
    isMirroringCollector :: (Core.Maybe Core.Bool),
    -- | [Output Only] Type of the resource. Always compute#forwardingRule for Forwarding Rule resources.
    kind :: Core.Text,
    -- | A fingerprint for the labels being applied to this resource, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a ForwardingRule.
    labelFingerprint :: (Core.Maybe Core.Base64),
    -- | Labels for this resource. These can only be added or modified by the setLabels method. Each label key\/value pair must comply with RFC1035. Label values may be empty.
    labels :: (Core.Maybe ForwardingRule_Labels),
    -- | Specifies the forwarding rule type. For more information about forwarding rules, refer to Forwarding rule concepts.
    loadBalancingScheme :: (Core.Maybe ForwardingRule_LoadBalancingScheme),
    -- | Opaque filter criteria used by load balancer to restrict routing configuration to a limited set of xDS compliant clients. In their xDS requests to load balancer, xDS clients present node metadata. When there is a match, the relevant configuration is made available to those proxies. Otherwise, all the resources (e.g. TargetHttpProxy, UrlMap) referenced by the ForwardingRule are not visible to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH/ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH/ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. If multiple metadataFilters are specified, all of them need to be satisfied in order to be considered a match. metadataFilters specified here will be applifed before those specified in the UrlMap that this ForwardingRule references. metadataFilters only applies to Loadbalancers that have their
    -- loadBalancingScheme set to INTERNAL/SELF/MANAGED.
    metadataFilters :: (Core.Maybe [MetadataFilter]),
    -- | Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. For Private Service Connect forwarding rules that forward traffic to Google APIs, the forwarding rule name must be a 1-20 characters string with lowercase letters and numbers and must start with a letter.
    name :: (Core.Maybe Core.Text),
    -- | This field is not used for external load balancing. For Internal TCP\/UDP Load Balancing, this field identifies the network that the load balanced IP should belong to for this Forwarding Rule. If this field is not specified, the default network will be used. For Private Service Connect forwarding rules that forward traffic to Google APIs, a network must be provided.
    network :: (Core.Maybe Core.Text),
    -- | This signifies the networking tier used for configuring this load balancer and can only take the following values: PREMIUM, STANDARD. For regional ForwardingRule, the valid values are PREMIUM and STANDARD. For GlobalForwardingRule, the valid value is PREMIUM. If this field is not specified, it is assumed to be PREMIUM. If IPAddress is specified, this value must be equal to the networkTier of the Address.
    networkTier :: (Core.Maybe ForwardingRule_NetworkTier),
    -- | This is used in PSC consumer ForwardingRule to control whether it should try to auto-generate a DNS zone or not. Non-PSC forwarding rules do not use this field.
    noAutomateDnsZone :: (Core.Maybe Core.Bool),
    -- | This field can only be used: - If IPProtocol is one of TCP, UDP, or SCTP. - By backend service-based network load balancers, target pool-based network load balancers, internal proxy load balancers, external proxy load balancers, Traffic Director, external protocol forwarding, and Classic VPN. Some products have restrictions on what ports can be used. See port specifications for details. Only packets addressed to ports in the specified range will be forwarded to the backends configured with this forwarding rule. The ports, port_range, and allPorts fields are mutually exclusive. For external forwarding rules, two or more forwarding rules cannot use the same [IPAddress, IPProtocol] pair, and cannot have overlapping portRanges. For internal forwarding rules within the same VPC network, two or more forwarding rules cannot use the same [IPAddress, IPProtocol] pair, and cannot have overlapping portRanges. \@pattern: \\d+(?:-\\d+)?
    portRange :: (Core.Maybe Core.Text),
    -- | This field can only be used: - If IPProtocol is one of TCP, UDP, or SCTP. - By internal TCP\/UDP load balancers, backend service-based network load balancers, and internal protocol forwarding. You can specify a list of up to five ports by number, separated by commas. The ports can be contiguous or discontiguous. Only packets addressed to these ports will be forwarded to the backends configured with this forwarding rule. For external forwarding rules, two or more forwarding rules cannot use the same [IPAddress, IPProtocol] pair, and cannot share any values defined in ports. For internal forwarding rules within the same VPC network, two or more forwarding rules cannot use the same [IPAddress, IPProtocol] pair, and cannot share any values defined in ports. The ports, port_range, and allPorts fields are mutually exclusive. \@pattern: \\d+(?:-\\d+)?
    ports :: (Core.Maybe [Core.Text]),
    -- | [Output Only] The PSC connection id of the PSC Forwarding Rule.
    pscConnectionId :: (Core.Maybe Core.Word64),
    -- |
    pscConnectionStatus :: (Core.Maybe ForwardingRule_PscConnectionStatus),
    -- | [Output Only] URL of the region where the regional forwarding rule resides. This field is not applicable to global forwarding rules. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | Service Directory resources to register this forwarding rule with. Currently, only supports a single Service Directory resource.
    serviceDirectoryRegistrations :: (Core.Maybe [ForwardingRuleServiceDirectoryRegistration]),
    -- | An optional prefix to the service name for this Forwarding Rule. If specified, the prefix is the first label of the fully qualified service name. The label must be 1-63 characters long, and comply with RFC1035. Specifically, the label must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash. This field is only used for internal load balancing.
    serviceLabel :: (Core.Maybe Core.Text),
    -- | [Output Only] The internal fully qualified service name for this Forwarding Rule. This field is only used for internal load balancing.
    serviceName :: (Core.Maybe Core.Text),
    -- | If not empty, this Forwarding Rule will only forward the traffic when the source IP address matches one of the IP addresses or CIDR ranges set here. Note that a Forwarding Rule can only have up to 64 source IP ranges, and this field can only be used with a regional Forwarding Rule whose scheme is EXTERNAL. Each source/ip/range entry should be either an IP address (for example, 1.2.3.4) or a CIDR range (for example, 1.2.3.0\/24).
    sourceIpRanges :: (Core.Maybe [Core.Text]),
    -- | This field identifies the subnetwork that the load balanced IP should belong to for this Forwarding Rule, used in internal load balancing and network load balancing with IPv6. If the network specified is in auto subnet mode, this field is optional. However, a subnetwork must be specified if the network is in custom subnet mode or when creating external forwarding rule with IPv6.
    subnetwork :: (Core.Maybe Core.Text),
    -- | The URL of the target resource to receive the matched traffic. For regional forwarding rules, this target must be in the same region as the forwarding rule. For global forwarding rules, this target must be a global load balancing resource. The forwarded traffic must be of a type appropriate to the target object. - For load balancers, see the \"Target\" column in <https://cloud.google.com/load-balancing/docs/forwarding-rule-concepts#ip_address_specifications Port specifications>. - For Private Service Connect forwarding rules that forward traffic to Google APIs, provide the name of a supported Google API bundle: - vpc-sc - APIs that support VPC Service Controls. - all-apis - All supported Google APIs. - For Private Service Connect forwarding rules that forward traffic to managed services, the target must be a service attachment.
    target :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ForwardingRule' with the minimum fields required to make a request.
newForwardingRule ::
  ForwardingRule
newForwardingRule =
  ForwardingRule
    { iPAddress = Core.Nothing,
      iPProtocol = Core.Nothing,
      allPorts = Core.Nothing,
      allowGlobalAccess = Core.Nothing,
      backendService = Core.Nothing,
      baseForwardingRule = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      fingerprint = Core.Nothing,
      id = Core.Nothing,
      ipVersion = Core.Nothing,
      isMirroringCollector = Core.Nothing,
      kind = "compute#forwardingRule",
      labelFingerprint = Core.Nothing,
      labels = Core.Nothing,
      loadBalancingScheme = Core.Nothing,
      metadataFilters = Core.Nothing,
      name = Core.Nothing,
      network = Core.Nothing,
      networkTier = Core.Nothing,
      noAutomateDnsZone = Core.Nothing,
      portRange = Core.Nothing,
      ports = Core.Nothing,
      pscConnectionId = Core.Nothing,
      pscConnectionStatus = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      serviceDirectoryRegistrations = Core.Nothing,
      serviceLabel = Core.Nothing,
      serviceName = Core.Nothing,
      sourceIpRanges = Core.Nothing,
      subnetwork = Core.Nothing,
      target = Core.Nothing
    }

instance Core.FromJSON ForwardingRule where
  parseJSON =
    Core.withObject
      "ForwardingRule"
      ( \o ->
          ForwardingRule
            Core.<$> (o Core..:? "IPAddress")
            Core.<*> (o Core..:? "IPProtocol")
            Core.<*> (o Core..:? "allPorts")
            Core.<*> (o Core..:? "allowGlobalAccess")
            Core.<*> (o Core..:? "backendService")
            Core.<*> (o Core..:? "baseForwardingRule")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "ipVersion")
            Core.<*> (o Core..:? "isMirroringCollector")
            Core.<*> (o Core..:? "kind" Core..!= "compute#forwardingRule")
            Core.<*> (o Core..:? "labelFingerprint")
            Core.<*> (o Core..:? "labels")
            Core.<*> (o Core..:? "loadBalancingScheme")
            Core.<*> (o Core..:? "metadataFilters")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "network")
            Core.<*> (o Core..:? "networkTier")
            Core.<*> (o Core..:? "noAutomateDnsZone")
            Core.<*> (o Core..:? "portRange")
            Core.<*> (o Core..:? "ports")
            Core.<*> ( o Core..:? "pscConnectionId"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "pscConnectionStatus")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "serviceDirectoryRegistrations")
            Core.<*> (o Core..:? "serviceLabel")
            Core.<*> (o Core..:? "serviceName")
            Core.<*> (o Core..:? "sourceIpRanges")
            Core.<*> (o Core..:? "subnetwork")
            Core.<*> (o Core..:? "target")
      )

instance Core.ToJSON ForwardingRule where
  toJSON ForwardingRule {..} =
    Core.object
      ( Core.catMaybes
          [ ("IPAddress" Core..=) Core.<$> iPAddress,
            ("IPProtocol" Core..=) Core.<$> iPProtocol,
            ("allPorts" Core..=) Core.<$> allPorts,
            ("allowGlobalAccess" Core..=)
              Core.<$> allowGlobalAccess,
            ("backendService" Core..=) Core.<$> backendService,
            ("baseForwardingRule" Core..=)
              Core.<$> baseForwardingRule,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("ipVersion" Core..=) Core.<$> ipVersion,
            ("isMirroringCollector" Core..=)
              Core.<$> isMirroringCollector,
            Core.Just ("kind" Core..= kind),
            ("labelFingerprint" Core..=)
              Core.<$> labelFingerprint,
            ("labels" Core..=) Core.<$> labels,
            ("loadBalancingScheme" Core..=)
              Core.<$> loadBalancingScheme,
            ("metadataFilters" Core..=) Core.<$> metadataFilters,
            ("name" Core..=) Core.<$> name,
            ("network" Core..=) Core.<$> network,
            ("networkTier" Core..=) Core.<$> networkTier,
            ("noAutomateDnsZone" Core..=)
              Core.<$> noAutomateDnsZone,
            ("portRange" Core..=) Core.<$> portRange,
            ("ports" Core..=) Core.<$> ports,
            ("pscConnectionId" Core..=) Core.. Core.AsText
              Core.<$> pscConnectionId,
            ("pscConnectionStatus" Core..=)
              Core.<$> pscConnectionStatus,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("serviceDirectoryRegistrations" Core..=)
              Core.<$> serviceDirectoryRegistrations,
            ("serviceLabel" Core..=) Core.<$> serviceLabel,
            ("serviceName" Core..=) Core.<$> serviceName,
            ("sourceIpRanges" Core..=) Core.<$> sourceIpRanges,
            ("subnetwork" Core..=) Core.<$> subnetwork,
            ("target" Core..=) Core.<$> target
          ]
      )

-- | Labels for this resource. These can only be added or modified by the setLabels method. Each label key\/value pair must comply with RFC1035. Label values may be empty.
--
-- /See:/ 'newForwardingRule_Labels' smart constructor.
newtype ForwardingRule_Labels = ForwardingRule_Labels
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ForwardingRule_Labels' with the minimum fields required to make a request.
newForwardingRule_Labels ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  ForwardingRule_Labels
newForwardingRule_Labels additional =
  ForwardingRule_Labels {additional = additional}

instance Core.FromJSON ForwardingRule_Labels where
  parseJSON =
    Core.withObject
      "ForwardingRule_Labels"
      ( \o ->
          ForwardingRule_Labels
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON ForwardingRule_Labels where
  toJSON ForwardingRule_Labels {..} =
    Core.toJSON additional

--
-- /See:/ 'newForwardingRuleAggregatedList' smart constructor.
data ForwardingRuleAggregatedList = ForwardingRuleAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of ForwardingRulesScopedList resources.
    items :: (Core.Maybe ForwardingRuleAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#forwardingRuleAggregatedList for lists of forwarding rules.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe ForwardingRuleAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ForwardingRuleAggregatedList' with the minimum fields required to make a request.
newForwardingRuleAggregatedList ::
  ForwardingRuleAggregatedList
newForwardingRuleAggregatedList =
  ForwardingRuleAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#forwardingRuleAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON ForwardingRuleAggregatedList where
  parseJSON =
    Core.withObject
      "ForwardingRuleAggregatedList"
      ( \o ->
          ForwardingRuleAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#forwardingRuleAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON ForwardingRuleAggregatedList where
  toJSON ForwardingRuleAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of ForwardingRulesScopedList resources.
--
-- /See:/ 'newForwardingRuleAggregatedList_Items' smart constructor.
newtype ForwardingRuleAggregatedList_Items = ForwardingRuleAggregatedList_Items
  { -- | Name of the scope containing this set of addresses.
    additional :: (Core.HashMap Core.Text ForwardingRulesScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ForwardingRuleAggregatedList_Items' with the minimum fields required to make a request.
newForwardingRuleAggregatedList_Items ::
  -- |  Name of the scope containing this set of addresses. See 'additional'.
  Core.HashMap Core.Text ForwardingRulesScopedList ->
  ForwardingRuleAggregatedList_Items
newForwardingRuleAggregatedList_Items additional =
  ForwardingRuleAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    ForwardingRuleAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "ForwardingRuleAggregatedList_Items"
      ( \o ->
          ForwardingRuleAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    ForwardingRuleAggregatedList_Items
  where
  toJSON ForwardingRuleAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newForwardingRuleAggregatedList_Warning' smart constructor.
data ForwardingRuleAggregatedList_Warning = ForwardingRuleAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe ForwardingRuleAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [ForwardingRuleAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ForwardingRuleAggregatedList_Warning' with the minimum fields required to make a request.
newForwardingRuleAggregatedList_Warning ::
  ForwardingRuleAggregatedList_Warning
newForwardingRuleAggregatedList_Warning =
  ForwardingRuleAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    ForwardingRuleAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "ForwardingRuleAggregatedList_Warning"
      ( \o ->
          ForwardingRuleAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    ForwardingRuleAggregatedList_Warning
  where
  toJSON ForwardingRuleAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newForwardingRuleAggregatedList_Warning_DataItem' smart constructor.
data ForwardingRuleAggregatedList_Warning_DataItem = ForwardingRuleAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ForwardingRuleAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newForwardingRuleAggregatedList_Warning_DataItem ::
  ForwardingRuleAggregatedList_Warning_DataItem
newForwardingRuleAggregatedList_Warning_DataItem =
  ForwardingRuleAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    ForwardingRuleAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "ForwardingRuleAggregatedList_Warning_DataItem"
      ( \o ->
          ForwardingRuleAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    ForwardingRuleAggregatedList_Warning_DataItem
  where
  toJSON
    ForwardingRuleAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | Contains a list of ForwardingRule resources.
--
-- /See:/ 'newForwardingRuleList' smart constructor.
data ForwardingRuleList = ForwardingRuleList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of ForwardingRule resources.
    items :: (Core.Maybe [ForwardingRule]),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe ForwardingRuleList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ForwardingRuleList' with the minimum fields required to make a request.
newForwardingRuleList ::
  ForwardingRuleList
newForwardingRuleList =
  ForwardingRuleList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#forwardingRuleList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON ForwardingRuleList where
  parseJSON =
    Core.withObject
      "ForwardingRuleList"
      ( \o ->
          ForwardingRuleList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#forwardingRuleList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON ForwardingRuleList where
  toJSON ForwardingRuleList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newForwardingRuleList_Warning' smart constructor.
data ForwardingRuleList_Warning = ForwardingRuleList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe ForwardingRuleList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [ForwardingRuleList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ForwardingRuleList_Warning' with the minimum fields required to make a request.
newForwardingRuleList_Warning ::
  ForwardingRuleList_Warning
newForwardingRuleList_Warning =
  ForwardingRuleList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON ForwardingRuleList_Warning where
  parseJSON =
    Core.withObject
      "ForwardingRuleList_Warning"
      ( \o ->
          ForwardingRuleList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON ForwardingRuleList_Warning where
  toJSON ForwardingRuleList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newForwardingRuleList_Warning_DataItem' smart constructor.
data ForwardingRuleList_Warning_DataItem = ForwardingRuleList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ForwardingRuleList_Warning_DataItem' with the minimum fields required to make a request.
newForwardingRuleList_Warning_DataItem ::
  ForwardingRuleList_Warning_DataItem
newForwardingRuleList_Warning_DataItem =
  ForwardingRuleList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    ForwardingRuleList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "ForwardingRuleList_Warning_DataItem"
      ( \o ->
          ForwardingRuleList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    ForwardingRuleList_Warning_DataItem
  where
  toJSON ForwardingRuleList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newForwardingRuleReference' smart constructor.
newtype ForwardingRuleReference = ForwardingRuleReference
  { -- |
    forwardingRule :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ForwardingRuleReference' with the minimum fields required to make a request.
newForwardingRuleReference ::
  ForwardingRuleReference
newForwardingRuleReference =
  ForwardingRuleReference {forwardingRule = Core.Nothing}

instance Core.FromJSON ForwardingRuleReference where
  parseJSON =
    Core.withObject
      "ForwardingRuleReference"
      ( \o ->
          ForwardingRuleReference
            Core.<$> (o Core..:? "forwardingRule")
      )

instance Core.ToJSON ForwardingRuleReference where
  toJSON ForwardingRuleReference {..} =
    Core.object
      ( Core.catMaybes
          [("forwardingRule" Core..=) Core.<$> forwardingRule]
      )

-- | Describes the auto-registration of the Forwarding Rule to Service Directory. The region and project of the Service Directory resource generated from this registration will be the same as this Forwarding Rule.
--
-- /See:/ 'newForwardingRuleServiceDirectoryRegistration' smart constructor.
data ForwardingRuleServiceDirectoryRegistration = ForwardingRuleServiceDirectoryRegistration
  { -- | Service Directory namespace to register the forwarding rule under.
    namespace :: (Core.Maybe Core.Text),
    -- | Service Directory service to register the forwarding rule under.
    service :: (Core.Maybe Core.Text),
    -- | [Optional] Service Directory region to register this global forwarding rule under. Default to \"us-central1\". Only used for PSC for Google APIs. All PSC for Google APIs Forwarding Rules on the same network should use the same Service Directory region.
    serviceDirectoryRegion :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ForwardingRuleServiceDirectoryRegistration' with the minimum fields required to make a request.
newForwardingRuleServiceDirectoryRegistration ::
  ForwardingRuleServiceDirectoryRegistration
newForwardingRuleServiceDirectoryRegistration =
  ForwardingRuleServiceDirectoryRegistration
    { namespace = Core.Nothing,
      service = Core.Nothing,
      serviceDirectoryRegion = Core.Nothing
    }

instance
  Core.FromJSON
    ForwardingRuleServiceDirectoryRegistration
  where
  parseJSON =
    Core.withObject
      "ForwardingRuleServiceDirectoryRegistration"
      ( \o ->
          ForwardingRuleServiceDirectoryRegistration
            Core.<$> (o Core..:? "namespace")
            Core.<*> (o Core..:? "service")
            Core.<*> (o Core..:? "serviceDirectoryRegion")
      )

instance
  Core.ToJSON
    ForwardingRuleServiceDirectoryRegistration
  where
  toJSON ForwardingRuleServiceDirectoryRegistration {..} =
    Core.object
      ( Core.catMaybes
          [ ("namespace" Core..=) Core.<$> namespace,
            ("service" Core..=) Core.<$> service,
            ("serviceDirectoryRegion" Core..=)
              Core.<$> serviceDirectoryRegion
          ]
      )

--
-- /See:/ 'newForwardingRulesScopedList' smart constructor.
data ForwardingRulesScopedList = ForwardingRulesScopedList
  { -- | A list of forwarding rules contained in this scope.
    forwardingRules :: (Core.Maybe [ForwardingRule]),
    -- | Informational warning which replaces the list of forwarding rules when the list is empty.
    warning :: (Core.Maybe ForwardingRulesScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ForwardingRulesScopedList' with the minimum fields required to make a request.
newForwardingRulesScopedList ::
  ForwardingRulesScopedList
newForwardingRulesScopedList =
  ForwardingRulesScopedList
    { forwardingRules = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON ForwardingRulesScopedList where
  parseJSON =
    Core.withObject
      "ForwardingRulesScopedList"
      ( \o ->
          ForwardingRulesScopedList
            Core.<$> (o Core..:? "forwardingRules")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON ForwardingRulesScopedList where
  toJSON ForwardingRulesScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("forwardingRules" Core..=)
              Core.<$> forwardingRules,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of forwarding rules when the list is empty.
--
-- /See:/ 'newForwardingRulesScopedList_Warning' smart constructor.
data ForwardingRulesScopedList_Warning = ForwardingRulesScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe ForwardingRulesScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [ForwardingRulesScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ForwardingRulesScopedList_Warning' with the minimum fields required to make a request.
newForwardingRulesScopedList_Warning ::
  ForwardingRulesScopedList_Warning
newForwardingRulesScopedList_Warning =
  ForwardingRulesScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    ForwardingRulesScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "ForwardingRulesScopedList_Warning"
      ( \o ->
          ForwardingRulesScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    ForwardingRulesScopedList_Warning
  where
  toJSON ForwardingRulesScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newForwardingRulesScopedList_Warning_DataItem' smart constructor.
data ForwardingRulesScopedList_Warning_DataItem = ForwardingRulesScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ForwardingRulesScopedList_Warning_DataItem' with the minimum fields required to make a request.
newForwardingRulesScopedList_Warning_DataItem ::
  ForwardingRulesScopedList_Warning_DataItem
newForwardingRulesScopedList_Warning_DataItem =
  ForwardingRulesScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    ForwardingRulesScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "ForwardingRulesScopedList_Warning_DataItem"
      ( \o ->
          ForwardingRulesScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    ForwardingRulesScopedList_Warning_DataItem
  where
  toJSON ForwardingRulesScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newGRPCHealthCheck' smart constructor.
data GRPCHealthCheck = GRPCHealthCheck
  { -- | The gRPC service name for the health check. This field is optional. The value of grpc/service/name has the following meanings by convention: - Empty service/name means the overall status of all services at the backend. - Non-empty service/name means the health of that gRPC service, as defined by the owner of the service. The grpc/service/name can only be ASCII.
    grpcServiceName :: (Core.Maybe Core.Text),
    -- | The TCP port number to which the health check prober sends packets. Valid values are 1 through 65535.
    port :: (Core.Maybe Core.Int32),
    -- | Not supported.
    portName :: (Core.Maybe Core.Text),
    -- | Specifies how a port is selected for health checking. Can be one of the following values: USE/FIXED/PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE/VM/IP network endpoint groups, GCE/VM/IP/PORT network endpoint groups, and instance group backends. USE/NAMED/PORT: Not supported. USE/SERVING/PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE/VM/IP/PORT network endpoint groups and instance group backends. For GCE/VM/IP_PORT network
    -- endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service\'s named port in the instance group\'s list of named ports.
    portSpecification :: (Core.Maybe GRPCHealthCheck_PortSpecification)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'GRPCHealthCheck' with the minimum fields required to make a request.
newGRPCHealthCheck ::
  GRPCHealthCheck
newGRPCHealthCheck =
  GRPCHealthCheck
    { grpcServiceName = Core.Nothing,
      port = Core.Nothing,
      portName = Core.Nothing,
      portSpecification = Core.Nothing
    }

instance Core.FromJSON GRPCHealthCheck where
  parseJSON =
    Core.withObject
      "GRPCHealthCheck"
      ( \o ->
          GRPCHealthCheck
            Core.<$> (o Core..:? "grpcServiceName")
            Core.<*> (o Core..:? "port")
            Core.<*> (o Core..:? "portName")
            Core.<*> (o Core..:? "portSpecification")
      )

instance Core.ToJSON GRPCHealthCheck where
  toJSON GRPCHealthCheck {..} =
    Core.object
      ( Core.catMaybes
          [ ("grpcServiceName" Core..=)
              Core.<$> grpcServiceName,
            ("port" Core..=) Core.<$> port,
            ("portName" Core..=) Core.<$> portName,
            ("portSpecification" Core..=)
              Core.<$> portSpecification
          ]
      )

--
-- /See:/ 'newGlobalNetworkEndpointGroupsAttachEndpointsRequest' smart constructor.
newtype GlobalNetworkEndpointGroupsAttachEndpointsRequest = GlobalNetworkEndpointGroupsAttachEndpointsRequest
  { -- | The list of network endpoints to be attached.
    networkEndpoints :: (Core.Maybe [NetworkEndpoint])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'GlobalNetworkEndpointGroupsAttachEndpointsRequest' with the minimum fields required to make a request.
newGlobalNetworkEndpointGroupsAttachEndpointsRequest ::
  GlobalNetworkEndpointGroupsAttachEndpointsRequest
newGlobalNetworkEndpointGroupsAttachEndpointsRequest =
  GlobalNetworkEndpointGroupsAttachEndpointsRequest
    { networkEndpoints = Core.Nothing
    }

instance
  Core.FromJSON
    GlobalNetworkEndpointGroupsAttachEndpointsRequest
  where
  parseJSON =
    Core.withObject
      "GlobalNetworkEndpointGroupsAttachEndpointsRequest"
      ( \o ->
          GlobalNetworkEndpointGroupsAttachEndpointsRequest
            Core.<$> (o Core..:? "networkEndpoints")
      )

instance
  Core.ToJSON
    GlobalNetworkEndpointGroupsAttachEndpointsRequest
  where
  toJSON
    GlobalNetworkEndpointGroupsAttachEndpointsRequest {..} =
      Core.object
        ( Core.catMaybes
            [ ("networkEndpoints" Core..=)
                Core.<$> networkEndpoints
            ]
        )

--
-- /See:/ 'newGlobalNetworkEndpointGroupsDetachEndpointsRequest' smart constructor.
newtype GlobalNetworkEndpointGroupsDetachEndpointsRequest = GlobalNetworkEndpointGroupsDetachEndpointsRequest
  { -- | The list of network endpoints to be detached.
    networkEndpoints :: (Core.Maybe [NetworkEndpoint])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'GlobalNetworkEndpointGroupsDetachEndpointsRequest' with the minimum fields required to make a request.
newGlobalNetworkEndpointGroupsDetachEndpointsRequest ::
  GlobalNetworkEndpointGroupsDetachEndpointsRequest
newGlobalNetworkEndpointGroupsDetachEndpointsRequest =
  GlobalNetworkEndpointGroupsDetachEndpointsRequest
    { networkEndpoints = Core.Nothing
    }

instance
  Core.FromJSON
    GlobalNetworkEndpointGroupsDetachEndpointsRequest
  where
  parseJSON =
    Core.withObject
      "GlobalNetworkEndpointGroupsDetachEndpointsRequest"
      ( \o ->
          GlobalNetworkEndpointGroupsDetachEndpointsRequest
            Core.<$> (o Core..:? "networkEndpoints")
      )

instance
  Core.ToJSON
    GlobalNetworkEndpointGroupsDetachEndpointsRequest
  where
  toJSON
    GlobalNetworkEndpointGroupsDetachEndpointsRequest {..} =
      Core.object
        ( Core.catMaybes
            [ ("networkEndpoints" Core..=)
                Core.<$> networkEndpoints
            ]
        )

--
-- /See:/ 'newGlobalOrganizationSetPolicyRequest' smart constructor.
data GlobalOrganizationSetPolicyRequest = GlobalOrganizationSetPolicyRequest
  { -- | Flatten Policy to create a backward compatible wire-format. Deprecated. Use \'policy\' to specify bindings.
    bindings :: (Core.Maybe [Binding]),
    -- | Flatten Policy to create a backward compatible wire-format. Deprecated. Use \'policy\' to specify the etag.
    etag :: (Core.Maybe Core.Base64),
    -- | REQUIRED: The complete policy to be applied to the \'resource\'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them.
    policy :: (Core.Maybe Policy)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'GlobalOrganizationSetPolicyRequest' with the minimum fields required to make a request.
newGlobalOrganizationSetPolicyRequest ::
  GlobalOrganizationSetPolicyRequest
newGlobalOrganizationSetPolicyRequest =
  GlobalOrganizationSetPolicyRequest
    { bindings = Core.Nothing,
      etag = Core.Nothing,
      policy = Core.Nothing
    }

instance
  Core.FromJSON
    GlobalOrganizationSetPolicyRequest
  where
  parseJSON =
    Core.withObject
      "GlobalOrganizationSetPolicyRequest"
      ( \o ->
          GlobalOrganizationSetPolicyRequest
            Core.<$> (o Core..:? "bindings")
            Core.<*> (o Core..:? "etag")
            Core.<*> (o Core..:? "policy")
      )

instance
  Core.ToJSON
    GlobalOrganizationSetPolicyRequest
  where
  toJSON GlobalOrganizationSetPolicyRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("bindings" Core..=) Core.<$> bindings,
            ("etag" Core..=) Core.<$> etag,
            ("policy" Core..=) Core.<$> policy
          ]
      )

--
-- /See:/ 'newGlobalSetLabelsRequest' smart constructor.
data GlobalSetLabelsRequest = GlobalSetLabelsRequest
  { -- | The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash when updating or changing labels, otherwise the request will fail with error 412 conditionNotMet. Make a get() request to the resource to get the latest fingerprint.
    labelFingerprint :: (Core.Maybe Core.Base64),
    -- | A list of labels to apply for this resource. Each label must comply with the requirements for labels. For example, \"webserver-frontend\": \"images\". A label value can also be empty (e.g. \"my-label\": \"\").
    labels :: (Core.Maybe GlobalSetLabelsRequest_Labels)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'GlobalSetLabelsRequest' with the minimum fields required to make a request.
newGlobalSetLabelsRequest ::
  GlobalSetLabelsRequest
newGlobalSetLabelsRequest =
  GlobalSetLabelsRequest
    { labelFingerprint = Core.Nothing,
      labels = Core.Nothing
    }

instance Core.FromJSON GlobalSetLabelsRequest where
  parseJSON =
    Core.withObject
      "GlobalSetLabelsRequest"
      ( \o ->
          GlobalSetLabelsRequest
            Core.<$> (o Core..:? "labelFingerprint")
            Core.<*> (o Core..:? "labels")
      )

instance Core.ToJSON GlobalSetLabelsRequest where
  toJSON GlobalSetLabelsRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("labelFingerprint" Core..=)
              Core.<$> labelFingerprint,
            ("labels" Core..=) Core.<$> labels
          ]
      )

-- | A list of labels to apply for this resource. Each label must comply with the requirements for labels. For example, \"webserver-frontend\": \"images\". A label value can also be empty (e.g. \"my-label\": \"\").
--
-- /See:/ 'newGlobalSetLabelsRequest_Labels' smart constructor.
newtype GlobalSetLabelsRequest_Labels = GlobalSetLabelsRequest_Labels
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'GlobalSetLabelsRequest_Labels' with the minimum fields required to make a request.
newGlobalSetLabelsRequest_Labels ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  GlobalSetLabelsRequest_Labels
newGlobalSetLabelsRequest_Labels additional =
  GlobalSetLabelsRequest_Labels {additional = additional}

instance Core.FromJSON GlobalSetLabelsRequest_Labels where
  parseJSON =
    Core.withObject
      "GlobalSetLabelsRequest_Labels"
      ( \o ->
          GlobalSetLabelsRequest_Labels
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON GlobalSetLabelsRequest_Labels where
  toJSON GlobalSetLabelsRequest_Labels {..} =
    Core.toJSON additional

--
-- /See:/ 'newGlobalSetPolicyRequest' smart constructor.
data GlobalSetPolicyRequest = GlobalSetPolicyRequest
  { -- | Flatten Policy to create a backward compatible wire-format. Deprecated. Use \'policy\' to specify bindings.
    bindings :: (Core.Maybe [Binding]),
    -- | Flatten Policy to create a backward compatible wire-format. Deprecated. Use \'policy\' to specify the etag.
    etag :: (Core.Maybe Core.Base64),
    -- | REQUIRED: The complete policy to be applied to the \'resource\'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them.
    policy :: (Core.Maybe Policy)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'GlobalSetPolicyRequest' with the minimum fields required to make a request.
newGlobalSetPolicyRequest ::
  GlobalSetPolicyRequest
newGlobalSetPolicyRequest =
  GlobalSetPolicyRequest
    { bindings = Core.Nothing,
      etag = Core.Nothing,
      policy = Core.Nothing
    }

instance Core.FromJSON GlobalSetPolicyRequest where
  parseJSON =
    Core.withObject
      "GlobalSetPolicyRequest"
      ( \o ->
          GlobalSetPolicyRequest
            Core.<$> (o Core..:? "bindings")
            Core.<*> (o Core..:? "etag")
            Core.<*> (o Core..:? "policy")
      )

instance Core.ToJSON GlobalSetPolicyRequest where
  toJSON GlobalSetPolicyRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("bindings" Core..=) Core.<$> bindings,
            ("etag" Core..=) Core.<$> etag,
            ("policy" Core..=) Core.<$> policy
          ]
      )

-- | A guest attributes entry.
--
-- /See:/ 'newGuestAttributes' smart constructor.
data GuestAttributes = GuestAttributes
  { -- | [Output Only] Type of the resource. Always compute#guestAttributes for guest attributes entry.
    kind :: Core.Text,
    -- | The path to be queried. This can be the default namespace (\'\') or a nested namespace (\'\\\/\') or a specified key (\'\\\/\\\').
    queryPath :: (Core.Maybe Core.Text),
    -- | [Output Only] The value of the requested queried path.
    queryValue :: (Core.Maybe GuestAttributesValue),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | The key to search for.
    variableKey :: (Core.Maybe Core.Text),
    -- | [Output Only] The value found for the requested key.
    variableValue :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'GuestAttributes' with the minimum fields required to make a request.
newGuestAttributes ::
  GuestAttributes
newGuestAttributes =
  GuestAttributes
    { kind = "compute#guestAttributes",
      queryPath = Core.Nothing,
      queryValue = Core.Nothing,
      selfLink = Core.Nothing,
      variableKey = Core.Nothing,
      variableValue = Core.Nothing
    }

instance Core.FromJSON GuestAttributes where
  parseJSON =
    Core.withObject
      "GuestAttributes"
      ( \o ->
          GuestAttributes
            Core.<$> ( o Core..:? "kind"
                         Core..!= "compute#guestAttributes"
                     )
            Core.<*> (o Core..:? "queryPath")
            Core.<*> (o Core..:? "queryValue")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "variableKey")
            Core.<*> (o Core..:? "variableValue")
      )

instance Core.ToJSON GuestAttributes where
  toJSON GuestAttributes {..} =
    Core.object
      ( Core.catMaybes
          [ Core.Just ("kind" Core..= kind),
            ("queryPath" Core..=) Core.<$> queryPath,
            ("queryValue" Core..=) Core.<$> queryValue,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("variableKey" Core..=) Core.<$> variableKey,
            ("variableValue" Core..=) Core.<$> variableValue
          ]
      )

-- | A guest attributes namespace\/key\/value entry.
--
-- /See:/ 'newGuestAttributesEntry' smart constructor.
data GuestAttributesEntry = GuestAttributesEntry
  { -- | Key for the guest attribute entry.
    key :: (Core.Maybe Core.Text),
    -- | Namespace for the guest attribute entry.
    namespace :: (Core.Maybe Core.Text),
    -- | Value for the guest attribute entry.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'GuestAttributesEntry' with the minimum fields required to make a request.
newGuestAttributesEntry ::
  GuestAttributesEntry
newGuestAttributesEntry =
  GuestAttributesEntry
    { key = Core.Nothing,
      namespace = Core.Nothing,
      value = Core.Nothing
    }

instance Core.FromJSON GuestAttributesEntry where
  parseJSON =
    Core.withObject
      "GuestAttributesEntry"
      ( \o ->
          GuestAttributesEntry
            Core.<$> (o Core..:? "key")
            Core.<*> (o Core..:? "namespace")
            Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON GuestAttributesEntry where
  toJSON GuestAttributesEntry {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("namespace" Core..=) Core.<$> namespace,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Array of guest attribute namespace\/key\/value tuples.
--
-- /See:/ 'newGuestAttributesValue' smart constructor.
newtype GuestAttributesValue = GuestAttributesValue
  { -- |
    items :: (Core.Maybe [GuestAttributesEntry])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'GuestAttributesValue' with the minimum fields required to make a request.
newGuestAttributesValue ::
  GuestAttributesValue
newGuestAttributesValue = GuestAttributesValue {items = Core.Nothing}

instance Core.FromJSON GuestAttributesValue where
  parseJSON =
    Core.withObject
      "GuestAttributesValue"
      ( \o ->
          GuestAttributesValue Core.<$> (o Core..:? "items")
      )

instance Core.ToJSON GuestAttributesValue where
  toJSON GuestAttributesValue {..} =
    Core.object
      (Core.catMaybes [("items" Core..=) Core.<$> items])

-- | Guest OS features.
--
-- /See:/ 'newGuestOsFeature' smart constructor.
newtype GuestOsFeature = GuestOsFeature
  { -- | The ID of a supported feature. To add multiple values, use commas to separate values. Set to one or more of the following values: - VIRTIO/SCSI/MULTIQUEUE - WINDOWS - MULTI/IP/SUBNET - UEFI/COMPATIBLE - GVNIC - SEV/CAPABLE - SUSPEND/RESUME/COMPATIBLE - SEV/LIVE/MIGRATABLE - SEV/SNP/CAPABLE - TDX_CAPABLE For more information, see Enabling guest operating system features.
    type' :: (Core.Maybe GuestOsFeature_Type)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'GuestOsFeature' with the minimum fields required to make a request.
newGuestOsFeature ::
  GuestOsFeature
newGuestOsFeature = GuestOsFeature {type' = Core.Nothing}

instance Core.FromJSON GuestOsFeature where
  parseJSON =
    Core.withObject
      "GuestOsFeature"
      (\o -> GuestOsFeature Core.<$> (o Core..:? "type"))

instance Core.ToJSON GuestOsFeature where
  toJSON GuestOsFeature {..} =
    Core.object
      (Core.catMaybes [("type" Core..=) Core.<$> type'])

--
-- /See:/ 'newHTTP2HealthCheck' smart constructor.
data HTTP2HealthCheck = HTTP2HealthCheck
  { -- | The value of the host header in the HTTP\/2 health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets are sent. The destination IP address depends on the type of load balancer. For details, see: https:\/\/cloud.google.com\/load-balancing\/docs\/health-check-concepts#hc-packet-dest
    host :: (Core.Maybe Core.Text),
    -- | The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535.
    port :: (Core.Maybe Core.Int32),
    -- | Not supported.
    portName :: (Core.Maybe Core.Text),
    -- | Specifies how a port is selected for health checking. Can be one of the following values: USE/FIXED/PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE/VM/IP network endpoint groups, GCE/VM/IP/PORT network endpoint groups, and instance group backends. USE/NAMED/PORT: Not supported. USE/SERVING/PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE/VM/IP/PORT network endpoint groups and instance group backends. For GCE/VM/IP_PORT network
    -- endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service\'s named port in the instance group\'s list of named ports.
    portSpecification :: (Core.Maybe HTTP2HealthCheck_PortSpecification),
    -- | Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    proxyHeader :: (Core.Maybe HTTP2HealthCheck_ProxyHeader),
    -- | The request path of the HTTP\/2 health check request. The default value is \/.
    requestPath :: (Core.Maybe Core.Text),
    -- | Creates a content-based HTTP\/2 health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see: https:\/\/cloud.google.com\/load-balancing\/docs\/health-check-concepts#criteria-protocol-http
    response :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HTTP2HealthCheck' with the minimum fields required to make a request.
newHTTP2HealthCheck ::
  HTTP2HealthCheck
newHTTP2HealthCheck =
  HTTP2HealthCheck
    { host = Core.Nothing,
      port = Core.Nothing,
      portName = Core.Nothing,
      portSpecification = Core.Nothing,
      proxyHeader = Core.Nothing,
      requestPath = Core.Nothing,
      response = Core.Nothing
    }

instance Core.FromJSON HTTP2HealthCheck where
  parseJSON =
    Core.withObject
      "HTTP2HealthCheck"
      ( \o ->
          HTTP2HealthCheck
            Core.<$> (o Core..:? "host")
            Core.<*> (o Core..:? "port")
            Core.<*> (o Core..:? "portName")
            Core.<*> (o Core..:? "portSpecification")
            Core.<*> (o Core..:? "proxyHeader")
            Core.<*> (o Core..:? "requestPath")
            Core.<*> (o Core..:? "response")
      )

instance Core.ToJSON HTTP2HealthCheck where
  toJSON HTTP2HealthCheck {..} =
    Core.object
      ( Core.catMaybes
          [ ("host" Core..=) Core.<$> host,
            ("port" Core..=) Core.<$> port,
            ("portName" Core..=) Core.<$> portName,
            ("portSpecification" Core..=)
              Core.<$> portSpecification,
            ("proxyHeader" Core..=) Core.<$> proxyHeader,
            ("requestPath" Core..=) Core.<$> requestPath,
            ("response" Core..=) Core.<$> response
          ]
      )

--
-- /See:/ 'newHTTPHealthCheck' smart constructor.
data HTTPHealthCheck = HTTPHealthCheck
  { -- | The value of the host header in the HTTP health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets are sent. The destination IP address depends on the type of load balancer. For details, see: https:\/\/cloud.google.com\/load-balancing\/docs\/health-check-concepts#hc-packet-dest
    host :: (Core.Maybe Core.Text),
    -- | The TCP port number to which the health check prober sends packets. The default value is 80. Valid values are 1 through 65535.
    port :: (Core.Maybe Core.Int32),
    -- | Not supported.
    portName :: (Core.Maybe Core.Text),
    -- | Specifies how a port is selected for health checking. Can be one of the following values: USE/FIXED/PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Also supported in legacy HTTP health checks for target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE/VM/IP network endpoint groups, GCE/VM/IP/PORT network endpoint groups, and instance group backends. USE/NAMED/PORT: Not supported. USE/SERVING/PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE/VM/IP/PORT network endpoint groups and instance group
    -- backends. For GCE/VM/IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service\'s named port in the instance group\'s list of named ports.
    portSpecification :: (Core.Maybe HTTPHealthCheck_PortSpecification),
    -- | Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    proxyHeader :: (Core.Maybe HTTPHealthCheck_ProxyHeader),
    -- | The request path of the HTTP health check request. The default value is \/.
    requestPath :: (Core.Maybe Core.Text),
    -- | Creates a content-based HTTP health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see: https:\/\/cloud.google.com\/load-balancing\/docs\/health-check-concepts#criteria-protocol-http
    response :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HTTPHealthCheck' with the minimum fields required to make a request.
newHTTPHealthCheck ::
  HTTPHealthCheck
newHTTPHealthCheck =
  HTTPHealthCheck
    { host = Core.Nothing,
      port = Core.Nothing,
      portName = Core.Nothing,
      portSpecification = Core.Nothing,
      proxyHeader = Core.Nothing,
      requestPath = Core.Nothing,
      response = Core.Nothing
    }

instance Core.FromJSON HTTPHealthCheck where
  parseJSON =
    Core.withObject
      "HTTPHealthCheck"
      ( \o ->
          HTTPHealthCheck
            Core.<$> (o Core..:? "host")
            Core.<*> (o Core..:? "port")
            Core.<*> (o Core..:? "portName")
            Core.<*> (o Core..:? "portSpecification")
            Core.<*> (o Core..:? "proxyHeader")
            Core.<*> (o Core..:? "requestPath")
            Core.<*> (o Core..:? "response")
      )

instance Core.ToJSON HTTPHealthCheck where
  toJSON HTTPHealthCheck {..} =
    Core.object
      ( Core.catMaybes
          [ ("host" Core..=) Core.<$> host,
            ("port" Core..=) Core.<$> port,
            ("portName" Core..=) Core.<$> portName,
            ("portSpecification" Core..=)
              Core.<$> portSpecification,
            ("proxyHeader" Core..=) Core.<$> proxyHeader,
            ("requestPath" Core..=) Core.<$> requestPath,
            ("response" Core..=) Core.<$> response
          ]
      )

--
-- /See:/ 'newHTTPSHealthCheck' smart constructor.
data HTTPSHealthCheck = HTTPSHealthCheck
  { -- | The value of the host header in the HTTPS health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets are sent. The destination IP address depends on the type of load balancer. For details, see: https:\/\/cloud.google.com\/load-balancing\/docs\/health-check-concepts#hc-packet-dest
    host :: (Core.Maybe Core.Text),
    -- | The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535.
    port :: (Core.Maybe Core.Int32),
    -- | Not supported.
    portName :: (Core.Maybe Core.Text),
    -- | Specifies how a port is selected for health checking. Can be one of the following values: USE/FIXED/PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE/VM/IP network endpoint groups, GCE/VM/IP/PORT network endpoint groups, and instance group backends. USE/NAMED/PORT: Not supported. USE/SERVING/PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE/VM/IP/PORT network endpoint groups and instance group backends. For GCE/VM/IP_PORT network
    -- endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service\'s named port in the instance group\'s list of named ports.
    portSpecification :: (Core.Maybe HTTPSHealthCheck_PortSpecification),
    -- | Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    proxyHeader :: (Core.Maybe HTTPSHealthCheck_ProxyHeader),
    -- | The request path of the HTTPS health check request. The default value is \/.
    requestPath :: (Core.Maybe Core.Text),
    -- | Creates a content-based HTTPS health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see: https:\/\/cloud.google.com\/load-balancing\/docs\/health-check-concepts#criteria-protocol-http
    response :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HTTPSHealthCheck' with the minimum fields required to make a request.
newHTTPSHealthCheck ::
  HTTPSHealthCheck
newHTTPSHealthCheck =
  HTTPSHealthCheck
    { host = Core.Nothing,
      port = Core.Nothing,
      portName = Core.Nothing,
      portSpecification = Core.Nothing,
      proxyHeader = Core.Nothing,
      requestPath = Core.Nothing,
      response = Core.Nothing
    }

instance Core.FromJSON HTTPSHealthCheck where
  parseJSON =
    Core.withObject
      "HTTPSHealthCheck"
      ( \o ->
          HTTPSHealthCheck
            Core.<$> (o Core..:? "host")
            Core.<*> (o Core..:? "port")
            Core.<*> (o Core..:? "portName")
            Core.<*> (o Core..:? "portSpecification")
            Core.<*> (o Core..:? "proxyHeader")
            Core.<*> (o Core..:? "requestPath")
            Core.<*> (o Core..:? "response")
      )

instance Core.ToJSON HTTPSHealthCheck where
  toJSON HTTPSHealthCheck {..} =
    Core.object
      ( Core.catMaybes
          [ ("host" Core..=) Core.<$> host,
            ("port" Core..=) Core.<$> port,
            ("portName" Core..=) Core.<$> portName,
            ("portSpecification" Core..=)
              Core.<$> portSpecification,
            ("proxyHeader" Core..=) Core.<$> proxyHeader,
            ("requestPath" Core..=) Core.<$> requestPath,
            ("response" Core..=) Core.<$> response
          ]
      )

-- | Represents a Health Check resource. Google Compute Engine has two Health Check resources: * </compute/docs/reference/rest/v1/healthChecks Global> * </compute/docs/reference/rest/v1/regionHealthChecks Regional> Internal HTTP(S) load balancers must use regional health checks (@compute.v1.regionHealthChecks@). Traffic Director must use global health checks (@compute.v1.HealthChecks@). Internal TCP\/UDP load balancers can use either regional or global health checks (@compute.v1.regionHealthChecks@ or @compute.v1.HealthChecks@). External HTTP(S), TCP proxy, and SSL proxy load balancers as well as managed instance group auto-healing must use global health checks (@compute.v1.HealthChecks@). Backend service-based network load balancers must use regional health checks (@compute.v1.regionHealthChecks@). Target pool-based network load balancers must use legacy HTTP health checks (@compute.v1.httpHealthChecks@). For more information, see Health checks overview.
--
-- /See:/ 'newHealthCheck' smart constructor.
data HealthCheck = HealthCheck
  { -- | How often (in seconds) to send a health check. The default value is 5 seconds.
    checkIntervalSec :: (Core.Maybe Core.Int32),
    -- | [Output Only] Creation timestamp in 3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- |
    grpcHealthCheck :: (Core.Maybe GRPCHealthCheck),
    -- | A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
    healthyThreshold :: (Core.Maybe Core.Int32),
    -- |
    http2HealthCheck :: (Core.Maybe HTTP2HealthCheck),
    -- |
    httpHealthCheck :: (Core.Maybe HTTPHealthCheck),
    -- |
    httpsHealthCheck :: (Core.Maybe HTTPSHealthCheck),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | Type of the resource.
    kind :: Core.Text,
    -- | Configure logging on this health check.
    logConfig :: (Core.Maybe HealthCheckLogConfig),
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. For example, a name that is 1-63 characters long, matches the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@, and otherwise complies with RFC1035. This regular expression describes a name where the first character is a lowercase letter, and all following characters are a dash, lowercase letter, or digit, except the last character, which isn\'t a dash.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] Region where the health check resides. Not applicable to global health checks.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- |
    sslHealthCheck :: (Core.Maybe SSLHealthCheck),
    -- |
    tcpHealthCheck :: (Core.Maybe TCPHealthCheck),
    -- | How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec.
    timeoutSec :: (Core.Maybe Core.Int32),
    -- | Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS, HTTP2 or GRPC. Exactly one of the protocol-specific health check fields must be specified, which must match type field.
    type' :: (Core.Maybe HealthCheck_Type),
    -- | A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
    unhealthyThreshold :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthCheck' with the minimum fields required to make a request.
newHealthCheck ::
  HealthCheck
newHealthCheck =
  HealthCheck
    { checkIntervalSec = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      grpcHealthCheck = Core.Nothing,
      healthyThreshold = Core.Nothing,
      http2HealthCheck = Core.Nothing,
      httpHealthCheck = Core.Nothing,
      httpsHealthCheck = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#healthCheck",
      logConfig = Core.Nothing,
      name = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      sslHealthCheck = Core.Nothing,
      tcpHealthCheck = Core.Nothing,
      timeoutSec = Core.Nothing,
      type' = Core.Nothing,
      unhealthyThreshold = Core.Nothing
    }

instance Core.FromJSON HealthCheck where
  parseJSON =
    Core.withObject
      "HealthCheck"
      ( \o ->
          HealthCheck
            Core.<$> (o Core..:? "checkIntervalSec")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "grpcHealthCheck")
            Core.<*> (o Core..:? "healthyThreshold")
            Core.<*> (o Core..:? "http2HealthCheck")
            Core.<*> (o Core..:? "httpHealthCheck")
            Core.<*> (o Core..:? "httpsHealthCheck")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#healthCheck")
            Core.<*> (o Core..:? "logConfig")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "sslHealthCheck")
            Core.<*> (o Core..:? "tcpHealthCheck")
            Core.<*> (o Core..:? "timeoutSec")
            Core.<*> (o Core..:? "type")
            Core.<*> (o Core..:? "unhealthyThreshold")
      )

instance Core.ToJSON HealthCheck where
  toJSON HealthCheck {..} =
    Core.object
      ( Core.catMaybes
          [ ("checkIntervalSec" Core..=)
              Core.<$> checkIntervalSec,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("grpcHealthCheck" Core..=) Core.<$> grpcHealthCheck,
            ("healthyThreshold" Core..=)
              Core.<$> healthyThreshold,
            ("http2HealthCheck" Core..=)
              Core.<$> http2HealthCheck,
            ("httpHealthCheck" Core..=) Core.<$> httpHealthCheck,
            ("httpsHealthCheck" Core..=)
              Core.<$> httpsHealthCheck,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("logConfig" Core..=) Core.<$> logConfig,
            ("name" Core..=) Core.<$> name,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("sslHealthCheck" Core..=) Core.<$> sslHealthCheck,
            ("tcpHealthCheck" Core..=) Core.<$> tcpHealthCheck,
            ("timeoutSec" Core..=) Core.<$> timeoutSec,
            ("type" Core..=) Core.<$> type',
            ("unhealthyThreshold" Core..=)
              Core.<$> unhealthyThreshold
          ]
      )

-- | Contains a list of HealthCheck resources.
--
-- /See:/ 'newHealthCheckList' smart constructor.
data HealthCheckList = HealthCheckList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of HealthCheck resources.
    items :: (Core.Maybe [HealthCheck]),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe HealthCheckList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthCheckList' with the minimum fields required to make a request.
newHealthCheckList ::
  HealthCheckList
newHealthCheckList =
  HealthCheckList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#healthCheckList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON HealthCheckList where
  parseJSON =
    Core.withObject
      "HealthCheckList"
      ( \o ->
          HealthCheckList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#healthCheckList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON HealthCheckList where
  toJSON HealthCheckList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newHealthCheckList_Warning' smart constructor.
data HealthCheckList_Warning = HealthCheckList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe HealthCheckList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [HealthCheckList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthCheckList_Warning' with the minimum fields required to make a request.
newHealthCheckList_Warning ::
  HealthCheckList_Warning
newHealthCheckList_Warning =
  HealthCheckList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON HealthCheckList_Warning where
  parseJSON =
    Core.withObject
      "HealthCheckList_Warning"
      ( \o ->
          HealthCheckList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON HealthCheckList_Warning where
  toJSON HealthCheckList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newHealthCheckList_Warning_DataItem' smart constructor.
data HealthCheckList_Warning_DataItem = HealthCheckList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthCheckList_Warning_DataItem' with the minimum fields required to make a request.
newHealthCheckList_Warning_DataItem ::
  HealthCheckList_Warning_DataItem
newHealthCheckList_Warning_DataItem =
  HealthCheckList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    HealthCheckList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "HealthCheckList_Warning_DataItem"
      ( \o ->
          HealthCheckList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON HealthCheckList_Warning_DataItem where
  toJSON HealthCheckList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Configuration of logging on a health check. If logging is enabled, logs will be exported to Stackdriver.
--
-- /See:/ 'newHealthCheckLogConfig' smart constructor.
newtype HealthCheckLogConfig = HealthCheckLogConfig
  { -- | Indicates whether or not to export logs. This is false by default, which means no health check logging will be done.
    enable :: (Core.Maybe Core.Bool)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthCheckLogConfig' with the minimum fields required to make a request.
newHealthCheckLogConfig ::
  HealthCheckLogConfig
newHealthCheckLogConfig = HealthCheckLogConfig {enable = Core.Nothing}

instance Core.FromJSON HealthCheckLogConfig where
  parseJSON =
    Core.withObject
      "HealthCheckLogConfig"
      ( \o ->
          HealthCheckLogConfig Core.<$> (o Core..:? "enable")
      )

instance Core.ToJSON HealthCheckLogConfig where
  toJSON HealthCheckLogConfig {..} =
    Core.object
      (Core.catMaybes [("enable" Core..=) Core.<$> enable])

-- | A full or valid partial URL to a health check. For example, the following are valid URLs: - https:\/\/www.googleapis.com\/compute\/beta\/projects\/project-id\/global\/httpHealthChecks\/health-check - projects\/project-id\/global\/httpHealthChecks\/health-check - global\/httpHealthChecks\/health-check
--
-- /See:/ 'newHealthCheckReference' smart constructor.
newtype HealthCheckReference = HealthCheckReference
  { -- |
    healthCheck :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthCheckReference' with the minimum fields required to make a request.
newHealthCheckReference ::
  HealthCheckReference
newHealthCheckReference = HealthCheckReference {healthCheck = Core.Nothing}

instance Core.FromJSON HealthCheckReference where
  parseJSON =
    Core.withObject
      "HealthCheckReference"
      ( \o ->
          HealthCheckReference
            Core.<$> (o Core..:? "healthCheck")
      )

instance Core.ToJSON HealthCheckReference where
  toJSON HealthCheckReference {..} =
    Core.object
      ( Core.catMaybes
          [("healthCheck" Core..=) Core.<$> healthCheck]
      )

-- | Represents a Health-Check as a Service resource.
--
-- /See:/ 'newHealthCheckService' smart constructor.
data HealthCheckService = HealthCheckService
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a HealthCheckService. An up-to-date fingerprint must be provided in order to patch\/update the HealthCheckService; Otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the HealthCheckService.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | A list of URLs to the HealthCheck resources. Must have at least one HealthCheck, and not more than 10 for regional HealthCheckService, and not more than 1 for global HealthCheckService. HealthCheck resources must have portSpecification=USE/SERVING/PORT or portSpecification=USE/FIXED/PORT. For regional HealthCheckService, the HealthCheck must be regional and in the same region. For global HealthCheckService, HealthCheck must be global. Mix of regional and global HealthChecks is not supported. Multiple regional HealthChecks must belong to the same region. Regional HealthChecks must belong to the same region as zones of NetworkEndpointGroups. For global HealthCheckService using global INTERNET/IP/PORT NetworkEndpointGroups, the global HealthChecks must specify sourceRegions, and HealthChecks that specify sourceRegions can only be used with global INTERNET/IP/PORT NetworkEndpointGroups.
    healthChecks :: (Core.Maybe [Core.Text]),
    -- | Optional. Policy for how the results from multiple health checks for the same endpoint are aggregated. Defaults to NO/AGGREGATION if unspecified. - NO/AGGREGATION. An EndpointHealth message is returned for each pair in the health check service. - AND. If any health check of an endpoint reports UNHEALTHY, then UNHEALTHY is the HealthState of the endpoint. If all health checks report HEALTHY, the HealthState of the endpoint is HEALTHY. . This is only allowed with regional HealthCheckService.
    healthStatusAggregationPolicy :: (Core.Maybe HealthCheckService_HealthStatusAggregationPolicy),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output only] Type of the resource. Always compute#healthCheckServicefor health check services.
    kind :: Core.Text,
    -- | Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | A list of URLs to the NetworkEndpointGroup resources. Must not have more than 100. For regional HealthCheckService, NEGs must be in zones in the region of the HealthCheckService. For global HealthCheckServices, the NetworkEndpointGroups must be global INTERNET/IP/PORT.
    networkEndpointGroups :: (Core.Maybe [Core.Text]),
    -- | A list of URLs to the NotificationEndpoint resources. Must not have more than 10. A list of endpoints for receiving notifications of change in health status. For regional HealthCheckService, NotificationEndpoint must be regional and in the same region. For global HealthCheckService, NotificationEndpoint must be global.
    notificationEndpoints :: (Core.Maybe [Core.Text]),
    -- | [Output Only] URL of the region where the health check service resides. This field is not applicable to global health check services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthCheckService' with the minimum fields required to make a request.
newHealthCheckService ::
  HealthCheckService
newHealthCheckService =
  HealthCheckService
    { creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      fingerprint = Core.Nothing,
      healthChecks = Core.Nothing,
      healthStatusAggregationPolicy = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#healthCheckService",
      name = Core.Nothing,
      networkEndpointGroups = Core.Nothing,
      notificationEndpoints = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing
    }

instance Core.FromJSON HealthCheckService where
  parseJSON =
    Core.withObject
      "HealthCheckService"
      ( \o ->
          HealthCheckService
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "healthChecks")
            Core.<*> (o Core..:? "healthStatusAggregationPolicy")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#healthCheckService"
                     )
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "networkEndpointGroups")
            Core.<*> (o Core..:? "notificationEndpoints")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
      )

instance Core.ToJSON HealthCheckService where
  toJSON HealthCheckService {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("healthChecks" Core..=) Core.<$> healthChecks,
            ("healthStatusAggregationPolicy" Core..=)
              Core.<$> healthStatusAggregationPolicy,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("networkEndpointGroups" Core..=)
              Core.<$> networkEndpointGroups,
            ("notificationEndpoints" Core..=)
              Core.<$> notificationEndpoints,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink
          ]
      )

-- | A full or valid partial URL to a health check service. For example, the following are valid URLs: - https:\/\/www.googleapis.com\/compute\/beta\/projects\/project-id\/regions\/us-west1\/healthCheckServices\/health-check-service - projects\/project-id\/regions\/us-west1\/healthCheckServices\/health-check-service - regions\/us-west1\/healthCheckServices\/health-check-service
--
-- /See:/ 'newHealthCheckServiceReference' smart constructor.
newtype HealthCheckServiceReference = HealthCheckServiceReference
  { -- |
    healthCheckService :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthCheckServiceReference' with the minimum fields required to make a request.
newHealthCheckServiceReference ::
  HealthCheckServiceReference
newHealthCheckServiceReference =
  HealthCheckServiceReference {healthCheckService = Core.Nothing}

instance Core.FromJSON HealthCheckServiceReference where
  parseJSON =
    Core.withObject
      "HealthCheckServiceReference"
      ( \o ->
          HealthCheckServiceReference
            Core.<$> (o Core..:? "healthCheckService")
      )

instance Core.ToJSON HealthCheckServiceReference where
  toJSON HealthCheckServiceReference {..} =
    Core.object
      ( Core.catMaybes
          [ ("healthCheckService" Core..=)
              Core.<$> healthCheckService
          ]
      )

--
-- /See:/ 'newHealthCheckServicesList' smart constructor.
data HealthCheckServicesList = HealthCheckServicesList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of HealthCheckService resources.
    items :: (Core.Maybe [HealthCheckService]),
    -- | [Output Only] Type of the resource. Always compute#healthCheckServicesList for lists of HealthCheckServices.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe HealthCheckServicesList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthCheckServicesList' with the minimum fields required to make a request.
newHealthCheckServicesList ::
  HealthCheckServicesList
newHealthCheckServicesList =
  HealthCheckServicesList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#healthCheckServicesList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON HealthCheckServicesList where
  parseJSON =
    Core.withObject
      "HealthCheckServicesList"
      ( \o ->
          HealthCheckServicesList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#healthCheckServicesList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON HealthCheckServicesList where
  toJSON HealthCheckServicesList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newHealthCheckServicesList_Warning' smart constructor.
data HealthCheckServicesList_Warning = HealthCheckServicesList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe HealthCheckServicesList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [HealthCheckServicesList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthCheckServicesList_Warning' with the minimum fields required to make a request.
newHealthCheckServicesList_Warning ::
  HealthCheckServicesList_Warning
newHealthCheckServicesList_Warning =
  HealthCheckServicesList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    HealthCheckServicesList_Warning
  where
  parseJSON =
    Core.withObject
      "HealthCheckServicesList_Warning"
      ( \o ->
          HealthCheckServicesList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON HealthCheckServicesList_Warning where
  toJSON HealthCheckServicesList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newHealthCheckServicesList_Warning_DataItem' smart constructor.
data HealthCheckServicesList_Warning_DataItem = HealthCheckServicesList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthCheckServicesList_Warning_DataItem' with the minimum fields required to make a request.
newHealthCheckServicesList_Warning_DataItem ::
  HealthCheckServicesList_Warning_DataItem
newHealthCheckServicesList_Warning_DataItem =
  HealthCheckServicesList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    HealthCheckServicesList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "HealthCheckServicesList_Warning_DataItem"
      ( \o ->
          HealthCheckServicesList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    HealthCheckServicesList_Warning_DataItem
  where
  toJSON HealthCheckServicesList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newHealthChecksAggregatedList' smart constructor.
data HealthChecksAggregatedList = HealthChecksAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of HealthChecksScopedList resources.
    items :: (Core.Maybe HealthChecksAggregatedList_Items),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe HealthChecksAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthChecksAggregatedList' with the minimum fields required to make a request.
newHealthChecksAggregatedList ::
  HealthChecksAggregatedList
newHealthChecksAggregatedList =
  HealthChecksAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#healthChecksAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON HealthChecksAggregatedList where
  parseJSON =
    Core.withObject
      "HealthChecksAggregatedList"
      ( \o ->
          HealthChecksAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#healthChecksAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON HealthChecksAggregatedList where
  toJSON HealthChecksAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of HealthChecksScopedList resources.
--
-- /See:/ 'newHealthChecksAggregatedList_Items' smart constructor.
newtype HealthChecksAggregatedList_Items = HealthChecksAggregatedList_Items
  { -- | Name of the scope containing this set of HealthChecks.
    additional :: (Core.HashMap Core.Text HealthChecksScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthChecksAggregatedList_Items' with the minimum fields required to make a request.
newHealthChecksAggregatedList_Items ::
  -- |  Name of the scope containing this set of HealthChecks. See 'additional'.
  Core.HashMap Core.Text HealthChecksScopedList ->
  HealthChecksAggregatedList_Items
newHealthChecksAggregatedList_Items additional =
  HealthChecksAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    HealthChecksAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "HealthChecksAggregatedList_Items"
      ( \o ->
          HealthChecksAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON HealthChecksAggregatedList_Items where
  toJSON HealthChecksAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newHealthChecksAggregatedList_Warning' smart constructor.
data HealthChecksAggregatedList_Warning = HealthChecksAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe HealthChecksAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [HealthChecksAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthChecksAggregatedList_Warning' with the minimum fields required to make a request.
newHealthChecksAggregatedList_Warning ::
  HealthChecksAggregatedList_Warning
newHealthChecksAggregatedList_Warning =
  HealthChecksAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    HealthChecksAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "HealthChecksAggregatedList_Warning"
      ( \o ->
          HealthChecksAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    HealthChecksAggregatedList_Warning
  where
  toJSON HealthChecksAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newHealthChecksAggregatedList_Warning_DataItem' smart constructor.
data HealthChecksAggregatedList_Warning_DataItem = HealthChecksAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthChecksAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newHealthChecksAggregatedList_Warning_DataItem ::
  HealthChecksAggregatedList_Warning_DataItem
newHealthChecksAggregatedList_Warning_DataItem =
  HealthChecksAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    HealthChecksAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "HealthChecksAggregatedList_Warning_DataItem"
      ( \o ->
          HealthChecksAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    HealthChecksAggregatedList_Warning_DataItem
  where
  toJSON
    HealthChecksAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

--
-- /See:/ 'newHealthChecksScopedList' smart constructor.
data HealthChecksScopedList = HealthChecksScopedList
  { -- | A list of HealthChecks contained in this scope.
    healthChecks :: (Core.Maybe [HealthCheck]),
    -- | Informational warning which replaces the list of backend services when the list is empty.
    warning :: (Core.Maybe HealthChecksScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthChecksScopedList' with the minimum fields required to make a request.
newHealthChecksScopedList ::
  HealthChecksScopedList
newHealthChecksScopedList =
  HealthChecksScopedList {healthChecks = Core.Nothing, warning = Core.Nothing}

instance Core.FromJSON HealthChecksScopedList where
  parseJSON =
    Core.withObject
      "HealthChecksScopedList"
      ( \o ->
          HealthChecksScopedList
            Core.<$> (o Core..:? "healthChecks")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON HealthChecksScopedList where
  toJSON HealthChecksScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("healthChecks" Core..=) Core.<$> healthChecks,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of backend services when the list is empty.
--
-- /See:/ 'newHealthChecksScopedList_Warning' smart constructor.
data HealthChecksScopedList_Warning = HealthChecksScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe HealthChecksScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [HealthChecksScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthChecksScopedList_Warning' with the minimum fields required to make a request.
newHealthChecksScopedList_Warning ::
  HealthChecksScopedList_Warning
newHealthChecksScopedList_Warning =
  HealthChecksScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON HealthChecksScopedList_Warning where
  parseJSON =
    Core.withObject
      "HealthChecksScopedList_Warning"
      ( \o ->
          HealthChecksScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON HealthChecksScopedList_Warning where
  toJSON HealthChecksScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newHealthChecksScopedList_Warning_DataItem' smart constructor.
data HealthChecksScopedList_Warning_DataItem = HealthChecksScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthChecksScopedList_Warning_DataItem' with the minimum fields required to make a request.
newHealthChecksScopedList_Warning_DataItem ::
  HealthChecksScopedList_Warning_DataItem
newHealthChecksScopedList_Warning_DataItem =
  HealthChecksScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    HealthChecksScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "HealthChecksScopedList_Warning_DataItem"
      ( \o ->
          HealthChecksScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    HealthChecksScopedList_Warning_DataItem
  where
  toJSON HealthChecksScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newHealthStatus' smart constructor.
data HealthStatus = HealthStatus
  { -- | Metadata defined as annotations for network endpoint.
    annotations :: (Core.Maybe HealthStatus_Annotations),
    -- | URL of the forwarding rule associated with the health status of the instance.
    forwardingRule :: (Core.Maybe Core.Text),
    -- | A forwarding rule IP address assigned to this instance.
    forwardingRuleIp :: (Core.Maybe Core.Text),
    -- | Health state of the IPv4 address of the instance.
    healthState :: (Core.Maybe HealthStatus_HealthState),
    -- | URL of the instance resource.
    instance' :: (Core.Maybe Core.Text),
    -- | For target pool based Network Load Balancing, it indicates the forwarding rule\'s IP address assigned to this instance. For other types of load balancing, the field indicates VM internal ip.
    ipAddress :: (Core.Maybe Core.Text),
    -- | The named port of the instance group, not necessarily the port that is health-checked.
    port :: (Core.Maybe Core.Int32),
    -- |
    weight :: (Core.Maybe Core.Text),
    -- |
    weightError :: (Core.Maybe HealthStatus_WeightError)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthStatus' with the minimum fields required to make a request.
newHealthStatus ::
  HealthStatus
newHealthStatus =
  HealthStatus
    { annotations = Core.Nothing,
      forwardingRule = Core.Nothing,
      forwardingRuleIp = Core.Nothing,
      healthState = Core.Nothing,
      instance' = Core.Nothing,
      ipAddress = Core.Nothing,
      port = Core.Nothing,
      weight = Core.Nothing,
      weightError = Core.Nothing
    }

instance Core.FromJSON HealthStatus where
  parseJSON =
    Core.withObject
      "HealthStatus"
      ( \o ->
          HealthStatus
            Core.<$> (o Core..:? "annotations")
            Core.<*> (o Core..:? "forwardingRule")
            Core.<*> (o Core..:? "forwardingRuleIp")
            Core.<*> (o Core..:? "healthState")
            Core.<*> (o Core..:? "instance")
            Core.<*> (o Core..:? "ipAddress")
            Core.<*> (o Core..:? "port")
            Core.<*> (o Core..:? "weight")
            Core.<*> (o Core..:? "weightError")
      )

instance Core.ToJSON HealthStatus where
  toJSON HealthStatus {..} =
    Core.object
      ( Core.catMaybes
          [ ("annotations" Core..=) Core.<$> annotations,
            ("forwardingRule" Core..=) Core.<$> forwardingRule,
            ("forwardingRuleIp" Core..=)
              Core.<$> forwardingRuleIp,
            ("healthState" Core..=) Core.<$> healthState,
            ("instance" Core..=) Core.<$> instance',
            ("ipAddress" Core..=) Core.<$> ipAddress,
            ("port" Core..=) Core.<$> port,
            ("weight" Core..=) Core.<$> weight,
            ("weightError" Core..=) Core.<$> weightError
          ]
      )

-- | Metadata defined as annotations for network endpoint.
--
-- /See:/ 'newHealthStatus_Annotations' smart constructor.
newtype HealthStatus_Annotations = HealthStatus_Annotations
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthStatus_Annotations' with the minimum fields required to make a request.
newHealthStatus_Annotations ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  HealthStatus_Annotations
newHealthStatus_Annotations additional =
  HealthStatus_Annotations {additional = additional}

instance Core.FromJSON HealthStatus_Annotations where
  parseJSON =
    Core.withObject
      "HealthStatus_Annotations"
      ( \o ->
          HealthStatus_Annotations
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON HealthStatus_Annotations where
  toJSON HealthStatus_Annotations {..} =
    Core.toJSON additional

--
-- /See:/ 'newHealthStatusForNetworkEndpoint' smart constructor.
data HealthStatusForNetworkEndpoint = HealthStatusForNetworkEndpoint
  { -- | URL of the backend service associated with the health state of the network endpoint.
    backendService :: (Core.Maybe BackendServiceReference),
    -- | URL of the forwarding rule associated with the health state of the network endpoint.
    forwardingRule :: (Core.Maybe ForwardingRuleReference),
    -- | URL of the health check associated with the health state of the network endpoint.
    healthCheck :: (Core.Maybe HealthCheckReference),
    -- | URL of the health check service associated with the health state of the network endpoint.
    healthCheckService :: (Core.Maybe HealthCheckServiceReference),
    -- | Health state of the network endpoint determined based on the health checks configured.
    healthState :: (Core.Maybe HealthStatusForNetworkEndpoint_HealthState)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HealthStatusForNetworkEndpoint' with the minimum fields required to make a request.
newHealthStatusForNetworkEndpoint ::
  HealthStatusForNetworkEndpoint
newHealthStatusForNetworkEndpoint =
  HealthStatusForNetworkEndpoint
    { backendService = Core.Nothing,
      forwardingRule = Core.Nothing,
      healthCheck = Core.Nothing,
      healthCheckService = Core.Nothing,
      healthState = Core.Nothing
    }

instance Core.FromJSON HealthStatusForNetworkEndpoint where
  parseJSON =
    Core.withObject
      "HealthStatusForNetworkEndpoint"
      ( \o ->
          HealthStatusForNetworkEndpoint
            Core.<$> (o Core..:? "backendService")
            Core.<*> (o Core..:? "forwardingRule")
            Core.<*> (o Core..:? "healthCheck")
            Core.<*> (o Core..:? "healthCheckService")
            Core.<*> (o Core..:? "healthState")
      )

instance Core.ToJSON HealthStatusForNetworkEndpoint where
  toJSON HealthStatusForNetworkEndpoint {..} =
    Core.object
      ( Core.catMaybes
          [ ("backendService" Core..=) Core.<$> backendService,
            ("forwardingRule" Core..=) Core.<$> forwardingRule,
            ("healthCheck" Core..=) Core.<$> healthCheck,
            ("healthCheckService" Core..=)
              Core.<$> healthCheckService,
            ("healthState" Core..=) Core.<$> healthState
          ]
      )

-- | Provides links to documentation or for performing an out of band action. For example, if a quota check failed with an error indicating the calling project hasn\'t enabled the accessed service, this can contain a URL pointing directly to the right place in the developer console to flip the bit.
--
-- /See:/ 'newHelp' smart constructor.
newtype Help = Help
  { -- | URL(s) pointing to additional information on handling the current error.
    links :: (Core.Maybe [HelpLink])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Help' with the minimum fields required to make a request.
newHelp ::
  Help
newHelp = Help {links = Core.Nothing}

instance Core.FromJSON Help where
  parseJSON =
    Core.withObject
      "Help"
      (\o -> Help Core.<$> (o Core..:? "links"))

instance Core.ToJSON Help where
  toJSON Help {..} =
    Core.object
      (Core.catMaybes [("links" Core..=) Core.<$> links])

-- | Describes a URL link.
--
-- /See:/ 'newHelpLink' smart constructor.
data HelpLink = HelpLink
  { -- | Describes what the link offers.
    description :: (Core.Maybe Core.Text),
    -- | The URL of the link.
    url :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HelpLink' with the minimum fields required to make a request.
newHelpLink ::
  HelpLink
newHelpLink = HelpLink {description = Core.Nothing, url = Core.Nothing}

instance Core.FromJSON HelpLink where
  parseJSON =
    Core.withObject
      "HelpLink"
      ( \o ->
          HelpLink
            Core.<$> (o Core..:? "description")
            Core.<*> (o Core..:? "url")
      )

instance Core.ToJSON HelpLink where
  toJSON HelpLink {..} =
    Core.object
      ( Core.catMaybes
          [ ("description" Core..=) Core.<$> description,
            ("url" Core..=) Core.<$> url
          ]
      )

-- | UrlMaps A host-matching rule for a URL. If matched, will use the named PathMatcher to select the BackendService.
--
-- /See:/ 'newHostRule' smart constructor.
data HostRule = HostRule
  { -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | The list of host patterns to match. They must be valid hostnames with optional port numbers in the format host:port. * matches any string of ([a-z0-9-.]/). In that case, / must be the first character, and if followed by anything, the immediate following character must be either - or .. * based matching is not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
    hosts :: (Core.Maybe [Core.Text]),
    -- | The name of the PathMatcher to use to match the path portion of the URL if the hostRule matches the URL\'s host portion.
    pathMatcher :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HostRule' with the minimum fields required to make a request.
newHostRule ::
  HostRule
newHostRule =
  HostRule
    { description = Core.Nothing,
      hosts = Core.Nothing,
      pathMatcher = Core.Nothing
    }

instance Core.FromJSON HostRule where
  parseJSON =
    Core.withObject
      "HostRule"
      ( \o ->
          HostRule
            Core.<$> (o Core..:? "description")
            Core.<*> (o Core..:? "hosts")
            Core.<*> (o Core..:? "pathMatcher")
      )

instance Core.ToJSON HostRule where
  toJSON HostRule {..} =
    Core.object
      ( Core.catMaybes
          [ ("description" Core..=) Core.<$> description,
            ("hosts" Core..=) Core.<$> hosts,
            ("pathMatcher" Core..=) Core.<$> pathMatcher
          ]
      )

-- | Specification for how requests are aborted as part of fault injection.
--
-- /See:/ 'newHttpFaultAbort' smart constructor.
data HttpFaultAbort = HttpFaultAbort
  { -- | The HTTP status code used to abort the request. The value must be from 200 to 599 inclusive. For gRPC protocol, the gRPC status code is mapped to HTTP status code according to this mapping table. HTTP status 200 is mapped to gRPC status UNKNOWN. Injecting an OK status is currently not supported by Traffic Director.
    httpStatus :: (Core.Maybe Core.Word32),
    -- | The percentage of traffic for connections, operations, or requests that is aborted as part of fault injection. The value must be from 0.0 to 100.0 inclusive.
    percentage :: (Core.Maybe Core.Double)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HttpFaultAbort' with the minimum fields required to make a request.
newHttpFaultAbort ::
  HttpFaultAbort
newHttpFaultAbort =
  HttpFaultAbort {httpStatus = Core.Nothing, percentage = Core.Nothing}

instance Core.FromJSON HttpFaultAbort where
  parseJSON =
    Core.withObject
      "HttpFaultAbort"
      ( \o ->
          HttpFaultAbort
            Core.<$> (o Core..:? "httpStatus")
            Core.<*> (o Core..:? "percentage")
      )

instance Core.ToJSON HttpFaultAbort where
  toJSON HttpFaultAbort {..} =
    Core.object
      ( Core.catMaybes
          [ ("httpStatus" Core..=) Core.<$> httpStatus,
            ("percentage" Core..=) Core.<$> percentage
          ]
      )

-- | Specifies the delay introduced by the load balancer before forwarding the request to the backend service as part of fault injection.
--
-- /See:/ 'newHttpFaultDelay' smart constructor.
data HttpFaultDelay = HttpFaultDelay
  { -- | Specifies the value of the fixed delay interval.
    fixedDelay :: (Core.Maybe Duration),
    -- | The percentage of traffic for connections, operations, or requests for which a delay is introduced as part of fault injection. The value must be from 0.0 to 100.0 inclusive.
    percentage :: (Core.Maybe Core.Double)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HttpFaultDelay' with the minimum fields required to make a request.
newHttpFaultDelay ::
  HttpFaultDelay
newHttpFaultDelay =
  HttpFaultDelay {fixedDelay = Core.Nothing, percentage = Core.Nothing}

instance Core.FromJSON HttpFaultDelay where
  parseJSON =
    Core.withObject
      "HttpFaultDelay"
      ( \o ->
          HttpFaultDelay
            Core.<$> (o Core..:? "fixedDelay")
            Core.<*> (o Core..:? "percentage")
      )

instance Core.ToJSON HttpFaultDelay where
  toJSON HttpFaultDelay {..} =
    Core.object
      ( Core.catMaybes
          [ ("fixedDelay" Core..=) Core.<$> fixedDelay,
            ("percentage" Core..=) Core.<$> percentage
          ]
      )

-- | The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by the load balancer on a percentage of requests before sending those request to the backend service. Similarly requests from clients can be aborted by the load balancer for a percentage of requests.
--
-- /See:/ 'newHttpFaultInjection' smart constructor.
data HttpFaultInjection = HttpFaultInjection
  { -- | The specification for how client requests are aborted as part of fault injection.
    abort :: (Core.Maybe HttpFaultAbort),
    -- | The specification for how client requests are delayed as part of fault injection, before being sent to a backend service.
    delay :: (Core.Maybe HttpFaultDelay)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HttpFaultInjection' with the minimum fields required to make a request.
newHttpFaultInjection ::
  HttpFaultInjection
newHttpFaultInjection =
  HttpFaultInjection {abort = Core.Nothing, delay = Core.Nothing}

instance Core.FromJSON HttpFaultInjection where
  parseJSON =
    Core.withObject
      "HttpFaultInjection"
      ( \o ->
          HttpFaultInjection
            Core.<$> (o Core..:? "abort") Core.<*> (o Core..:? "delay")
      )

instance Core.ToJSON HttpFaultInjection where
  toJSON HttpFaultInjection {..} =
    Core.object
      ( Core.catMaybes
          [ ("abort" Core..=) Core.<$> abort,
            ("delay" Core..=) Core.<$> delay
          ]
      )

-- | The request and response header transformations that take effect before the request is passed along to the selected backendService.
--
-- /See:/ 'newHttpHeaderAction' smart constructor.
data HttpHeaderAction = HttpHeaderAction
  { -- | Headers to add to a matching request before forwarding the request to the backendService.
    requestHeadersToAdd :: (Core.Maybe [HttpHeaderOption]),
    -- | A list of header names for headers that need to be removed from the request before forwarding the request to the backendService.
    requestHeadersToRemove :: (Core.Maybe [Core.Text]),
    -- | Headers to add the response before sending the response back to the client.
    responseHeadersToAdd :: (Core.Maybe [HttpHeaderOption]),
    -- | A list of header names for headers that need to be removed from the response before sending the response back to the client.
    responseHeadersToRemove :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HttpHeaderAction' with the minimum fields required to make a request.
newHttpHeaderAction ::
  HttpHeaderAction
newHttpHeaderAction =
  HttpHeaderAction
    { requestHeadersToAdd = Core.Nothing,
      requestHeadersToRemove = Core.Nothing,
      responseHeadersToAdd = Core.Nothing,
      responseHeadersToRemove = Core.Nothing
    }

instance Core.FromJSON HttpHeaderAction where
  parseJSON =
    Core.withObject
      "HttpHeaderAction"
      ( \o ->
          HttpHeaderAction
            Core.<$> (o Core..:? "requestHeadersToAdd")
            Core.<*> (o Core..:? "requestHeadersToRemove")
            Core.<*> (o Core..:? "responseHeadersToAdd")
            Core.<*> (o Core..:? "responseHeadersToRemove")
      )

instance Core.ToJSON HttpHeaderAction where
  toJSON HttpHeaderAction {..} =
    Core.object
      ( Core.catMaybes
          [ ("requestHeadersToAdd" Core..=)
              Core.<$> requestHeadersToAdd,
            ("requestHeadersToRemove" Core..=)
              Core.<$> requestHeadersToRemove,
            ("responseHeadersToAdd" Core..=)
              Core.<$> responseHeadersToAdd,
            ("responseHeadersToRemove" Core..=)
              Core.<$> responseHeadersToRemove
          ]
      )

-- | matchRule criteria for request header matches.
--
-- /See:/ 'newHttpHeaderMatch' smart constructor.
data HttpHeaderMatch = HttpHeaderMatch
  { -- | The value should exactly match contents of exactMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
    exactMatch :: (Core.Maybe Core.Text),
    -- | The name of the HTTP header to match. For matching against the HTTP request\'s authority, use a headerMatch with the header name \":authority\". For matching a request\'s method, use the headerName \":method\". When the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true, only non-binary user-specified custom metadata and the @content-type@ header are supported. The following transport-level headers cannot be used in header matching rules: @:authority@, @:method@, @:path@, @:scheme@, @user-agent@, @accept-encoding@, @content-encoding@, @grpc-accept-encoding@, @grpc-encoding@, @grpc-previous-rpc-attempts@, @grpc-tags-bin@, @grpc-timeout@ and @grpc-trace-bin@.
    headerName :: (Core.Maybe Core.Text),
    -- | If set to false, the headerMatch is considered a match if the preceding match criteria are met. If set to true, the headerMatch is considered a match if the preceding match criteria are NOT met. The default setting is false.
    invertMatch :: (Core.Maybe Core.Bool),
    -- | The value of the header must start with the contents of prefixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
    prefixMatch :: (Core.Maybe Core.Text),
    -- | A header with the contents of headerName must exist. The match takes place whether or not the request\'s header has a value. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
    presentMatch :: (Core.Maybe Core.Bool),
    -- | The header value must be an integer and its value must be in the range specified in rangeMatch. If the header does not contain an integer, number or is empty, the match fails. For example for a range [-5, 0] - -3 will match. - 0 will not match. - 0.25 will not match. - -3someString will not match. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. rangeMatch is not supported for load balancers that have loadBalancingScheme set to EXTERNAL.
    rangeMatch :: (Core.Maybe Int64RangeMatch),
    -- | The value of the header must match the regular expression specified in regexMatch. For more information about regular expression syntax, see Syntax. For matching against a port specified in the HTTP request, use a headerMatch with headerName set to PORT and a regular expression that satisfies the RFC2616 Host header\'s port specifier. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL/SELF/MANAGED.
    regexMatch :: (Core.Maybe Core.Text),
    -- | The value of the header must end with the contents of suffixMatch. Only one of exactMatch, prefixMatch, suffixMatch, regexMatch, presentMatch or rangeMatch must be set.
    suffixMatch :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HttpHeaderMatch' with the minimum fields required to make a request.
newHttpHeaderMatch ::
  HttpHeaderMatch
newHttpHeaderMatch =
  HttpHeaderMatch
    { exactMatch = Core.Nothing,
      headerName = Core.Nothing,
      invertMatch = Core.Nothing,
      prefixMatch = Core.Nothing,
      presentMatch = Core.Nothing,
      rangeMatch = Core.Nothing,
      regexMatch = Core.Nothing,
      suffixMatch = Core.Nothing
    }

instance Core.FromJSON HttpHeaderMatch where
  parseJSON =
    Core.withObject
      "HttpHeaderMatch"
      ( \o ->
          HttpHeaderMatch
            Core.<$> (o Core..:? "exactMatch")
            Core.<*> (o Core..:? "headerName")
            Core.<*> (o Core..:? "invertMatch")
            Core.<*> (o Core..:? "prefixMatch")
            Core.<*> (o Core..:? "presentMatch")
            Core.<*> (o Core..:? "rangeMatch")
            Core.<*> (o Core..:? "regexMatch")
            Core.<*> (o Core..:? "suffixMatch")
      )

instance Core.ToJSON HttpHeaderMatch where
  toJSON HttpHeaderMatch {..} =
    Core.object
      ( Core.catMaybes
          [ ("exactMatch" Core..=) Core.<$> exactMatch,
            ("headerName" Core..=) Core.<$> headerName,
            ("invertMatch" Core..=) Core.<$> invertMatch,
            ("prefixMatch" Core..=) Core.<$> prefixMatch,
            ("presentMatch" Core..=) Core.<$> presentMatch,
            ("rangeMatch" Core..=) Core.<$> rangeMatch,
            ("regexMatch" Core..=) Core.<$> regexMatch,
            ("suffixMatch" Core..=) Core.<$> suffixMatch
          ]
      )

-- | Specification determining how headers are added to requests or responses.
--
-- /See:/ 'newHttpHeaderOption' smart constructor.
data HttpHeaderOption = HttpHeaderOption
  { -- | The name of the header.
    headerName :: (Core.Maybe Core.Text),
    -- | The value of the header to add.
    headerValue :: (Core.Maybe Core.Text),
    -- | If false, headerValue is appended to any values that already exist for the header. If true, headerValue is set for the header, discarding any values that were set for that header. The default value is false.
    replace :: (Core.Maybe Core.Bool)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HttpHeaderOption' with the minimum fields required to make a request.
newHttpHeaderOption ::
  HttpHeaderOption
newHttpHeaderOption =
  HttpHeaderOption
    { headerName = Core.Nothing,
      headerValue = Core.Nothing,
      replace = Core.Nothing
    }

instance Core.FromJSON HttpHeaderOption where
  parseJSON =
    Core.withObject
      "HttpHeaderOption"
      ( \o ->
          HttpHeaderOption
            Core.<$> (o Core..:? "headerName")
            Core.<*> (o Core..:? "headerValue")
            Core.<*> (o Core..:? "replace")
      )

instance Core.ToJSON HttpHeaderOption where
  toJSON HttpHeaderOption {..} =
    Core.object
      ( Core.catMaybes
          [ ("headerName" Core..=) Core.<$> headerName,
            ("headerValue" Core..=) Core.<$> headerValue,
            ("replace" Core..=) Core.<$> replace
          ]
      )

-- | Represents a legacy HTTP Health Check resource. Legacy HTTP health checks are now only required by target pool-based network load balancers. For all other load balancers, including backend service-based network load balancers, and for managed instance group auto-healing, you must use modern (non-legacy) health checks. For more information, see Health checks overview .
--
-- /See:/ 'newHttpHealthCheck' smart constructor.
data HttpHealthCheck = HttpHealthCheck
  { -- | How often (in seconds) to send a health check. The default value is 5 seconds.
    checkIntervalSec :: (Core.Maybe Core.Int32),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
    healthyThreshold :: (Core.Maybe Core.Int32),
    -- | The value of the host header in the HTTP health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used.
    host :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#httpHealthCheck for HTTP health checks.
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | The TCP port number for the HTTP health check request. The default value is 80.
    port :: (Core.Maybe Core.Int32),
    -- | The request path of the HTTP health check request. The default value is \/. This field does not support query parameters. Must comply with RFC3986.
    requestPath :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec.
    timeoutSec :: (Core.Maybe Core.Int32),
    -- | A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
    unhealthyThreshold :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HttpHealthCheck' with the minimum fields required to make a request.
newHttpHealthCheck ::
  HttpHealthCheck
newHttpHealthCheck =
  HttpHealthCheck
    { checkIntervalSec = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      healthyThreshold = Core.Nothing,
      host = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#httpHealthCheck",
      name = Core.Nothing,
      port = Core.Nothing,
      requestPath = Core.Nothing,
      selfLink = Core.Nothing,
      timeoutSec = Core.Nothing,
      unhealthyThreshold = Core.Nothing
    }

instance Core.FromJSON HttpHealthCheck where
  parseJSON =
    Core.withObject
      "HttpHealthCheck"
      ( \o ->
          HttpHealthCheck
            Core.<$> (o Core..:? "checkIntervalSec")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "healthyThreshold")
            Core.<*> (o Core..:? "host")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#httpHealthCheck"
                     )
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "port")
            Core.<*> (o Core..:? "requestPath")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "timeoutSec")
            Core.<*> (o Core..:? "unhealthyThreshold")
      )

instance Core.ToJSON HttpHealthCheck where
  toJSON HttpHealthCheck {..} =
    Core.object
      ( Core.catMaybes
          [ ("checkIntervalSec" Core..=)
              Core.<$> checkIntervalSec,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("healthyThreshold" Core..=)
              Core.<$> healthyThreshold,
            ("host" Core..=) Core.<$> host,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("port" Core..=) Core.<$> port,
            ("requestPath" Core..=) Core.<$> requestPath,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("timeoutSec" Core..=) Core.<$> timeoutSec,
            ("unhealthyThreshold" Core..=)
              Core.<$> unhealthyThreshold
          ]
      )

-- | Contains a list of HttpHealthCheck resources.
--
-- /See:/ 'newHttpHealthCheckList' smart constructor.
data HttpHealthCheckList = HttpHealthCheckList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of HttpHealthCheck resources.
    items :: (Core.Maybe [HttpHealthCheck]),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe HttpHealthCheckList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HttpHealthCheckList' with the minimum fields required to make a request.
newHttpHealthCheckList ::
  HttpHealthCheckList
newHttpHealthCheckList =
  HttpHealthCheckList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#httpHealthCheckList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON HttpHealthCheckList where
  parseJSON =
    Core.withObject
      "HttpHealthCheckList"
      ( \o ->
          HttpHealthCheckList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#httpHealthCheckList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON HttpHealthCheckList where
  toJSON HttpHealthCheckList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newHttpHealthCheckList_Warning' smart constructor.
data HttpHealthCheckList_Warning = HttpHealthCheckList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe HttpHealthCheckList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [HttpHealthCheckList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HttpHealthCheckList_Warning' with the minimum fields required to make a request.
newHttpHealthCheckList_Warning ::
  HttpHealthCheckList_Warning
newHttpHealthCheckList_Warning =
  HttpHealthCheckList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON HttpHealthCheckList_Warning where
  parseJSON =
    Core.withObject
      "HttpHealthCheckList_Warning"
      ( \o ->
          HttpHealthCheckList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON HttpHealthCheckList_Warning where
  toJSON HttpHealthCheckList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newHttpHealthCheckList_Warning_DataItem' smart constructor.
data HttpHealthCheckList_Warning_DataItem = HttpHealthCheckList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HttpHealthCheckList_Warning_DataItem' with the minimum fields required to make a request.
newHttpHealthCheckList_Warning_DataItem ::
  HttpHealthCheckList_Warning_DataItem
newHttpHealthCheckList_Warning_DataItem =
  HttpHealthCheckList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    HttpHealthCheckList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "HttpHealthCheckList_Warning_DataItem"
      ( \o ->
          HttpHealthCheckList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    HttpHealthCheckList_Warning_DataItem
  where
  toJSON HttpHealthCheckList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | HttpRouteRuleMatch criteria for a request\'s query parameter.
--
-- /See:/ 'newHttpQueryParameterMatch' smart constructor.
data HttpQueryParameterMatch = HttpQueryParameterMatch
  { -- | The queryParameterMatch matches if the value of the parameter exactly matches the contents of exactMatch. Only one of presentMatch, exactMatch, or regexMatch must be set.
    exactMatch :: (Core.Maybe Core.Text),
    -- | The name of the query parameter to match. The query parameter must exist in the request, in the absence of which the request match fails.
    name :: (Core.Maybe Core.Text),
    -- | Specifies that the queryParameterMatch matches if the request contains the query parameter, irrespective of whether the parameter has a value or not. Only one of presentMatch, exactMatch, or regexMatch must be set.
    presentMatch :: (Core.Maybe Core.Bool),
    -- | The queryParameterMatch matches if the value of the parameter matches the regular expression specified by regexMatch. For more information about regular expression syntax, see Syntax. Only one of presentMatch, exactMatch, or regexMatch must be set. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL/SELF/MANAGED.
    regexMatch :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HttpQueryParameterMatch' with the minimum fields required to make a request.
newHttpQueryParameterMatch ::
  HttpQueryParameterMatch
newHttpQueryParameterMatch =
  HttpQueryParameterMatch
    { exactMatch = Core.Nothing,
      name = Core.Nothing,
      presentMatch = Core.Nothing,
      regexMatch = Core.Nothing
    }

instance Core.FromJSON HttpQueryParameterMatch where
  parseJSON =
    Core.withObject
      "HttpQueryParameterMatch"
      ( \o ->
          HttpQueryParameterMatch
            Core.<$> (o Core..:? "exactMatch")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "presentMatch")
            Core.<*> (o Core..:? "regexMatch")
      )

instance Core.ToJSON HttpQueryParameterMatch where
  toJSON HttpQueryParameterMatch {..} =
    Core.object
      ( Core.catMaybes
          [ ("exactMatch" Core..=) Core.<$> exactMatch,
            ("name" Core..=) Core.<$> name,
            ("presentMatch" Core..=) Core.<$> presentMatch,
            ("regexMatch" Core..=) Core.<$> regexMatch
          ]
      )

-- | Specifies settings for an HTTP redirect.
--
-- /See:/ 'newHttpRedirectAction' smart constructor.
data HttpRedirectAction = HttpRedirectAction
  { -- | The host that is used in the redirect response instead of the one that was supplied in the request. The value must be from 1 to 255 characters.
    hostRedirect :: (Core.Maybe Core.Text),
    -- | If set to true, the URL scheme in the redirected request is set to HTTPS. If set to false, the URL scheme of the redirected request remains the same as that of the request. This must only be set for URL maps used in TargetHttpProxys. Setting this true for TargetHttpsProxy is not permitted. The default is set to false.
    httpsRedirect :: (Core.Maybe Core.Bool),
    -- | The path that is used in the redirect response instead of the one that was supplied in the request. pathRedirect cannot be supplied together with prefixRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters.
    pathRedirect :: (Core.Maybe Core.Text),
    -- | The prefix that replaces the prefixMatch specified in the HttpRouteRuleMatch, retaining the remaining portion of the URL before redirecting the request. prefixRedirect cannot be supplied together with pathRedirect. Supply one alone or neither. If neither is supplied, the path of the original request is used for the redirect. The value must be from 1 to 1024 characters.
    prefixRedirect :: (Core.Maybe Core.Text),
    -- | The HTTP Status code to use for this RedirectAction. Supported values are: - MOVED/PERMANENTLY/DEFAULT, which is the default value and corresponds to 301. - FOUND, which corresponds to 302. - SEE/OTHER which corresponds to 303. - TEMPORARY/REDIRECT, which corresponds to 307. In this case, the request method is retained. - PERMANENT_REDIRECT, which corresponds to 308. In this case, the request method is retained.
    redirectResponseCode :: (Core.Maybe HttpRedirectAction_RedirectResponseCode),
    -- | If set to true, any accompanying query portion of the original URL is removed before redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.
    stripQuery :: (Core.Maybe Core.Bool)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HttpRedirectAction' with the minimum fields required to make a request.
newHttpRedirectAction ::
  HttpRedirectAction
newHttpRedirectAction =
  HttpRedirectAction
    { hostRedirect = Core.Nothing,
      httpsRedirect = Core.Nothing,
      pathRedirect = Core.Nothing,
      prefixRedirect = Core.Nothing,
      redirectResponseCode = Core.Nothing,
      stripQuery = Core.Nothing
    }

instance Core.FromJSON HttpRedirectAction where
  parseJSON =
    Core.withObject
      "HttpRedirectAction"
      ( \o ->
          HttpRedirectAction
            Core.<$> (o Core..:? "hostRedirect")
            Core.<*> (o Core..:? "httpsRedirect")
            Core.<*> (o Core..:? "pathRedirect")
            Core.<*> (o Core..:? "prefixRedirect")
            Core.<*> (o Core..:? "redirectResponseCode")
            Core.<*> (o Core..:? "stripQuery")
      )

instance Core.ToJSON HttpRedirectAction where
  toJSON HttpRedirectAction {..} =
    Core.object
      ( Core.catMaybes
          [ ("hostRedirect" Core..=) Core.<$> hostRedirect,
            ("httpsRedirect" Core..=) Core.<$> httpsRedirect,
            ("pathRedirect" Core..=) Core.<$> pathRedirect,
            ("prefixRedirect" Core..=) Core.<$> prefixRedirect,
            ("redirectResponseCode" Core..=)
              Core.<$> redirectResponseCode,
            ("stripQuery" Core..=) Core.<$> stripQuery
          ]
      )

-- | The retry policy associates with HttpRouteRule
--
-- /See:/ 'newHttpRetryPolicy' smart constructor.
data HttpRetryPolicy = HttpRetryPolicy
  { -- | Specifies the allowed number retries. This number must be > 0. If not specified, defaults to 1.
    numRetries :: (Core.Maybe Core.Word32),
    -- | Specifies a non-zero timeout per retry attempt. If not specified, will use the timeout set in the HttpRouteAction field. If timeout in the HttpRouteAction field is not set, this field uses the largest timeout among all backend services associated with the route. Not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
    perTryTimeout :: (Core.Maybe Duration),
    -- | Specifies one or more conditions when this retry policy applies. Valid values are: - 5xx: retry is attempted if the instance or endpoint responds with any 5xx response code, or if the instance or endpoint does not respond at all. For example, disconnects, reset, read timeout, connection failure, and refused streams. - gateway-error: Similar to 5xx, but only applies to response codes 502, 503 or 504. - connect-failure: a retry is attempted on failures connecting to the instance or endpoint. For example, connection timeouts. - retriable-4xx: a retry is attempted if the instance or endpoint responds with a 4xx response code. The only error that you can retry is error code 409. - refused-stream: a retry is attempted if the instance or endpoint resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry. - cancelled: a retry is attempted if the gRPC status code in the response header is set to cancelled. - deadline-exceeded: a retry is attempted if the gRPC status code in
    -- the response header is set to deadline-exceeded. - internal: a retry is attempted if the gRPC status code in the response header is set to internal. - resource-exhausted: a retry is attempted if the gRPC status code in the response header is set to resource-exhausted. - unavailable: a retry is attempted if the gRPC status code in the response header is set to unavailable. Only the following codes are supported when the URL map is bound to target gRPC proxy that has validateForProxyless field set to true. - cancelled - deadline-exceeded - internal - resource-exhausted - unavailable
    retryConditions :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HttpRetryPolicy' with the minimum fields required to make a request.
newHttpRetryPolicy ::
  HttpRetryPolicy
newHttpRetryPolicy =
  HttpRetryPolicy
    { numRetries = Core.Nothing,
      perTryTimeout = Core.Nothing,
      retryConditions = Core.Nothing
    }

instance Core.FromJSON HttpRetryPolicy where
  parseJSON =
    Core.withObject
      "HttpRetryPolicy"
      ( \o ->
          HttpRetryPolicy
            Core.<$> (o Core..:? "numRetries")
            Core.<*> (o Core..:? "perTryTimeout")
            Core.<*> (o Core..:? "retryConditions")
      )

instance Core.ToJSON HttpRetryPolicy where
  toJSON HttpRetryPolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("numRetries" Core..=) Core.<$> numRetries,
            ("perTryTimeout" Core..=) Core.<$> perTryTimeout,
            ("retryConditions" Core..=)
              Core.<$> retryConditions
          ]
      )

--
-- /See:/ 'newHttpRouteAction' smart constructor.
data HttpRouteAction = HttpRouteAction
  { -- | The specification for allowing client-side cross-origin requests. For more information about the W3C recommendation for cross-origin resource sharing (CORS), see Fetch API Living Standard. Not supported when the URL map is bound to a target gRPC proxy.
    corsPolicy :: (Core.Maybe CorsPolicy),
    -- | The specification for fault injection introduced into traffic to test the resiliency of clients to backend service failure. As part of fault injection, when clients send requests to a backend service, delays can be introduced by a load balancer on a percentage of requests before sending those requests to the backend service. Similarly requests from clients can be aborted by the load balancer for a percentage of requests. timeout and retry/policy is ignored by clients that are configured with a fault/injection_policy if: 1. The traffic is generated by fault injection AND 2. The fault injection is not a delay fault injection. Fault injection is not supported with the global external HTTP(S) load balancer (classic). To see which load balancers support fault injection, see Load balancing: Routing and traffic management features.
    faultInjectionPolicy :: (Core.Maybe HttpFaultInjection),
    -- | Specifies the maximum duration (timeout) for streams on the selected route. Unlike the timeout field where the timeout duration starts from the time the request has been fully processed (known as /end-of-stream/), the duration in this field is computed from the beginning of the stream until the response has been processed, including all retries. A stream that does not complete in this duration is closed. If not specified, this field uses the maximum maxStreamDuration value among all backend services associated with the route. This field is only allowed if the Url map is used with backend services with loadBalancingScheme set to INTERNAL/SELF/MANAGED.
    maxStreamDuration :: (Core.Maybe Duration),
    -- | Specifies the policy on how requests intended for the route\'s backends are shadowed to a separate mirrored backend service. The load balancer does not wait for responses from the shadow service. Before sending traffic to the shadow service, the host \/ authority header is suffixed with -shadow. Not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
    requestMirrorPolicy :: (Core.Maybe RequestMirrorPolicy),
    -- | Specifies the retry policy associated with this route.
    retryPolicy :: (Core.Maybe HttpRetryPolicy),
    -- | Specifies the timeout for the selected route. Timeout is computed from the time the request has been fully processed (known as /end-of-stream/) up until the response has been processed. Timeout includes all retries. If not specified, this field uses the largest timeout among all backend services associated with the route. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
    timeout :: (Core.Maybe Duration),
    -- | The spec to modify the URL of the request, before forwarding the request to the matched service. urlRewrite is the only action supported in UrlMaps for external HTTP(S) load balancers. Not supported when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
    urlRewrite :: (Core.Maybe UrlRewrite),
    -- | A list of weighted backend services to send traffic to when a route match occurs. The weights determine the fraction of traffic that flows to their corresponding backend service. If all traffic needs to go to a single backend service, there must be one weightedBackendService with weight set to a non-zero number. After a backend service is identified and before forwarding the request to the backend service, advanced routing actions such as URL rewrites and header transformations are applied depending on additional settings specified in this HttpRouteAction.
    weightedBackendServices :: (Core.Maybe [WeightedBackendService])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HttpRouteAction' with the minimum fields required to make a request.
newHttpRouteAction ::
  HttpRouteAction
newHttpRouteAction =
  HttpRouteAction
    { corsPolicy = Core.Nothing,
      faultInjectionPolicy = Core.Nothing,
      maxStreamDuration = Core.Nothing,
      requestMirrorPolicy = Core.Nothing,
      retryPolicy = Core.Nothing,
      timeout = Core.Nothing,
      urlRewrite = Core.Nothing,
      weightedBackendServices = Core.Nothing
    }

instance Core.FromJSON HttpRouteAction where
  parseJSON =
    Core.withObject
      "HttpRouteAction"
      ( \o ->
          HttpRouteAction
            Core.<$> (o Core..:? "corsPolicy")
            Core.<*> (o Core..:? "faultInjectionPolicy")
            Core.<*> (o Core..:? "maxStreamDuration")
            Core.<*> (o Core..:? "requestMirrorPolicy")
            Core.<*> (o Core..:? "retryPolicy")
            Core.<*> (o Core..:? "timeout")
            Core.<*> (o Core..:? "urlRewrite")
            Core.<*> (o Core..:? "weightedBackendServices")
      )

instance Core.ToJSON HttpRouteAction where
  toJSON HttpRouteAction {..} =
    Core.object
      ( Core.catMaybes
          [ ("corsPolicy" Core..=) Core.<$> corsPolicy,
            ("faultInjectionPolicy" Core..=)
              Core.<$> faultInjectionPolicy,
            ("maxStreamDuration" Core..=)
              Core.<$> maxStreamDuration,
            ("requestMirrorPolicy" Core..=)
              Core.<$> requestMirrorPolicy,
            ("retryPolicy" Core..=) Core.<$> retryPolicy,
            ("timeout" Core..=) Core.<$> timeout,
            ("urlRewrite" Core..=) Core.<$> urlRewrite,
            ("weightedBackendServices" Core..=)
              Core.<$> weightedBackendServices
          ]
      )

-- | The HttpRouteRule setting specifies how to match an HTTP request and the corresponding routing action that load balancing proxies perform.
--
-- /See:/ 'newHttpRouteRule' smart constructor.
data HttpRouteRule = HttpRouteRule
  { -- | The short description conveying the intent of this routeRule. The description can have a maximum length of 1024 characters.
    description :: (Core.Maybe Core.Text),
    -- | Specifies changes to request and response headers that need to take effect for the selected backendService. The headerAction value specified here is applied before the matching pathMatchers[].headerAction and after pathMatchers[].routeRules[].routeAction.weightedBackendService.backendServiceWeightAction[].headerAction HeaderAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
    headerAction :: (Core.Maybe HttpHeaderAction),
    -- | The list of criteria for matching attributes of a request to this routeRule. This list has OR semantics: the request matches this routeRule when any of the matchRules are satisfied. However predicates within a given matchRule have AND semantics. All predicates within a matchRule must match for the request to match the rule.
    matchRules :: (Core.Maybe [HttpRouteRuleMatch]),
    -- | For routeRules within a given pathMatcher, priority determines the order in which a load balancer interprets routeRules. RouteRules are evaluated in order of priority, from the lowest to highest number. The priority of a rule decreases as its number increases (1, 2, 3, N+1). The first rule that matches the request is applied. You cannot configure two or more routeRules with the same priority. Priority for each rule must be set to a number from 0 to 2147483647 inclusive. Priority numbers can have gaps, which enable you to add or remove rules in the future without affecting the rest of the rules. For example, 1, 2, 3, 4, 5, 9, 12, 16 is a valid series of priority numbers to which you could add rules numbered from 6 to 8, 10 to 11, and 13 to 15 in the future without any impact on existing rules.
    priority :: (Core.Maybe Core.Int32),
    -- | In response to a matching matchRule, the load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any weightedBackendServices. Only one of urlRedirect, service or routeAction.weightedBackendService must be set. URL maps for Classic external HTTP(S) load balancers only support the urlRewrite action within a route rule\'s routeAction.
    routeAction :: (Core.Maybe HttpRouteAction),
    -- | The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
    service :: (Core.Maybe Core.Text),
    -- | When this rule is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set. Not supported when the URL map is bound to a target gRPC proxy.
    urlRedirect :: (Core.Maybe HttpRedirectAction)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HttpRouteRule' with the minimum fields required to make a request.
newHttpRouteRule ::
  HttpRouteRule
newHttpRouteRule =
  HttpRouteRule
    { description = Core.Nothing,
      headerAction = Core.Nothing,
      matchRules = Core.Nothing,
      priority = Core.Nothing,
      routeAction = Core.Nothing,
      service = Core.Nothing,
      urlRedirect = Core.Nothing
    }

instance Core.FromJSON HttpRouteRule where
  parseJSON =
    Core.withObject
      "HttpRouteRule"
      ( \o ->
          HttpRouteRule
            Core.<$> (o Core..:? "description")
            Core.<*> (o Core..:? "headerAction")
            Core.<*> (o Core..:? "matchRules")
            Core.<*> (o Core..:? "priority")
            Core.<*> (o Core..:? "routeAction")
            Core.<*> (o Core..:? "service")
            Core.<*> (o Core..:? "urlRedirect")
      )

instance Core.ToJSON HttpRouteRule where
  toJSON HttpRouteRule {..} =
    Core.object
      ( Core.catMaybes
          [ ("description" Core..=) Core.<$> description,
            ("headerAction" Core..=) Core.<$> headerAction,
            ("matchRules" Core..=) Core.<$> matchRules,
            ("priority" Core..=) Core.<$> priority,
            ("routeAction" Core..=) Core.<$> routeAction,
            ("service" Core..=) Core.<$> service,
            ("urlRedirect" Core..=) Core.<$> urlRedirect
          ]
      )

-- | HttpRouteRuleMatch specifies a set of criteria for matching requests to an HttpRouteRule. All specified criteria must be satisfied for a match to occur.
--
-- /See:/ 'newHttpRouteRuleMatch' smart constructor.
data HttpRouteRuleMatch = HttpRouteRuleMatch
  { -- | For satisfying the matchRule condition, the path of the request must exactly match the value specified in fullPathMatch after removing any query parameters and anchor that may be part of the original URL. fullPathMatch must be from 1 to 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
    fullPathMatch :: (Core.Maybe Core.Text),
    -- | Specifies a list of header match criteria, all of which must match corresponding headers in the request.
    headerMatches :: (Core.Maybe [HttpHeaderMatch]),
    -- | Specifies that prefixMatch and fullPathMatch matches are case sensitive. The default value is false. ignoreCase must not be used with regexMatch. Not supported when the URL map is bound to a target gRPC proxy.
    ignoreCase :: (Core.Maybe Core.Bool),
    -- | Opaque filter criteria used by the load balancer to restrict routing configuration to a limited set of xDS compliant clients. In their xDS requests to the load balancer, xDS clients present node metadata. When there is a match, the relevant routing configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH/ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH/ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. If multiple metadata filters are specified, all of them need to be satisfied in order to be considered a match. metadataFilters specified here is applied after those specified in ForwardingRule that refers to the UrlMap this HttpRouteRuleMatch belongs to. metadataFilters only applies to load balancers that have loadBalancingScheme set to INTERNAL/SELF/MANAGED. Not supported when the URL map is bound to
    -- a target gRPC proxy that has validateForProxyless field set to true.
    metadataFilters :: (Core.Maybe [MetadataFilter]),
    -- | For satisfying the matchRule condition, the request\'s path must begin with the specified prefixMatch. prefixMatch must begin with a \/. The value must be from 1 to 1024 characters. Only one of prefixMatch, fullPathMatch or regexMatch must be specified.
    prefixMatch :: (Core.Maybe Core.Text),
    -- | Specifies a list of query parameter match criteria, all of which must match corresponding query parameters in the request. Not supported when the URL map is bound to a target gRPC proxy.
    queryParameterMatches :: (Core.Maybe [HttpQueryParameterMatch]),
    -- | For satisfying the matchRule condition, the path of the request must satisfy the regular expression specified in regexMatch after removing any query parameters and anchor supplied with the original URL. For more information about regular expression syntax, see Syntax. Only one of prefixMatch, fullPathMatch or regexMatch must be specified. Regular expressions can only be used when the loadBalancingScheme is set to INTERNAL/SELF/MANAGED.
    regexMatch :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HttpRouteRuleMatch' with the minimum fields required to make a request.
newHttpRouteRuleMatch ::
  HttpRouteRuleMatch
newHttpRouteRuleMatch =
  HttpRouteRuleMatch
    { fullPathMatch = Core.Nothing,
      headerMatches = Core.Nothing,
      ignoreCase = Core.Nothing,
      metadataFilters = Core.Nothing,
      prefixMatch = Core.Nothing,
      queryParameterMatches = Core.Nothing,
      regexMatch = Core.Nothing
    }

instance Core.FromJSON HttpRouteRuleMatch where
  parseJSON =
    Core.withObject
      "HttpRouteRuleMatch"
      ( \o ->
          HttpRouteRuleMatch
            Core.<$> (o Core..:? "fullPathMatch")
            Core.<*> (o Core..:? "headerMatches")
            Core.<*> (o Core..:? "ignoreCase")
            Core.<*> (o Core..:? "metadataFilters")
            Core.<*> (o Core..:? "prefixMatch")
            Core.<*> (o Core..:? "queryParameterMatches")
            Core.<*> (o Core..:? "regexMatch")
      )

instance Core.ToJSON HttpRouteRuleMatch where
  toJSON HttpRouteRuleMatch {..} =
    Core.object
      ( Core.catMaybes
          [ ("fullPathMatch" Core..=) Core.<$> fullPathMatch,
            ("headerMatches" Core..=) Core.<$> headerMatches,
            ("ignoreCase" Core..=) Core.<$> ignoreCase,
            ("metadataFilters" Core..=) Core.<$> metadataFilters,
            ("prefixMatch" Core..=) Core.<$> prefixMatch,
            ("queryParameterMatches" Core..=)
              Core.<$> queryParameterMatches,
            ("regexMatch" Core..=) Core.<$> regexMatch
          ]
      )

-- | Represents a legacy HTTPS Health Check resource. Legacy HTTPS health checks have been deprecated. If you are using a target pool-based network load balancer, you must use a legacy HTTP (not HTTPS) health check. For all other load balancers, including backend service-based network load balancers, and for managed instance group auto-healing, you must use modern (non-legacy) health checks. For more information, see Health checks overview .
--
-- /See:/ 'newHttpsHealthCheck' smart constructor.
data HttpsHealthCheck = HttpsHealthCheck
  { -- | How often (in seconds) to send a health check. The default value is 5 seconds.
    checkIntervalSec :: (Core.Maybe Core.Int32),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.
    healthyThreshold :: (Core.Maybe Core.Int32),
    -- | The value of the host header in the HTTPS health check request. If left empty (default value), the public IP on behalf of which this health check is performed will be used.
    host :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | Type of the resource.
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | The TCP port number for the HTTPS health check request. The default value is 443.
    port :: (Core.Maybe Core.Int32),
    -- | The request path of the HTTPS health check request. The default value is \"\/\". Must comply with RFC3986.
    requestPath :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have a greater value than checkIntervalSec.
    timeoutSec :: (Core.Maybe Core.Int32),
    -- | A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.
    unhealthyThreshold :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HttpsHealthCheck' with the minimum fields required to make a request.
newHttpsHealthCheck ::
  HttpsHealthCheck
newHttpsHealthCheck =
  HttpsHealthCheck
    { checkIntervalSec = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      healthyThreshold = Core.Nothing,
      host = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#httpsHealthCheck",
      name = Core.Nothing,
      port = Core.Nothing,
      requestPath = Core.Nothing,
      selfLink = Core.Nothing,
      timeoutSec = Core.Nothing,
      unhealthyThreshold = Core.Nothing
    }

instance Core.FromJSON HttpsHealthCheck where
  parseJSON =
    Core.withObject
      "HttpsHealthCheck"
      ( \o ->
          HttpsHealthCheck
            Core.<$> (o Core..:? "checkIntervalSec")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "healthyThreshold")
            Core.<*> (o Core..:? "host")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#httpsHealthCheck"
                     )
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "port")
            Core.<*> (o Core..:? "requestPath")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "timeoutSec")
            Core.<*> (o Core..:? "unhealthyThreshold")
      )

instance Core.ToJSON HttpsHealthCheck where
  toJSON HttpsHealthCheck {..} =
    Core.object
      ( Core.catMaybes
          [ ("checkIntervalSec" Core..=)
              Core.<$> checkIntervalSec,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("healthyThreshold" Core..=)
              Core.<$> healthyThreshold,
            ("host" Core..=) Core.<$> host,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("port" Core..=) Core.<$> port,
            ("requestPath" Core..=) Core.<$> requestPath,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("timeoutSec" Core..=) Core.<$> timeoutSec,
            ("unhealthyThreshold" Core..=)
              Core.<$> unhealthyThreshold
          ]
      )

-- | Contains a list of HttpsHealthCheck resources.
--
-- /See:/ 'newHttpsHealthCheckList' smart constructor.
data HttpsHealthCheckList = HttpsHealthCheckList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of HttpsHealthCheck resources.
    items :: (Core.Maybe [HttpsHealthCheck]),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe HttpsHealthCheckList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HttpsHealthCheckList' with the minimum fields required to make a request.
newHttpsHealthCheckList ::
  HttpsHealthCheckList
newHttpsHealthCheckList =
  HttpsHealthCheckList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#httpsHealthCheckList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON HttpsHealthCheckList where
  parseJSON =
    Core.withObject
      "HttpsHealthCheckList"
      ( \o ->
          HttpsHealthCheckList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#httpsHealthCheckList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON HttpsHealthCheckList where
  toJSON HttpsHealthCheckList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newHttpsHealthCheckList_Warning' smart constructor.
data HttpsHealthCheckList_Warning = HttpsHealthCheckList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe HttpsHealthCheckList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [HttpsHealthCheckList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HttpsHealthCheckList_Warning' with the minimum fields required to make a request.
newHttpsHealthCheckList_Warning ::
  HttpsHealthCheckList_Warning
newHttpsHealthCheckList_Warning =
  HttpsHealthCheckList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON HttpsHealthCheckList_Warning where
  parseJSON =
    Core.withObject
      "HttpsHealthCheckList_Warning"
      ( \o ->
          HttpsHealthCheckList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON HttpsHealthCheckList_Warning where
  toJSON HttpsHealthCheckList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newHttpsHealthCheckList_Warning_DataItem' smart constructor.
data HttpsHealthCheckList_Warning_DataItem = HttpsHealthCheckList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'HttpsHealthCheckList_Warning_DataItem' with the minimum fields required to make a request.
newHttpsHealthCheckList_Warning_DataItem ::
  HttpsHealthCheckList_Warning_DataItem
newHttpsHealthCheckList_Warning_DataItem =
  HttpsHealthCheckList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    HttpsHealthCheckList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "HttpsHealthCheckList_Warning_DataItem"
      ( \o ->
          HttpsHealthCheckList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    HttpsHealthCheckList_Warning_DataItem
  where
  toJSON HttpsHealthCheckList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Represents an Image resource. You can use images to create boot disks for your VM instances. For more information, read Images.
--
-- /See:/ 'newImage' smart constructor.
data Image = Image
  { -- | The architecture of the image. Valid values are ARM64 or X86_64.
    architecture :: (Core.Maybe Image_Architecture),
    -- | Size of the image tar.gz archive stored in Google Cloud Storage (in bytes).
    archiveSizeBytes :: (Core.Maybe Core.Int64),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | The deprecation status associated with this image.
    deprecated :: (Core.Maybe DeprecationStatus),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | Size of the image when restored onto a persistent disk (in GB).
    diskSizeGb :: (Core.Maybe Core.Int64),
    -- | The name of the image family to which this image belongs. The image family name can be from a publicly managed image family provided by Compute Engine, or from a custom image family you create. For example, centos-stream-9 is a publicly available image family. For more information, see Image family best practices. When creating disks, you can specify an image family instead of a specific image name. The image family always returns its latest image that is not deprecated. The name of the image family must comply with RFC1035.
    family :: (Core.Maybe Core.Text),
    -- | A list of features to enable on the guest operating system. Applicable only for bootable images. To see a list of available options, see the guestOSfeatures[].type parameter.
    guestOsFeatures :: (Core.Maybe [GuestOsFeature]),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | Encrypts the image using a customer-supplied encryption key. After you encrypt an image with a customer-supplied key, you must provide the same key if you use the image later (e.g. to create a disk from the image). Customer-supplied encryption keys do not protect access to metadata of the disk. If you do not provide an encryption key when creating the image, then the disk will be encrypted using an automatically generated key and you do not need to provide a key to use the image later.
    imageEncryptionKey :: (Core.Maybe CustomerEncryptionKey),
    -- | [Output Only] Type of the resource. Always compute#image for images.
    kind :: Core.Text,
    -- | A fingerprint for the labels being applied to this image, which is essentially a hash of the labels used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an image.
    labelFingerprint :: (Core.Maybe Core.Base64),
    -- | Labels to apply to this image. These can be later modified by the setLabels method.
    labels :: (Core.Maybe Image_Labels),
    -- | Integer license codes indicating which licenses are attached to this image.
    licenseCodes :: (Core.Maybe [Core.Int64]),
    -- | Any applicable license URI.
    licenses :: (Core.Maybe [Core.Text]),
    -- | Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | The parameters of the raw disk image.
    rawDisk :: (Core.Maybe Image_RawDisk),
    -- | [Output Only] Reserved for future use.
    satisfiesPzs :: (Core.Maybe Core.Bool),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | Set the secure boot keys of shielded instance.
    shieldedInstanceInitialState :: (Core.Maybe InitialStateConfig),
    -- | URL of the source disk used to create this image. For example, the following are valid values: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project\/zones\/zone \/disks\/disk - projects\/project\/zones\/zone\/disks\/disk - zones\/zone\/disks\/disk In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
    sourceDisk :: (Core.Maybe Core.Text),
    -- | The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
    sourceDiskEncryptionKey :: (Core.Maybe CustomerEncryptionKey),
    -- | [Output Only] The ID value of the disk used to create this image. This value may be used to determine whether the image was taken from the current or a previous instance of a given disk name.
    sourceDiskId :: (Core.Maybe Core.Text),
    -- | URL of the source image used to create this image. The following are valid formats for the URL: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project/id\/global\/ images\/image/name - projects\/project/id\/global\/images\/image/name In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
    sourceImage :: (Core.Maybe Core.Text),
    -- | The customer-supplied encryption key of the source image. Required if the source image is protected by a customer-supplied encryption key.
    sourceImageEncryptionKey :: (Core.Maybe CustomerEncryptionKey),
    -- | [Output Only] The ID value of the image used to create this image. This value may be used to determine whether the image was taken from the current or a previous instance of a given image name.
    sourceImageId :: (Core.Maybe Core.Text),
    -- | URL of the source snapshot used to create this image. The following are valid formats for the URL: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project/id\/global\/ snapshots\/snapshot/name - projects\/project/id\/global\/snapshots\/snapshot/name In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
    sourceSnapshot :: (Core.Maybe Core.Text),
    -- | The customer-supplied encryption key of the source snapshot. Required if the source snapshot is protected by a customer-supplied encryption key.
    sourceSnapshotEncryptionKey :: (Core.Maybe CustomerEncryptionKey),
    -- | [Output Only] The ID value of the snapshot used to create this image. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given snapshot name.
    sourceSnapshotId :: (Core.Maybe Core.Text),
    -- | The type of the image used to create this disk. The default and only valid value is RAW.
    sourceType :: Image_SourceType,
    -- | [Output Only] The status of the image. An image can be used to create other resources, such as instances, only after the image has been successfully created and the status is set to READY. Possible values are FAILED, PENDING, or READY.
    status :: (Core.Maybe Image_Status),
    -- | Cloud Storage bucket storage location of the image (regional or multi-regional).
    storageLocations :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Image' with the minimum fields required to make a request.
newImage ::
  Image
newImage =
  Image
    { architecture = Core.Nothing,
      archiveSizeBytes = Core.Nothing,
      creationTimestamp = Core.Nothing,
      deprecated = Core.Nothing,
      description = Core.Nothing,
      diskSizeGb = Core.Nothing,
      family = Core.Nothing,
      guestOsFeatures = Core.Nothing,
      id = Core.Nothing,
      imageEncryptionKey = Core.Nothing,
      kind = "compute#image",
      labelFingerprint = Core.Nothing,
      labels = Core.Nothing,
      licenseCodes = Core.Nothing,
      licenses = Core.Nothing,
      name = Core.Nothing,
      rawDisk = Core.Nothing,
      satisfiesPzs = Core.Nothing,
      selfLink = Core.Nothing,
      shieldedInstanceInitialState = Core.Nothing,
      sourceDisk = Core.Nothing,
      sourceDiskEncryptionKey = Core.Nothing,
      sourceDiskId = Core.Nothing,
      sourceImage = Core.Nothing,
      sourceImageEncryptionKey = Core.Nothing,
      sourceImageId = Core.Nothing,
      sourceSnapshot = Core.Nothing,
      sourceSnapshotEncryptionKey = Core.Nothing,
      sourceSnapshotId = Core.Nothing,
      sourceType = Image_SourceType_Raw,
      status = Core.Nothing,
      storageLocations = Core.Nothing
    }

instance Core.FromJSON Image where
  parseJSON =
    Core.withObject
      "Image"
      ( \o ->
          Image
            Core.<$> (o Core..:? "architecture")
            Core.<*> ( o Core..:? "archiveSizeBytes"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "deprecated")
            Core.<*> (o Core..:? "description")
            Core.<*> ( o Core..:? "diskSizeGb"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "family")
            Core.<*> (o Core..:? "guestOsFeatures")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "imageEncryptionKey")
            Core.<*> (o Core..:? "kind" Core..!= "compute#image")
            Core.<*> (o Core..:? "labelFingerprint")
            Core.<*> (o Core..:? "labels")
            Core.<*> ( o Core..:? "licenseCodes"
                         Core.<&> Core.fmap (Core.fmap Core.fromAsText)
                     )
            Core.<*> (o Core..:? "licenses")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "rawDisk")
            Core.<*> (o Core..:? "satisfiesPzs")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "shieldedInstanceInitialState")
            Core.<*> (o Core..:? "sourceDisk")
            Core.<*> (o Core..:? "sourceDiskEncryptionKey")
            Core.<*> (o Core..:? "sourceDiskId")
            Core.<*> (o Core..:? "sourceImage")
            Core.<*> (o Core..:? "sourceImageEncryptionKey")
            Core.<*> (o Core..:? "sourceImageId")
            Core.<*> (o Core..:? "sourceSnapshot")
            Core.<*> (o Core..:? "sourceSnapshotEncryptionKey")
            Core.<*> (o Core..:? "sourceSnapshotId")
            Core.<*> ( o Core..:? "sourceType"
                         Core..!= Image_SourceType_Raw
                     )
            Core.<*> (o Core..:? "status")
            Core.<*> (o Core..:? "storageLocations")
      )

instance Core.ToJSON Image where
  toJSON Image {..} =
    Core.object
      ( Core.catMaybes
          [ ("architecture" Core..=) Core.<$> architecture,
            ("archiveSizeBytes" Core..=) Core.. Core.AsText
              Core.<$> archiveSizeBytes,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("deprecated" Core..=) Core.<$> deprecated,
            ("description" Core..=) Core.<$> description,
            ("diskSizeGb" Core..=) Core.. Core.AsText
              Core.<$> diskSizeGb,
            ("family" Core..=) Core.<$> family,
            ("guestOsFeatures" Core..=) Core.<$> guestOsFeatures,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("imageEncryptionKey" Core..=)
              Core.<$> imageEncryptionKey,
            Core.Just ("kind" Core..= kind),
            ("labelFingerprint" Core..=)
              Core.<$> labelFingerprint,
            ("labels" Core..=) Core.<$> labels,
            ("licenseCodes" Core..=) Core.. Core.fmap Core.AsText
              Core.<$> licenseCodes,
            ("licenses" Core..=) Core.<$> licenses,
            ("name" Core..=) Core.<$> name,
            ("rawDisk" Core..=) Core.<$> rawDisk,
            ("satisfiesPzs" Core..=) Core.<$> satisfiesPzs,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("shieldedInstanceInitialState" Core..=)
              Core.<$> shieldedInstanceInitialState,
            ("sourceDisk" Core..=) Core.<$> sourceDisk,
            ("sourceDiskEncryptionKey" Core..=)
              Core.<$> sourceDiskEncryptionKey,
            ("sourceDiskId" Core..=) Core.<$> sourceDiskId,
            ("sourceImage" Core..=) Core.<$> sourceImage,
            ("sourceImageEncryptionKey" Core..=)
              Core.<$> sourceImageEncryptionKey,
            ("sourceImageId" Core..=) Core.<$> sourceImageId,
            ("sourceSnapshot" Core..=) Core.<$> sourceSnapshot,
            ("sourceSnapshotEncryptionKey" Core..=)
              Core.<$> sourceSnapshotEncryptionKey,
            ("sourceSnapshotId" Core..=)
              Core.<$> sourceSnapshotId,
            Core.Just ("sourceType" Core..= sourceType),
            ("status" Core..=) Core.<$> status,
            ("storageLocations" Core..=)
              Core.<$> storageLocations
          ]
      )

-- | Labels to apply to this image. These can be later modified by the setLabels method.
--
-- /See:/ 'newImage_Labels' smart constructor.
newtype Image_Labels = Image_Labels
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Image_Labels' with the minimum fields required to make a request.
newImage_Labels ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  Image_Labels
newImage_Labels additional = Image_Labels {additional = additional}

instance Core.FromJSON Image_Labels where
  parseJSON =
    Core.withObject
      "Image_Labels"
      ( \o ->
          Image_Labels Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON Image_Labels where
  toJSON Image_Labels {..} = Core.toJSON additional

-- | The parameters of the raw disk image.
--
-- /See:/ 'newImage_RawDisk' smart constructor.
data Image_RawDisk = Image_RawDisk
  { -- | The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created.
    containerType :: (Core.Maybe Image_RawDisk_ContainerType),
    -- | [Deprecated] This field is deprecated. An optional SHA1 checksum of the disk image before unpackaging provided by the client when the disk image is created.
    sha1Checksum :: (Core.Maybe Core.Text),
    -- | The full Google Cloud Storage URL where the raw disk image archive is stored. The following are valid formats for the URL: - https:\/\/storage.googleapis.com\/bucket/name\/image/archive/name - https:\/\/storage.googleapis.com\/bucket/name\/folder/name\/ image/archive_name In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
    source :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Image_RawDisk' with the minimum fields required to make a request.
newImage_RawDisk ::
  Image_RawDisk
newImage_RawDisk =
  Image_RawDisk
    { containerType = Core.Nothing,
      sha1Checksum = Core.Nothing,
      source = Core.Nothing
    }

instance Core.FromJSON Image_RawDisk where
  parseJSON =
    Core.withObject
      "Image_RawDisk"
      ( \o ->
          Image_RawDisk
            Core.<$> (o Core..:? "containerType")
            Core.<*> (o Core..:? "sha1Checksum")
            Core.<*> (o Core..:? "source")
      )

instance Core.ToJSON Image_RawDisk where
  toJSON Image_RawDisk {..} =
    Core.object
      ( Core.catMaybes
          [ ("containerType" Core..=) Core.<$> containerType,
            ("sha1Checksum" Core..=) Core.<$> sha1Checksum,
            ("source" Core..=) Core.<$> source
          ]
      )

--
-- /See:/ 'newImageFamilyView' smart constructor.
newtype ImageFamilyView = ImageFamilyView
  { -- | The latest image that is part of the specified image family in the requested location, and that is not deprecated.
    image :: (Core.Maybe Image)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ImageFamilyView' with the minimum fields required to make a request.
newImageFamilyView ::
  ImageFamilyView
newImageFamilyView = ImageFamilyView {image = Core.Nothing}

instance Core.FromJSON ImageFamilyView where
  parseJSON =
    Core.withObject
      "ImageFamilyView"
      ( \o ->
          ImageFamilyView Core.<$> (o Core..:? "image")
      )

instance Core.ToJSON ImageFamilyView where
  toJSON ImageFamilyView {..} =
    Core.object
      (Core.catMaybes [("image" Core..=) Core.<$> image])

-- | Contains a list of images.
--
-- /See:/ 'newImageList' smart constructor.
data ImageList = ImageList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of Image resources.
    items :: (Core.Maybe [Image]),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe ImageList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ImageList' with the minimum fields required to make a request.
newImageList ::
  ImageList
newImageList =
  ImageList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#imageList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON ImageList where
  parseJSON =
    Core.withObject
      "ImageList"
      ( \o ->
          ImageList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#imageList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON ImageList where
  toJSON ImageList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newImageList_Warning' smart constructor.
data ImageList_Warning = ImageList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe ImageList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [ImageList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ImageList_Warning' with the minimum fields required to make a request.
newImageList_Warning ::
  ImageList_Warning
newImageList_Warning =
  ImageList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON ImageList_Warning where
  parseJSON =
    Core.withObject
      "ImageList_Warning"
      ( \o ->
          ImageList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON ImageList_Warning where
  toJSON ImageList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newImageList_Warning_DataItem' smart constructor.
data ImageList_Warning_DataItem = ImageList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ImageList_Warning_DataItem' with the minimum fields required to make a request.
newImageList_Warning_DataItem ::
  ImageList_Warning_DataItem
newImageList_Warning_DataItem =
  ImageList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON ImageList_Warning_DataItem where
  parseJSON =
    Core.withObject
      "ImageList_Warning_DataItem"
      ( \o ->
          ImageList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON ImageList_Warning_DataItem where
  toJSON ImageList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Initial State for shielded instance, these are public keys which are safe to store in public
--
-- /See:/ 'newInitialStateConfig' smart constructor.
data InitialStateConfig = InitialStateConfig
  { -- | The Key Database (db).
    dbs :: (Core.Maybe [FileContentBuffer]),
    -- | The forbidden key database (dbx).
    dbxs :: (Core.Maybe [FileContentBuffer]),
    -- | The Key Exchange Key (KEK).
    keks :: (Core.Maybe [FileContentBuffer]),
    -- | The Platform Key (PK).
    pk :: (Core.Maybe FileContentBuffer)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InitialStateConfig' with the minimum fields required to make a request.
newInitialStateConfig ::
  InitialStateConfig
newInitialStateConfig =
  InitialStateConfig
    { dbs = Core.Nothing,
      dbxs = Core.Nothing,
      keks = Core.Nothing,
      pk = Core.Nothing
    }

instance Core.FromJSON InitialStateConfig where
  parseJSON =
    Core.withObject
      "InitialStateConfig"
      ( \o ->
          InitialStateConfig
            Core.<$> (o Core..:? "dbs")
            Core.<*> (o Core..:? "dbxs")
            Core.<*> (o Core..:? "keks")
            Core.<*> (o Core..:? "pk")
      )

instance Core.ToJSON InitialStateConfig where
  toJSON InitialStateConfig {..} =
    Core.object
      ( Core.catMaybes
          [ ("dbs" Core..=) Core.<$> dbs,
            ("dbxs" Core..=) Core.<$> dbxs,
            ("keks" Core..=) Core.<$> keks,
            ("pk" Core..=) Core.<$> pk
          ]
      )

-- | Represents an Instance resource. An instance is a virtual machine that is hosted on Google Cloud Platform. For more information, read Virtual Machine Instances.
--
-- /See:/ 'newInstance' smart constructor.
data Instance = Instance
  { -- | Controls for advanced machine-related behavior features.
    advancedMachineFeatures :: (Core.Maybe AdvancedMachineFeatures),
    -- | Allows this instance to send and receive packets with non-matching destination or source IPs. This is required if you plan to use this instance to forward routes. For more information, see Enabling IP Forwarding .
    canIpForward :: (Core.Maybe Core.Bool),
    -- |
    confidentialInstanceConfig :: (Core.Maybe ConfidentialInstanceConfig),
    -- | [Output Only] The CPU platform used by this instance.
    cpuPlatform :: (Core.Maybe Core.Text),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | Whether the resource should be protected against deletion.
    deletionProtection :: (Core.Maybe Core.Bool),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | Array of disks associated with this instance. Persistent disks must be created before you can assign them.
    disks :: (Core.Maybe [AttachedDisk]),
    -- | Enables display device for the instance.
    displayDevice :: (Core.Maybe DisplayDevice),
    -- | Specifies a fingerprint for this resource, which is essentially a hash of the instance\'s contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update the instance. You must always provide an up-to-date fingerprint hash in order to update the instance. To see the latest fingerprint, make get() request to the instance.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | A list of the type and count of accelerator cards attached to the instance.
    guestAccelerators :: (Core.Maybe [AcceleratorConfig]),
    -- | Specifies the hostname of the instance. The specified hostname must be RFC1035 compliant. If hostname is not specified, the default hostname is [INSTANCE/NAME].c.[PROJECT/ID].internal when using the global DNS, and [INSTANCE/NAME].[ZONE].c.[PROJECT/ID].internal when using zonal DNS.
    hostname :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | KeyRevocationActionType of the instance. Supported options are \"STOP\" and \"NONE\". The default value is \"NONE\" if it is not specified.
    keyRevocationActionType :: (Core.Maybe Instance_KeyRevocationActionType),
    -- | [Output Only] Type of the resource. Always compute#instance for instances.
    kind :: Core.Text,
    -- | A fingerprint for this request, which is essentially a hash of the label\'s contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. To see the latest fingerprint, make get() request to the instance.
    labelFingerprint :: (Core.Maybe Core.Base64),
    -- | Labels to apply to this instance. These can be later modified by the setLabels method.
    labels :: (Core.Maybe Instance_Labels),
    -- | [Output Only] Last start timestamp in RFC3339 text format.
    lastStartTimestamp :: (Core.Maybe Core.Text),
    -- | [Output Only] Last stop timestamp in RFC3339 text format.
    lastStopTimestamp :: (Core.Maybe Core.Text),
    -- | [Output Only] Last suspended timestamp in RFC3339 text format.
    lastSuspendedTimestamp :: (Core.Maybe Core.Text),
    -- | Full or partial URL of the machine type resource to use for this instance, in the format: zones\/zone\/machineTypes\/machine-type. This is provided by the client when the instance is created. For example, the following is a valid partial url to a predefined machine type: zones\/us-central1-f\/machineTypes\/n1-standard-1 To create a custom machine type, provide a URL to a machine type in the following format, where CPUS is 1 or an even number up to 32 (2, 4, 6, ... 24, etc), and MEMORY is the total memory for this instance. Memory must be a multiple of 256 MB and must be supplied in MB (e.g. 5 GB of memory is 5120 MB): zones\/zone\/machineTypes\/custom-CPUS-MEMORY For example: zones\/us-central1-f\/machineTypes\/custom-4-5120 For a full list of restrictions, read the Specifications for custom machine types.
    machineType :: (Core.Maybe Core.Text),
    -- | The metadata key\/value pairs assigned to this instance. This includes custom metadata and predefined keys.
    metadata :: (Core.Maybe Metadata),
    -- | Specifies a minimum CPU platform for the VM instance. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: \"Intel Haswell\" or minCpuPlatform: \"Intel Sandy Bridge\".
    minCpuPlatform :: (Core.Maybe Core.Text),
    -- | The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | An array of network configurations for this instance. These specify how interfaces are configured to interact with other network services, such as connecting to the internet. Multiple interfaces are supported per instance.
    networkInterfaces :: (Core.Maybe [NetworkInterface]),
    -- |
    networkPerformanceConfig :: (Core.Maybe NetworkPerformanceConfig),
    -- | Input only. [Input Only] Additional params passed with the request, but not persisted as part of resource payload.
    params :: (Core.Maybe InstanceParams),
    -- | The private IPv6 google access type for the VM. If not specified, use INHERIT/FROM/SUBNETWORK as default.
    privateIpv6GoogleAccess :: (Core.Maybe Instance_PrivateIpv6GoogleAccess),
    -- | Specifies the reservations that this instance can consume from.
    reservationAffinity :: (Core.Maybe ReservationAffinity),
    -- | Resource policies applied to this instance.
    resourcePolicies :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Specifies values set for instance attributes as compared to the values requested by user in the corresponding input only field.
    resourceStatus :: (Core.Maybe ResourceStatus),
    -- | [Output Only] Reserved for future use.
    satisfiesPzs :: (Core.Maybe Core.Bool),
    -- | Sets the scheduling options for this instance.
    scheduling :: (Core.Maybe Scheduling),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | A list of service accounts, with their specified scopes, authorized for this instance. Only one service account per VM instance is supported. Service accounts generate access tokens that can be accessed through the metadata server and used to authenticate applications on the instance. See Service Accounts for more information.
    serviceAccounts :: (Core.Maybe [ServiceAccount]),
    -- |
    shieldedInstanceConfig :: (Core.Maybe ShieldedInstanceConfig),
    -- |
    shieldedInstanceIntegrityPolicy :: (Core.Maybe ShieldedInstanceIntegrityPolicy),
    -- | Source machine image
    sourceMachineImage :: (Core.Maybe Core.Text),
    -- | Source machine image encryption key when creating an instance from a machine image.
    sourceMachineImageEncryptionKey :: (Core.Maybe CustomerEncryptionKey),
    -- | [Output Only] Whether a VM has been restricted for start because Compute Engine has detected suspicious activity.
    startRestricted :: (Core.Maybe Core.Bool),
    -- | [Output Only] The status of the instance. One of the following values: PROVISIONING, STAGING, RUNNING, STOPPING, SUSPENDING, SUSPENDED, REPAIRING, and TERMINATED. For more information about the status of the instance, see Instance life cycle.
    status :: (Core.Maybe Instance_Status),
    -- | [Output Only] An optional, human-readable explanation of the status.
    statusMessage :: (Core.Maybe Core.Text),
    -- | Tags to apply to this instance. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during instance creation. The tags can be later modified by the setTags method. Each tag within the list must comply with RFC1035. Multiple tags can be specified via the \'tags.items\' field.
    tags :: (Core.Maybe Tags),
    -- | [Output Only] URL of the zone where the instance resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    zone :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Instance' with the minimum fields required to make a request.
newInstance ::
  Instance
newInstance =
  Instance
    { advancedMachineFeatures = Core.Nothing,
      canIpForward = Core.Nothing,
      confidentialInstanceConfig = Core.Nothing,
      cpuPlatform = Core.Nothing,
      creationTimestamp = Core.Nothing,
      deletionProtection = Core.Nothing,
      description = Core.Nothing,
      disks = Core.Nothing,
      displayDevice = Core.Nothing,
      fingerprint = Core.Nothing,
      guestAccelerators = Core.Nothing,
      hostname = Core.Nothing,
      id = Core.Nothing,
      keyRevocationActionType = Core.Nothing,
      kind = "compute#instance",
      labelFingerprint = Core.Nothing,
      labels = Core.Nothing,
      lastStartTimestamp = Core.Nothing,
      lastStopTimestamp = Core.Nothing,
      lastSuspendedTimestamp = Core.Nothing,
      machineType = Core.Nothing,
      metadata = Core.Nothing,
      minCpuPlatform = Core.Nothing,
      name = Core.Nothing,
      networkInterfaces = Core.Nothing,
      networkPerformanceConfig = Core.Nothing,
      params = Core.Nothing,
      privateIpv6GoogleAccess = Core.Nothing,
      reservationAffinity = Core.Nothing,
      resourcePolicies = Core.Nothing,
      resourceStatus = Core.Nothing,
      satisfiesPzs = Core.Nothing,
      scheduling = Core.Nothing,
      selfLink = Core.Nothing,
      serviceAccounts = Core.Nothing,
      shieldedInstanceConfig = Core.Nothing,
      shieldedInstanceIntegrityPolicy = Core.Nothing,
      sourceMachineImage = Core.Nothing,
      sourceMachineImageEncryptionKey = Core.Nothing,
      startRestricted = Core.Nothing,
      status = Core.Nothing,
      statusMessage = Core.Nothing,
      tags = Core.Nothing,
      zone = Core.Nothing
    }

instance Core.FromJSON Instance where
  parseJSON =
    Core.withObject
      "Instance"
      ( \o ->
          Instance
            Core.<$> (o Core..:? "advancedMachineFeatures")
            Core.<*> (o Core..:? "canIpForward")
            Core.<*> (o Core..:? "confidentialInstanceConfig")
            Core.<*> (o Core..:? "cpuPlatform")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "deletionProtection")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "disks")
            Core.<*> (o Core..:? "displayDevice")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "guestAccelerators")
            Core.<*> (o Core..:? "hostname")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "keyRevocationActionType")
            Core.<*> (o Core..:? "kind" Core..!= "compute#instance")
            Core.<*> (o Core..:? "labelFingerprint")
            Core.<*> (o Core..:? "labels")
            Core.<*> (o Core..:? "lastStartTimestamp")
            Core.<*> (o Core..:? "lastStopTimestamp")
            Core.<*> (o Core..:? "lastSuspendedTimestamp")
            Core.<*> (o Core..:? "machineType")
            Core.<*> (o Core..:? "metadata")
            Core.<*> (o Core..:? "minCpuPlatform")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "networkInterfaces")
            Core.<*> (o Core..:? "networkPerformanceConfig")
            Core.<*> (o Core..:? "params")
            Core.<*> (o Core..:? "privateIpv6GoogleAccess")
            Core.<*> (o Core..:? "reservationAffinity")
            Core.<*> (o Core..:? "resourcePolicies")
            Core.<*> (o Core..:? "resourceStatus")
            Core.<*> (o Core..:? "satisfiesPzs")
            Core.<*> (o Core..:? "scheduling")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "serviceAccounts")
            Core.<*> (o Core..:? "shieldedInstanceConfig")
            Core.<*> (o Core..:? "shieldedInstanceIntegrityPolicy")
            Core.<*> (o Core..:? "sourceMachineImage")
            Core.<*> (o Core..:? "sourceMachineImageEncryptionKey")
            Core.<*> (o Core..:? "startRestricted")
            Core.<*> (o Core..:? "status")
            Core.<*> (o Core..:? "statusMessage")
            Core.<*> (o Core..:? "tags")
            Core.<*> (o Core..:? "zone")
      )

instance Core.ToJSON Instance where
  toJSON Instance {..} =
    Core.object
      ( Core.catMaybes
          [ ("advancedMachineFeatures" Core..=)
              Core.<$> advancedMachineFeatures,
            ("canIpForward" Core..=) Core.<$> canIpForward,
            ("confidentialInstanceConfig" Core..=)
              Core.<$> confidentialInstanceConfig,
            ("cpuPlatform" Core..=) Core.<$> cpuPlatform,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("deletionProtection" Core..=)
              Core.<$> deletionProtection,
            ("description" Core..=) Core.<$> description,
            ("disks" Core..=) Core.<$> disks,
            ("displayDevice" Core..=) Core.<$> displayDevice,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("guestAccelerators" Core..=)
              Core.<$> guestAccelerators,
            ("hostname" Core..=) Core.<$> hostname,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("keyRevocationActionType" Core..=)
              Core.<$> keyRevocationActionType,
            Core.Just ("kind" Core..= kind),
            ("labelFingerprint" Core..=)
              Core.<$> labelFingerprint,
            ("labels" Core..=) Core.<$> labels,
            ("lastStartTimestamp" Core..=)
              Core.<$> lastStartTimestamp,
            ("lastStopTimestamp" Core..=)
              Core.<$> lastStopTimestamp,
            ("lastSuspendedTimestamp" Core..=)
              Core.<$> lastSuspendedTimestamp,
            ("machineType" Core..=) Core.<$> machineType,
            ("metadata" Core..=) Core.<$> metadata,
            ("minCpuPlatform" Core..=) Core.<$> minCpuPlatform,
            ("name" Core..=) Core.<$> name,
            ("networkInterfaces" Core..=)
              Core.<$> networkInterfaces,
            ("networkPerformanceConfig" Core..=)
              Core.<$> networkPerformanceConfig,
            ("params" Core..=) Core.<$> params,
            ("privateIpv6GoogleAccess" Core..=)
              Core.<$> privateIpv6GoogleAccess,
            ("reservationAffinity" Core..=)
              Core.<$> reservationAffinity,
            ("resourcePolicies" Core..=)
              Core.<$> resourcePolicies,
            ("resourceStatus" Core..=) Core.<$> resourceStatus,
            ("satisfiesPzs" Core..=) Core.<$> satisfiesPzs,
            ("scheduling" Core..=) Core.<$> scheduling,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("serviceAccounts" Core..=) Core.<$> serviceAccounts,
            ("shieldedInstanceConfig" Core..=)
              Core.<$> shieldedInstanceConfig,
            ("shieldedInstanceIntegrityPolicy" Core..=)
              Core.<$> shieldedInstanceIntegrityPolicy,
            ("sourceMachineImage" Core..=)
              Core.<$> sourceMachineImage,
            ("sourceMachineImageEncryptionKey" Core..=)
              Core.<$> sourceMachineImageEncryptionKey,
            ("startRestricted" Core..=) Core.<$> startRestricted,
            ("status" Core..=) Core.<$> status,
            ("statusMessage" Core..=) Core.<$> statusMessage,
            ("tags" Core..=) Core.<$> tags,
            ("zone" Core..=) Core.<$> zone
          ]
      )

-- | Labels to apply to this instance. These can be later modified by the setLabels method.
--
-- /See:/ 'newInstance_Labels' smart constructor.
newtype Instance_Labels = Instance_Labels
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Instance_Labels' with the minimum fields required to make a request.
newInstance_Labels ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  Instance_Labels
newInstance_Labels additional = Instance_Labels {additional = additional}

instance Core.FromJSON Instance_Labels where
  parseJSON =
    Core.withObject
      "Instance_Labels"
      ( \o ->
          Instance_Labels Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON Instance_Labels where
  toJSON Instance_Labels {..} = Core.toJSON additional

--
-- /See:/ 'newInstanceAggregatedList' smart constructor.
data InstanceAggregatedList = InstanceAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | An object that contains a list of instances scoped by zone.
    items :: (Core.Maybe InstanceAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#instanceAggregatedList for aggregated lists of Instance resources.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe InstanceAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceAggregatedList' with the minimum fields required to make a request.
newInstanceAggregatedList ::
  InstanceAggregatedList
newInstanceAggregatedList =
  InstanceAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#instanceAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON InstanceAggregatedList where
  parseJSON =
    Core.withObject
      "InstanceAggregatedList"
      ( \o ->
          InstanceAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#instanceAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON InstanceAggregatedList where
  toJSON InstanceAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | An object that contains a list of instances scoped by zone.
--
-- /See:/ 'newInstanceAggregatedList_Items' smart constructor.
newtype InstanceAggregatedList_Items = InstanceAggregatedList_Items
  { -- | [Output Only] Name of the scope containing this set of instances.
    additional :: (Core.HashMap Core.Text InstancesScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceAggregatedList_Items' with the minimum fields required to make a request.
newInstanceAggregatedList_Items ::
  -- |  [Output Only] Name of the scope containing this set of instances. See 'additional'.
  Core.HashMap Core.Text InstancesScopedList ->
  InstanceAggregatedList_Items
newInstanceAggregatedList_Items additional =
  InstanceAggregatedList_Items {additional = additional}

instance Core.FromJSON InstanceAggregatedList_Items where
  parseJSON =
    Core.withObject
      "InstanceAggregatedList_Items"
      ( \o ->
          InstanceAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON InstanceAggregatedList_Items where
  toJSON InstanceAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newInstanceAggregatedList_Warning' smart constructor.
data InstanceAggregatedList_Warning = InstanceAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe InstanceAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [InstanceAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceAggregatedList_Warning' with the minimum fields required to make a request.
newInstanceAggregatedList_Warning ::
  InstanceAggregatedList_Warning
newInstanceAggregatedList_Warning =
  InstanceAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON InstanceAggregatedList_Warning where
  parseJSON =
    Core.withObject
      "InstanceAggregatedList_Warning"
      ( \o ->
          InstanceAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON InstanceAggregatedList_Warning where
  toJSON InstanceAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newInstanceAggregatedList_Warning_DataItem' smart constructor.
data InstanceAggregatedList_Warning_DataItem = InstanceAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newInstanceAggregatedList_Warning_DataItem ::
  InstanceAggregatedList_Warning_DataItem
newInstanceAggregatedList_Warning_DataItem =
  InstanceAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "InstanceAggregatedList_Warning_DataItem"
      ( \o ->
          InstanceAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    InstanceAggregatedList_Warning_DataItem
  where
  toJSON InstanceAggregatedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newInstanceConsumptionData' smart constructor.
data InstanceConsumptionData = InstanceConsumptionData
  { -- | Resources consumed by the instance.
    consumptionInfo :: (Core.Maybe InstanceConsumptionInfo),
    -- | Server-defined URL for the instance.
    instance' :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceConsumptionData' with the minimum fields required to make a request.
newInstanceConsumptionData ::
  InstanceConsumptionData
newInstanceConsumptionData =
  InstanceConsumptionData
    { consumptionInfo = Core.Nothing,
      instance' = Core.Nothing
    }

instance Core.FromJSON InstanceConsumptionData where
  parseJSON =
    Core.withObject
      "InstanceConsumptionData"
      ( \o ->
          InstanceConsumptionData
            Core.<$> (o Core..:? "consumptionInfo")
            Core.<*> (o Core..:? "instance")
      )

instance Core.ToJSON InstanceConsumptionData where
  toJSON InstanceConsumptionData {..} =
    Core.object
      ( Core.catMaybes
          [ ("consumptionInfo" Core..=)
              Core.<$> consumptionInfo,
            ("instance" Core..=) Core.<$> instance'
          ]
      )

--
-- /See:/ 'newInstanceConsumptionInfo' smart constructor.
data InstanceConsumptionInfo = InstanceConsumptionInfo
  { -- | The number of virtual CPUs that are available to the instance.
    guestCpus :: (Core.Maybe Core.Int32),
    -- | The amount of local SSD storage available to the instance, defined in GiB.
    localSsdGb :: (Core.Maybe Core.Int32),
    -- | The amount of physical memory available to the instance, defined in MiB.
    memoryMb :: (Core.Maybe Core.Int32),
    -- | The minimal guaranteed number of virtual CPUs that are reserved.
    minNodeCpus :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceConsumptionInfo' with the minimum fields required to make a request.
newInstanceConsumptionInfo ::
  InstanceConsumptionInfo
newInstanceConsumptionInfo =
  InstanceConsumptionInfo
    { guestCpus = Core.Nothing,
      localSsdGb = Core.Nothing,
      memoryMb = Core.Nothing,
      minNodeCpus = Core.Nothing
    }

instance Core.FromJSON InstanceConsumptionInfo where
  parseJSON =
    Core.withObject
      "InstanceConsumptionInfo"
      ( \o ->
          InstanceConsumptionInfo
            Core.<$> (o Core..:? "guestCpus")
            Core.<*> (o Core..:? "localSsdGb")
            Core.<*> (o Core..:? "memoryMb")
            Core.<*> (o Core..:? "minNodeCpus")
      )

instance Core.ToJSON InstanceConsumptionInfo where
  toJSON InstanceConsumptionInfo {..} =
    Core.object
      ( Core.catMaybes
          [ ("guestCpus" Core..=) Core.<$> guestCpus,
            ("localSsdGb" Core..=) Core.<$> localSsdGb,
            ("memoryMb" Core..=) Core.<$> memoryMb,
            ("minNodeCpus" Core..=) Core.<$> minNodeCpus
          ]
      )

-- | Represents an Instance Group resource. Instance Groups can be used to configure a target for load balancing. Instance groups can either be managed or unmanaged. To create managed instance groups, use the instanceGroupManager or regionInstanceGroupManager resource instead. Use zonal unmanaged instance groups if you need to apply load balancing to groups of heterogeneous instances or if you need to manage the instances yourself. You cannot create regional unmanaged instance groups. For more information, read Instance groups.
--
-- /See:/ 'newInstanceGroup' smart constructor.
data InstanceGroup = InstanceGroup
  { -- | [Output Only] The creation timestamp for this instance group in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The fingerprint of the named ports. The system uses this fingerprint to detect conflicts when multiple users change the named ports concurrently.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | [Output Only] A unique identifier for this instance group, generated by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] The resource type, which is always compute#instanceGroup for instance groups.
    kind :: Core.Text,
    -- | The name of the instance group. The name must be 1-63 characters long, and comply with RFC1035.
    name :: (Core.Maybe Core.Text),
    -- | Assigns a name to a port number. For example: {name: \"http\", port: 80} This allows the system to reference ports by the assigned name instead of a port number. Named ports can also contain multiple ports. For example: [{name: \"app1\", port: 8080}, {name: \"app1\", port: 8081}, {name: \"app2\", port: 8082}] Named ports apply to all instances in this instance group.
    namedPorts :: (Core.Maybe [NamedPort]),
    -- | [Output Only] The URL of the network to which all instances in the instance group belong. If your instance has multiple network interfaces, then the network and subnetwork fields only refer to the network and subnet used by your primary interface (nic0).
    network :: (Core.Maybe Core.Text),
    -- | [Output Only] The URL of the region where the instance group is located (for regional resources).
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] The URL for this instance group. The server generates this URL.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] The total number of instances in the instance group.
    size :: (Core.Maybe Core.Int32),
    -- | [Output Only] The URL of the subnetwork to which all instances in the instance group belong. If your instance has multiple network interfaces, then the network and subnetwork fields only refer to the network and subnet used by your primary interface (nic0).
    subnetwork :: (Core.Maybe Core.Text),
    -- | [Output Only] The URL of the zone where the instance group is located (for zonal resources).
    zone :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroup' with the minimum fields required to make a request.
newInstanceGroup ::
  InstanceGroup
newInstanceGroup =
  InstanceGroup
    { creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      fingerprint = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#instanceGroup",
      name = Core.Nothing,
      namedPorts = Core.Nothing,
      network = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      size = Core.Nothing,
      subnetwork = Core.Nothing,
      zone = Core.Nothing
    }

instance Core.FromJSON InstanceGroup where
  parseJSON =
    Core.withObject
      "InstanceGroup"
      ( \o ->
          InstanceGroup
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#instanceGroup")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "namedPorts")
            Core.<*> (o Core..:? "network")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "size")
            Core.<*> (o Core..:? "subnetwork")
            Core.<*> (o Core..:? "zone")
      )

instance Core.ToJSON InstanceGroup where
  toJSON InstanceGroup {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("namedPorts" Core..=) Core.<$> namedPorts,
            ("network" Core..=) Core.<$> network,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("size" Core..=) Core.<$> size,
            ("subnetwork" Core..=) Core.<$> subnetwork,
            ("zone" Core..=) Core.<$> zone
          ]
      )

--
-- /See:/ 'newInstanceGroupAggregatedList' smart constructor.
data InstanceGroupAggregatedList = InstanceGroupAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of InstanceGroupsScopedList resources.
    items :: (Core.Maybe InstanceGroupAggregatedList_Items),
    -- | [Output Only] The resource type, which is always compute#instanceGroupAggregatedList for aggregated lists of instance groups.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe InstanceGroupAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupAggregatedList' with the minimum fields required to make a request.
newInstanceGroupAggregatedList ::
  InstanceGroupAggregatedList
newInstanceGroupAggregatedList =
  InstanceGroupAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#instanceGroupAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON InstanceGroupAggregatedList where
  parseJSON =
    Core.withObject
      "InstanceGroupAggregatedList"
      ( \o ->
          InstanceGroupAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#instanceGroupAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON InstanceGroupAggregatedList where
  toJSON InstanceGroupAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of InstanceGroupsScopedList resources.
--
-- /See:/ 'newInstanceGroupAggregatedList_Items' smart constructor.
newtype InstanceGroupAggregatedList_Items = InstanceGroupAggregatedList_Items
  { -- | The name of the scope that contains this set of instance groups.
    additional :: (Core.HashMap Core.Text InstanceGroupsScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupAggregatedList_Items' with the minimum fields required to make a request.
newInstanceGroupAggregatedList_Items ::
  -- |  The name of the scope that contains this set of instance groups. See 'additional'.
  Core.HashMap Core.Text InstanceGroupsScopedList ->
  InstanceGroupAggregatedList_Items
newInstanceGroupAggregatedList_Items additional =
  InstanceGroupAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    InstanceGroupAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "InstanceGroupAggregatedList_Items"
      ( \o ->
          InstanceGroupAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    InstanceGroupAggregatedList_Items
  where
  toJSON InstanceGroupAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newInstanceGroupAggregatedList_Warning' smart constructor.
data InstanceGroupAggregatedList_Warning = InstanceGroupAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe InstanceGroupAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [InstanceGroupAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupAggregatedList_Warning' with the minimum fields required to make a request.
newInstanceGroupAggregatedList_Warning ::
  InstanceGroupAggregatedList_Warning
newInstanceGroupAggregatedList_Warning =
  InstanceGroupAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "InstanceGroupAggregatedList_Warning"
      ( \o ->
          InstanceGroupAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    InstanceGroupAggregatedList_Warning
  where
  toJSON InstanceGroupAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newInstanceGroupAggregatedList_Warning_DataItem' smart constructor.
data InstanceGroupAggregatedList_Warning_DataItem = InstanceGroupAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newInstanceGroupAggregatedList_Warning_DataItem ::
  InstanceGroupAggregatedList_Warning_DataItem
newInstanceGroupAggregatedList_Warning_DataItem =
  InstanceGroupAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "InstanceGroupAggregatedList_Warning_DataItem"
      ( \o ->
          InstanceGroupAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    InstanceGroupAggregatedList_Warning_DataItem
  where
  toJSON
    InstanceGroupAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | A list of InstanceGroup resources.
--
-- /See:/ 'newInstanceGroupList' smart constructor.
data InstanceGroupList = InstanceGroupList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of InstanceGroup resources.
    items :: (Core.Maybe [InstanceGroup]),
    -- | [Output Only] The resource type, which is always compute#instanceGroupList for instance group lists.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe InstanceGroupList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupList' with the minimum fields required to make a request.
newInstanceGroupList ::
  InstanceGroupList
newInstanceGroupList =
  InstanceGroupList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#instanceGroupList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON InstanceGroupList where
  parseJSON =
    Core.withObject
      "InstanceGroupList"
      ( \o ->
          InstanceGroupList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#instanceGroupList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON InstanceGroupList where
  toJSON InstanceGroupList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newInstanceGroupList_Warning' smart constructor.
data InstanceGroupList_Warning = InstanceGroupList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe InstanceGroupList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [InstanceGroupList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupList_Warning' with the minimum fields required to make a request.
newInstanceGroupList_Warning ::
  InstanceGroupList_Warning
newInstanceGroupList_Warning =
  InstanceGroupList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON InstanceGroupList_Warning where
  parseJSON =
    Core.withObject
      "InstanceGroupList_Warning"
      ( \o ->
          InstanceGroupList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON InstanceGroupList_Warning where
  toJSON InstanceGroupList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newInstanceGroupList_Warning_DataItem' smart constructor.
data InstanceGroupList_Warning_DataItem = InstanceGroupList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupList_Warning_DataItem' with the minimum fields required to make a request.
newInstanceGroupList_Warning_DataItem ::
  InstanceGroupList_Warning_DataItem
newInstanceGroupList_Warning_DataItem =
  InstanceGroupList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    InstanceGroupList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "InstanceGroupList_Warning_DataItem"
      ( \o ->
          InstanceGroupList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    InstanceGroupList_Warning_DataItem
  where
  toJSON InstanceGroupList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Represents a Managed Instance Group resource. An instance group is a collection of VM instances that you can manage as a single entity. For more information, read Instance groups. For zonal Managed Instance Group, use the instanceGroupManagers resource. For regional Managed Instance Group, use the regionInstanceGroupManagers resource.
--
-- /See:/ 'newInstanceGroupManager' smart constructor.
data InstanceGroupManager = InstanceGroupManager
  { -- | The autohealing policy for this managed instance group. You can specify only one value.
    autoHealingPolicies :: (Core.Maybe [InstanceGroupManagerAutoHealingPolicy]),
    -- | The base instance name to use for instances in this group. The value must be 1-58 characters long. Instances are named by appending a hyphen and a random four-character string to the base instance name. The base instance name must comply with RFC1035.
    baseInstanceName :: (Core.Maybe Core.Text),
    -- | [Output Only] The creation timestamp for this managed instance group in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | [Output Only] The list of instance actions and the number of instances in this managed instance group that are scheduled for each of those actions.
    currentActions :: (Core.Maybe InstanceGroupManagerActionsSummary),
    -- | An optional description of this resource.
    description :: (Core.Maybe Core.Text),
    -- | Policy specifying the intended distribution of managed instances across zones in a regional managed instance group.
    distributionPolicy :: (Core.Maybe DistributionPolicy),
    -- | Fingerprint of this resource. This field may be used in optimistic locking. It will be ignored when inserting an InstanceGroupManager. An up-to-date fingerprint must be provided in order to update the InstanceGroupManager, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an InstanceGroupManager.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | [Output Only] A unique identifier for this resource type. The server generates this identifier.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] The URL of the Instance Group resource.
    instanceGroup :: (Core.Maybe Core.Text),
    -- | The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group\'s updatePolicy.type to PROACTIVE.
    instanceTemplate :: (Core.Maybe Core.Text),
    -- | [Output Only] The resource type, which is always compute#instanceGroupManager for managed instance groups.
    kind :: Core.Text,
    -- | Pagination behavior of the listManagedInstances API method for this managed instance group.
    listManagedInstancesResults :: (Core.Maybe InstanceGroupManager_ListManagedInstancesResults),
    -- | The name of the managed instance group. The name must be 1-63 characters long, and comply with RFC1035.
    name :: (Core.Maybe Core.Text),
    -- | Named ports configured for the Instance Groups complementary to this Instance Group Manager.
    namedPorts :: (Core.Maybe [NamedPort]),
    -- | [Output Only] The URL of the region where the managed instance group resides (for regional resources).
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] The URL for this managed instance group. The server defines this URL.
    selfLink :: (Core.Maybe Core.Text),
    -- | Stateful configuration for this Instanced Group Manager
    statefulPolicy :: (Core.Maybe StatefulPolicy),
    -- | [Output Only] The status of this managed instance group.
    status :: (Core.Maybe InstanceGroupManagerStatus),
    -- | The URLs for all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group.
    targetPools :: (Core.Maybe [Core.Text]),
    -- | The target number of running instances for this managed instance group. You can reduce this number by using the instanceGroupManager deleteInstances or abandonInstances methods. Resizing the group also changes this number.
    targetSize :: (Core.Maybe Core.Int32),
    -- | The update policy for this managed instance group.
    updatePolicy :: (Core.Maybe InstanceGroupManagerUpdatePolicy),
    -- | Specifies the instance templates used by this managed instance group to create instances. Each version is defined by an instanceTemplate and a name. Every version can appear at most once per instance group. This field overrides the top-level instanceTemplate field. Read more about the relationships between these fields. Exactly one version must leave the targetSize field unset. That version will be applied to all remaining instances. For more information, read about canary updates.
    versions :: (Core.Maybe [InstanceGroupManagerVersion]),
    -- | [Output Only] The URL of a zone where the managed instance group is located (for zonal resources).
    zone :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManager' with the minimum fields required to make a request.
newInstanceGroupManager ::
  InstanceGroupManager
newInstanceGroupManager =
  InstanceGroupManager
    { autoHealingPolicies = Core.Nothing,
      baseInstanceName = Core.Nothing,
      creationTimestamp = Core.Nothing,
      currentActions = Core.Nothing,
      description = Core.Nothing,
      distributionPolicy = Core.Nothing,
      fingerprint = Core.Nothing,
      id = Core.Nothing,
      instanceGroup = Core.Nothing,
      instanceTemplate = Core.Nothing,
      kind = "compute#instanceGroupManager",
      listManagedInstancesResults = Core.Nothing,
      name = Core.Nothing,
      namedPorts = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      statefulPolicy = Core.Nothing,
      status = Core.Nothing,
      targetPools = Core.Nothing,
      targetSize = Core.Nothing,
      updatePolicy = Core.Nothing,
      versions = Core.Nothing,
      zone = Core.Nothing
    }

instance Core.FromJSON InstanceGroupManager where
  parseJSON =
    Core.withObject
      "InstanceGroupManager"
      ( \o ->
          InstanceGroupManager
            Core.<$> (o Core..:? "autoHealingPolicies")
            Core.<*> (o Core..:? "baseInstanceName")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "currentActions")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "distributionPolicy")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "instanceGroup")
            Core.<*> (o Core..:? "instanceTemplate")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#instanceGroupManager"
                     )
            Core.<*> (o Core..:? "listManagedInstancesResults")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "namedPorts")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "statefulPolicy")
            Core.<*> (o Core..:? "status")
            Core.<*> (o Core..:? "targetPools")
            Core.<*> (o Core..:? "targetSize")
            Core.<*> (o Core..:? "updatePolicy")
            Core.<*> (o Core..:? "versions")
            Core.<*> (o Core..:? "zone")
      )

instance Core.ToJSON InstanceGroupManager where
  toJSON InstanceGroupManager {..} =
    Core.object
      ( Core.catMaybes
          [ ("autoHealingPolicies" Core..=)
              Core.<$> autoHealingPolicies,
            ("baseInstanceName" Core..=)
              Core.<$> baseInstanceName,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("currentActions" Core..=) Core.<$> currentActions,
            ("description" Core..=) Core.<$> description,
            ("distributionPolicy" Core..=)
              Core.<$> distributionPolicy,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("instanceGroup" Core..=) Core.<$> instanceGroup,
            ("instanceTemplate" Core..=)
              Core.<$> instanceTemplate,
            Core.Just ("kind" Core..= kind),
            ("listManagedInstancesResults" Core..=)
              Core.<$> listManagedInstancesResults,
            ("name" Core..=) Core.<$> name,
            ("namedPorts" Core..=) Core.<$> namedPorts,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("statefulPolicy" Core..=) Core.<$> statefulPolicy,
            ("status" Core..=) Core.<$> status,
            ("targetPools" Core..=) Core.<$> targetPools,
            ("targetSize" Core..=) Core.<$> targetSize,
            ("updatePolicy" Core..=) Core.<$> updatePolicy,
            ("versions" Core..=) Core.<$> versions,
            ("zone" Core..=) Core.<$> zone
          ]
      )

--
-- /See:/ 'newInstanceGroupManagerActionsSummary' smart constructor.
data InstanceGroupManagerActionsSummary = InstanceGroupManagerActionsSummary
  { -- | [Output Only] The total number of instances in the managed instance group that are scheduled to be abandoned. Abandoning an instance removes it from the managed instance group without deleting it.
    abandoning :: (Core.Maybe Core.Int32),
    -- | [Output Only] The number of instances in the managed instance group that are scheduled to be created or are currently being created. If the group fails to create any of these instances, it tries again until it creates the instance successfully. If you have disabled creation retries, this field will not be populated; instead, the creatingWithoutRetries field will be populated.
    creating :: (Core.Maybe Core.Int32),
    -- | [Output Only] The number of instances that the managed instance group will attempt to create. The group attempts to create each instance only once. If the group fails to create any of these instances, it decreases the group\'s targetSize value accordingly.
    creatingWithoutRetries :: (Core.Maybe Core.Int32),
    -- | [Output Only] The number of instances in the managed instance group that are scheduled to be deleted or are currently being deleted.
    deleting :: (Core.Maybe Core.Int32),
    -- | [Output Only] The number of instances in the managed instance group that are running and have no scheduled actions.
    none :: (Core.Maybe Core.Int32),
    -- | [Output Only] The number of instances in the managed instance group that are scheduled to be recreated or are currently being being recreated. Recreating an instance deletes the existing root persistent disk and creates a new disk from the image that is defined in the instance template.
    recreating :: (Core.Maybe Core.Int32),
    -- | [Output Only] The number of instances in the managed instance group that are being reconfigured with properties that do not require a restart or a recreate action. For example, setting or removing target pools for the instance.
    refreshing :: (Core.Maybe Core.Int32),
    -- | [Output Only] The number of instances in the managed instance group that are scheduled to be restarted or are currently being restarted.
    restarting :: (Core.Maybe Core.Int32),
    -- | [Output Only] The number of instances in the managed instance group that are scheduled to be resumed or are currently being resumed.
    resuming :: (Core.Maybe Core.Int32),
    -- | [Output Only] The number of instances in the managed instance group that are scheduled to be started or are currently being started.
    starting :: (Core.Maybe Core.Int32),
    -- | [Output Only] The number of instances in the managed instance group that are scheduled to be stopped or are currently being stopped.
    stopping :: (Core.Maybe Core.Int32),
    -- | [Output Only] The number of instances in the managed instance group that are scheduled to be suspended or are currently being suspended.
    suspending :: (Core.Maybe Core.Int32),
    -- | [Output Only] The number of instances in the managed instance group that are being verified. See the managedInstances[].currentAction property in the listManagedInstances method documentation.
    verifying :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagerActionsSummary' with the minimum fields required to make a request.
newInstanceGroupManagerActionsSummary ::
  InstanceGroupManagerActionsSummary
newInstanceGroupManagerActionsSummary =
  InstanceGroupManagerActionsSummary
    { abandoning = Core.Nothing,
      creating = Core.Nothing,
      creatingWithoutRetries = Core.Nothing,
      deleting = Core.Nothing,
      none = Core.Nothing,
      recreating = Core.Nothing,
      refreshing = Core.Nothing,
      restarting = Core.Nothing,
      resuming = Core.Nothing,
      starting = Core.Nothing,
      stopping = Core.Nothing,
      suspending = Core.Nothing,
      verifying = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagerActionsSummary
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagerActionsSummary"
      ( \o ->
          InstanceGroupManagerActionsSummary
            Core.<$> (o Core..:? "abandoning")
            Core.<*> (o Core..:? "creating")
            Core.<*> (o Core..:? "creatingWithoutRetries")
            Core.<*> (o Core..:? "deleting")
            Core.<*> (o Core..:? "none")
            Core.<*> (o Core..:? "recreating")
            Core.<*> (o Core..:? "refreshing")
            Core.<*> (o Core..:? "restarting")
            Core.<*> (o Core..:? "resuming")
            Core.<*> (o Core..:? "starting")
            Core.<*> (o Core..:? "stopping")
            Core.<*> (o Core..:? "suspending")
            Core.<*> (o Core..:? "verifying")
      )

instance
  Core.ToJSON
    InstanceGroupManagerActionsSummary
  where
  toJSON InstanceGroupManagerActionsSummary {..} =
    Core.object
      ( Core.catMaybes
          [ ("abandoning" Core..=) Core.<$> abandoning,
            ("creating" Core..=) Core.<$> creating,
            ("creatingWithoutRetries" Core..=)
              Core.<$> creatingWithoutRetries,
            ("deleting" Core..=) Core.<$> deleting,
            ("none" Core..=) Core.<$> none,
            ("recreating" Core..=) Core.<$> recreating,
            ("refreshing" Core..=) Core.<$> refreshing,
            ("restarting" Core..=) Core.<$> restarting,
            ("resuming" Core..=) Core.<$> resuming,
            ("starting" Core..=) Core.<$> starting,
            ("stopping" Core..=) Core.<$> stopping,
            ("suspending" Core..=) Core.<$> suspending,
            ("verifying" Core..=) Core.<$> verifying
          ]
      )

--
-- /See:/ 'newInstanceGroupManagerAggregatedList' smart constructor.
data InstanceGroupManagerAggregatedList = InstanceGroupManagerAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of InstanceGroupManagersScopedList resources.
    items :: (Core.Maybe InstanceGroupManagerAggregatedList_Items),
    -- | [Output Only] The resource type, which is always compute#instanceGroupManagerAggregatedList for an aggregated list of managed instance groups.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe InstanceGroupManagerAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagerAggregatedList' with the minimum fields required to make a request.
newInstanceGroupManagerAggregatedList ::
  InstanceGroupManagerAggregatedList
newInstanceGroupManagerAggregatedList =
  InstanceGroupManagerAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#instanceGroupManagerAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagerAggregatedList
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagerAggregatedList"
      ( \o ->
          InstanceGroupManagerAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#instanceGroupManagerAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance
  Core.ToJSON
    InstanceGroupManagerAggregatedList
  where
  toJSON InstanceGroupManagerAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of InstanceGroupManagersScopedList resources.
--
-- /See:/ 'newInstanceGroupManagerAggregatedList_Items' smart constructor.
newtype InstanceGroupManagerAggregatedList_Items = InstanceGroupManagerAggregatedList_Items
  { -- | [Output Only] The name of the scope that contains this set of managed instance groups.
    additional :: (Core.HashMap Core.Text InstanceGroupManagersScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagerAggregatedList_Items' with the minimum fields required to make a request.
newInstanceGroupManagerAggregatedList_Items ::
  -- |  [Output Only] The name of the scope that contains this set of managed instance groups. See 'additional'.
  Core.HashMap Core.Text InstanceGroupManagersScopedList ->
  InstanceGroupManagerAggregatedList_Items
newInstanceGroupManagerAggregatedList_Items additional =
  InstanceGroupManagerAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    InstanceGroupManagerAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagerAggregatedList_Items"
      ( \o ->
          InstanceGroupManagerAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    InstanceGroupManagerAggregatedList_Items
  where
  toJSON InstanceGroupManagerAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newInstanceGroupManagerAggregatedList_Warning' smart constructor.
data InstanceGroupManagerAggregatedList_Warning = InstanceGroupManagerAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe InstanceGroupManagerAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [InstanceGroupManagerAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagerAggregatedList_Warning' with the minimum fields required to make a request.
newInstanceGroupManagerAggregatedList_Warning ::
  InstanceGroupManagerAggregatedList_Warning
newInstanceGroupManagerAggregatedList_Warning =
  InstanceGroupManagerAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagerAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagerAggregatedList_Warning"
      ( \o ->
          InstanceGroupManagerAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    InstanceGroupManagerAggregatedList_Warning
  where
  toJSON InstanceGroupManagerAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newInstanceGroupManagerAggregatedList_Warning_DataItem' smart constructor.
data InstanceGroupManagerAggregatedList_Warning_DataItem = InstanceGroupManagerAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagerAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newInstanceGroupManagerAggregatedList_Warning_DataItem ::
  InstanceGroupManagerAggregatedList_Warning_DataItem
newInstanceGroupManagerAggregatedList_Warning_DataItem =
  InstanceGroupManagerAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagerAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagerAggregatedList_Warning_DataItem"
      ( \o ->
          InstanceGroupManagerAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    InstanceGroupManagerAggregatedList_Warning_DataItem
  where
  toJSON
    InstanceGroupManagerAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

--
-- /See:/ 'newInstanceGroupManagerAutoHealingPolicy' smart constructor.
data InstanceGroupManagerAutoHealingPolicy = InstanceGroupManagerAutoHealingPolicy
  { -- | The URL for the health check that signals autohealing.
    healthCheck :: (Core.Maybe Core.Text),
    -- | The number of seconds that the managed instance group waits before it applies autohealing policies to new instances or recently recreated instances. This initial delay allows instances to initialize and run their startup scripts before the instance group determines that they are UNHEALTHY. This prevents the managed instance group from recreating its instances prematurely. This value must be from range [0, 3600].
    initialDelaySec :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagerAutoHealingPolicy' with the minimum fields required to make a request.
newInstanceGroupManagerAutoHealingPolicy ::
  InstanceGroupManagerAutoHealingPolicy
newInstanceGroupManagerAutoHealingPolicy =
  InstanceGroupManagerAutoHealingPolicy
    { healthCheck = Core.Nothing,
      initialDelaySec = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagerAutoHealingPolicy
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagerAutoHealingPolicy"
      ( \o ->
          InstanceGroupManagerAutoHealingPolicy
            Core.<$> (o Core..:? "healthCheck")
            Core.<*> (o Core..:? "initialDelaySec")
      )

instance
  Core.ToJSON
    InstanceGroupManagerAutoHealingPolicy
  where
  toJSON InstanceGroupManagerAutoHealingPolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("healthCheck" Core..=) Core.<$> healthCheck,
            ("initialDelaySec" Core..=)
              Core.<$> initialDelaySec
          ]
      )

-- | [Output Only] A list of managed instance groups.
--
-- /See:/ 'newInstanceGroupManagerList' smart constructor.
data InstanceGroupManagerList = InstanceGroupManagerList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of InstanceGroupManager resources.
    items :: (Core.Maybe [InstanceGroupManager]),
    -- | [Output Only] The resource type, which is always compute#instanceGroupManagerList for a list of managed instance groups.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe InstanceGroupManagerList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagerList' with the minimum fields required to make a request.
newInstanceGroupManagerList ::
  InstanceGroupManagerList
newInstanceGroupManagerList =
  InstanceGroupManagerList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#instanceGroupManagerList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON InstanceGroupManagerList where
  parseJSON =
    Core.withObject
      "InstanceGroupManagerList"
      ( \o ->
          InstanceGroupManagerList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#instanceGroupManagerList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON InstanceGroupManagerList where
  toJSON InstanceGroupManagerList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newInstanceGroupManagerList_Warning' smart constructor.
data InstanceGroupManagerList_Warning = InstanceGroupManagerList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe InstanceGroupManagerList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [InstanceGroupManagerList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagerList_Warning' with the minimum fields required to make a request.
newInstanceGroupManagerList_Warning ::
  InstanceGroupManagerList_Warning
newInstanceGroupManagerList_Warning =
  InstanceGroupManagerList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagerList_Warning
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagerList_Warning"
      ( \o ->
          InstanceGroupManagerList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON InstanceGroupManagerList_Warning where
  toJSON InstanceGroupManagerList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newInstanceGroupManagerList_Warning_DataItem' smart constructor.
data InstanceGroupManagerList_Warning_DataItem = InstanceGroupManagerList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagerList_Warning_DataItem' with the minimum fields required to make a request.
newInstanceGroupManagerList_Warning_DataItem ::
  InstanceGroupManagerList_Warning_DataItem
newInstanceGroupManagerList_Warning_DataItem =
  InstanceGroupManagerList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagerList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagerList_Warning_DataItem"
      ( \o ->
          InstanceGroupManagerList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    InstanceGroupManagerList_Warning_DataItem
  where
  toJSON InstanceGroupManagerList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newInstanceGroupManagerStatus' smart constructor.
data InstanceGroupManagerStatus = InstanceGroupManagerStatus
  { -- | [Output Only] The URL of the Autoscaler that targets this instance group manager.
    autoscaler :: (Core.Maybe Core.Text),
    -- | [Output Only] A bit indicating whether the managed instance group is in a stable state. A stable state means that: none of the instances in the managed instance group is currently undergoing any type of change (for example, creation, restart, or deletion); no future changes are scheduled for instances in the managed instance group; and the managed instance group itself is not being modified.
    isStable :: (Core.Maybe Core.Bool),
    -- | [Output Only] Stateful status of the given Instance Group Manager.
    stateful :: (Core.Maybe InstanceGroupManagerStatusStateful),
    -- | [Output Only] A status of consistency of Instances\' versions with their target version specified by version field on Instance Group Manager.
    versionTarget :: (Core.Maybe InstanceGroupManagerStatusVersionTarget)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagerStatus' with the minimum fields required to make a request.
newInstanceGroupManagerStatus ::
  InstanceGroupManagerStatus
newInstanceGroupManagerStatus =
  InstanceGroupManagerStatus
    { autoscaler = Core.Nothing,
      isStable = Core.Nothing,
      stateful = Core.Nothing,
      versionTarget = Core.Nothing
    }

instance Core.FromJSON InstanceGroupManagerStatus where
  parseJSON =
    Core.withObject
      "InstanceGroupManagerStatus"
      ( \o ->
          InstanceGroupManagerStatus
            Core.<$> (o Core..:? "autoscaler")
            Core.<*> (o Core..:? "isStable")
            Core.<*> (o Core..:? "stateful")
            Core.<*> (o Core..:? "versionTarget")
      )

instance Core.ToJSON InstanceGroupManagerStatus where
  toJSON InstanceGroupManagerStatus {..} =
    Core.object
      ( Core.catMaybes
          [ ("autoscaler" Core..=) Core.<$> autoscaler,
            ("isStable" Core..=) Core.<$> isStable,
            ("stateful" Core..=) Core.<$> stateful,
            ("versionTarget" Core..=) Core.<$> versionTarget
          ]
      )

--
-- /See:/ 'newInstanceGroupManagerStatusStateful' smart constructor.
data InstanceGroupManagerStatusStateful = InstanceGroupManagerStatusStateful
  { -- | [Output Only] A bit indicating whether the managed instance group has stateful configuration, that is, if you have configured any items in a stateful policy or in per-instance configs. The group might report that it has no stateful configuration even when there is still some preserved state on a managed instance, for example, if you have deleted all PICs but not yet applied those deletions.
    hasStatefulConfig :: (Core.Maybe Core.Bool),
    -- | [Output Only] Status of per-instance configurations on the instance.
    perInstanceConfigs :: (Core.Maybe InstanceGroupManagerStatusStatefulPerInstanceConfigs)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagerStatusStateful' with the minimum fields required to make a request.
newInstanceGroupManagerStatusStateful ::
  InstanceGroupManagerStatusStateful
newInstanceGroupManagerStatusStateful =
  InstanceGroupManagerStatusStateful
    { hasStatefulConfig = Core.Nothing,
      perInstanceConfigs = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagerStatusStateful
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagerStatusStateful"
      ( \o ->
          InstanceGroupManagerStatusStateful
            Core.<$> (o Core..:? "hasStatefulConfig")
            Core.<*> (o Core..:? "perInstanceConfigs")
      )

instance
  Core.ToJSON
    InstanceGroupManagerStatusStateful
  where
  toJSON InstanceGroupManagerStatusStateful {..} =
    Core.object
      ( Core.catMaybes
          [ ("hasStatefulConfig" Core..=)
              Core.<$> hasStatefulConfig,
            ("perInstanceConfigs" Core..=)
              Core.<$> perInstanceConfigs
          ]
      )

--
-- /See:/ 'newInstanceGroupManagerStatusStatefulPerInstanceConfigs' smart constructor.
newtype InstanceGroupManagerStatusStatefulPerInstanceConfigs = InstanceGroupManagerStatusStatefulPerInstanceConfigs
  { -- | A bit indicating if all of the group\'s per-instance configurations (listed in the output of a listPerInstanceConfigs API call) have status EFFECTIVE or there are no per-instance-configs.
    allEffective :: (Core.Maybe Core.Bool)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagerStatusStatefulPerInstanceConfigs' with the minimum fields required to make a request.
newInstanceGroupManagerStatusStatefulPerInstanceConfigs ::
  InstanceGroupManagerStatusStatefulPerInstanceConfigs
newInstanceGroupManagerStatusStatefulPerInstanceConfigs =
  InstanceGroupManagerStatusStatefulPerInstanceConfigs
    { allEffective = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagerStatusStatefulPerInstanceConfigs
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagerStatusStatefulPerInstanceConfigs"
      ( \o ->
          InstanceGroupManagerStatusStatefulPerInstanceConfigs
            Core.<$> (o Core..:? "allEffective")
      )

instance
  Core.ToJSON
    InstanceGroupManagerStatusStatefulPerInstanceConfigs
  where
  toJSON
    InstanceGroupManagerStatusStatefulPerInstanceConfigs {..} =
      Core.object
        ( Core.catMaybes
            [("allEffective" Core..=) Core.<$> allEffective]
        )

--
-- /See:/ 'newInstanceGroupManagerStatusVersionTarget' smart constructor.
newtype InstanceGroupManagerStatusVersionTarget = InstanceGroupManagerStatusVersionTarget
  { -- | [Output Only] A bit indicating whether version target has been reached in this managed instance group, i.e. all instances are in their target version. Instances\' target version are specified by version field on Instance Group Manager.
    isReached :: (Core.Maybe Core.Bool)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagerStatusVersionTarget' with the minimum fields required to make a request.
newInstanceGroupManagerStatusVersionTarget ::
  InstanceGroupManagerStatusVersionTarget
newInstanceGroupManagerStatusVersionTarget =
  InstanceGroupManagerStatusVersionTarget {isReached = Core.Nothing}

instance
  Core.FromJSON
    InstanceGroupManagerStatusVersionTarget
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagerStatusVersionTarget"
      ( \o ->
          InstanceGroupManagerStatusVersionTarget
            Core.<$> (o Core..:? "isReached")
      )

instance
  Core.ToJSON
    InstanceGroupManagerStatusVersionTarget
  where
  toJSON InstanceGroupManagerStatusVersionTarget {..} =
    Core.object
      ( Core.catMaybes
          [("isReached" Core..=) Core.<$> isReached]
      )

--
-- /See:/ 'newInstanceGroupManagerUpdatePolicy' smart constructor.
data InstanceGroupManagerUpdatePolicy = InstanceGroupManagerUpdatePolicy
  { -- | The instance redistribution policy for regional managed instance groups. Valid values are: - PROACTIVE (default): The group attempts to maintain an even distribution of VM instances across zones in the region. - NONE: For non-autoscaled groups, proactive redistribution is disabled.
    instanceRedistributionType ::
      ( Core.Maybe
          InstanceGroupManagerUpdatePolicy_InstanceRedistributionType
      ),
    -- | The maximum number of instances that can be created above the specified targetSize during the update process. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxSurge is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxSurge.
    maxSurge :: (Core.Maybe FixedOrPercent),
    -- | The maximum number of instances that can be unavailable during the update process. An instance is considered available if all of the following conditions are satisfied: - The instance\'s status is RUNNING. - If there is a health check on the instance group, the instance\'s health check status must be HEALTHY at least once. If there is no health check on the group, then the instance only needs to have a status of RUNNING to be considered available. This value can be either a fixed number or, if the group has 10 or more instances, a percentage. If you set a percentage, the number of instances is rounded if necessary. The default value for maxUnavailable is a fixed value equal to the number of zones in which the managed instance group operates. At least one of either maxSurge or maxUnavailable must be greater than 0. Learn more about maxUnavailable.
    maxUnavailable :: (Core.Maybe FixedOrPercent),
    -- | Minimal action to be taken on an instance. Use this option to minimize disruption as much as possible or to apply a more disruptive action than is necessary. - To limit disruption as much as possible, set the minimal action to REFRESH. If your update requires a more disruptive action, Compute Engine performs the necessary action to execute the update. - To apply a more disruptive action than is strictly necessary, set the minimal action to RESTART or REPLACE. For example, Compute Engine does not need to restart a VM to change its metadata. But if your application reads instance metadata only when a VM is restarted, you can set the minimal action to RESTART in order to pick up metadata changes.
    minimalAction :: (Core.Maybe InstanceGroupManagerUpdatePolicy_MinimalAction),
    -- | Most disruptive action that is allowed to be taken on an instance. You can specify either NONE to forbid any actions, REFRESH to allow actions that do not need instance restart, RESTART to allow actions that can be applied without instance replacing or REPLACE to allow all possible actions. If the Updater determines that the minimal update action needed is more disruptive than most disruptive allowed action you specify it will not perform the update at all.
    mostDisruptiveAllowedAction ::
      ( Core.Maybe
          InstanceGroupManagerUpdatePolicy_MostDisruptiveAllowedAction
      ),
    -- | What action should be used to replace instances. See minimal_action.REPLACE
    replacementMethod :: (Core.Maybe InstanceGroupManagerUpdatePolicy_ReplacementMethod),
    -- | The type of update process. You can specify either PROACTIVE so that the instance group manager proactively executes actions in order to bring instances to their target versions or OPPORTUNISTIC so that no action is proactively executed but the update will be performed as part of other actions (for example, resizes or recreateInstances calls).
    type' :: (Core.Maybe InstanceGroupManagerUpdatePolicy_Type)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagerUpdatePolicy' with the minimum fields required to make a request.
newInstanceGroupManagerUpdatePolicy ::
  InstanceGroupManagerUpdatePolicy
newInstanceGroupManagerUpdatePolicy =
  InstanceGroupManagerUpdatePolicy
    { instanceRedistributionType = Core.Nothing,
      maxSurge = Core.Nothing,
      maxUnavailable = Core.Nothing,
      minimalAction = Core.Nothing,
      mostDisruptiveAllowedAction = Core.Nothing,
      replacementMethod = Core.Nothing,
      type' = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagerUpdatePolicy
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagerUpdatePolicy"
      ( \o ->
          InstanceGroupManagerUpdatePolicy
            Core.<$> (o Core..:? "instanceRedistributionType")
            Core.<*> (o Core..:? "maxSurge")
            Core.<*> (o Core..:? "maxUnavailable")
            Core.<*> (o Core..:? "minimalAction")
            Core.<*> (o Core..:? "mostDisruptiveAllowedAction")
            Core.<*> (o Core..:? "replacementMethod")
            Core.<*> (o Core..:? "type")
      )

instance Core.ToJSON InstanceGroupManagerUpdatePolicy where
  toJSON InstanceGroupManagerUpdatePolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("instanceRedistributionType" Core..=)
              Core.<$> instanceRedistributionType,
            ("maxSurge" Core..=) Core.<$> maxSurge,
            ("maxUnavailable" Core..=) Core.<$> maxUnavailable,
            ("minimalAction" Core..=) Core.<$> minimalAction,
            ("mostDisruptiveAllowedAction" Core..=)
              Core.<$> mostDisruptiveAllowedAction,
            ("replacementMethod" Core..=)
              Core.<$> replacementMethod,
            ("type" Core..=) Core.<$> type'
          ]
      )

--
-- /See:/ 'newInstanceGroupManagerVersion' smart constructor.
data InstanceGroupManagerVersion = InstanceGroupManagerVersion
  { -- | The URL of the instance template that is specified for this managed instance group. The group uses this template to create new instances in the managed instance group until the @targetSize@ for this version is reached. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group\'s updatePolicy.type to PROACTIVE; in those cases, existing instances are updated until the @targetSize@ for this version is reached.
    instanceTemplate :: (Core.Maybe Core.Text),
    -- | Name of the version. Unique among all versions in the scope of this managed instance group.
    name :: (Core.Maybe Core.Text),
    -- | Specifies the intended number of instances to be created from the instanceTemplate. The final number of instances created from the template will be equal to: - If expressed as a fixed number, the minimum of either targetSize.fixed or instanceGroupManager.targetSize is used. - if expressed as a percent, the targetSize would be (targetSize.percent\/100 * InstanceGroupManager.targetSize) If there is a remainder, the number is rounded. If unset, this version will update any remaining instances not updated by another version. Read Starting a canary update for more information.
    targetSize :: (Core.Maybe FixedOrPercent)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagerVersion' with the minimum fields required to make a request.
newInstanceGroupManagerVersion ::
  InstanceGroupManagerVersion
newInstanceGroupManagerVersion =
  InstanceGroupManagerVersion
    { instanceTemplate = Core.Nothing,
      name = Core.Nothing,
      targetSize = Core.Nothing
    }

instance Core.FromJSON InstanceGroupManagerVersion where
  parseJSON =
    Core.withObject
      "InstanceGroupManagerVersion"
      ( \o ->
          InstanceGroupManagerVersion
            Core.<$> (o Core..:? "instanceTemplate")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "targetSize")
      )

instance Core.ToJSON InstanceGroupManagerVersion where
  toJSON InstanceGroupManagerVersion {..} =
    Core.object
      ( Core.catMaybes
          [ ("instanceTemplate" Core..=)
              Core.<$> instanceTemplate,
            ("name" Core..=) Core.<$> name,
            ("targetSize" Core..=) Core.<$> targetSize
          ]
      )

--
-- /See:/ 'newInstanceGroupManagersAbandonInstancesRequest' smart constructor.
newtype InstanceGroupManagersAbandonInstancesRequest = InstanceGroupManagersAbandonInstancesRequest
  { -- | The URLs of one or more instances to abandon. This can be a full URL or a partial URL, such as zones\/[ZONE]\/instances\/[INSTANCE_NAME].
    instances :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagersAbandonInstancesRequest' with the minimum fields required to make a request.
newInstanceGroupManagersAbandonInstancesRequest ::
  InstanceGroupManagersAbandonInstancesRequest
newInstanceGroupManagersAbandonInstancesRequest =
  InstanceGroupManagersAbandonInstancesRequest {instances = Core.Nothing}

instance
  Core.FromJSON
    InstanceGroupManagersAbandonInstancesRequest
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagersAbandonInstancesRequest"
      ( \o ->
          InstanceGroupManagersAbandonInstancesRequest
            Core.<$> (o Core..:? "instances")
      )

instance
  Core.ToJSON
    InstanceGroupManagersAbandonInstancesRequest
  where
  toJSON
    InstanceGroupManagersAbandonInstancesRequest {..} =
      Core.object
        ( Core.catMaybes
            [("instances" Core..=) Core.<$> instances]
        )

-- | InstanceGroupManagers.applyUpdatesToInstances
--
-- /See:/ 'newInstanceGroupManagersApplyUpdatesRequest' smart constructor.
data InstanceGroupManagersApplyUpdatesRequest = InstanceGroupManagersApplyUpdatesRequest
  { -- | Flag to update all instances instead of specified list of “instances”. If the flag is set to true then the instances may not be specified in the request.
    allInstances :: (Core.Maybe Core.Bool),
    -- | The list of URLs of one or more instances for which you want to apply updates. Each URL can be a full URL or a partial URL, such as zones\/[ZONE]\/instances\/[INSTANCE_NAME].
    instances :: (Core.Maybe [Core.Text]),
    -- | The minimal action that you want to perform on each instance during the update: - REPLACE: At minimum, delete the instance and create it again. - RESTART: Stop the instance and start it again. - REFRESH: Do not stop the instance. - NONE: Do not disrupt the instance at all. By default, the minimum action is NONE. If your update requires a more disruptive action than you set with this flag, the necessary action is performed to execute the update.
    minimalAction :: (Core.Maybe InstanceGroupManagersApplyUpdatesRequest_MinimalAction),
    -- | The most disruptive action that you want to perform on each instance during the update: - REPLACE: Delete the instance and create it again. - RESTART: Stop the instance and start it again. - REFRESH: Do not stop the instance. - NONE: Do not disrupt the instance at all. By default, the most disruptive allowed action is REPLACE. If your update requires a more disruptive action than you set with this flag, the update request will fail.
    mostDisruptiveAllowedAction ::
      ( Core.Maybe
          InstanceGroupManagersApplyUpdatesRequest_MostDisruptiveAllowedAction
      )
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagersApplyUpdatesRequest' with the minimum fields required to make a request.
newInstanceGroupManagersApplyUpdatesRequest ::
  InstanceGroupManagersApplyUpdatesRequest
newInstanceGroupManagersApplyUpdatesRequest =
  InstanceGroupManagersApplyUpdatesRequest
    { allInstances = Core.Nothing,
      instances = Core.Nothing,
      minimalAction = Core.Nothing,
      mostDisruptiveAllowedAction = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagersApplyUpdatesRequest
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagersApplyUpdatesRequest"
      ( \o ->
          InstanceGroupManagersApplyUpdatesRequest
            Core.<$> (o Core..:? "allInstances")
            Core.<*> (o Core..:? "instances")
            Core.<*> (o Core..:? "minimalAction")
            Core.<*> (o Core..:? "mostDisruptiveAllowedAction")
      )

instance
  Core.ToJSON
    InstanceGroupManagersApplyUpdatesRequest
  where
  toJSON InstanceGroupManagersApplyUpdatesRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("allInstances" Core..=) Core.<$> allInstances,
            ("instances" Core..=) Core.<$> instances,
            ("minimalAction" Core..=) Core.<$> minimalAction,
            ("mostDisruptiveAllowedAction" Core..=)
              Core.<$> mostDisruptiveAllowedAction
          ]
      )

-- | InstanceGroupManagers.createInstances
--
-- /See:/ 'newInstanceGroupManagersCreateInstancesRequest' smart constructor.
newtype InstanceGroupManagersCreateInstancesRequest = InstanceGroupManagersCreateInstancesRequest
  { -- | [Required] List of specifications of per-instance configs.
    instances :: (Core.Maybe [PerInstanceConfig])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagersCreateInstancesRequest' with the minimum fields required to make a request.
newInstanceGroupManagersCreateInstancesRequest ::
  InstanceGroupManagersCreateInstancesRequest
newInstanceGroupManagersCreateInstancesRequest =
  InstanceGroupManagersCreateInstancesRequest {instances = Core.Nothing}

instance
  Core.FromJSON
    InstanceGroupManagersCreateInstancesRequest
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagersCreateInstancesRequest"
      ( \o ->
          InstanceGroupManagersCreateInstancesRequest
            Core.<$> (o Core..:? "instances")
      )

instance
  Core.ToJSON
    InstanceGroupManagersCreateInstancesRequest
  where
  toJSON
    InstanceGroupManagersCreateInstancesRequest {..} =
      Core.object
        ( Core.catMaybes
            [("instances" Core..=) Core.<$> instances]
        )

--
-- /See:/ 'newInstanceGroupManagersDeleteInstancesRequest' smart constructor.
data InstanceGroupManagersDeleteInstancesRequest = InstanceGroupManagersDeleteInstancesRequest
  { -- | The URLs of one or more instances to delete. This can be a full URL or a partial URL, such as zones\/[ZONE]\/instances\/[INSTANCE_NAME]. Queued instances do not have URL and can be deleted only by name. One cannot specify both URLs and names in a single request.
    instances :: (Core.Maybe [Core.Text]),
    -- | Specifies whether the request should proceed despite the inclusion of instances that are not members of the group or that are already in the process of being deleted or abandoned. If this field is set to @false@ and such an instance is specified in the request, the operation fails. The operation always fails if the request contains a malformed instance URL or a reference to an instance that exists in a zone or region other than the group\'s zone or region.
    skipInstancesOnValidationError :: (Core.Maybe Core.Bool)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagersDeleteInstancesRequest' with the minimum fields required to make a request.
newInstanceGroupManagersDeleteInstancesRequest ::
  InstanceGroupManagersDeleteInstancesRequest
newInstanceGroupManagersDeleteInstancesRequest =
  InstanceGroupManagersDeleteInstancesRequest
    { instances = Core.Nothing,
      skipInstancesOnValidationError = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagersDeleteInstancesRequest
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagersDeleteInstancesRequest"
      ( \o ->
          InstanceGroupManagersDeleteInstancesRequest
            Core.<$> (o Core..:? "instances")
            Core.<*> (o Core..:? "skipInstancesOnValidationError")
      )

instance
  Core.ToJSON
    InstanceGroupManagersDeleteInstancesRequest
  where
  toJSON
    InstanceGroupManagersDeleteInstancesRequest {..} =
      Core.object
        ( Core.catMaybes
            [ ("instances" Core..=) Core.<$> instances,
              ("skipInstancesOnValidationError" Core..=)
                Core.<$> skipInstancesOnValidationError
            ]
        )

-- | InstanceGroupManagers.deletePerInstanceConfigs
--
-- /See:/ 'newInstanceGroupManagersDeletePerInstanceConfigsReq' smart constructor.
newtype InstanceGroupManagersDeletePerInstanceConfigsReq = InstanceGroupManagersDeletePerInstanceConfigsReq
  { -- | The list of instance names for which we want to delete per-instance configs on this managed instance group.
    names :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagersDeletePerInstanceConfigsReq' with the minimum fields required to make a request.
newInstanceGroupManagersDeletePerInstanceConfigsReq ::
  InstanceGroupManagersDeletePerInstanceConfigsReq
newInstanceGroupManagersDeletePerInstanceConfigsReq =
  InstanceGroupManagersDeletePerInstanceConfigsReq {names = Core.Nothing}

instance
  Core.FromJSON
    InstanceGroupManagersDeletePerInstanceConfigsReq
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagersDeletePerInstanceConfigsReq"
      ( \o ->
          InstanceGroupManagersDeletePerInstanceConfigsReq
            Core.<$> (o Core..:? "names")
      )

instance
  Core.ToJSON
    InstanceGroupManagersDeletePerInstanceConfigsReq
  where
  toJSON
    InstanceGroupManagersDeletePerInstanceConfigsReq {..} =
      Core.object
        (Core.catMaybes [("names" Core..=) Core.<$> names])

--
-- /See:/ 'newInstanceGroupManagersListErrorsResponse' smart constructor.
data InstanceGroupManagersListErrorsResponse = InstanceGroupManagersListErrorsResponse
  { -- | [Output Only] The list of errors of the managed instance group.
    items :: (Core.Maybe [InstanceManagedByIgmError]),
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagersListErrorsResponse' with the minimum fields required to make a request.
newInstanceGroupManagersListErrorsResponse ::
  InstanceGroupManagersListErrorsResponse
newInstanceGroupManagersListErrorsResponse =
  InstanceGroupManagersListErrorsResponse
    { items = Core.Nothing,
      nextPageToken = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagersListErrorsResponse
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagersListErrorsResponse"
      ( \o ->
          InstanceGroupManagersListErrorsResponse
            Core.<$> (o Core..:? "items")
            Core.<*> (o Core..:? "nextPageToken")
      )

instance
  Core.ToJSON
    InstanceGroupManagersListErrorsResponse
  where
  toJSON InstanceGroupManagersListErrorsResponse {..} =
    Core.object
      ( Core.catMaybes
          [ ("items" Core..=) Core.<$> items,
            ("nextPageToken" Core..=) Core.<$> nextPageToken
          ]
      )

--
-- /See:/ 'newInstanceGroupManagersListManagedInstancesResponse' smart constructor.
data InstanceGroupManagersListManagedInstancesResponse = InstanceGroupManagersListManagedInstancesResponse
  { -- | [Output Only] The list of instances in the managed instance group.
    managedInstances :: (Core.Maybe [ManagedInstance]),
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagersListManagedInstancesResponse' with the minimum fields required to make a request.
newInstanceGroupManagersListManagedInstancesResponse ::
  InstanceGroupManagersListManagedInstancesResponse
newInstanceGroupManagersListManagedInstancesResponse =
  InstanceGroupManagersListManagedInstancesResponse
    { managedInstances = Core.Nothing,
      nextPageToken = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagersListManagedInstancesResponse
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagersListManagedInstancesResponse"
      ( \o ->
          InstanceGroupManagersListManagedInstancesResponse
            Core.<$> (o Core..:? "managedInstances")
              Core.<*> (o Core..:? "nextPageToken")
      )

instance
  Core.ToJSON
    InstanceGroupManagersListManagedInstancesResponse
  where
  toJSON
    InstanceGroupManagersListManagedInstancesResponse {..} =
      Core.object
        ( Core.catMaybes
            [ ("managedInstances" Core..=)
                Core.<$> managedInstances,
              ("nextPageToken" Core..=) Core.<$> nextPageToken
            ]
        )

--
-- /See:/ 'newInstanceGroupManagersListPerInstanceConfigsResp' smart constructor.
data InstanceGroupManagersListPerInstanceConfigsResp = InstanceGroupManagersListPerInstanceConfigsResp
  { -- | [Output Only] The list of PerInstanceConfig.
    items :: (Core.Maybe [PerInstanceConfig]),
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning ::
      ( Core.Maybe
          InstanceGroupManagersListPerInstanceConfigsResp_Warning
      )
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagersListPerInstanceConfigsResp' with the minimum fields required to make a request.
newInstanceGroupManagersListPerInstanceConfigsResp ::
  InstanceGroupManagersListPerInstanceConfigsResp
newInstanceGroupManagersListPerInstanceConfigsResp =
  InstanceGroupManagersListPerInstanceConfigsResp
    { items = Core.Nothing,
      nextPageToken = Core.Nothing,
      warning = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagersListPerInstanceConfigsResp
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagersListPerInstanceConfigsResp"
      ( \o ->
          InstanceGroupManagersListPerInstanceConfigsResp
            Core.<$> (o Core..:? "items")
              Core.<*> (o Core..:? "nextPageToken")
              Core.<*> (o Core..:? "warning")
      )

instance
  Core.ToJSON
    InstanceGroupManagersListPerInstanceConfigsResp
  where
  toJSON
    InstanceGroupManagersListPerInstanceConfigsResp {..} =
      Core.object
        ( Core.catMaybes
            [ ("items" Core..=) Core.<$> items,
              ("nextPageToken" Core..=) Core.<$> nextPageToken,
              ("warning" Core..=) Core.<$> warning
            ]
        )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newInstanceGroupManagersListPerInstanceConfigsResp_Warning' smart constructor.
data InstanceGroupManagersListPerInstanceConfigsResp_Warning = InstanceGroupManagersListPerInstanceConfigsResp_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code ::
      ( Core.Maybe
          InstanceGroupManagersListPerInstanceConfigsResp_Warning_Code
      ),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' ::
      ( Core.Maybe
          [InstanceGroupManagersListPerInstanceConfigsResp_Warning_DataItem]
      ),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagersListPerInstanceConfigsResp_Warning' with the minimum fields required to make a request.
newInstanceGroupManagersListPerInstanceConfigsResp_Warning ::
  InstanceGroupManagersListPerInstanceConfigsResp_Warning
newInstanceGroupManagersListPerInstanceConfigsResp_Warning =
  InstanceGroupManagersListPerInstanceConfigsResp_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagersListPerInstanceConfigsResp_Warning
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagersListPerInstanceConfigsResp_Warning"
      ( \o ->
          InstanceGroupManagersListPerInstanceConfigsResp_Warning
            Core.<$> (o Core..:? "code") Core.<*> (o Core..:? "data")
              Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    InstanceGroupManagersListPerInstanceConfigsResp_Warning
  where
  toJSON
    InstanceGroupManagersListPerInstanceConfigsResp_Warning {..} =
      Core.object
        ( Core.catMaybes
            [ ("code" Core..=) Core.<$> code,
              ("data" Core..=) Core.<$> data',
              ("message" Core..=) Core.<$> message
            ]
        )

--
-- /See:/ 'newInstanceGroupManagersListPerInstanceConfigsResp_Warning_DataItem' smart constructor.
data InstanceGroupManagersListPerInstanceConfigsResp_Warning_DataItem = InstanceGroupManagersListPerInstanceConfigsResp_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagersListPerInstanceConfigsResp_Warning_DataItem' with the minimum fields required to make a request.
newInstanceGroupManagersListPerInstanceConfigsResp_Warning_DataItem ::
  InstanceGroupManagersListPerInstanceConfigsResp_Warning_DataItem
newInstanceGroupManagersListPerInstanceConfigsResp_Warning_DataItem =
  InstanceGroupManagersListPerInstanceConfigsResp_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagersListPerInstanceConfigsResp_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagersListPerInstanceConfigsResp_Warning_DataItem"
      ( \o ->
          InstanceGroupManagersListPerInstanceConfigsResp_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    InstanceGroupManagersListPerInstanceConfigsResp_Warning_DataItem
  where
  toJSON
    InstanceGroupManagersListPerInstanceConfigsResp_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | InstanceGroupManagers.patchPerInstanceConfigs
--
-- /See:/ 'newInstanceGroupManagersPatchPerInstanceConfigsReq' smart constructor.
newtype InstanceGroupManagersPatchPerInstanceConfigsReq = InstanceGroupManagersPatchPerInstanceConfigsReq
  { -- | The list of per-instance configurations to insert or patch on this managed instance group.
    perInstanceConfigs :: (Core.Maybe [PerInstanceConfig])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagersPatchPerInstanceConfigsReq' with the minimum fields required to make a request.
newInstanceGroupManagersPatchPerInstanceConfigsReq ::
  InstanceGroupManagersPatchPerInstanceConfigsReq
newInstanceGroupManagersPatchPerInstanceConfigsReq =
  InstanceGroupManagersPatchPerInstanceConfigsReq
    { perInstanceConfigs = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagersPatchPerInstanceConfigsReq
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagersPatchPerInstanceConfigsReq"
      ( \o ->
          InstanceGroupManagersPatchPerInstanceConfigsReq
            Core.<$> (o Core..:? "perInstanceConfigs")
      )

instance
  Core.ToJSON
    InstanceGroupManagersPatchPerInstanceConfigsReq
  where
  toJSON
    InstanceGroupManagersPatchPerInstanceConfigsReq {..} =
      Core.object
        ( Core.catMaybes
            [ ("perInstanceConfigs" Core..=)
                Core.<$> perInstanceConfigs
            ]
        )

--
-- /See:/ 'newInstanceGroupManagersRecreateInstancesRequest' smart constructor.
newtype InstanceGroupManagersRecreateInstancesRequest = InstanceGroupManagersRecreateInstancesRequest
  { -- | The URLs of one or more instances to recreate. This can be a full URL or a partial URL, such as zones\/[ZONE]\/instances\/[INSTANCE_NAME].
    instances :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagersRecreateInstancesRequest' with the minimum fields required to make a request.
newInstanceGroupManagersRecreateInstancesRequest ::
  InstanceGroupManagersRecreateInstancesRequest
newInstanceGroupManagersRecreateInstancesRequest =
  InstanceGroupManagersRecreateInstancesRequest {instances = Core.Nothing}

instance
  Core.FromJSON
    InstanceGroupManagersRecreateInstancesRequest
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagersRecreateInstancesRequest"
      ( \o ->
          InstanceGroupManagersRecreateInstancesRequest
            Core.<$> (o Core..:? "instances")
      )

instance
  Core.ToJSON
    InstanceGroupManagersRecreateInstancesRequest
  where
  toJSON
    InstanceGroupManagersRecreateInstancesRequest {..} =
      Core.object
        ( Core.catMaybes
            [("instances" Core..=) Core.<$> instances]
        )

--
-- /See:/ 'newInstanceGroupManagersScopedList' smart constructor.
data InstanceGroupManagersScopedList = InstanceGroupManagersScopedList
  { -- | [Output Only] The list of managed instance groups that are contained in the specified project and zone.
    instanceGroupManagers :: (Core.Maybe [InstanceGroupManager]),
    -- | [Output Only] The warning that replaces the list of managed instance groups when the list is empty.
    warning :: (Core.Maybe InstanceGroupManagersScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagersScopedList' with the minimum fields required to make a request.
newInstanceGroupManagersScopedList ::
  InstanceGroupManagersScopedList
newInstanceGroupManagersScopedList =
  InstanceGroupManagersScopedList
    { instanceGroupManagers = Core.Nothing,
      warning = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagersScopedList
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagersScopedList"
      ( \o ->
          InstanceGroupManagersScopedList
            Core.<$> (o Core..:? "instanceGroupManagers")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON InstanceGroupManagersScopedList where
  toJSON InstanceGroupManagersScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("instanceGroupManagers" Core..=)
              Core.<$> instanceGroupManagers,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] The warning that replaces the list of managed instance groups when the list is empty.
--
-- /See:/ 'newInstanceGroupManagersScopedList_Warning' smart constructor.
data InstanceGroupManagersScopedList_Warning = InstanceGroupManagersScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe InstanceGroupManagersScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [InstanceGroupManagersScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagersScopedList_Warning' with the minimum fields required to make a request.
newInstanceGroupManagersScopedList_Warning ::
  InstanceGroupManagersScopedList_Warning
newInstanceGroupManagersScopedList_Warning =
  InstanceGroupManagersScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagersScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagersScopedList_Warning"
      ( \o ->
          InstanceGroupManagersScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    InstanceGroupManagersScopedList_Warning
  where
  toJSON InstanceGroupManagersScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newInstanceGroupManagersScopedList_Warning_DataItem' smart constructor.
data InstanceGroupManagersScopedList_Warning_DataItem = InstanceGroupManagersScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagersScopedList_Warning_DataItem' with the minimum fields required to make a request.
newInstanceGroupManagersScopedList_Warning_DataItem ::
  InstanceGroupManagersScopedList_Warning_DataItem
newInstanceGroupManagersScopedList_Warning_DataItem =
  InstanceGroupManagersScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagersScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagersScopedList_Warning_DataItem"
      ( \o ->
          InstanceGroupManagersScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    InstanceGroupManagersScopedList_Warning_DataItem
  where
  toJSON
    InstanceGroupManagersScopedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

--
-- /See:/ 'newInstanceGroupManagersSetInstanceTemplateRequest' smart constructor.
newtype InstanceGroupManagersSetInstanceTemplateRequest = InstanceGroupManagersSetInstanceTemplateRequest
  { -- | The URL of the instance template that is specified for this managed instance group. The group uses this template to create all new instances in the managed instance group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group\'s updatePolicy.type to PROACTIVE.
    instanceTemplate :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagersSetInstanceTemplateRequest' with the minimum fields required to make a request.
newInstanceGroupManagersSetInstanceTemplateRequest ::
  InstanceGroupManagersSetInstanceTemplateRequest
newInstanceGroupManagersSetInstanceTemplateRequest =
  InstanceGroupManagersSetInstanceTemplateRequest
    { instanceTemplate = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagersSetInstanceTemplateRequest
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagersSetInstanceTemplateRequest"
      ( \o ->
          InstanceGroupManagersSetInstanceTemplateRequest
            Core.<$> (o Core..:? "instanceTemplate")
      )

instance
  Core.ToJSON
    InstanceGroupManagersSetInstanceTemplateRequest
  where
  toJSON
    InstanceGroupManagersSetInstanceTemplateRequest {..} =
      Core.object
        ( Core.catMaybes
            [ ("instanceTemplate" Core..=)
                Core.<$> instanceTemplate
            ]
        )

--
-- /See:/ 'newInstanceGroupManagersSetTargetPoolsRequest' smart constructor.
data InstanceGroupManagersSetTargetPoolsRequest = InstanceGroupManagersSetTargetPoolsRequest
  { -- | The fingerprint of the target pools information. Use this optional property to prevent conflicts when multiple users change the target pools settings concurrently. Obtain the fingerprint with the instanceGroupManagers.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | The list of target pool URLs that instances in this managed instance group belong to. The managed instance group applies these target pools to all of the instances in the group. Existing instances and new instances in the group all receive these target pool settings.
    targetPools :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagersSetTargetPoolsRequest' with the minimum fields required to make a request.
newInstanceGroupManagersSetTargetPoolsRequest ::
  InstanceGroupManagersSetTargetPoolsRequest
newInstanceGroupManagersSetTargetPoolsRequest =
  InstanceGroupManagersSetTargetPoolsRequest
    { fingerprint = Core.Nothing,
      targetPools = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagersSetTargetPoolsRequest
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagersSetTargetPoolsRequest"
      ( \o ->
          InstanceGroupManagersSetTargetPoolsRequest
            Core.<$> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "targetPools")
      )

instance
  Core.ToJSON
    InstanceGroupManagersSetTargetPoolsRequest
  where
  toJSON InstanceGroupManagersSetTargetPoolsRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("fingerprint" Core..=) Core.<$> fingerprint,
            ("targetPools" Core..=) Core.<$> targetPools
          ]
      )

-- | InstanceGroupManagers.updatePerInstanceConfigs
--
-- /See:/ 'newInstanceGroupManagersUpdatePerInstanceConfigsReq' smart constructor.
newtype InstanceGroupManagersUpdatePerInstanceConfigsReq = InstanceGroupManagersUpdatePerInstanceConfigsReq
  { -- | The list of per-instance configurations to insert or patch on this managed instance group.
    perInstanceConfigs :: (Core.Maybe [PerInstanceConfig])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupManagersUpdatePerInstanceConfigsReq' with the minimum fields required to make a request.
newInstanceGroupManagersUpdatePerInstanceConfigsReq ::
  InstanceGroupManagersUpdatePerInstanceConfigsReq
newInstanceGroupManagersUpdatePerInstanceConfigsReq =
  InstanceGroupManagersUpdatePerInstanceConfigsReq
    { perInstanceConfigs = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupManagersUpdatePerInstanceConfigsReq
  where
  parseJSON =
    Core.withObject
      "InstanceGroupManagersUpdatePerInstanceConfigsReq"
      ( \o ->
          InstanceGroupManagersUpdatePerInstanceConfigsReq
            Core.<$> (o Core..:? "perInstanceConfigs")
      )

instance
  Core.ToJSON
    InstanceGroupManagersUpdatePerInstanceConfigsReq
  where
  toJSON
    InstanceGroupManagersUpdatePerInstanceConfigsReq {..} =
      Core.object
        ( Core.catMaybes
            [ ("perInstanceConfigs" Core..=)
                Core.<$> perInstanceConfigs
            ]
        )

--
-- /See:/ 'newInstanceGroupsAddInstancesRequest' smart constructor.
newtype InstanceGroupsAddInstancesRequest = InstanceGroupsAddInstancesRequest
  { -- | The list of instances to add to the instance group.
    instances :: (Core.Maybe [InstanceReference])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupsAddInstancesRequest' with the minimum fields required to make a request.
newInstanceGroupsAddInstancesRequest ::
  InstanceGroupsAddInstancesRequest
newInstanceGroupsAddInstancesRequest =
  InstanceGroupsAddInstancesRequest {instances = Core.Nothing}

instance
  Core.FromJSON
    InstanceGroupsAddInstancesRequest
  where
  parseJSON =
    Core.withObject
      "InstanceGroupsAddInstancesRequest"
      ( \o ->
          InstanceGroupsAddInstancesRequest
            Core.<$> (o Core..:? "instances")
      )

instance
  Core.ToJSON
    InstanceGroupsAddInstancesRequest
  where
  toJSON InstanceGroupsAddInstancesRequest {..} =
    Core.object
      ( Core.catMaybes
          [("instances" Core..=) Core.<$> instances]
      )

--
-- /See:/ 'newInstanceGroupsListInstances' smart constructor.
data InstanceGroupsListInstances = InstanceGroupsListInstances
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of InstanceWithNamedPorts resources.
    items :: (Core.Maybe [InstanceWithNamedPorts]),
    -- | [Output Only] The resource type, which is always compute#instanceGroupsListInstances for the list of instances in the specified instance group.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe InstanceGroupsListInstances_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupsListInstances' with the minimum fields required to make a request.
newInstanceGroupsListInstances ::
  InstanceGroupsListInstances
newInstanceGroupsListInstances =
  InstanceGroupsListInstances
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#instanceGroupsListInstances",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON InstanceGroupsListInstances where
  parseJSON =
    Core.withObject
      "InstanceGroupsListInstances"
      ( \o ->
          InstanceGroupsListInstances
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#instanceGroupsListInstances"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON InstanceGroupsListInstances where
  toJSON InstanceGroupsListInstances {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newInstanceGroupsListInstances_Warning' smart constructor.
data InstanceGroupsListInstances_Warning = InstanceGroupsListInstances_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe InstanceGroupsListInstances_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [InstanceGroupsListInstances_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupsListInstances_Warning' with the minimum fields required to make a request.
newInstanceGroupsListInstances_Warning ::
  InstanceGroupsListInstances_Warning
newInstanceGroupsListInstances_Warning =
  InstanceGroupsListInstances_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupsListInstances_Warning
  where
  parseJSON =
    Core.withObject
      "InstanceGroupsListInstances_Warning"
      ( \o ->
          InstanceGroupsListInstances_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    InstanceGroupsListInstances_Warning
  where
  toJSON InstanceGroupsListInstances_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newInstanceGroupsListInstances_Warning_DataItem' smart constructor.
data InstanceGroupsListInstances_Warning_DataItem = InstanceGroupsListInstances_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupsListInstances_Warning_DataItem' with the minimum fields required to make a request.
newInstanceGroupsListInstances_Warning_DataItem ::
  InstanceGroupsListInstances_Warning_DataItem
newInstanceGroupsListInstances_Warning_DataItem =
  InstanceGroupsListInstances_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupsListInstances_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "InstanceGroupsListInstances_Warning_DataItem"
      ( \o ->
          InstanceGroupsListInstances_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    InstanceGroupsListInstances_Warning_DataItem
  where
  toJSON
    InstanceGroupsListInstances_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

--
-- /See:/ 'newInstanceGroupsListInstancesRequest' smart constructor.
newtype InstanceGroupsListInstancesRequest = InstanceGroupsListInstancesRequest
  { -- | A filter for the state of the instances in the instance group. Valid options are ALL or RUNNING. If you do not specify this parameter the list includes all instances regardless of their state.
    instanceState :: (Core.Maybe InstanceGroupsListInstancesRequest_InstanceState)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupsListInstancesRequest' with the minimum fields required to make a request.
newInstanceGroupsListInstancesRequest ::
  InstanceGroupsListInstancesRequest
newInstanceGroupsListInstancesRequest =
  InstanceGroupsListInstancesRequest {instanceState = Core.Nothing}

instance
  Core.FromJSON
    InstanceGroupsListInstancesRequest
  where
  parseJSON =
    Core.withObject
      "InstanceGroupsListInstancesRequest"
      ( \o ->
          InstanceGroupsListInstancesRequest
            Core.<$> (o Core..:? "instanceState")
      )

instance
  Core.ToJSON
    InstanceGroupsListInstancesRequest
  where
  toJSON InstanceGroupsListInstancesRequest {..} =
    Core.object
      ( Core.catMaybes
          [("instanceState" Core..=) Core.<$> instanceState]
      )

--
-- /See:/ 'newInstanceGroupsRemoveInstancesRequest' smart constructor.
newtype InstanceGroupsRemoveInstancesRequest = InstanceGroupsRemoveInstancesRequest
  { -- | The list of instances to remove from the instance group.
    instances :: (Core.Maybe [InstanceReference])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupsRemoveInstancesRequest' with the minimum fields required to make a request.
newInstanceGroupsRemoveInstancesRequest ::
  InstanceGroupsRemoveInstancesRequest
newInstanceGroupsRemoveInstancesRequest =
  InstanceGroupsRemoveInstancesRequest {instances = Core.Nothing}

instance
  Core.FromJSON
    InstanceGroupsRemoveInstancesRequest
  where
  parseJSON =
    Core.withObject
      "InstanceGroupsRemoveInstancesRequest"
      ( \o ->
          InstanceGroupsRemoveInstancesRequest
            Core.<$> (o Core..:? "instances")
      )

instance
  Core.ToJSON
    InstanceGroupsRemoveInstancesRequest
  where
  toJSON InstanceGroupsRemoveInstancesRequest {..} =
    Core.object
      ( Core.catMaybes
          [("instances" Core..=) Core.<$> instances]
      )

--
-- /See:/ 'newInstanceGroupsScopedList' smart constructor.
data InstanceGroupsScopedList = InstanceGroupsScopedList
  { -- | [Output Only] The list of instance groups that are contained in this scope.
    instanceGroups :: (Core.Maybe [InstanceGroup]),
    -- | [Output Only] An informational warning that replaces the list of instance groups when the list is empty.
    warning :: (Core.Maybe InstanceGroupsScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupsScopedList' with the minimum fields required to make a request.
newInstanceGroupsScopedList ::
  InstanceGroupsScopedList
newInstanceGroupsScopedList =
  InstanceGroupsScopedList
    { instanceGroups = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON InstanceGroupsScopedList where
  parseJSON =
    Core.withObject
      "InstanceGroupsScopedList"
      ( \o ->
          InstanceGroupsScopedList
            Core.<$> (o Core..:? "instanceGroups")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON InstanceGroupsScopedList where
  toJSON InstanceGroupsScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("instanceGroups" Core..=) Core.<$> instanceGroups,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] An informational warning that replaces the list of instance groups when the list is empty.
--
-- /See:/ 'newInstanceGroupsScopedList_Warning' smart constructor.
data InstanceGroupsScopedList_Warning = InstanceGroupsScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe InstanceGroupsScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [InstanceGroupsScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupsScopedList_Warning' with the minimum fields required to make a request.
newInstanceGroupsScopedList_Warning ::
  InstanceGroupsScopedList_Warning
newInstanceGroupsScopedList_Warning =
  InstanceGroupsScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupsScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "InstanceGroupsScopedList_Warning"
      ( \o ->
          InstanceGroupsScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON InstanceGroupsScopedList_Warning where
  toJSON InstanceGroupsScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newInstanceGroupsScopedList_Warning_DataItem' smart constructor.
data InstanceGroupsScopedList_Warning_DataItem = InstanceGroupsScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupsScopedList_Warning_DataItem' with the minimum fields required to make a request.
newInstanceGroupsScopedList_Warning_DataItem ::
  InstanceGroupsScopedList_Warning_DataItem
newInstanceGroupsScopedList_Warning_DataItem =
  InstanceGroupsScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupsScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "InstanceGroupsScopedList_Warning_DataItem"
      ( \o ->
          InstanceGroupsScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    InstanceGroupsScopedList_Warning_DataItem
  where
  toJSON InstanceGroupsScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newInstanceGroupsSetNamedPortsRequest' smart constructor.
data InstanceGroupsSetNamedPortsRequest = InstanceGroupsSetNamedPortsRequest
  { -- | The fingerprint of the named ports information for this instance group. Use this optional property to prevent conflicts when multiple users change the named ports settings concurrently. Obtain the fingerprint with the instanceGroups.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request. A request with an incorrect fingerprint will fail with error 412 conditionNotMet.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | The list of named ports to set for this instance group.
    namedPorts :: (Core.Maybe [NamedPort])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceGroupsSetNamedPortsRequest' with the minimum fields required to make a request.
newInstanceGroupsSetNamedPortsRequest ::
  InstanceGroupsSetNamedPortsRequest
newInstanceGroupsSetNamedPortsRequest =
  InstanceGroupsSetNamedPortsRequest
    { fingerprint = Core.Nothing,
      namedPorts = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceGroupsSetNamedPortsRequest
  where
  parseJSON =
    Core.withObject
      "InstanceGroupsSetNamedPortsRequest"
      ( \o ->
          InstanceGroupsSetNamedPortsRequest
            Core.<$> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "namedPorts")
      )

instance
  Core.ToJSON
    InstanceGroupsSetNamedPortsRequest
  where
  toJSON InstanceGroupsSetNamedPortsRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("fingerprint" Core..=) Core.<$> fingerprint,
            ("namedPorts" Core..=) Core.<$> namedPorts
          ]
      )

-- | Contains a list of instances.
--
-- /See:/ 'newInstanceList' smart constructor.
data InstanceList = InstanceList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of Instance resources.
    items :: (Core.Maybe [Instance]),
    -- | [Output Only] Type of resource. Always compute#instanceList for lists of Instance resources.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe InstanceList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceList' with the minimum fields required to make a request.
newInstanceList ::
  InstanceList
newInstanceList =
  InstanceList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#instanceList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON InstanceList where
  parseJSON =
    Core.withObject
      "InstanceList"
      ( \o ->
          InstanceList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#instanceList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON InstanceList where
  toJSON InstanceList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newInstanceList_Warning' smart constructor.
data InstanceList_Warning = InstanceList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe InstanceList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [InstanceList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceList_Warning' with the minimum fields required to make a request.
newInstanceList_Warning ::
  InstanceList_Warning
newInstanceList_Warning =
  InstanceList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON InstanceList_Warning where
  parseJSON =
    Core.withObject
      "InstanceList_Warning"
      ( \o ->
          InstanceList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON InstanceList_Warning where
  toJSON InstanceList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newInstanceList_Warning_DataItem' smart constructor.
data InstanceList_Warning_DataItem = InstanceList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceList_Warning_DataItem' with the minimum fields required to make a request.
newInstanceList_Warning_DataItem ::
  InstanceList_Warning_DataItem
newInstanceList_Warning_DataItem =
  InstanceList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON InstanceList_Warning_DataItem where
  parseJSON =
    Core.withObject
      "InstanceList_Warning_DataItem"
      ( \o ->
          InstanceList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON InstanceList_Warning_DataItem where
  toJSON InstanceList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Contains a list of instance referrers.
--
-- /See:/ 'newInstanceListReferrers' smart constructor.
data InstanceListReferrers = InstanceListReferrers
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of Reference resources.
    items :: (Core.Maybe [Reference]),
    -- | [Output Only] Type of resource. Always compute#instanceListReferrers for lists of Instance referrers.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe InstanceListReferrers_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceListReferrers' with the minimum fields required to make a request.
newInstanceListReferrers ::
  InstanceListReferrers
newInstanceListReferrers =
  InstanceListReferrers
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#instanceListReferrers",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON InstanceListReferrers where
  parseJSON =
    Core.withObject
      "InstanceListReferrers"
      ( \o ->
          InstanceListReferrers
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#instanceListReferrers"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON InstanceListReferrers where
  toJSON InstanceListReferrers {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newInstanceListReferrers_Warning' smart constructor.
data InstanceListReferrers_Warning = InstanceListReferrers_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe InstanceListReferrers_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [InstanceListReferrers_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceListReferrers_Warning' with the minimum fields required to make a request.
newInstanceListReferrers_Warning ::
  InstanceListReferrers_Warning
newInstanceListReferrers_Warning =
  InstanceListReferrers_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON InstanceListReferrers_Warning where
  parseJSON =
    Core.withObject
      "InstanceListReferrers_Warning"
      ( \o ->
          InstanceListReferrers_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON InstanceListReferrers_Warning where
  toJSON InstanceListReferrers_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newInstanceListReferrers_Warning_DataItem' smart constructor.
data InstanceListReferrers_Warning_DataItem = InstanceListReferrers_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceListReferrers_Warning_DataItem' with the minimum fields required to make a request.
newInstanceListReferrers_Warning_DataItem ::
  InstanceListReferrers_Warning_DataItem
newInstanceListReferrers_Warning_DataItem =
  InstanceListReferrers_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceListReferrers_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "InstanceListReferrers_Warning_DataItem"
      ( \o ->
          InstanceListReferrers_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    InstanceListReferrers_Warning_DataItem
  where
  toJSON InstanceListReferrers_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newInstanceManagedByIgmError' smart constructor.
data InstanceManagedByIgmError = InstanceManagedByIgmError
  { -- | [Output Only] Contents of the error.
    error :: (Core.Maybe InstanceManagedByIgmErrorManagedInstanceError),
    -- | [Output Only] Details of the instance action that triggered this error. May be null, if the error was not caused by an action on an instance. This field is optional.
    instanceActionDetails :: (Core.Maybe InstanceManagedByIgmErrorInstanceActionDetails),
    -- | [Output Only] The time that this error occurred. This value is in RFC3339 text format.
    timestamp :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceManagedByIgmError' with the minimum fields required to make a request.
newInstanceManagedByIgmError ::
  InstanceManagedByIgmError
newInstanceManagedByIgmError =
  InstanceManagedByIgmError
    { error = Core.Nothing,
      instanceActionDetails = Core.Nothing,
      timestamp = Core.Nothing
    }

instance Core.FromJSON InstanceManagedByIgmError where
  parseJSON =
    Core.withObject
      "InstanceManagedByIgmError"
      ( \o ->
          InstanceManagedByIgmError
            Core.<$> (o Core..:? "error")
            Core.<*> (o Core..:? "instanceActionDetails")
            Core.<*> (o Core..:? "timestamp")
      )

instance Core.ToJSON InstanceManagedByIgmError where
  toJSON InstanceManagedByIgmError {..} =
    Core.object
      ( Core.catMaybes
          [ ("error" Core..=) Core.<$> error,
            ("instanceActionDetails" Core..=)
              Core.<$> instanceActionDetails,
            ("timestamp" Core..=) Core.<$> timestamp
          ]
      )

--
-- /See:/ 'newInstanceManagedByIgmErrorInstanceActionDetails' smart constructor.
data InstanceManagedByIgmErrorInstanceActionDetails = InstanceManagedByIgmErrorInstanceActionDetails
  { -- | [Output Only] Action that managed instance group was executing on the instance when the error occurred. Possible values:
    action :: (Core.Maybe InstanceManagedByIgmErrorInstanceActionDetails_Action),
    -- | [Output Only] The URL of the instance. The URL can be set even if the instance has not yet been created.
    instance' :: (Core.Maybe Core.Text),
    -- | [Output Only] Version this instance was created from, or was being created from, but the creation failed. Corresponds to one of the versions that were set on the Instance Group Manager resource at the time this instance was being created.
    version :: (Core.Maybe ManagedInstanceVersion)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceManagedByIgmErrorInstanceActionDetails' with the minimum fields required to make a request.
newInstanceManagedByIgmErrorInstanceActionDetails ::
  InstanceManagedByIgmErrorInstanceActionDetails
newInstanceManagedByIgmErrorInstanceActionDetails =
  InstanceManagedByIgmErrorInstanceActionDetails
    { action = Core.Nothing,
      instance' = Core.Nothing,
      version = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceManagedByIgmErrorInstanceActionDetails
  where
  parseJSON =
    Core.withObject
      "InstanceManagedByIgmErrorInstanceActionDetails"
      ( \o ->
          InstanceManagedByIgmErrorInstanceActionDetails
            Core.<$> (o Core..:? "action")
              Core.<*> (o Core..:? "instance")
              Core.<*> (o Core..:? "version")
      )

instance
  Core.ToJSON
    InstanceManagedByIgmErrorInstanceActionDetails
  where
  toJSON
    InstanceManagedByIgmErrorInstanceActionDetails {..} =
      Core.object
        ( Core.catMaybes
            [ ("action" Core..=) Core.<$> action,
              ("instance" Core..=) Core.<$> instance',
              ("version" Core..=) Core.<$> version
            ]
        )

--
-- /See:/ 'newInstanceManagedByIgmErrorManagedInstanceError' smart constructor.
data InstanceManagedByIgmErrorManagedInstanceError = InstanceManagedByIgmErrorManagedInstanceError
  { -- | [Output Only] Error code.
    code :: (Core.Maybe Core.Text),
    -- | [Output Only] Error message.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceManagedByIgmErrorManagedInstanceError' with the minimum fields required to make a request.
newInstanceManagedByIgmErrorManagedInstanceError ::
  InstanceManagedByIgmErrorManagedInstanceError
newInstanceManagedByIgmErrorManagedInstanceError =
  InstanceManagedByIgmErrorManagedInstanceError
    { code = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceManagedByIgmErrorManagedInstanceError
  where
  parseJSON =
    Core.withObject
      "InstanceManagedByIgmErrorManagedInstanceError"
      ( \o ->
          InstanceManagedByIgmErrorManagedInstanceError
            Core.<$> (o Core..:? "code") Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    InstanceManagedByIgmErrorManagedInstanceError
  where
  toJSON
    InstanceManagedByIgmErrorManagedInstanceError {..} =
      Core.object
        ( Core.catMaybes
            [ ("code" Core..=) Core.<$> code,
              ("message" Core..=) Core.<$> message
            ]
        )

--
-- /See:/ 'newInstanceMoveRequest' smart constructor.
data InstanceMoveRequest = InstanceMoveRequest
  { -- | The URL of the destination zone to move the instance. This can be a full or partial URL. For example, the following are all valid URLs to a zone: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project\/zones\/zone - projects\/project\/zones\/zone - zones\/zone
    destinationZone :: (Core.Maybe Core.Text),
    -- | The URL of the target instance to move. This can be a full or partial URL. For example, the following are all valid URLs to an instance: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project\/zones\/zone \/instances\/instance - projects\/project\/zones\/zone\/instances\/instance - zones\/zone\/instances\/instance
    targetInstance :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceMoveRequest' with the minimum fields required to make a request.
newInstanceMoveRequest ::
  InstanceMoveRequest
newInstanceMoveRequest =
  InstanceMoveRequest
    { destinationZone = Core.Nothing,
      targetInstance = Core.Nothing
    }

instance Core.FromJSON InstanceMoveRequest where
  parseJSON =
    Core.withObject
      "InstanceMoveRequest"
      ( \o ->
          InstanceMoveRequest
            Core.<$> (o Core..:? "destinationZone")
            Core.<*> (o Core..:? "targetInstance")
      )

instance Core.ToJSON InstanceMoveRequest where
  toJSON InstanceMoveRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("destinationZone" Core..=)
              Core.<$> destinationZone,
            ("targetInstance" Core..=) Core.<$> targetInstance
          ]
      )

-- | Additional instance params.
--
-- /See:/ 'newInstanceParams' smart constructor.
newtype InstanceParams = InstanceParams
  { -- | Resource manager tags to be bound to the instance. Tag keys and values have the same definition as resource manager tags. Keys must be in the format @tagKeys\/{tag_key_id}@, and values are in the format @tagValues\/456@. The field is ignored (both PUT & PATCH) when empty.
    resourceManagerTags :: (Core.Maybe InstanceParams_ResourceManagerTags)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceParams' with the minimum fields required to make a request.
newInstanceParams ::
  InstanceParams
newInstanceParams = InstanceParams {resourceManagerTags = Core.Nothing}

instance Core.FromJSON InstanceParams where
  parseJSON =
    Core.withObject
      "InstanceParams"
      ( \o ->
          InstanceParams
            Core.<$> (o Core..:? "resourceManagerTags")
      )

instance Core.ToJSON InstanceParams where
  toJSON InstanceParams {..} =
    Core.object
      ( Core.catMaybes
          [ ("resourceManagerTags" Core..=)
              Core.<$> resourceManagerTags
          ]
      )

-- | Resource manager tags to be bound to the instance. Tag keys and values have the same definition as resource manager tags. Keys must be in the format @tagKeys\/{tag_key_id}@, and values are in the format @tagValues\/456@. The field is ignored (both PUT & PATCH) when empty.
--
-- /See:/ 'newInstanceParams_ResourceManagerTags' smart constructor.
newtype InstanceParams_ResourceManagerTags = InstanceParams_ResourceManagerTags
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceParams_ResourceManagerTags' with the minimum fields required to make a request.
newInstanceParams_ResourceManagerTags ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  InstanceParams_ResourceManagerTags
newInstanceParams_ResourceManagerTags additional =
  InstanceParams_ResourceManagerTags {additional = additional}

instance
  Core.FromJSON
    InstanceParams_ResourceManagerTags
  where
  parseJSON =
    Core.withObject
      "InstanceParams_ResourceManagerTags"
      ( \o ->
          InstanceParams_ResourceManagerTags
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    InstanceParams_ResourceManagerTags
  where
  toJSON InstanceParams_ResourceManagerTags {..} =
    Core.toJSON additional

--
-- /See:/ 'newInstanceProperties' smart constructor.
data InstanceProperties = InstanceProperties
  { -- | Controls for advanced machine-related behavior features. Note that for MachineImage, this is not supported yet.
    advancedMachineFeatures :: (Core.Maybe AdvancedMachineFeatures),
    -- | Enables instances created based on these properties to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information.
    canIpForward :: (Core.Maybe Core.Bool),
    -- | Specifies the Confidential Instance options. Note that for MachineImage, this is not supported yet.
    confidentialInstanceConfig :: (Core.Maybe ConfidentialInstanceConfig),
    -- | An optional text description for the instances that are created from these properties.
    description :: (Core.Maybe Core.Text),
    -- | An array of disks that are associated with the instances that are created from these properties.
    disks :: (Core.Maybe [AttachedDisk]),
    -- | A list of guest accelerator cards\' type and count to use for instances created from these properties.
    guestAccelerators :: (Core.Maybe [AcceleratorConfig]),
    -- | KeyRevocationActionType of the instance. Supported options are \"STOP\" and \"NONE\". The default value is \"NONE\" if it is not specified.
    keyRevocationActionType :: (Core.Maybe InstanceProperties_KeyRevocationActionType),
    -- | Labels to apply to instances that are created from these properties.
    labels :: (Core.Maybe InstanceProperties_Labels),
    -- | The machine type to use for instances that are created from these properties.
    machineType :: (Core.Maybe Core.Text),
    -- | The metadata key\/value pairs to assign to instances that are created from these properties. These pairs can consist of custom metadata or predefined keys. See Project and instance metadata for more information.
    metadata :: (Core.Maybe Metadata),
    -- | Minimum cpu\/platform to be used by instances. The instance may be scheduled on the specified or newer cpu\/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: \"Intel Haswell\" or minCpuPlatform: \"Intel Sandy Bridge\". For more information, read Specifying a Minimum CPU Platform.
    minCpuPlatform :: (Core.Maybe Core.Text),
    -- | An array of network access configurations for this interface.
    networkInterfaces :: (Core.Maybe [NetworkInterface]),
    -- | Note that for MachineImage, this is not supported yet.
    networkPerformanceConfig :: (Core.Maybe NetworkPerformanceConfig),
    -- | The private IPv6 google access type for VMs. If not specified, use INHERIT/FROM/SUBNETWORK as default. Note that for MachineImage, this is not supported yet.
    privateIpv6GoogleAccess :: (Core.Maybe InstanceProperties_PrivateIpv6GoogleAccess),
    -- | Specifies the reservations that instances can consume from. Note that for MachineImage, this is not supported yet.
    reservationAffinity :: (Core.Maybe ReservationAffinity),
    -- | Resource manager tags to be bound to the instance. Tag keys and values have the same definition as resource manager tags. Keys must be in the format @tagKeys\/{tag_key_id}@, and values are in the format @tagValues\/456@. The field is ignored (both PUT & PATCH) when empty.
    resourceManagerTags :: (Core.Maybe InstanceProperties_ResourceManagerTags),
    -- | Resource policies (names, not URLs) applied to instances created from these properties. Note that for MachineImage, this is not supported yet.
    resourcePolicies :: (Core.Maybe [Core.Text]),
    -- | Specifies the scheduling options for the instances that are created from these properties.
    scheduling :: (Core.Maybe Scheduling),
    -- | A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from these properties. Use metadata queries to obtain the access tokens for these instances.
    serviceAccounts :: (Core.Maybe [ServiceAccount]),
    -- | Note that for MachineImage, this is not supported yet.
    shieldedInstanceConfig :: (Core.Maybe ShieldedInstanceConfig),
    -- | A list of tags to apply to the instances that are created from these properties. The tags identify valid sources or targets for network firewalls. The setTags method can modify this list of tags. Each tag within the list must comply with RFC1035.
    tags :: (Core.Maybe Tags)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceProperties' with the minimum fields required to make a request.
newInstanceProperties ::
  InstanceProperties
newInstanceProperties =
  InstanceProperties
    { advancedMachineFeatures = Core.Nothing,
      canIpForward = Core.Nothing,
      confidentialInstanceConfig = Core.Nothing,
      description = Core.Nothing,
      disks = Core.Nothing,
      guestAccelerators = Core.Nothing,
      keyRevocationActionType = Core.Nothing,
      labels = Core.Nothing,
      machineType = Core.Nothing,
      metadata = Core.Nothing,
      minCpuPlatform = Core.Nothing,
      networkInterfaces = Core.Nothing,
      networkPerformanceConfig = Core.Nothing,
      privateIpv6GoogleAccess = Core.Nothing,
      reservationAffinity = Core.Nothing,
      resourceManagerTags = Core.Nothing,
      resourcePolicies = Core.Nothing,
      scheduling = Core.Nothing,
      serviceAccounts = Core.Nothing,
      shieldedInstanceConfig = Core.Nothing,
      tags = Core.Nothing
    }

instance Core.FromJSON InstanceProperties where
  parseJSON =
    Core.withObject
      "InstanceProperties"
      ( \o ->
          InstanceProperties
            Core.<$> (o Core..:? "advancedMachineFeatures")
            Core.<*> (o Core..:? "canIpForward")
            Core.<*> (o Core..:? "confidentialInstanceConfig")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "disks")
            Core.<*> (o Core..:? "guestAccelerators")
            Core.<*> (o Core..:? "keyRevocationActionType")
            Core.<*> (o Core..:? "labels")
            Core.<*> (o Core..:? "machineType")
            Core.<*> (o Core..:? "metadata")
            Core.<*> (o Core..:? "minCpuPlatform")
            Core.<*> (o Core..:? "networkInterfaces")
            Core.<*> (o Core..:? "networkPerformanceConfig")
            Core.<*> (o Core..:? "privateIpv6GoogleAccess")
            Core.<*> (o Core..:? "reservationAffinity")
            Core.<*> (o Core..:? "resourceManagerTags")
            Core.<*> (o Core..:? "resourcePolicies")
            Core.<*> (o Core..:? "scheduling")
            Core.<*> (o Core..:? "serviceAccounts")
            Core.<*> (o Core..:? "shieldedInstanceConfig")
            Core.<*> (o Core..:? "tags")
      )

instance Core.ToJSON InstanceProperties where
  toJSON InstanceProperties {..} =
    Core.object
      ( Core.catMaybes
          [ ("advancedMachineFeatures" Core..=)
              Core.<$> advancedMachineFeatures,
            ("canIpForward" Core..=) Core.<$> canIpForward,
            ("confidentialInstanceConfig" Core..=)
              Core.<$> confidentialInstanceConfig,
            ("description" Core..=) Core.<$> description,
            ("disks" Core..=) Core.<$> disks,
            ("guestAccelerators" Core..=)
              Core.<$> guestAccelerators,
            ("keyRevocationActionType" Core..=)
              Core.<$> keyRevocationActionType,
            ("labels" Core..=) Core.<$> labels,
            ("machineType" Core..=) Core.<$> machineType,
            ("metadata" Core..=) Core.<$> metadata,
            ("minCpuPlatform" Core..=) Core.<$> minCpuPlatform,
            ("networkInterfaces" Core..=)
              Core.<$> networkInterfaces,
            ("networkPerformanceConfig" Core..=)
              Core.<$> networkPerformanceConfig,
            ("privateIpv6GoogleAccess" Core..=)
              Core.<$> privateIpv6GoogleAccess,
            ("reservationAffinity" Core..=)
              Core.<$> reservationAffinity,
            ("resourceManagerTags" Core..=)
              Core.<$> resourceManagerTags,
            ("resourcePolicies" Core..=)
              Core.<$> resourcePolicies,
            ("scheduling" Core..=) Core.<$> scheduling,
            ("serviceAccounts" Core..=) Core.<$> serviceAccounts,
            ("shieldedInstanceConfig" Core..=)
              Core.<$> shieldedInstanceConfig,
            ("tags" Core..=) Core.<$> tags
          ]
      )

-- | Labels to apply to instances that are created from these properties.
--
-- /See:/ 'newInstanceProperties_Labels' smart constructor.
newtype InstanceProperties_Labels = InstanceProperties_Labels
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceProperties_Labels' with the minimum fields required to make a request.
newInstanceProperties_Labels ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  InstanceProperties_Labels
newInstanceProperties_Labels additional =
  InstanceProperties_Labels {additional = additional}

instance Core.FromJSON InstanceProperties_Labels where
  parseJSON =
    Core.withObject
      "InstanceProperties_Labels"
      ( \o ->
          InstanceProperties_Labels
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON InstanceProperties_Labels where
  toJSON InstanceProperties_Labels {..} =
    Core.toJSON additional

-- | Resource manager tags to be bound to the instance. Tag keys and values have the same definition as resource manager tags. Keys must be in the format @tagKeys\/{tag_key_id}@, and values are in the format @tagValues\/456@. The field is ignored (both PUT & PATCH) when empty.
--
-- /See:/ 'newInstanceProperties_ResourceManagerTags' smart constructor.
newtype InstanceProperties_ResourceManagerTags = InstanceProperties_ResourceManagerTags
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceProperties_ResourceManagerTags' with the minimum fields required to make a request.
newInstanceProperties_ResourceManagerTags ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  InstanceProperties_ResourceManagerTags
newInstanceProperties_ResourceManagerTags additional =
  InstanceProperties_ResourceManagerTags {additional = additional}

instance
  Core.FromJSON
    InstanceProperties_ResourceManagerTags
  where
  parseJSON =
    Core.withObject
      "InstanceProperties_ResourceManagerTags"
      ( \o ->
          InstanceProperties_ResourceManagerTags
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    InstanceProperties_ResourceManagerTags
  where
  toJSON InstanceProperties_ResourceManagerTags {..} =
    Core.toJSON additional

--
-- /See:/ 'newInstanceReference' smart constructor.
newtype InstanceReference = InstanceReference
  { -- | The URL for a specific instance. \@required compute.instancegroups.addInstances\/removeInstances
    instance' :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceReference' with the minimum fields required to make a request.
newInstanceReference ::
  InstanceReference
newInstanceReference = InstanceReference {instance' = Core.Nothing}

instance Core.FromJSON InstanceReference where
  parseJSON =
    Core.withObject
      "InstanceReference"
      ( \o ->
          InstanceReference Core.<$> (o Core..:? "instance")
      )

instance Core.ToJSON InstanceReference where
  toJSON InstanceReference {..} =
    Core.object
      ( Core.catMaybes
          [("instance" Core..=) Core.<$> instance']
      )

-- | Represents an Instance Template resource. You can use instance templates to create VM instances and managed instance groups. For more information, read Instance Templates.
--
-- /See:/ 'newInstanceTemplate' smart constructor.
data InstanceTemplate = InstanceTemplate
  { -- | [Output Only] The creation timestamp for this instance template in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] A unique identifier for this instance template. The server defines this identifier.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] The resource type, which is always compute#instanceTemplate for instance templates.
    kind :: Core.Text,
    -- | Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | The instance properties for this instance template.
    properties :: (Core.Maybe InstanceProperties),
    -- | [Output Only] URL of the region where the instance template resides. Only applicable for regional resources.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] The URL for this instance template. The server defines this URL.
    selfLink :: (Core.Maybe Core.Text),
    -- | The source instance used to create the template. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project\/zones\/zone \/instances\/instance - projects\/project\/zones\/zone\/instances\/instance
    sourceInstance :: (Core.Maybe Core.Text),
    -- | The source instance params to use to create this instance template.
    sourceInstanceParams :: (Core.Maybe SourceInstanceParams)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceTemplate' with the minimum fields required to make a request.
newInstanceTemplate ::
  InstanceTemplate
newInstanceTemplate =
  InstanceTemplate
    { creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#instanceTemplate",
      name = Core.Nothing,
      properties = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      sourceInstance = Core.Nothing,
      sourceInstanceParams = Core.Nothing
    }

instance Core.FromJSON InstanceTemplate where
  parseJSON =
    Core.withObject
      "InstanceTemplate"
      ( \o ->
          InstanceTemplate
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#instanceTemplate"
                     )
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "properties")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "sourceInstance")
            Core.<*> (o Core..:? "sourceInstanceParams")
      )

instance Core.ToJSON InstanceTemplate where
  toJSON InstanceTemplate {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("properties" Core..=) Core.<$> properties,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("sourceInstance" Core..=) Core.<$> sourceInstance,
            ("sourceInstanceParams" Core..=)
              Core.<$> sourceInstanceParams
          ]
      )

-- | Contains a list of InstanceTemplatesScopedList.
--
-- /See:/ 'newInstanceTemplateAggregatedList' smart constructor.
data InstanceTemplateAggregatedList = InstanceTemplateAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of InstanceTemplatesScopedList resources.
    items :: (Core.Maybe InstanceTemplateAggregatedList_Items),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe InstanceTemplateAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceTemplateAggregatedList' with the minimum fields required to make a request.
newInstanceTemplateAggregatedList ::
  InstanceTemplateAggregatedList
newInstanceTemplateAggregatedList =
  InstanceTemplateAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#instanceTemplateAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON InstanceTemplateAggregatedList where
  parseJSON =
    Core.withObject
      "InstanceTemplateAggregatedList"
      ( \o ->
          InstanceTemplateAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#instanceTemplateAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON InstanceTemplateAggregatedList where
  toJSON InstanceTemplateAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of InstanceTemplatesScopedList resources.
--
-- /See:/ 'newInstanceTemplateAggregatedList_Items' smart constructor.
newtype InstanceTemplateAggregatedList_Items = InstanceTemplateAggregatedList_Items
  { -- | The name of the scope that contains this set of instance templates.
    additional :: (Core.HashMap Core.Text InstanceTemplatesScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceTemplateAggregatedList_Items' with the minimum fields required to make a request.
newInstanceTemplateAggregatedList_Items ::
  -- |  The name of the scope that contains this set of instance templates. See 'additional'.
  Core.HashMap Core.Text InstanceTemplatesScopedList ->
  InstanceTemplateAggregatedList_Items
newInstanceTemplateAggregatedList_Items additional =
  InstanceTemplateAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    InstanceTemplateAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "InstanceTemplateAggregatedList_Items"
      ( \o ->
          InstanceTemplateAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    InstanceTemplateAggregatedList_Items
  where
  toJSON InstanceTemplateAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newInstanceTemplateAggregatedList_Warning' smart constructor.
data InstanceTemplateAggregatedList_Warning = InstanceTemplateAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe InstanceTemplateAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [InstanceTemplateAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceTemplateAggregatedList_Warning' with the minimum fields required to make a request.
newInstanceTemplateAggregatedList_Warning ::
  InstanceTemplateAggregatedList_Warning
newInstanceTemplateAggregatedList_Warning =
  InstanceTemplateAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceTemplateAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "InstanceTemplateAggregatedList_Warning"
      ( \o ->
          InstanceTemplateAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    InstanceTemplateAggregatedList_Warning
  where
  toJSON InstanceTemplateAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newInstanceTemplateAggregatedList_Warning_DataItem' smart constructor.
data InstanceTemplateAggregatedList_Warning_DataItem = InstanceTemplateAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceTemplateAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newInstanceTemplateAggregatedList_Warning_DataItem ::
  InstanceTemplateAggregatedList_Warning_DataItem
newInstanceTemplateAggregatedList_Warning_DataItem =
  InstanceTemplateAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceTemplateAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "InstanceTemplateAggregatedList_Warning_DataItem"
      ( \o ->
          InstanceTemplateAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    InstanceTemplateAggregatedList_Warning_DataItem
  where
  toJSON
    InstanceTemplateAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | A list of instance templates.
--
-- /See:/ 'newInstanceTemplateList' smart constructor.
data InstanceTemplateList = InstanceTemplateList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of InstanceTemplate resources.
    items :: (Core.Maybe [InstanceTemplate]),
    -- | [Output Only] The resource type, which is always compute#instanceTemplatesListResponse for instance template lists.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe InstanceTemplateList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceTemplateList' with the minimum fields required to make a request.
newInstanceTemplateList ::
  InstanceTemplateList
newInstanceTemplateList =
  InstanceTemplateList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#instanceTemplateList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON InstanceTemplateList where
  parseJSON =
    Core.withObject
      "InstanceTemplateList"
      ( \o ->
          InstanceTemplateList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#instanceTemplateList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON InstanceTemplateList where
  toJSON InstanceTemplateList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newInstanceTemplateList_Warning' smart constructor.
data InstanceTemplateList_Warning = InstanceTemplateList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe InstanceTemplateList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [InstanceTemplateList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceTemplateList_Warning' with the minimum fields required to make a request.
newInstanceTemplateList_Warning ::
  InstanceTemplateList_Warning
newInstanceTemplateList_Warning =
  InstanceTemplateList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON InstanceTemplateList_Warning where
  parseJSON =
    Core.withObject
      "InstanceTemplateList_Warning"
      ( \o ->
          InstanceTemplateList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON InstanceTemplateList_Warning where
  toJSON InstanceTemplateList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newInstanceTemplateList_Warning_DataItem' smart constructor.
data InstanceTemplateList_Warning_DataItem = InstanceTemplateList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceTemplateList_Warning_DataItem' with the minimum fields required to make a request.
newInstanceTemplateList_Warning_DataItem ::
  InstanceTemplateList_Warning_DataItem
newInstanceTemplateList_Warning_DataItem =
  InstanceTemplateList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceTemplateList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "InstanceTemplateList_Warning_DataItem"
      ( \o ->
          InstanceTemplateList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    InstanceTemplateList_Warning_DataItem
  where
  toJSON InstanceTemplateList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newInstanceTemplatesScopedList' smart constructor.
data InstanceTemplatesScopedList = InstanceTemplatesScopedList
  { -- | [Output Only] A list of instance templates that are contained within the specified project and zone.
    instanceTemplates :: (Core.Maybe [InstanceTemplate]),
    -- | [Output Only] An informational warning that replaces the list of instance templates when the list is empty.
    warning :: (Core.Maybe InstanceTemplatesScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceTemplatesScopedList' with the minimum fields required to make a request.
newInstanceTemplatesScopedList ::
  InstanceTemplatesScopedList
newInstanceTemplatesScopedList =
  InstanceTemplatesScopedList
    { instanceTemplates = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON InstanceTemplatesScopedList where
  parseJSON =
    Core.withObject
      "InstanceTemplatesScopedList"
      ( \o ->
          InstanceTemplatesScopedList
            Core.<$> (o Core..:? "instanceTemplates")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON InstanceTemplatesScopedList where
  toJSON InstanceTemplatesScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("instanceTemplates" Core..=)
              Core.<$> instanceTemplates,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] An informational warning that replaces the list of instance templates when the list is empty.
--
-- /See:/ 'newInstanceTemplatesScopedList_Warning' smart constructor.
data InstanceTemplatesScopedList_Warning = InstanceTemplatesScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe InstanceTemplatesScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [InstanceTemplatesScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceTemplatesScopedList_Warning' with the minimum fields required to make a request.
newInstanceTemplatesScopedList_Warning ::
  InstanceTemplatesScopedList_Warning
newInstanceTemplatesScopedList_Warning =
  InstanceTemplatesScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceTemplatesScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "InstanceTemplatesScopedList_Warning"
      ( \o ->
          InstanceTemplatesScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    InstanceTemplatesScopedList_Warning
  where
  toJSON InstanceTemplatesScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newInstanceTemplatesScopedList_Warning_DataItem' smart constructor.
data InstanceTemplatesScopedList_Warning_DataItem = InstanceTemplatesScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceTemplatesScopedList_Warning_DataItem' with the minimum fields required to make a request.
newInstanceTemplatesScopedList_Warning_DataItem ::
  InstanceTemplatesScopedList_Warning_DataItem
newInstanceTemplatesScopedList_Warning_DataItem =
  InstanceTemplatesScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    InstanceTemplatesScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "InstanceTemplatesScopedList_Warning_DataItem"
      ( \o ->
          InstanceTemplatesScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    InstanceTemplatesScopedList_Warning_DataItem
  where
  toJSON
    InstanceTemplatesScopedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

--
-- /See:/ 'newInstanceWithNamedPorts' smart constructor.
data InstanceWithNamedPorts = InstanceWithNamedPorts
  { -- | [Output Only] The URL of the instance.
    instance' :: (Core.Maybe Core.Text),
    -- | [Output Only] The named ports that belong to this instance group.
    namedPorts :: (Core.Maybe [NamedPort]),
    -- | [Output Only] The status of the instance.
    status :: (Core.Maybe InstanceWithNamedPorts_Status)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstanceWithNamedPorts' with the minimum fields required to make a request.
newInstanceWithNamedPorts ::
  InstanceWithNamedPorts
newInstanceWithNamedPorts =
  InstanceWithNamedPorts
    { instance' = Core.Nothing,
      namedPorts = Core.Nothing,
      status = Core.Nothing
    }

instance Core.FromJSON InstanceWithNamedPorts where
  parseJSON =
    Core.withObject
      "InstanceWithNamedPorts"
      ( \o ->
          InstanceWithNamedPorts
            Core.<$> (o Core..:? "instance")
            Core.<*> (o Core..:? "namedPorts")
            Core.<*> (o Core..:? "status")
      )

instance Core.ToJSON InstanceWithNamedPorts where
  toJSON InstanceWithNamedPorts {..} =
    Core.object
      ( Core.catMaybes
          [ ("instance" Core..=) Core.<$> instance',
            ("namedPorts" Core..=) Core.<$> namedPorts,
            ("status" Core..=) Core.<$> status
          ]
      )

--
-- /See:/ 'newInstancesAddResourcePoliciesRequest' smart constructor.
newtype InstancesAddResourcePoliciesRequest = InstancesAddResourcePoliciesRequest
  { -- | Resource policies to be added to this instance.
    resourcePolicies :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstancesAddResourcePoliciesRequest' with the minimum fields required to make a request.
newInstancesAddResourcePoliciesRequest ::
  InstancesAddResourcePoliciesRequest
newInstancesAddResourcePoliciesRequest =
  InstancesAddResourcePoliciesRequest {resourcePolicies = Core.Nothing}

instance
  Core.FromJSON
    InstancesAddResourcePoliciesRequest
  where
  parseJSON =
    Core.withObject
      "InstancesAddResourcePoliciesRequest"
      ( \o ->
          InstancesAddResourcePoliciesRequest
            Core.<$> (o Core..:? "resourcePolicies")
      )

instance
  Core.ToJSON
    InstancesAddResourcePoliciesRequest
  where
  toJSON InstancesAddResourcePoliciesRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("resourcePolicies" Core..=)
              Core.<$> resourcePolicies
          ]
      )

--
-- /See:/ 'newInstancesGetEffectiveFirewallsResponse' smart constructor.
data InstancesGetEffectiveFirewallsResponse = InstancesGetEffectiveFirewallsResponse
  { -- | Effective firewalls from firewall policies.
    firewallPolicys ::
      ( Core.Maybe
          [InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy]
      ),
    -- | Effective firewalls on the instance.
    firewalls :: (Core.Maybe [Firewall])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstancesGetEffectiveFirewallsResponse' with the minimum fields required to make a request.
newInstancesGetEffectiveFirewallsResponse ::
  InstancesGetEffectiveFirewallsResponse
newInstancesGetEffectiveFirewallsResponse =
  InstancesGetEffectiveFirewallsResponse
    { firewallPolicys = Core.Nothing,
      firewalls = Core.Nothing
    }

instance
  Core.FromJSON
    InstancesGetEffectiveFirewallsResponse
  where
  parseJSON =
    Core.withObject
      "InstancesGetEffectiveFirewallsResponse"
      ( \o ->
          InstancesGetEffectiveFirewallsResponse
            Core.<$> (o Core..:? "firewallPolicys")
            Core.<*> (o Core..:? "firewalls")
      )

instance
  Core.ToJSON
    InstancesGetEffectiveFirewallsResponse
  where
  toJSON InstancesGetEffectiveFirewallsResponse {..} =
    Core.object
      ( Core.catMaybes
          [ ("firewallPolicys" Core..=)
              Core.<$> firewallPolicys,
            ("firewalls" Core..=) Core.<$> firewalls
          ]
      )

--
-- /See:/ 'newInstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy' smart constructor.
data InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy = InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy
  { -- | [Output Only] Deprecated, please use short name instead. The display name of the firewall policy.
    displayName :: (Core.Maybe Core.Text),
    -- | [Output Only] The name of the firewall policy.
    name :: (Core.Maybe Core.Text),
    -- | The rules that apply to the network.
    rules :: (Core.Maybe [FirewallPolicyRule]),
    -- | [Output Only] The short name of the firewall policy.
    shortName :: (Core.Maybe Core.Text),
    -- | [Output Only] The type of the firewall policy. Can be one of HIERARCHY, NETWORK, NETWORK_REGIONAL.
    type' ::
      ( Core.Maybe
          InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy_Type
      )
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy' with the minimum fields required to make a request.
newInstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy ::
  InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy
newInstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy =
  InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy
    { displayName = Core.Nothing,
      name = Core.Nothing,
      rules = Core.Nothing,
      shortName = Core.Nothing,
      type' = Core.Nothing
    }

instance
  Core.FromJSON
    InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy
  where
  parseJSON =
    Core.withObject
      "InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy"
      ( \o ->
          InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy
            Core.<$> (o Core..:? "displayName")
              Core.<*> (o Core..:? "name")
              Core.<*> (o Core..:? "rules")
              Core.<*> (o Core..:? "shortName")
              Core.<*> (o Core..:? "type")
      )

instance
  Core.ToJSON
    InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy
  where
  toJSON
    InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy {..} =
      Core.object
        ( Core.catMaybes
            [ ("displayName" Core..=) Core.<$> displayName,
              ("name" Core..=) Core.<$> name,
              ("rules" Core..=) Core.<$> rules,
              ("shortName" Core..=) Core.<$> shortName,
              ("type" Core..=) Core.<$> type'
            ]
        )

--
-- /See:/ 'newInstancesRemoveResourcePoliciesRequest' smart constructor.
newtype InstancesRemoveResourcePoliciesRequest = InstancesRemoveResourcePoliciesRequest
  { -- | Resource policies to be removed from this instance.
    resourcePolicies :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstancesRemoveResourcePoliciesRequest' with the minimum fields required to make a request.
newInstancesRemoveResourcePoliciesRequest ::
  InstancesRemoveResourcePoliciesRequest
newInstancesRemoveResourcePoliciesRequest =
  InstancesRemoveResourcePoliciesRequest {resourcePolicies = Core.Nothing}

instance
  Core.FromJSON
    InstancesRemoveResourcePoliciesRequest
  where
  parseJSON =
    Core.withObject
      "InstancesRemoveResourcePoliciesRequest"
      ( \o ->
          InstancesRemoveResourcePoliciesRequest
            Core.<$> (o Core..:? "resourcePolicies")
      )

instance
  Core.ToJSON
    InstancesRemoveResourcePoliciesRequest
  where
  toJSON InstancesRemoveResourcePoliciesRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("resourcePolicies" Core..=)
              Core.<$> resourcePolicies
          ]
      )

--
-- /See:/ 'newInstancesScopedList' smart constructor.
data InstancesScopedList = InstancesScopedList
  { -- | [Output Only] A list of instances contained in this scope.
    instances :: (Core.Maybe [Instance]),
    -- | [Output Only] Informational warning which replaces the list of instances when the list is empty.
    warning :: (Core.Maybe InstancesScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstancesScopedList' with the minimum fields required to make a request.
newInstancesScopedList ::
  InstancesScopedList
newInstancesScopedList =
  InstancesScopedList {instances = Core.Nothing, warning = Core.Nothing}

instance Core.FromJSON InstancesScopedList where
  parseJSON =
    Core.withObject
      "InstancesScopedList"
      ( \o ->
          InstancesScopedList
            Core.<$> (o Core..:? "instances")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON InstancesScopedList where
  toJSON InstancesScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("instances" Core..=) Core.<$> instances,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning which replaces the list of instances when the list is empty.
--
-- /See:/ 'newInstancesScopedList_Warning' smart constructor.
data InstancesScopedList_Warning = InstancesScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe InstancesScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [InstancesScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstancesScopedList_Warning' with the minimum fields required to make a request.
newInstancesScopedList_Warning ::
  InstancesScopedList_Warning
newInstancesScopedList_Warning =
  InstancesScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON InstancesScopedList_Warning where
  parseJSON =
    Core.withObject
      "InstancesScopedList_Warning"
      ( \o ->
          InstancesScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON InstancesScopedList_Warning where
  toJSON InstancesScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newInstancesScopedList_Warning_DataItem' smart constructor.
data InstancesScopedList_Warning_DataItem = InstancesScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstancesScopedList_Warning_DataItem' with the minimum fields required to make a request.
newInstancesScopedList_Warning_DataItem ::
  InstancesScopedList_Warning_DataItem
newInstancesScopedList_Warning_DataItem =
  InstancesScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    InstancesScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "InstancesScopedList_Warning_DataItem"
      ( \o ->
          InstancesScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    InstancesScopedList_Warning_DataItem
  where
  toJSON InstancesScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newInstancesSetLabelsRequest' smart constructor.
data InstancesSetLabelsRequest = InstancesSetLabelsRequest
  { -- | Fingerprint of the previous set of labels for this resource, used to prevent conflicts. Provide the latest fingerprint value when making a request to add or change labels.
    labelFingerprint :: (Core.Maybe Core.Base64),
    -- |
    labels :: (Core.Maybe InstancesSetLabelsRequest_Labels)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstancesSetLabelsRequest' with the minimum fields required to make a request.
newInstancesSetLabelsRequest ::
  InstancesSetLabelsRequest
newInstancesSetLabelsRequest =
  InstancesSetLabelsRequest
    { labelFingerprint = Core.Nothing,
      labels = Core.Nothing
    }

instance Core.FromJSON InstancesSetLabelsRequest where
  parseJSON =
    Core.withObject
      "InstancesSetLabelsRequest"
      ( \o ->
          InstancesSetLabelsRequest
            Core.<$> (o Core..:? "labelFingerprint")
            Core.<*> (o Core..:? "labels")
      )

instance Core.ToJSON InstancesSetLabelsRequest where
  toJSON InstancesSetLabelsRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("labelFingerprint" Core..=)
              Core.<$> labelFingerprint,
            ("labels" Core..=) Core.<$> labels
          ]
      )

--
-- /See:/ 'newInstancesSetLabelsRequest_Labels' smart constructor.
newtype InstancesSetLabelsRequest_Labels = InstancesSetLabelsRequest_Labels
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstancesSetLabelsRequest_Labels' with the minimum fields required to make a request.
newInstancesSetLabelsRequest_Labels ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  InstancesSetLabelsRequest_Labels
newInstancesSetLabelsRequest_Labels additional =
  InstancesSetLabelsRequest_Labels {additional = additional}

instance
  Core.FromJSON
    InstancesSetLabelsRequest_Labels
  where
  parseJSON =
    Core.withObject
      "InstancesSetLabelsRequest_Labels"
      ( \o ->
          InstancesSetLabelsRequest_Labels
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON InstancesSetLabelsRequest_Labels where
  toJSON InstancesSetLabelsRequest_Labels {..} =
    Core.toJSON additional

--
-- /See:/ 'newInstancesSetMachineResourcesRequest' smart constructor.
newtype InstancesSetMachineResourcesRequest = InstancesSetMachineResourcesRequest
  { -- | A list of the type and count of accelerator cards attached to the instance.
    guestAccelerators :: (Core.Maybe [AcceleratorConfig])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstancesSetMachineResourcesRequest' with the minimum fields required to make a request.
newInstancesSetMachineResourcesRequest ::
  InstancesSetMachineResourcesRequest
newInstancesSetMachineResourcesRequest =
  InstancesSetMachineResourcesRequest {guestAccelerators = Core.Nothing}

instance
  Core.FromJSON
    InstancesSetMachineResourcesRequest
  where
  parseJSON =
    Core.withObject
      "InstancesSetMachineResourcesRequest"
      ( \o ->
          InstancesSetMachineResourcesRequest
            Core.<$> (o Core..:? "guestAccelerators")
      )

instance
  Core.ToJSON
    InstancesSetMachineResourcesRequest
  where
  toJSON InstancesSetMachineResourcesRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("guestAccelerators" Core..=)
              Core.<$> guestAccelerators
          ]
      )

--
-- /See:/ 'newInstancesSetMachineTypeRequest' smart constructor.
newtype InstancesSetMachineTypeRequest = InstancesSetMachineTypeRequest
  { -- | Full or partial URL of the machine type resource. See Machine Types for a full list of machine types. For example: zones\/us-central1-f\/machineTypes\/n1-standard-1
    machineType :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstancesSetMachineTypeRequest' with the minimum fields required to make a request.
newInstancesSetMachineTypeRequest ::
  InstancesSetMachineTypeRequest
newInstancesSetMachineTypeRequest =
  InstancesSetMachineTypeRequest {machineType = Core.Nothing}

instance Core.FromJSON InstancesSetMachineTypeRequest where
  parseJSON =
    Core.withObject
      "InstancesSetMachineTypeRequest"
      ( \o ->
          InstancesSetMachineTypeRequest
            Core.<$> (o Core..:? "machineType")
      )

instance Core.ToJSON InstancesSetMachineTypeRequest where
  toJSON InstancesSetMachineTypeRequest {..} =
    Core.object
      ( Core.catMaybes
          [("machineType" Core..=) Core.<$> machineType]
      )

--
-- /See:/ 'newInstancesSetMinCpuPlatformRequest' smart constructor.
newtype InstancesSetMinCpuPlatformRequest = InstancesSetMinCpuPlatformRequest
  { -- | Minimum cpu\/platform this instance should be started at.
    minCpuPlatform :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstancesSetMinCpuPlatformRequest' with the minimum fields required to make a request.
newInstancesSetMinCpuPlatformRequest ::
  InstancesSetMinCpuPlatformRequest
newInstancesSetMinCpuPlatformRequest =
  InstancesSetMinCpuPlatformRequest {minCpuPlatform = Core.Nothing}

instance
  Core.FromJSON
    InstancesSetMinCpuPlatformRequest
  where
  parseJSON =
    Core.withObject
      "InstancesSetMinCpuPlatformRequest"
      ( \o ->
          InstancesSetMinCpuPlatformRequest
            Core.<$> (o Core..:? "minCpuPlatform")
      )

instance
  Core.ToJSON
    InstancesSetMinCpuPlatformRequest
  where
  toJSON InstancesSetMinCpuPlatformRequest {..} =
    Core.object
      ( Core.catMaybes
          [("minCpuPlatform" Core..=) Core.<$> minCpuPlatform]
      )

--
-- /See:/ 'newInstancesSetNameRequest' smart constructor.
data InstancesSetNameRequest = InstancesSetNameRequest
  { -- | The current name of this resource, used to prevent conflicts. Provide the latest name when making a request to change name.
    currentName :: (Core.Maybe Core.Text),
    -- | The name to be applied to the instance. Needs to be RFC 1035 compliant.
    name :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstancesSetNameRequest' with the minimum fields required to make a request.
newInstancesSetNameRequest ::
  InstancesSetNameRequest
newInstancesSetNameRequest =
  InstancesSetNameRequest {currentName = Core.Nothing, name = Core.Nothing}

instance Core.FromJSON InstancesSetNameRequest where
  parseJSON =
    Core.withObject
      "InstancesSetNameRequest"
      ( \o ->
          InstancesSetNameRequest
            Core.<$> (o Core..:? "currentName")
            Core.<*> (o Core..:? "name")
      )

instance Core.ToJSON InstancesSetNameRequest where
  toJSON InstancesSetNameRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("currentName" Core..=) Core.<$> currentName,
            ("name" Core..=) Core.<$> name
          ]
      )

--
-- /See:/ 'newInstancesSetServiceAccountRequest' smart constructor.
data InstancesSetServiceAccountRequest = InstancesSetServiceAccountRequest
  { -- | Email address of the service account.
    email :: (Core.Maybe Core.Text),
    -- | The list of scopes to be made available for this service account.
    scopes :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstancesSetServiceAccountRequest' with the minimum fields required to make a request.
newInstancesSetServiceAccountRequest ::
  InstancesSetServiceAccountRequest
newInstancesSetServiceAccountRequest =
  InstancesSetServiceAccountRequest
    { email = Core.Nothing,
      scopes = Core.Nothing
    }

instance
  Core.FromJSON
    InstancesSetServiceAccountRequest
  where
  parseJSON =
    Core.withObject
      "InstancesSetServiceAccountRequest"
      ( \o ->
          InstancesSetServiceAccountRequest
            Core.<$> (o Core..:? "email") Core.<*> (o Core..:? "scopes")
      )

instance
  Core.ToJSON
    InstancesSetServiceAccountRequest
  where
  toJSON InstancesSetServiceAccountRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("email" Core..=) Core.<$> email,
            ("scopes" Core..=) Core.<$> scopes
          ]
      )

--
-- /See:/ 'newInstancesStartWithEncryptionKeyRequest' smart constructor.
newtype InstancesStartWithEncryptionKeyRequest = InstancesStartWithEncryptionKeyRequest
  { -- | Array of disks associated with this instance that are protected with a customer-supplied encryption key. In order to start the instance, the disk url and its corresponding key must be provided. If the disk is not protected with a customer-supplied encryption key it should not be specified.
    disks :: (Core.Maybe [CustomerEncryptionKeyProtectedDisk])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InstancesStartWithEncryptionKeyRequest' with the minimum fields required to make a request.
newInstancesStartWithEncryptionKeyRequest ::
  InstancesStartWithEncryptionKeyRequest
newInstancesStartWithEncryptionKeyRequest =
  InstancesStartWithEncryptionKeyRequest {disks = Core.Nothing}

instance
  Core.FromJSON
    InstancesStartWithEncryptionKeyRequest
  where
  parseJSON =
    Core.withObject
      "InstancesStartWithEncryptionKeyRequest"
      ( \o ->
          InstancesStartWithEncryptionKeyRequest
            Core.<$> (o Core..:? "disks")
      )

instance
  Core.ToJSON
    InstancesStartWithEncryptionKeyRequest
  where
  toJSON InstancesStartWithEncryptionKeyRequest {..} =
    Core.object
      (Core.catMaybes [("disks" Core..=) Core.<$> disks])

-- | HttpRouteRuleMatch criteria for field values that must stay within the specified integer range.
--
-- /See:/ 'newInt64RangeMatch' smart constructor.
data Int64RangeMatch = Int64RangeMatch
  { -- | The end of the range (exclusive) in signed long integer format.
    rangeEnd :: (Core.Maybe Core.Int64),
    -- | The start of the range (inclusive) in signed long integer format.
    rangeStart :: (Core.Maybe Core.Int64)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Int64RangeMatch' with the minimum fields required to make a request.
newInt64RangeMatch ::
  Int64RangeMatch
newInt64RangeMatch =
  Int64RangeMatch {rangeEnd = Core.Nothing, rangeStart = Core.Nothing}

instance Core.FromJSON Int64RangeMatch where
  parseJSON =
    Core.withObject
      "Int64RangeMatch"
      ( \o ->
          Int64RangeMatch
            Core.<$> ( o Core..:? "rangeEnd"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> ( o Core..:? "rangeStart"
                         Core.<&> Core.fmap Core.fromAsText
                     )
      )

instance Core.ToJSON Int64RangeMatch where
  toJSON Int64RangeMatch {..} =
    Core.object
      ( Core.catMaybes
          [ ("rangeEnd" Core..=) Core.. Core.AsText
              Core.<$> rangeEnd,
            ("rangeStart" Core..=) Core.. Core.AsText
              Core.<$> rangeStart
          ]
      )

-- | Represents an Interconnect resource. An Interconnect resource is a dedicated connection between the Google Cloud network and your on-premises network. For more information, read the Dedicated Interconnect Overview.
--
-- /See:/ 'newInterconnect' smart constructor.
data Interconnect = Interconnect
  { -- | Administrative status of the interconnect. When this is set to true, the Interconnect is functional and can carry traffic. When set to false, no packets can be carried over the interconnect and no BGP routes are exchanged over it. By default, the status is set to true.
    adminEnabled :: (Core.Maybe Core.Bool),
    -- | [Output Only] A list of CircuitInfo objects, that describe the individual circuits in this LAG.
    circuitInfos :: (Core.Maybe [InterconnectCircuitInfo]),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | Customer name, to put in the Letter of Authorization as the party authorized to request a crossconnect.
    customerName :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] A list of outages expected for this Interconnect.
    expectedOutages :: (Core.Maybe [InterconnectOutageNotification]),
    -- | [Output Only] IP address configured on the Google side of the Interconnect link. This can be used only for ping tests.
    googleIpAddress :: (Core.Maybe Core.Text),
    -- | [Output Only] Google reference ID to be used when raising support tickets with Google or otherwise to debug backend connectivity issues.
    googleReferenceId :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] A list of the URLs of all InterconnectAttachments configured to use this Interconnect.
    interconnectAttachments :: (Core.Maybe [Core.Text]),
    -- | Type of interconnect, which can take one of the following values: - PARTNER: A partner-managed interconnection shared between customers though a partner. - DEDICATED: A dedicated physical interconnection with the customer. Note that a value IT_PRIVATE has been deprecated in favor of DEDICATED.
    interconnectType :: (Core.Maybe Interconnect_InterconnectType),
    -- | [Output Only] Type of the resource. Always compute#interconnect for interconnects.
    kind :: Core.Text,
    -- | Type of link requested, which can take one of the following values: - LINK/TYPE/ETHERNET/10G/LR: A 10G Ethernet with LR optics - LINK/TYPE/ETHERNET/100G/LR: A 100G Ethernet with LR optics. Note that this field indicates the speed of each of the links in the bundle, not the speed of the entire bundle.
    linkType :: (Core.Maybe Interconnect_LinkType),
    -- | URL of the InterconnectLocation object that represents where this connection is to be provisioned.
    location :: (Core.Maybe Core.Text),
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | Email address to contact the customer NOC for operations and maintenance notifications regarding this Interconnect. If specified, this will be used for notifications in addition to all other forms described, such as Cloud Monitoring logs alerting and Cloud Notifications. This field is required for users who sign up for Cloud Interconnect using workforce identity federation.
    nocContactEmail :: (Core.Maybe Core.Text),
    -- | [Output Only] The current status of this Interconnect\'s functionality, which can take one of the following values: - OS/ACTIVE: A valid Interconnect, which is turned up and is ready to use. Attachments may be provisioned on this Interconnect. - OS/UNPROVISIONED: An Interconnect that has not completed turnup. No attachments may be provisioned on this Interconnect. - OS/UNDER/MAINTENANCE: An Interconnect that is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect.
    operationalStatus :: (Core.Maybe Interconnect_OperationalStatus),
    -- | [Output Only] IP address configured on the customer side of the Interconnect link. The customer should configure this IP address during turnup when prompted by Google NOC. This can be used only for ping tests.
    peerIpAddress :: (Core.Maybe Core.Text),
    -- | [Output Only] Number of links actually provisioned in this interconnect.
    provisionedLinkCount :: (Core.Maybe Core.Int32),
    -- | Target number of physical links in the link bundle, as requested by the customer.
    requestedLinkCount :: (Core.Maybe Core.Int32),
    -- | [Output Only] Reserved for future use.
    satisfiesPzs :: (Core.Maybe Core.Bool),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] The current state of Interconnect functionality, which can take one of the following values: - ACTIVE: The Interconnect is valid, turned up and ready to use. Attachments may be provisioned on this Interconnect. - UNPROVISIONED: The Interconnect has not completed turnup. No attachments may be provisioned on this Interconnect. - UNDER_MAINTENANCE: The Interconnect is undergoing internal maintenance. No attachments may be provisioned or updated on this Interconnect.
    state :: (Core.Maybe Interconnect_State)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Interconnect' with the minimum fields required to make a request.
newInterconnect ::
  Interconnect
newInterconnect =
  Interconnect
    { adminEnabled = Core.Nothing,
      circuitInfos = Core.Nothing,
      creationTimestamp = Core.Nothing,
      customerName = Core.Nothing,
      description = Core.Nothing,
      expectedOutages = Core.Nothing,
      googleIpAddress = Core.Nothing,
      googleReferenceId = Core.Nothing,
      id = Core.Nothing,
      interconnectAttachments = Core.Nothing,
      interconnectType = Core.Nothing,
      kind = "compute#interconnect",
      linkType = Core.Nothing,
      location = Core.Nothing,
      name = Core.Nothing,
      nocContactEmail = Core.Nothing,
      operationalStatus = Core.Nothing,
      peerIpAddress = Core.Nothing,
      provisionedLinkCount = Core.Nothing,
      requestedLinkCount = Core.Nothing,
      satisfiesPzs = Core.Nothing,
      selfLink = Core.Nothing,
      state = Core.Nothing
    }

instance Core.FromJSON Interconnect where
  parseJSON =
    Core.withObject
      "Interconnect"
      ( \o ->
          Interconnect
            Core.<$> (o Core..:? "adminEnabled")
            Core.<*> (o Core..:? "circuitInfos")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "customerName")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "expectedOutages")
            Core.<*> (o Core..:? "googleIpAddress")
            Core.<*> (o Core..:? "googleReferenceId")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "interconnectAttachments")
            Core.<*> (o Core..:? "interconnectType")
            Core.<*> (o Core..:? "kind" Core..!= "compute#interconnect")
            Core.<*> (o Core..:? "linkType")
            Core.<*> (o Core..:? "location")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "nocContactEmail")
            Core.<*> (o Core..:? "operationalStatus")
            Core.<*> (o Core..:? "peerIpAddress")
            Core.<*> (o Core..:? "provisionedLinkCount")
            Core.<*> (o Core..:? "requestedLinkCount")
            Core.<*> (o Core..:? "satisfiesPzs")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "state")
      )

instance Core.ToJSON Interconnect where
  toJSON Interconnect {..} =
    Core.object
      ( Core.catMaybes
          [ ("adminEnabled" Core..=) Core.<$> adminEnabled,
            ("circuitInfos" Core..=) Core.<$> circuitInfos,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("customerName" Core..=) Core.<$> customerName,
            ("description" Core..=) Core.<$> description,
            ("expectedOutages" Core..=) Core.<$> expectedOutages,
            ("googleIpAddress" Core..=) Core.<$> googleIpAddress,
            ("googleReferenceId" Core..=)
              Core.<$> googleReferenceId,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("interconnectAttachments" Core..=)
              Core.<$> interconnectAttachments,
            ("interconnectType" Core..=)
              Core.<$> interconnectType,
            Core.Just ("kind" Core..= kind),
            ("linkType" Core..=) Core.<$> linkType,
            ("location" Core..=) Core.<$> location,
            ("name" Core..=) Core.<$> name,
            ("nocContactEmail" Core..=) Core.<$> nocContactEmail,
            ("operationalStatus" Core..=)
              Core.<$> operationalStatus,
            ("peerIpAddress" Core..=) Core.<$> peerIpAddress,
            ("provisionedLinkCount" Core..=)
              Core.<$> provisionedLinkCount,
            ("requestedLinkCount" Core..=)
              Core.<$> requestedLinkCount,
            ("satisfiesPzs" Core..=) Core.<$> satisfiesPzs,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("state" Core..=) Core.<$> state
          ]
      )

-- | Represents an Interconnect Attachment (VLAN) resource. You can use Interconnect attachments (VLANS) to connect your Virtual Private Cloud networks to your on-premises networks through an Interconnect. For more information, read Creating VLAN Attachments.
--
-- /See:/ 'newInterconnectAttachment' smart constructor.
data InterconnectAttachment = InterconnectAttachment
  { -- | Determines whether this Attachment will carry packets. Not present for PARTNER_PROVIDER.
    adminEnabled :: (Core.Maybe Core.Bool),
    -- | Provisioned bandwidth capacity for the interconnect attachment. For attachments of type DEDICATED, the user can set the bandwidth. For attachments of type PARTNER, the Google Partner that is operating the interconnect must set the bandwidth. Output only for PARTNER type, mutable for PARTNER/PROVIDER and DEDICATED, and can take one of the following values: - BPS/50M: 50 Mbit\/s - BPS/100M: 100 Mbit\/s - BPS/200M: 200 Mbit\/s - BPS/300M: 300 Mbit\/s - BPS/400M: 400 Mbit\/s - BPS/500M: 500 Mbit\/s - BPS/1G: 1 Gbit\/s - BPS/2G: 2 Gbit\/s - BPS/5G: 5 Gbit\/s - BPS/10G: 10 Gbit\/s - BPS/20G: 20 Gbit\/s - BPS_50G: 50 Gbit\/s
    bandwidth :: (Core.Maybe InterconnectAttachment_Bandwidth),
    -- | This field is not available.
    candidateIpv6Subnets :: (Core.Maybe [Core.Text]),
    -- | Up to 16 candidate prefixes that can be used to restrict the allocation of cloudRouterIpAddress and customerRouterIpAddress for this attachment. All prefixes must be within link-local address space (169.254.0.0\/16) and must be \/29 or shorter (\/28, \/27, etc). Google will attempt to select an unused \/29 from the supplied candidate prefix(es). The request will fail if all possible \/29s are in use on Google\'s edge. If not supplied, Google will randomly select an unused \/29 from all of link-local space.
    candidateSubnets :: (Core.Maybe [Core.Text]),
    -- | [Output Only] IPv4 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.
    cloudRouterIpAddress :: (Core.Maybe Core.Text),
    -- | [Output Only] IPv6 address + prefix length to be configured on Cloud Router Interface for this interconnect attachment.
    cloudRouterIpv6Address :: (Core.Maybe Core.Text),
    -- | This field is not available.
    cloudRouterIpv6InterfaceId :: (Core.Maybe Core.Text),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | [Output Only] IPv4 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.
    customerRouterIpAddress :: (Core.Maybe Core.Text),
    -- | [Output Only] IPv6 address + prefix length to be configured on the customer router subinterface for this interconnect attachment.
    customerRouterIpv6Address :: (Core.Maybe Core.Text),
    -- | This field is not available.
    customerRouterIpv6InterfaceId :: (Core.Maybe Core.Text),
    -- | [Output Only] Dataplane version for this InterconnectAttachment. This field is only present for Dataplane version 2 and higher. Absence of this field in the API output indicates that the Dataplane is version 1.
    dataplaneVersion :: (Core.Maybe Core.Int32),
    -- | An optional description of this resource.
    description :: (Core.Maybe Core.Text),
    -- | Desired availability domain for the attachment. Only available for type PARTNER, at creation time, and can take one of the following values: - AVAILABILITY/DOMAIN/ANY - AVAILABILITY/DOMAIN/1 - AVAILABILITY/DOMAIN/2 For improved reliability, customers should configure a pair of attachments, one per availability domain. The selected availability domain will be provided to the Partner via the pairing key, so that the provisioned circuit will lie in the specified domain. If not specified, the value will default to AVAILABILITY/DOMAIN/ANY.
    edgeAvailabilityDomain :: (Core.Maybe InterconnectAttachment_EdgeAvailabilityDomain),
    -- | Indicates the user-supplied encryption option of this VLAN attachment (interconnectAttachment). Can only be specified at attachment creation for PARTNER or DEDICATED attachments. Possible values are: - NONE - This is the default value, which means that the VLAN attachment carries unencrypted traffic. VMs are able to send traffic to, or receive traffic from, such a VLAN attachment. - IPSEC - The VLAN attachment carries only encrypted traffic that is encrypted by an IPsec device, such as an HA VPN gateway or third-party IPsec VPN. VMs cannot directly send traffic to, or receive traffic from, such a VLAN attachment. To use /HA VPN over Cloud Interconnect/, the VLAN attachment must be created with this option.
    encryption :: (Core.Maybe InterconnectAttachment_Encryption),
    -- | [Output Only] Google reference ID, to be used when raising support tickets with Google or otherwise to debug backend connectivity issues. [Deprecated] This field is not used.
    googleReferenceId :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | URL of the underlying Interconnect object that this attachment\'s traffic will traverse through.
    interconnect :: (Core.Maybe Core.Text),
    -- | A list of URLs of addresses that have been reserved for the VLAN attachment. Used only for the VLAN attachment that has the encryption option as IPSEC. The addresses must be regional internal IP address ranges. When creating an HA VPN gateway over the VLAN attachment, if the attachment is configured to use a regional internal IP address, then the VPN gateway\'s IP address is allocated from the IP address range specified here. For example, if the HA VPN gateway\'s interface 0 is paired to this VLAN attachment, then a regional internal IP address for the VPN gateway interface 0 will be allocated from the IP address specified for this VLAN attachment. If this field is not specified when creating the VLAN attachment, then later on when creating an HA VPN gateway on this VLAN attachment, the HA VPN gateway\'s IP address is allocated from the regional external IP address pool.
    ipsecInternalAddresses :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Type of the resource. Always compute#interconnectAttachment for interconnect attachments.
    kind :: Core.Text,
    -- | Maximum Transmission Unit (MTU), in bytes, of packets passing through this interconnect attachment. Only 1440 and 1500 are allowed. If not specified, the value will default to 1440.
    mtu :: (Core.Maybe Core.Int32),
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] The current status of whether or not this interconnect attachment is functional, which can take one of the following values: - OS/ACTIVE: The attachment has been turned up and is ready to use. - OS/UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete.
    operationalStatus :: (Core.Maybe InterconnectAttachment_OperationalStatus),
    -- | [Output only for type PARTNER. Input only for PARTNER_PROVIDER. Not present for DEDICATED]. The opaque identifier of an PARTNER attachment used to initiate provisioning with a selected partner. Of the form \"XXXXX\/region\/domain\"
    pairingKey :: (Core.Maybe Core.Text),
    -- | Optional BGP ASN for the router supplied by a Layer 3 Partner if they configured BGP on behalf of the customer. Output only for PARTNER type, input only for PARTNER_PROVIDER, not available for DEDICATED.
    partnerAsn :: (Core.Maybe Core.Int64),
    -- | Informational metadata about Partner attachments from Partners to display to customers. Output only for for PARTNER type, mutable for PARTNER_PROVIDER, not available for DEDICATED.
    partnerMetadata :: (Core.Maybe InterconnectAttachmentPartnerMetadata),
    -- | [Output Only] Information specific to an InterconnectAttachment. This property is populated if the interconnect that this is attached to is of type DEDICATED.
    privateInterconnectInfo :: (Core.Maybe InterconnectAttachmentPrivateInfo),
    -- | [Output Only] URL of the region where the regional interconnect attachment resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    region :: (Core.Maybe Core.Text),
    -- | URL of the Cloud Router to be used for dynamic routing. This router must be in the same region as this InterconnectAttachment. The InterconnectAttachment will automatically connect the Interconnect to the network & region within which the Cloud Router is configured.
    router :: (Core.Maybe Core.Text),
    -- | [Output Only] Reserved for future use.
    satisfiesPzs :: (Core.Maybe Core.Bool),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | The stack type for this interconnect attachment to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used. This field can be both set at interconnect attachments creation and update interconnect attachment operations.
    stackType :: (Core.Maybe InterconnectAttachment_StackType),
    -- | [Output Only] The current state of this attachment\'s functionality. Enum values ACTIVE and UNPROVISIONED are shared by DEDICATED\/PRIVATE, PARTNER, and PARTNER/PROVIDER interconnect attachments, while enum values PENDING/PARTNER, PARTNER/REQUEST/RECEIVED, and PENDING/CUSTOMER are used for only PARTNER and PARTNER/PROVIDER interconnect attachments. This state can take one of the following values: - ACTIVE: The attachment has been turned up and is ready to use. - UNPROVISIONED: The attachment is not ready to use yet, because turnup is not complete. - PENDING/PARTNER: A newly-created PARTNER attachment that has not yet been configured on the Partner side. - PARTNER/REQUEST/RECEIVED: A PARTNER attachment is in the process of provisioning after a PARTNER/PROVIDER attachment was created that references it. - PENDING/CUSTOMER: A PARTNER or PARTNER/PROVIDER attachment that is waiting for a customer to activate it. - DEFUNCT: The attachment was deleted externally and is no longer functional. This could be because the
    -- associated Interconnect was removed, or because the other side of a Partner attachment was deleted.
    state :: (Core.Maybe InterconnectAttachment_State),
    -- | The type of interconnect attachment this is, which can take one of the following values: - DEDICATED: an attachment to a Dedicated Interconnect. - PARTNER: an attachment to a Partner Interconnect, created by the customer. - PARTNER_PROVIDER: an attachment to a Partner Interconnect, created by the partner.
    type' :: (Core.Maybe InterconnectAttachment_Type),
    -- | The IEEE 802.1Q VLAN tag for this attachment, in the range 2-4093. Only specified at creation time.
    vlanTag8021q :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectAttachment' with the minimum fields required to make a request.
newInterconnectAttachment ::
  InterconnectAttachment
newInterconnectAttachment =
  InterconnectAttachment
    { adminEnabled = Core.Nothing,
      bandwidth = Core.Nothing,
      candidateIpv6Subnets = Core.Nothing,
      candidateSubnets = Core.Nothing,
      cloudRouterIpAddress = Core.Nothing,
      cloudRouterIpv6Address = Core.Nothing,
      cloudRouterIpv6InterfaceId = Core.Nothing,
      creationTimestamp = Core.Nothing,
      customerRouterIpAddress = Core.Nothing,
      customerRouterIpv6Address = Core.Nothing,
      customerRouterIpv6InterfaceId = Core.Nothing,
      dataplaneVersion = Core.Nothing,
      description = Core.Nothing,
      edgeAvailabilityDomain = Core.Nothing,
      encryption = Core.Nothing,
      googleReferenceId = Core.Nothing,
      id = Core.Nothing,
      interconnect = Core.Nothing,
      ipsecInternalAddresses = Core.Nothing,
      kind = "compute#interconnectAttachment",
      mtu = Core.Nothing,
      name = Core.Nothing,
      operationalStatus = Core.Nothing,
      pairingKey = Core.Nothing,
      partnerAsn = Core.Nothing,
      partnerMetadata = Core.Nothing,
      privateInterconnectInfo = Core.Nothing,
      region = Core.Nothing,
      router = Core.Nothing,
      satisfiesPzs = Core.Nothing,
      selfLink = Core.Nothing,
      stackType = Core.Nothing,
      state = Core.Nothing,
      type' = Core.Nothing,
      vlanTag8021q = Core.Nothing
    }

instance Core.FromJSON InterconnectAttachment where
  parseJSON =
    Core.withObject
      "InterconnectAttachment"
      ( \o ->
          InterconnectAttachment
            Core.<$> (o Core..:? "adminEnabled")
            Core.<*> (o Core..:? "bandwidth")
            Core.<*> (o Core..:? "candidateIpv6Subnets")
            Core.<*> (o Core..:? "candidateSubnets")
            Core.<*> (o Core..:? "cloudRouterIpAddress")
            Core.<*> (o Core..:? "cloudRouterIpv6Address")
            Core.<*> (o Core..:? "cloudRouterIpv6InterfaceId")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "customerRouterIpAddress")
            Core.<*> (o Core..:? "customerRouterIpv6Address")
            Core.<*> (o Core..:? "customerRouterIpv6InterfaceId")
            Core.<*> (o Core..:? "dataplaneVersion")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "edgeAvailabilityDomain")
            Core.<*> (o Core..:? "encryption")
            Core.<*> (o Core..:? "googleReferenceId")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "interconnect")
            Core.<*> (o Core..:? "ipsecInternalAddresses")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#interconnectAttachment"
                     )
            Core.<*> (o Core..:? "mtu")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "operationalStatus")
            Core.<*> (o Core..:? "pairingKey")
            Core.<*> ( o Core..:? "partnerAsn"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "partnerMetadata")
            Core.<*> (o Core..:? "privateInterconnectInfo")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "router")
            Core.<*> (o Core..:? "satisfiesPzs")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "stackType")
            Core.<*> (o Core..:? "state")
            Core.<*> (o Core..:? "type")
            Core.<*> (o Core..:? "vlanTag8021q")
      )

instance Core.ToJSON InterconnectAttachment where
  toJSON InterconnectAttachment {..} =
    Core.object
      ( Core.catMaybes
          [ ("adminEnabled" Core..=) Core.<$> adminEnabled,
            ("bandwidth" Core..=) Core.<$> bandwidth,
            ("candidateIpv6Subnets" Core..=)
              Core.<$> candidateIpv6Subnets,
            ("candidateSubnets" Core..=)
              Core.<$> candidateSubnets,
            ("cloudRouterIpAddress" Core..=)
              Core.<$> cloudRouterIpAddress,
            ("cloudRouterIpv6Address" Core..=)
              Core.<$> cloudRouterIpv6Address,
            ("cloudRouterIpv6InterfaceId" Core..=)
              Core.<$> cloudRouterIpv6InterfaceId,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("customerRouterIpAddress" Core..=)
              Core.<$> customerRouterIpAddress,
            ("customerRouterIpv6Address" Core..=)
              Core.<$> customerRouterIpv6Address,
            ("customerRouterIpv6InterfaceId" Core..=)
              Core.<$> customerRouterIpv6InterfaceId,
            ("dataplaneVersion" Core..=)
              Core.<$> dataplaneVersion,
            ("description" Core..=) Core.<$> description,
            ("edgeAvailabilityDomain" Core..=)
              Core.<$> edgeAvailabilityDomain,
            ("encryption" Core..=) Core.<$> encryption,
            ("googleReferenceId" Core..=)
              Core.<$> googleReferenceId,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("interconnect" Core..=) Core.<$> interconnect,
            ("ipsecInternalAddresses" Core..=)
              Core.<$> ipsecInternalAddresses,
            Core.Just ("kind" Core..= kind),
            ("mtu" Core..=) Core.<$> mtu,
            ("name" Core..=) Core.<$> name,
            ("operationalStatus" Core..=)
              Core.<$> operationalStatus,
            ("pairingKey" Core..=) Core.<$> pairingKey,
            ("partnerAsn" Core..=) Core.. Core.AsText
              Core.<$> partnerAsn,
            ("partnerMetadata" Core..=) Core.<$> partnerMetadata,
            ("privateInterconnectInfo" Core..=)
              Core.<$> privateInterconnectInfo,
            ("region" Core..=) Core.<$> region,
            ("router" Core..=) Core.<$> router,
            ("satisfiesPzs" Core..=) Core.<$> satisfiesPzs,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("stackType" Core..=) Core.<$> stackType,
            ("state" Core..=) Core.<$> state,
            ("type" Core..=) Core.<$> type',
            ("vlanTag8021q" Core..=) Core.<$> vlanTag8021q
          ]
      )

--
-- /See:/ 'newInterconnectAttachmentAggregatedList' smart constructor.
data InterconnectAttachmentAggregatedList = InterconnectAttachmentAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of InterconnectAttachmentsScopedList resources.
    items :: (Core.Maybe InterconnectAttachmentAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#interconnectAttachmentAggregatedList for aggregated lists of interconnect attachments.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe InterconnectAttachmentAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectAttachmentAggregatedList' with the minimum fields required to make a request.
newInterconnectAttachmentAggregatedList ::
  InterconnectAttachmentAggregatedList
newInterconnectAttachmentAggregatedList =
  InterconnectAttachmentAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#interconnectAttachmentAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance
  Core.FromJSON
    InterconnectAttachmentAggregatedList
  where
  parseJSON =
    Core.withObject
      "InterconnectAttachmentAggregatedList"
      ( \o ->
          InterconnectAttachmentAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#interconnectAttachmentAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance
  Core.ToJSON
    InterconnectAttachmentAggregatedList
  where
  toJSON InterconnectAttachmentAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of InterconnectAttachmentsScopedList resources.
--
-- /See:/ 'newInterconnectAttachmentAggregatedList_Items' smart constructor.
newtype InterconnectAttachmentAggregatedList_Items = InterconnectAttachmentAggregatedList_Items
  { -- | Name of the scope containing this set of interconnect attachments.
    additional :: (Core.HashMap Core.Text InterconnectAttachmentsScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectAttachmentAggregatedList_Items' with the minimum fields required to make a request.
newInterconnectAttachmentAggregatedList_Items ::
  -- |  Name of the scope containing this set of interconnect attachments. See 'additional'.
  Core.HashMap Core.Text InterconnectAttachmentsScopedList ->
  InterconnectAttachmentAggregatedList_Items
newInterconnectAttachmentAggregatedList_Items additional =
  InterconnectAttachmentAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    InterconnectAttachmentAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "InterconnectAttachmentAggregatedList_Items"
      ( \o ->
          InterconnectAttachmentAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    InterconnectAttachmentAggregatedList_Items
  where
  toJSON InterconnectAttachmentAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newInterconnectAttachmentAggregatedList_Warning' smart constructor.
data InterconnectAttachmentAggregatedList_Warning = InterconnectAttachmentAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe InterconnectAttachmentAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' ::
      ( Core.Maybe
          [InterconnectAttachmentAggregatedList_Warning_DataItem]
      ),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectAttachmentAggregatedList_Warning' with the minimum fields required to make a request.
newInterconnectAttachmentAggregatedList_Warning ::
  InterconnectAttachmentAggregatedList_Warning
newInterconnectAttachmentAggregatedList_Warning =
  InterconnectAttachmentAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    InterconnectAttachmentAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "InterconnectAttachmentAggregatedList_Warning"
      ( \o ->
          InterconnectAttachmentAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    InterconnectAttachmentAggregatedList_Warning
  where
  toJSON
    InterconnectAttachmentAggregatedList_Warning {..} =
      Core.object
        ( Core.catMaybes
            [ ("code" Core..=) Core.<$> code,
              ("data" Core..=) Core.<$> data',
              ("message" Core..=) Core.<$> message
            ]
        )

--
-- /See:/ 'newInterconnectAttachmentAggregatedList_Warning_DataItem' smart constructor.
data InterconnectAttachmentAggregatedList_Warning_DataItem = InterconnectAttachmentAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectAttachmentAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newInterconnectAttachmentAggregatedList_Warning_DataItem ::
  InterconnectAttachmentAggregatedList_Warning_DataItem
newInterconnectAttachmentAggregatedList_Warning_DataItem =
  InterconnectAttachmentAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    InterconnectAttachmentAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "InterconnectAttachmentAggregatedList_Warning_DataItem"
      ( \o ->
          InterconnectAttachmentAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    InterconnectAttachmentAggregatedList_Warning_DataItem
  where
  toJSON
    InterconnectAttachmentAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | Response to the list request, and contains a list of interconnect attachments.
--
-- /See:/ 'newInterconnectAttachmentList' smart constructor.
data InterconnectAttachmentList = InterconnectAttachmentList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of InterconnectAttachment resources.
    items :: (Core.Maybe [InterconnectAttachment]),
    -- | [Output Only] Type of resource. Always compute#interconnectAttachmentList for lists of interconnect attachments.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe InterconnectAttachmentList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectAttachmentList' with the minimum fields required to make a request.
newInterconnectAttachmentList ::
  InterconnectAttachmentList
newInterconnectAttachmentList =
  InterconnectAttachmentList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#interconnectAttachmentList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON InterconnectAttachmentList where
  parseJSON =
    Core.withObject
      "InterconnectAttachmentList"
      ( \o ->
          InterconnectAttachmentList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#interconnectAttachmentList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON InterconnectAttachmentList where
  toJSON InterconnectAttachmentList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newInterconnectAttachmentList_Warning' smart constructor.
data InterconnectAttachmentList_Warning = InterconnectAttachmentList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe InterconnectAttachmentList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [InterconnectAttachmentList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectAttachmentList_Warning' with the minimum fields required to make a request.
newInterconnectAttachmentList_Warning ::
  InterconnectAttachmentList_Warning
newInterconnectAttachmentList_Warning =
  InterconnectAttachmentList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    InterconnectAttachmentList_Warning
  where
  parseJSON =
    Core.withObject
      "InterconnectAttachmentList_Warning"
      ( \o ->
          InterconnectAttachmentList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    InterconnectAttachmentList_Warning
  where
  toJSON InterconnectAttachmentList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newInterconnectAttachmentList_Warning_DataItem' smart constructor.
data InterconnectAttachmentList_Warning_DataItem = InterconnectAttachmentList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectAttachmentList_Warning_DataItem' with the minimum fields required to make a request.
newInterconnectAttachmentList_Warning_DataItem ::
  InterconnectAttachmentList_Warning_DataItem
newInterconnectAttachmentList_Warning_DataItem =
  InterconnectAttachmentList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    InterconnectAttachmentList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "InterconnectAttachmentList_Warning_DataItem"
      ( \o ->
          InterconnectAttachmentList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    InterconnectAttachmentList_Warning_DataItem
  where
  toJSON
    InterconnectAttachmentList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | Informational metadata about Partner attachments from Partners to display to customers. These fields are propagated from PARTNER_PROVIDER attachments to their corresponding PARTNER attachments.
--
-- /See:/ 'newInterconnectAttachmentPartnerMetadata' smart constructor.
data InterconnectAttachmentPartnerMetadata = InterconnectAttachmentPartnerMetadata
  { -- | Plain text name of the Interconnect this attachment is connected to, as displayed in the Partner\'s portal. For instance \"Chicago 1\". This value may be validated to match approved Partner values.
    interconnectName :: (Core.Maybe Core.Text),
    -- | Plain text name of the Partner providing this attachment. This value may be validated to match approved Partner values.
    partnerName :: (Core.Maybe Core.Text),
    -- | URL of the Partner\'s portal for this Attachment. Partners may customise this to be a deep link to the specific resource on the Partner portal. This value may be validated to match approved Partner values.
    portalUrl :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectAttachmentPartnerMetadata' with the minimum fields required to make a request.
newInterconnectAttachmentPartnerMetadata ::
  InterconnectAttachmentPartnerMetadata
newInterconnectAttachmentPartnerMetadata =
  InterconnectAttachmentPartnerMetadata
    { interconnectName = Core.Nothing,
      partnerName = Core.Nothing,
      portalUrl = Core.Nothing
    }

instance
  Core.FromJSON
    InterconnectAttachmentPartnerMetadata
  where
  parseJSON =
    Core.withObject
      "InterconnectAttachmentPartnerMetadata"
      ( \o ->
          InterconnectAttachmentPartnerMetadata
            Core.<$> (o Core..:? "interconnectName")
            Core.<*> (o Core..:? "partnerName")
            Core.<*> (o Core..:? "portalUrl")
      )

instance
  Core.ToJSON
    InterconnectAttachmentPartnerMetadata
  where
  toJSON InterconnectAttachmentPartnerMetadata {..} =
    Core.object
      ( Core.catMaybes
          [ ("interconnectName" Core..=)
              Core.<$> interconnectName,
            ("partnerName" Core..=) Core.<$> partnerName,
            ("portalUrl" Core..=) Core.<$> portalUrl
          ]
      )

-- | Information for an interconnect attachment when this belongs to an interconnect of type DEDICATED.
--
-- /See:/ 'newInterconnectAttachmentPrivateInfo' smart constructor.
newtype InterconnectAttachmentPrivateInfo = InterconnectAttachmentPrivateInfo
  { -- | [Output Only] 802.1q encapsulation tag to be used for traffic between Google and the customer, going to and from this network and region.
    tag8021q :: (Core.Maybe Core.Word32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectAttachmentPrivateInfo' with the minimum fields required to make a request.
newInterconnectAttachmentPrivateInfo ::
  InterconnectAttachmentPrivateInfo
newInterconnectAttachmentPrivateInfo =
  InterconnectAttachmentPrivateInfo {tag8021q = Core.Nothing}

instance
  Core.FromJSON
    InterconnectAttachmentPrivateInfo
  where
  parseJSON =
    Core.withObject
      "InterconnectAttachmentPrivateInfo"
      ( \o ->
          InterconnectAttachmentPrivateInfo
            Core.<$> (o Core..:? "tag8021q")
      )

instance
  Core.ToJSON
    InterconnectAttachmentPrivateInfo
  where
  toJSON InterconnectAttachmentPrivateInfo {..} =
    Core.object
      ( Core.catMaybes
          [("tag8021q" Core..=) Core.<$> tag8021q]
      )

--
-- /See:/ 'newInterconnectAttachmentsScopedList' smart constructor.
data InterconnectAttachmentsScopedList = InterconnectAttachmentsScopedList
  { -- | A list of interconnect attachments contained in this scope.
    interconnectAttachments :: (Core.Maybe [InterconnectAttachment]),
    -- | Informational warning which replaces the list of addresses when the list is empty.
    warning :: (Core.Maybe InterconnectAttachmentsScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectAttachmentsScopedList' with the minimum fields required to make a request.
newInterconnectAttachmentsScopedList ::
  InterconnectAttachmentsScopedList
newInterconnectAttachmentsScopedList =
  InterconnectAttachmentsScopedList
    { interconnectAttachments = Core.Nothing,
      warning = Core.Nothing
    }

instance
  Core.FromJSON
    InterconnectAttachmentsScopedList
  where
  parseJSON =
    Core.withObject
      "InterconnectAttachmentsScopedList"
      ( \o ->
          InterconnectAttachmentsScopedList
            Core.<$> (o Core..:? "interconnectAttachments")
            Core.<*> (o Core..:? "warning")
      )

instance
  Core.ToJSON
    InterconnectAttachmentsScopedList
  where
  toJSON InterconnectAttachmentsScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("interconnectAttachments" Core..=)
              Core.<$> interconnectAttachments,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of addresses when the list is empty.
--
-- /See:/ 'newInterconnectAttachmentsScopedList_Warning' smart constructor.
data InterconnectAttachmentsScopedList_Warning = InterconnectAttachmentsScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe InterconnectAttachmentsScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [InterconnectAttachmentsScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectAttachmentsScopedList_Warning' with the minimum fields required to make a request.
newInterconnectAttachmentsScopedList_Warning ::
  InterconnectAttachmentsScopedList_Warning
newInterconnectAttachmentsScopedList_Warning =
  InterconnectAttachmentsScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    InterconnectAttachmentsScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "InterconnectAttachmentsScopedList_Warning"
      ( \o ->
          InterconnectAttachmentsScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    InterconnectAttachmentsScopedList_Warning
  where
  toJSON InterconnectAttachmentsScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newInterconnectAttachmentsScopedList_Warning_DataItem' smart constructor.
data InterconnectAttachmentsScopedList_Warning_DataItem = InterconnectAttachmentsScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectAttachmentsScopedList_Warning_DataItem' with the minimum fields required to make a request.
newInterconnectAttachmentsScopedList_Warning_DataItem ::
  InterconnectAttachmentsScopedList_Warning_DataItem
newInterconnectAttachmentsScopedList_Warning_DataItem =
  InterconnectAttachmentsScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    InterconnectAttachmentsScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "InterconnectAttachmentsScopedList_Warning_DataItem"
      ( \o ->
          InterconnectAttachmentsScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    InterconnectAttachmentsScopedList_Warning_DataItem
  where
  toJSON
    InterconnectAttachmentsScopedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | Describes a single physical circuit between the Customer and Google. CircuitInfo objects are created by Google, so all fields are output only.
--
-- /See:/ 'newInterconnectCircuitInfo' smart constructor.
data InterconnectCircuitInfo = InterconnectCircuitInfo
  { -- | Customer-side demarc ID for this circuit.
    customerDemarcId :: (Core.Maybe Core.Text),
    -- | Google-assigned unique ID for this circuit. Assigned at circuit turn-up.
    googleCircuitId :: (Core.Maybe Core.Text),
    -- | Google-side demarc ID for this circuit. Assigned at circuit turn-up and provided by Google to the customer in the LOA.
    googleDemarcId :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectCircuitInfo' with the minimum fields required to make a request.
newInterconnectCircuitInfo ::
  InterconnectCircuitInfo
newInterconnectCircuitInfo =
  InterconnectCircuitInfo
    { customerDemarcId = Core.Nothing,
      googleCircuitId = Core.Nothing,
      googleDemarcId = Core.Nothing
    }

instance Core.FromJSON InterconnectCircuitInfo where
  parseJSON =
    Core.withObject
      "InterconnectCircuitInfo"
      ( \o ->
          InterconnectCircuitInfo
            Core.<$> (o Core..:? "customerDemarcId")
            Core.<*> (o Core..:? "googleCircuitId")
            Core.<*> (o Core..:? "googleDemarcId")
      )

instance Core.ToJSON InterconnectCircuitInfo where
  toJSON InterconnectCircuitInfo {..} =
    Core.object
      ( Core.catMaybes
          [ ("customerDemarcId" Core..=)
              Core.<$> customerDemarcId,
            ("googleCircuitId" Core..=) Core.<$> googleCircuitId,
            ("googleDemarcId" Core..=) Core.<$> googleDemarcId
          ]
      )

-- | Diagnostics information about interconnect, contains detailed and current technical information about Google\'s side of the connection.
--
-- /See:/ 'newInterconnectDiagnostics' smart constructor.
data InterconnectDiagnostics = InterconnectDiagnostics
  { -- | A list of InterconnectDiagnostics.ARPEntry objects, describing individual neighbors currently seen by the Google router in the ARP cache for the Interconnect. This will be empty when the Interconnect is not bundled.
    arpCaches :: (Core.Maybe [InterconnectDiagnosticsARPEntry]),
    -- | The aggregation type of the bundle interface.
    bundleAggregationType :: (Core.Maybe InterconnectDiagnostics_BundleAggregationType),
    -- | The operational status of the bundle interface.
    bundleOperationalStatus :: (Core.Maybe InterconnectDiagnostics_BundleOperationalStatus),
    -- | A list of InterconnectDiagnostics.LinkStatus objects, describing the status for each link on the Interconnect.
    links :: (Core.Maybe [InterconnectDiagnosticsLinkStatus]),
    -- | The MAC address of the Interconnect\'s bundle interface.
    macAddress :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectDiagnostics' with the minimum fields required to make a request.
newInterconnectDiagnostics ::
  InterconnectDiagnostics
newInterconnectDiagnostics =
  InterconnectDiagnostics
    { arpCaches = Core.Nothing,
      bundleAggregationType = Core.Nothing,
      bundleOperationalStatus = Core.Nothing,
      links = Core.Nothing,
      macAddress = Core.Nothing
    }

instance Core.FromJSON InterconnectDiagnostics where
  parseJSON =
    Core.withObject
      "InterconnectDiagnostics"
      ( \o ->
          InterconnectDiagnostics
            Core.<$> (o Core..:? "arpCaches")
            Core.<*> (o Core..:? "bundleAggregationType")
            Core.<*> (o Core..:? "bundleOperationalStatus")
            Core.<*> (o Core..:? "links")
            Core.<*> (o Core..:? "macAddress")
      )

instance Core.ToJSON InterconnectDiagnostics where
  toJSON InterconnectDiagnostics {..} =
    Core.object
      ( Core.catMaybes
          [ ("arpCaches" Core..=) Core.<$> arpCaches,
            ("bundleAggregationType" Core..=)
              Core.<$> bundleAggregationType,
            ("bundleOperationalStatus" Core..=)
              Core.<$> bundleOperationalStatus,
            ("links" Core..=) Core.<$> links,
            ("macAddress" Core..=) Core.<$> macAddress
          ]
      )

-- | Describing the ARP neighbor entries seen on this link
--
-- /See:/ 'newInterconnectDiagnosticsARPEntry' smart constructor.
data InterconnectDiagnosticsARPEntry = InterconnectDiagnosticsARPEntry
  { -- | The IP address of this ARP neighbor.
    ipAddress :: (Core.Maybe Core.Text),
    -- | The MAC address of this ARP neighbor.
    macAddress :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectDiagnosticsARPEntry' with the minimum fields required to make a request.
newInterconnectDiagnosticsARPEntry ::
  InterconnectDiagnosticsARPEntry
newInterconnectDiagnosticsARPEntry =
  InterconnectDiagnosticsARPEntry
    { ipAddress = Core.Nothing,
      macAddress = Core.Nothing
    }

instance
  Core.FromJSON
    InterconnectDiagnosticsARPEntry
  where
  parseJSON =
    Core.withObject
      "InterconnectDiagnosticsARPEntry"
      ( \o ->
          InterconnectDiagnosticsARPEntry
            Core.<$> (o Core..:? "ipAddress")
            Core.<*> (o Core..:? "macAddress")
      )

instance Core.ToJSON InterconnectDiagnosticsARPEntry where
  toJSON InterconnectDiagnosticsARPEntry {..} =
    Core.object
      ( Core.catMaybes
          [ ("ipAddress" Core..=) Core.<$> ipAddress,
            ("macAddress" Core..=) Core.<$> macAddress
          ]
      )

--
-- /See:/ 'newInterconnectDiagnosticsLinkLACPStatus' smart constructor.
data InterconnectDiagnosticsLinkLACPStatus = InterconnectDiagnosticsLinkLACPStatus
  { -- | System ID of the port on Google\'s side of the LACP exchange.
    googleSystemId :: (Core.Maybe Core.Text),
    -- | System ID of the port on the neighbor\'s side of the LACP exchange.
    neighborSystemId :: (Core.Maybe Core.Text),
    -- | The state of a LACP link, which can take one of the following values: - ACTIVE: The link is configured and active within the bundle. - DETACHED: The link is not configured within the bundle. This means that the rest of the object should be empty.
    state :: (Core.Maybe InterconnectDiagnosticsLinkLACPStatus_State)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectDiagnosticsLinkLACPStatus' with the minimum fields required to make a request.
newInterconnectDiagnosticsLinkLACPStatus ::
  InterconnectDiagnosticsLinkLACPStatus
newInterconnectDiagnosticsLinkLACPStatus =
  InterconnectDiagnosticsLinkLACPStatus
    { googleSystemId = Core.Nothing,
      neighborSystemId = Core.Nothing,
      state = Core.Nothing
    }

instance
  Core.FromJSON
    InterconnectDiagnosticsLinkLACPStatus
  where
  parseJSON =
    Core.withObject
      "InterconnectDiagnosticsLinkLACPStatus"
      ( \o ->
          InterconnectDiagnosticsLinkLACPStatus
            Core.<$> (o Core..:? "googleSystemId")
            Core.<*> (o Core..:? "neighborSystemId")
            Core.<*> (o Core..:? "state")
      )

instance
  Core.ToJSON
    InterconnectDiagnosticsLinkLACPStatus
  where
  toJSON InterconnectDiagnosticsLinkLACPStatus {..} =
    Core.object
      ( Core.catMaybes
          [ ("googleSystemId" Core..=) Core.<$> googleSystemId,
            ("neighborSystemId" Core..=)
              Core.<$> neighborSystemId,
            ("state" Core..=) Core.<$> state
          ]
      )

--
-- /See:/ 'newInterconnectDiagnosticsLinkOpticalPower' smart constructor.
data InterconnectDiagnosticsLinkOpticalPower = InterconnectDiagnosticsLinkOpticalPower
  { -- | The status of the current value when compared to the warning and alarm levels for the receiving or transmitting transceiver. Possible states include: - OK: The value has not crossed a warning threshold. - LOW/WARNING: The value has crossed below the low warning threshold. - HIGH/WARNING: The value has crossed above the high warning threshold. - LOW/ALARM: The value has crossed below the low alarm threshold. - HIGH/ALARM: The value has crossed above the high alarm threshold.
    state :: (Core.Maybe InterconnectDiagnosticsLinkOpticalPower_State),
    -- | Value of the current receiving or transmitting optical power, read in dBm. Take a known good optical value, give it a 10% margin and trigger warnings relative to that value. In general, a -7dBm warning and a -11dBm alarm are good optical value estimates for most links.
    value :: (Core.Maybe Core.Double)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectDiagnosticsLinkOpticalPower' with the minimum fields required to make a request.
newInterconnectDiagnosticsLinkOpticalPower ::
  InterconnectDiagnosticsLinkOpticalPower
newInterconnectDiagnosticsLinkOpticalPower =
  InterconnectDiagnosticsLinkOpticalPower
    { state = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    InterconnectDiagnosticsLinkOpticalPower
  where
  parseJSON =
    Core.withObject
      "InterconnectDiagnosticsLinkOpticalPower"
      ( \o ->
          InterconnectDiagnosticsLinkOpticalPower
            Core.<$> (o Core..:? "state") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    InterconnectDiagnosticsLinkOpticalPower
  where
  toJSON InterconnectDiagnosticsLinkOpticalPower {..} =
    Core.object
      ( Core.catMaybes
          [ ("state" Core..=) Core.<$> state,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newInterconnectDiagnosticsLinkStatus' smart constructor.
data InterconnectDiagnosticsLinkStatus = InterconnectDiagnosticsLinkStatus
  { -- | A list of InterconnectDiagnostics.ARPEntry objects, describing the ARP neighbor entries seen on this link. This will be empty if the link is bundled
    arpCaches :: (Core.Maybe [InterconnectDiagnosticsARPEntry]),
    -- | The unique ID for this link assigned during turn up by Google.
    circuitId :: (Core.Maybe Core.Text),
    -- | The Demarc address assigned by Google and provided in the LoA.
    googleDemarc :: (Core.Maybe Core.Text),
    -- |
    lacpStatus :: (Core.Maybe InterconnectDiagnosticsLinkLACPStatus),
    -- | The operational status of the link.
    operationalStatus :: (Core.Maybe InterconnectDiagnosticsLinkStatus_OperationalStatus),
    -- | An InterconnectDiagnostics.LinkOpticalPower object, describing the current value and status of the received light level.
    receivingOpticalPower :: (Core.Maybe InterconnectDiagnosticsLinkOpticalPower),
    -- | An InterconnectDiagnostics.LinkOpticalPower object, describing the current value and status of the transmitted light level.
    transmittingOpticalPower :: (Core.Maybe InterconnectDiagnosticsLinkOpticalPower)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectDiagnosticsLinkStatus' with the minimum fields required to make a request.
newInterconnectDiagnosticsLinkStatus ::
  InterconnectDiagnosticsLinkStatus
newInterconnectDiagnosticsLinkStatus =
  InterconnectDiagnosticsLinkStatus
    { arpCaches = Core.Nothing,
      circuitId = Core.Nothing,
      googleDemarc = Core.Nothing,
      lacpStatus = Core.Nothing,
      operationalStatus = Core.Nothing,
      receivingOpticalPower = Core.Nothing,
      transmittingOpticalPower = Core.Nothing
    }

instance
  Core.FromJSON
    InterconnectDiagnosticsLinkStatus
  where
  parseJSON =
    Core.withObject
      "InterconnectDiagnosticsLinkStatus"
      ( \o ->
          InterconnectDiagnosticsLinkStatus
            Core.<$> (o Core..:? "arpCaches")
            Core.<*> (o Core..:? "circuitId")
            Core.<*> (o Core..:? "googleDemarc")
            Core.<*> (o Core..:? "lacpStatus")
            Core.<*> (o Core..:? "operationalStatus")
            Core.<*> (o Core..:? "receivingOpticalPower")
            Core.<*> (o Core..:? "transmittingOpticalPower")
      )

instance
  Core.ToJSON
    InterconnectDiagnosticsLinkStatus
  where
  toJSON InterconnectDiagnosticsLinkStatus {..} =
    Core.object
      ( Core.catMaybes
          [ ("arpCaches" Core..=) Core.<$> arpCaches,
            ("circuitId" Core..=) Core.<$> circuitId,
            ("googleDemarc" Core..=) Core.<$> googleDemarc,
            ("lacpStatus" Core..=) Core.<$> lacpStatus,
            ("operationalStatus" Core..=)
              Core.<$> operationalStatus,
            ("receivingOpticalPower" Core..=)
              Core.<$> receivingOpticalPower,
            ("transmittingOpticalPower" Core..=)
              Core.<$> transmittingOpticalPower
          ]
      )

-- | Response to the list request, and contains a list of interconnects.
--
-- /See:/ 'newInterconnectList' smart constructor.
data InterconnectList = InterconnectList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of Interconnect resources.
    items :: (Core.Maybe [Interconnect]),
    -- | [Output Only] Type of resource. Always compute#interconnectList for lists of interconnects.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe InterconnectList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectList' with the minimum fields required to make a request.
newInterconnectList ::
  InterconnectList
newInterconnectList =
  InterconnectList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#interconnectList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON InterconnectList where
  parseJSON =
    Core.withObject
      "InterconnectList"
      ( \o ->
          InterconnectList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#interconnectList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON InterconnectList where
  toJSON InterconnectList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newInterconnectList_Warning' smart constructor.
data InterconnectList_Warning = InterconnectList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe InterconnectList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [InterconnectList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectList_Warning' with the minimum fields required to make a request.
newInterconnectList_Warning ::
  InterconnectList_Warning
newInterconnectList_Warning =
  InterconnectList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON InterconnectList_Warning where
  parseJSON =
    Core.withObject
      "InterconnectList_Warning"
      ( \o ->
          InterconnectList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON InterconnectList_Warning where
  toJSON InterconnectList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newInterconnectList_Warning_DataItem' smart constructor.
data InterconnectList_Warning_DataItem = InterconnectList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectList_Warning_DataItem' with the minimum fields required to make a request.
newInterconnectList_Warning_DataItem ::
  InterconnectList_Warning_DataItem
newInterconnectList_Warning_DataItem =
  InterconnectList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    InterconnectList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "InterconnectList_Warning_DataItem"
      ( \o ->
          InterconnectList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    InterconnectList_Warning_DataItem
  where
  toJSON InterconnectList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Represents an Interconnect Attachment (VLAN) Location resource. You can use this resource to find location details about an Interconnect attachment (VLAN). For more information about interconnect attachments, read Creating VLAN Attachments.
--
-- /See:/ 'newInterconnectLocation' smart constructor.
data InterconnectLocation = InterconnectLocation
  { -- | [Output Only] The postal address of the Point of Presence, each line in the address is separated by a newline character.
    address :: (Core.Maybe Core.Text),
    -- | [Output Only] Availability zone for this InterconnectLocation. Within a metropolitan area (metro), maintenance will not be simultaneously scheduled in more than one availability zone. Example: \"zone1\" or \"zone2\".
    availabilityZone :: (Core.Maybe Core.Text),
    -- | [Output Only] Metropolitan area designator that indicates which city an interconnect is located. For example: \"Chicago, IL\", \"Amsterdam, Netherlands\".
    city :: (Core.Maybe Core.Text),
    -- | [Output Only] Continent for this location, which can take one of the following values: - AFRICA - ASIA/PAC - EUROPE - NORTH/AMERICA - SOUTH_AMERICA
    continent :: (Core.Maybe InterconnectLocation_Continent),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | [Output Only] An optional description of the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The name of the provider for this facility (e.g., EQUINIX).
    facilityProvider :: (Core.Maybe Core.Text),
    -- | [Output Only] A provider-assigned Identifier for this facility (e.g., Ashburn-DC1).
    facilityProviderFacilityId :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#interconnectLocation for interconnect locations.
    kind :: Core.Text,
    -- | [Output Only] Name of the resource.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] The peeringdb identifier for this facility (corresponding with a netfac type in peeringdb).
    peeringdbFacilityId :: (Core.Maybe Core.Text),
    -- | [Output Only] A list of InterconnectLocation.RegionInfo objects, that describe parameters pertaining to the relation between this InterconnectLocation and various Google Cloud regions.
    regionInfos :: (Core.Maybe [InterconnectLocationRegionInfo]),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] The status of this InterconnectLocation, which can take one of the following values: - CLOSED: The InterconnectLocation is closed and is unavailable for provisioning new Interconnects. - AVAILABLE: The InterconnectLocation is available for provisioning new Interconnects.
    status :: (Core.Maybe InterconnectLocation_Status),
    -- | [Output Only] Reserved for future use.
    supportsPzs :: (Core.Maybe Core.Bool)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectLocation' with the minimum fields required to make a request.
newInterconnectLocation ::
  InterconnectLocation
newInterconnectLocation =
  InterconnectLocation
    { address = Core.Nothing,
      availabilityZone = Core.Nothing,
      city = Core.Nothing,
      continent = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      facilityProvider = Core.Nothing,
      facilityProviderFacilityId = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#interconnectLocation",
      name = Core.Nothing,
      peeringdbFacilityId = Core.Nothing,
      regionInfos = Core.Nothing,
      selfLink = Core.Nothing,
      status = Core.Nothing,
      supportsPzs = Core.Nothing
    }

instance Core.FromJSON InterconnectLocation where
  parseJSON =
    Core.withObject
      "InterconnectLocation"
      ( \o ->
          InterconnectLocation
            Core.<$> (o Core..:? "address")
            Core.<*> (o Core..:? "availabilityZone")
            Core.<*> (o Core..:? "city")
            Core.<*> (o Core..:? "continent")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "facilityProvider")
            Core.<*> (o Core..:? "facilityProviderFacilityId")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#interconnectLocation"
                     )
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "peeringdbFacilityId")
            Core.<*> (o Core..:? "regionInfos")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "status")
            Core.<*> (o Core..:? "supportsPzs")
      )

instance Core.ToJSON InterconnectLocation where
  toJSON InterconnectLocation {..} =
    Core.object
      ( Core.catMaybes
          [ ("address" Core..=) Core.<$> address,
            ("availabilityZone" Core..=)
              Core.<$> availabilityZone,
            ("city" Core..=) Core.<$> city,
            ("continent" Core..=) Core.<$> continent,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("facilityProvider" Core..=)
              Core.<$> facilityProvider,
            ("facilityProviderFacilityId" Core..=)
              Core.<$> facilityProviderFacilityId,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("peeringdbFacilityId" Core..=)
              Core.<$> peeringdbFacilityId,
            ("regionInfos" Core..=) Core.<$> regionInfos,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("status" Core..=) Core.<$> status,
            ("supportsPzs" Core..=) Core.<$> supportsPzs
          ]
      )

-- | Response to the list request, and contains a list of interconnect locations.
--
-- /See:/ 'newInterconnectLocationList' smart constructor.
data InterconnectLocationList = InterconnectLocationList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of InterconnectLocation resources.
    items :: (Core.Maybe [InterconnectLocation]),
    -- | [Output Only] Type of resource. Always compute#interconnectLocationList for lists of interconnect locations.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe InterconnectLocationList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectLocationList' with the minimum fields required to make a request.
newInterconnectLocationList ::
  InterconnectLocationList
newInterconnectLocationList =
  InterconnectLocationList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#interconnectLocationList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON InterconnectLocationList where
  parseJSON =
    Core.withObject
      "InterconnectLocationList"
      ( \o ->
          InterconnectLocationList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#interconnectLocationList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON InterconnectLocationList where
  toJSON InterconnectLocationList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newInterconnectLocationList_Warning' smart constructor.
data InterconnectLocationList_Warning = InterconnectLocationList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe InterconnectLocationList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [InterconnectLocationList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectLocationList_Warning' with the minimum fields required to make a request.
newInterconnectLocationList_Warning ::
  InterconnectLocationList_Warning
newInterconnectLocationList_Warning =
  InterconnectLocationList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    InterconnectLocationList_Warning
  where
  parseJSON =
    Core.withObject
      "InterconnectLocationList_Warning"
      ( \o ->
          InterconnectLocationList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON InterconnectLocationList_Warning where
  toJSON InterconnectLocationList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newInterconnectLocationList_Warning_DataItem' smart constructor.
data InterconnectLocationList_Warning_DataItem = InterconnectLocationList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectLocationList_Warning_DataItem' with the minimum fields required to make a request.
newInterconnectLocationList_Warning_DataItem ::
  InterconnectLocationList_Warning_DataItem
newInterconnectLocationList_Warning_DataItem =
  InterconnectLocationList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    InterconnectLocationList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "InterconnectLocationList_Warning_DataItem"
      ( \o ->
          InterconnectLocationList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    InterconnectLocationList_Warning_DataItem
  where
  toJSON InterconnectLocationList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Information about any potential InterconnectAttachments between an Interconnect at a specific InterconnectLocation, and a specific Cloud Region.
--
-- /See:/ 'newInterconnectLocationRegionInfo' smart constructor.
data InterconnectLocationRegionInfo = InterconnectLocationRegionInfo
  { -- | Expected round-trip time in milliseconds, from this InterconnectLocation to a VM in this region.
    expectedRttMs :: (Core.Maybe Core.Int64),
    -- | Identifies the network presence of this location.
    locationPresence :: (Core.Maybe InterconnectLocationRegionInfo_LocationPresence),
    -- | URL for the region of this location.
    region :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectLocationRegionInfo' with the minimum fields required to make a request.
newInterconnectLocationRegionInfo ::
  InterconnectLocationRegionInfo
newInterconnectLocationRegionInfo =
  InterconnectLocationRegionInfo
    { expectedRttMs = Core.Nothing,
      locationPresence = Core.Nothing,
      region = Core.Nothing
    }

instance Core.FromJSON InterconnectLocationRegionInfo where
  parseJSON =
    Core.withObject
      "InterconnectLocationRegionInfo"
      ( \o ->
          InterconnectLocationRegionInfo
            Core.<$> ( o Core..:? "expectedRttMs"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "locationPresence")
            Core.<*> (o Core..:? "region")
      )

instance Core.ToJSON InterconnectLocationRegionInfo where
  toJSON InterconnectLocationRegionInfo {..} =
    Core.object
      ( Core.catMaybes
          [ ("expectedRttMs" Core..=) Core.. Core.AsText
              Core.<$> expectedRttMs,
            ("locationPresence" Core..=)
              Core.<$> locationPresence,
            ("region" Core..=) Core.<$> region
          ]
      )

-- | Description of a planned outage on this Interconnect.
--
-- /See:/ 'newInterconnectOutageNotification' smart constructor.
data InterconnectOutageNotification = InterconnectOutageNotification
  { -- | If issue/type is IT/PARTIAL_OUTAGE, a list of the Google-side circuit IDs that will be affected.
    affectedCircuits :: (Core.Maybe [Core.Text]),
    -- | A description about the purpose of the outage.
    description :: (Core.Maybe Core.Text),
    -- | Scheduled end time for the outage (milliseconds since Unix epoch).
    endTime :: (Core.Maybe Core.Int64),
    -- | Form this outage is expected to take, which can take one of the following values: - OUTAGE: The Interconnect may be completely out of service for some or all of the specified window. - PARTIAL/OUTAGE: Some circuits comprising the Interconnect as a whole should remain up, but with reduced bandwidth. Note that the versions of this enum prefixed with \"IT/\" have been deprecated in favor of the unprefixed values.
    issueType :: (Core.Maybe InterconnectOutageNotification_IssueType),
    -- | Unique identifier for this outage notification.
    name :: (Core.Maybe Core.Text),
    -- | The party that generated this notification, which can take the following value: - GOOGLE: this notification as generated by Google. Note that the value of NSRC_GOOGLE has been deprecated in favor of GOOGLE.
    source :: (Core.Maybe InterconnectOutageNotification_Source),
    -- | Scheduled start time for the outage (milliseconds since Unix epoch).
    startTime :: (Core.Maybe Core.Int64),
    -- | State of this notification, which can take one of the following values: - ACTIVE: This outage notification is active. The event could be in the past, present, or future. See start/time and end/time for scheduling. - CANCELLED: The outage associated with this notification was cancelled before the outage was due to start. - COMPLETED: The outage associated with this notification is complete. Note that the versions of this enum prefixed with \"NS_\" have been deprecated in favor of the unprefixed values.
    state :: (Core.Maybe InterconnectOutageNotification_State)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectOutageNotification' with the minimum fields required to make a request.
newInterconnectOutageNotification ::
  InterconnectOutageNotification
newInterconnectOutageNotification =
  InterconnectOutageNotification
    { affectedCircuits = Core.Nothing,
      description = Core.Nothing,
      endTime = Core.Nothing,
      issueType = Core.Nothing,
      name = Core.Nothing,
      source = Core.Nothing,
      startTime = Core.Nothing,
      state = Core.Nothing
    }

instance Core.FromJSON InterconnectOutageNotification where
  parseJSON =
    Core.withObject
      "InterconnectOutageNotification"
      ( \o ->
          InterconnectOutageNotification
            Core.<$> (o Core..:? "affectedCircuits")
            Core.<*> (o Core..:? "description")
            Core.<*> ( o Core..:? "endTime"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "issueType")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "source")
            Core.<*> ( o Core..:? "startTime"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "state")
      )

instance Core.ToJSON InterconnectOutageNotification where
  toJSON InterconnectOutageNotification {..} =
    Core.object
      ( Core.catMaybes
          [ ("affectedCircuits" Core..=)
              Core.<$> affectedCircuits,
            ("description" Core..=) Core.<$> description,
            ("endTime" Core..=) Core.. Core.AsText
              Core.<$> endTime,
            ("issueType" Core..=) Core.<$> issueType,
            ("name" Core..=) Core.<$> name,
            ("source" Core..=) Core.<$> source,
            ("startTime" Core..=) Core.. Core.AsText
              Core.<$> startTime,
            ("state" Core..=) Core.<$> state
          ]
      )

-- | Response for the InterconnectsGetDiagnosticsRequest.
--
-- /See:/ 'newInterconnectsGetDiagnosticsResponse' smart constructor.
newtype InterconnectsGetDiagnosticsResponse = InterconnectsGetDiagnosticsResponse
  { -- |
    result :: (Core.Maybe InterconnectDiagnostics)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'InterconnectsGetDiagnosticsResponse' with the minimum fields required to make a request.
newInterconnectsGetDiagnosticsResponse ::
  InterconnectsGetDiagnosticsResponse
newInterconnectsGetDiagnosticsResponse =
  InterconnectsGetDiagnosticsResponse {result = Core.Nothing}

instance
  Core.FromJSON
    InterconnectsGetDiagnosticsResponse
  where
  parseJSON =
    Core.withObject
      "InterconnectsGetDiagnosticsResponse"
      ( \o ->
          InterconnectsGetDiagnosticsResponse
            Core.<$> (o Core..:? "result")
      )

instance
  Core.ToJSON
    InterconnectsGetDiagnosticsResponse
  where
  toJSON InterconnectsGetDiagnosticsResponse {..} =
    Core.object
      (Core.catMaybes [("result" Core..=) Core.<$> result])

-- | Represents a License resource. A License represents billing and aggregate usage data for public and marketplace images. /Caution/ This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
--
-- /See:/ 'newLicense' smart constructor.
data License = License
  { -- | [Output Only] Deprecated. This field no longer reflects whether a license charges a usage fee.
    chargesUseFee :: (Core.Maybe Core.Bool),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional textual description of the resource; provided by the client when the resource is created.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of resource. Always compute#license for licenses.
    kind :: Core.Text,
    -- | [Output Only] The unique code used to attach this license to images, snapshots, and disks.
    licenseCode :: (Core.Maybe Core.Word64),
    -- | Name of the resource. The name must be 1-63 characters long and comply with RFC1035.
    name :: (Core.Maybe Core.Text),
    -- |
    resourceRequirements :: (Core.Maybe LicenseResourceRequirements),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | If false, licenses will not be copied from the source resource when creating an image from a disk, disk from snapshot, or snapshot from disk.
    transferable :: (Core.Maybe Core.Bool)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'License' with the minimum fields required to make a request.
newLicense ::
  License
newLicense =
  License
    { chargesUseFee = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#license",
      licenseCode = Core.Nothing,
      name = Core.Nothing,
      resourceRequirements = Core.Nothing,
      selfLink = Core.Nothing,
      transferable = Core.Nothing
    }

instance Core.FromJSON License where
  parseJSON =
    Core.withObject
      "License"
      ( \o ->
          License
            Core.<$> (o Core..:? "chargesUseFee")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#license")
            Core.<*> ( o Core..:? "licenseCode"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "resourceRequirements")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "transferable")
      )

instance Core.ToJSON License where
  toJSON License {..} =
    Core.object
      ( Core.catMaybes
          [ ("chargesUseFee" Core..=) Core.<$> chargesUseFee,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("licenseCode" Core..=) Core.. Core.AsText
              Core.<$> licenseCode,
            ("name" Core..=) Core.<$> name,
            ("resourceRequirements" Core..=)
              Core.<$> resourceRequirements,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("transferable" Core..=) Core.<$> transferable
          ]
      )

-- | Represents a License Code resource. A License Code is a unique identifier used to represent a license resource. /Caution/ This resource is intended for use only by third-party partners who are creating Cloud Marketplace images.
--
-- /See:/ 'newLicenseCode' smart constructor.
data LicenseCode = LicenseCode
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | [Output Only] Description of this License Code.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of resource. Always compute#licenseCode for licenses.
    kind :: Core.Text,
    -- | [Output Only] URL and description aliases of Licenses with the same License Code.
    licenseAlias :: (Core.Maybe [LicenseCodeLicenseAlias]),
    -- | [Output Only] Name of the resource. The name is 1-20 characters long and must be a valid 64 bit integer.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Current state of this License Code.
    state :: (Core.Maybe LicenseCode_State),
    -- | [Output Only] If true, the license will remain attached when creating images or snapshots from disks. Otherwise, the license is not transferred.
    transferable :: (Core.Maybe Core.Bool)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'LicenseCode' with the minimum fields required to make a request.
newLicenseCode ::
  LicenseCode
newLicenseCode =
  LicenseCode
    { creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#licenseCode",
      licenseAlias = Core.Nothing,
      name = Core.Nothing,
      selfLink = Core.Nothing,
      state = Core.Nothing,
      transferable = Core.Nothing
    }

instance Core.FromJSON LicenseCode where
  parseJSON =
    Core.withObject
      "LicenseCode"
      ( \o ->
          LicenseCode
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#licenseCode")
            Core.<*> (o Core..:? "licenseAlias")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "state")
            Core.<*> (o Core..:? "transferable")
      )

instance Core.ToJSON LicenseCode where
  toJSON LicenseCode {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("licenseAlias" Core..=) Core.<$> licenseAlias,
            ("name" Core..=) Core.<$> name,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("state" Core..=) Core.<$> state,
            ("transferable" Core..=) Core.<$> transferable
          ]
      )

--
-- /See:/ 'newLicenseCodeLicenseAlias' smart constructor.
data LicenseCodeLicenseAlias = LicenseCodeLicenseAlias
  { -- | [Output Only] Description of this License Code.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] URL of license corresponding to this License Code.
    selfLink :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'LicenseCodeLicenseAlias' with the minimum fields required to make a request.
newLicenseCodeLicenseAlias ::
  LicenseCodeLicenseAlias
newLicenseCodeLicenseAlias =
  LicenseCodeLicenseAlias {description = Core.Nothing, selfLink = Core.Nothing}

instance Core.FromJSON LicenseCodeLicenseAlias where
  parseJSON =
    Core.withObject
      "LicenseCodeLicenseAlias"
      ( \o ->
          LicenseCodeLicenseAlias
            Core.<$> (o Core..:? "description")
            Core.<*> (o Core..:? "selfLink")
      )

instance Core.ToJSON LicenseCodeLicenseAlias where
  toJSON LicenseCodeLicenseAlias {..} =
    Core.object
      ( Core.catMaybes
          [ ("description" Core..=) Core.<$> description,
            ("selfLink" Core..=) Core.<$> selfLink
          ]
      )

-- | Commitment for a particular license resource.
--
-- /See:/ 'newLicenseResourceCommitment' smart constructor.
data LicenseResourceCommitment = LicenseResourceCommitment
  { -- | The number of licenses purchased.
    amount :: (Core.Maybe Core.Int64),
    -- | Specifies the core range of the instance for which this license applies.
    coresPerLicense :: (Core.Maybe Core.Text),
    -- | Any applicable license URI.
    license :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'LicenseResourceCommitment' with the minimum fields required to make a request.
newLicenseResourceCommitment ::
  LicenseResourceCommitment
newLicenseResourceCommitment =
  LicenseResourceCommitment
    { amount = Core.Nothing,
      coresPerLicense = Core.Nothing,
      license = Core.Nothing
    }

instance Core.FromJSON LicenseResourceCommitment where
  parseJSON =
    Core.withObject
      "LicenseResourceCommitment"
      ( \o ->
          LicenseResourceCommitment
            Core.<$> ( o Core..:? "amount"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "coresPerLicense")
            Core.<*> (o Core..:? "license")
      )

instance Core.ToJSON LicenseResourceCommitment where
  toJSON LicenseResourceCommitment {..} =
    Core.object
      ( Core.catMaybes
          [ ("amount" Core..=) Core.. Core.AsText
              Core.<$> amount,
            ("coresPerLicense" Core..=) Core.<$> coresPerLicense,
            ("license" Core..=) Core.<$> license
          ]
      )

--
-- /See:/ 'newLicenseResourceRequirements' smart constructor.
data LicenseResourceRequirements = LicenseResourceRequirements
  { -- | Minimum number of guest cpus required to use the Instance. Enforced at Instance creation and Instance start.
    minGuestCpuCount :: (Core.Maybe Core.Int32),
    -- | Minimum memory required to use the Instance. Enforced at Instance creation and Instance start.
    minMemoryMb :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'LicenseResourceRequirements' with the minimum fields required to make a request.
newLicenseResourceRequirements ::
  LicenseResourceRequirements
newLicenseResourceRequirements =
  LicenseResourceRequirements
    { minGuestCpuCount = Core.Nothing,
      minMemoryMb = Core.Nothing
    }

instance Core.FromJSON LicenseResourceRequirements where
  parseJSON =
    Core.withObject
      "LicenseResourceRequirements"
      ( \o ->
          LicenseResourceRequirements
            Core.<$> (o Core..:? "minGuestCpuCount")
            Core.<*> (o Core..:? "minMemoryMb")
      )

instance Core.ToJSON LicenseResourceRequirements where
  toJSON LicenseResourceRequirements {..} =
    Core.object
      ( Core.catMaybes
          [ ("minGuestCpuCount" Core..=)
              Core.<$> minGuestCpuCount,
            ("minMemoryMb" Core..=) Core.<$> minMemoryMb
          ]
      )

--
-- /See:/ 'newLicensesListResponse' smart constructor.
data LicensesListResponse = LicensesListResponse
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of License resources.
    items :: (Core.Maybe [License]),
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe LicensesListResponse_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'LicensesListResponse' with the minimum fields required to make a request.
newLicensesListResponse ::
  LicensesListResponse
newLicensesListResponse =
  LicensesListResponse
    { id = Core.Nothing,
      items = Core.Nothing,
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON LicensesListResponse where
  parseJSON =
    Core.withObject
      "LicensesListResponse"
      ( \o ->
          LicensesListResponse
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON LicensesListResponse where
  toJSON LicensesListResponse {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newLicensesListResponse_Warning' smart constructor.
data LicensesListResponse_Warning = LicensesListResponse_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe LicensesListResponse_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [LicensesListResponse_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'LicensesListResponse_Warning' with the minimum fields required to make a request.
newLicensesListResponse_Warning ::
  LicensesListResponse_Warning
newLicensesListResponse_Warning =
  LicensesListResponse_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON LicensesListResponse_Warning where
  parseJSON =
    Core.withObject
      "LicensesListResponse_Warning"
      ( \o ->
          LicensesListResponse_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON LicensesListResponse_Warning where
  toJSON LicensesListResponse_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newLicensesListResponse_Warning_DataItem' smart constructor.
data LicensesListResponse_Warning_DataItem = LicensesListResponse_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'LicensesListResponse_Warning_DataItem' with the minimum fields required to make a request.
newLicensesListResponse_Warning_DataItem ::
  LicensesListResponse_Warning_DataItem
newLicensesListResponse_Warning_DataItem =
  LicensesListResponse_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    LicensesListResponse_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "LicensesListResponse_Warning_DataItem"
      ( \o ->
          LicensesListResponse_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    LicensesListResponse_Warning_DataItem
  where
  toJSON LicensesListResponse_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newLocalDisk' smart constructor.
data LocalDisk = LocalDisk
  { -- | Specifies the number of such disks.
    diskCount :: (Core.Maybe Core.Int32),
    -- | Specifies the size of the disk in base-2 GB.
    diskSizeGb :: (Core.Maybe Core.Int32),
    -- | Specifies the desired disk type on the node. This disk type must be a local storage type (e.g.: local-ssd). Note that for nodeTemplates, this should be the name of the disk type and not its URL.
    diskType :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'LocalDisk' with the minimum fields required to make a request.
newLocalDisk ::
  LocalDisk
newLocalDisk =
  LocalDisk
    { diskCount = Core.Nothing,
      diskSizeGb = Core.Nothing,
      diskType = Core.Nothing
    }

instance Core.FromJSON LocalDisk where
  parseJSON =
    Core.withObject
      "LocalDisk"
      ( \o ->
          LocalDisk
            Core.<$> (o Core..:? "diskCount")
            Core.<*> (o Core..:? "diskSizeGb")
            Core.<*> (o Core..:? "diskType")
      )

instance Core.ToJSON LocalDisk where
  toJSON LocalDisk {..} =
    Core.object
      ( Core.catMaybes
          [ ("diskCount" Core..=) Core.<$> diskCount,
            ("diskSizeGb" Core..=) Core.<$> diskSizeGb,
            ("diskType" Core..=) Core.<$> diskType
          ]
      )

-- | Provides a localized error message that is safe to return to the user which can be attached to an RPC error.
--
-- /See:/ 'newLocalizedMessage' smart constructor.
data LocalizedMessage = LocalizedMessage
  { -- | The locale used following the specification defined at https:\/\/www.rfc-editor.org\/rfc\/bcp\/bcp47.txt. Examples are: \"en-US\", \"fr-CH\", \"es-MX\"
    locale :: (Core.Maybe Core.Text),
    -- | The localized error message in the above locale.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'LocalizedMessage' with the minimum fields required to make a request.
newLocalizedMessage ::
  LocalizedMessage
newLocalizedMessage =
  LocalizedMessage {locale = Core.Nothing, message = Core.Nothing}

instance Core.FromJSON LocalizedMessage where
  parseJSON =
    Core.withObject
      "LocalizedMessage"
      ( \o ->
          LocalizedMessage
            Core.<$> (o Core..:? "locale")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON LocalizedMessage where
  toJSON LocalizedMessage {..} =
    Core.object
      ( Core.catMaybes
          [ ("locale" Core..=) Core.<$> locale,
            ("message" Core..=) Core.<$> message
          ]
      )

-- | Configuration for location policy among multiple possible locations (e.g. preferences for zone selection among zones in a single region).
--
-- /See:/ 'newLocationPolicy' smart constructor.
data LocationPolicy = LocationPolicy
  { -- | Location configurations mapped by location name. Currently only zone names are supported and must be represented as valid internal URLs, such as zones\/us-central1-a.
    locations :: (Core.Maybe LocationPolicy_Locations),
    -- | Strategy for distributing VMs across zones in a region.
    targetShape :: (Core.Maybe LocationPolicy_TargetShape)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'LocationPolicy' with the minimum fields required to make a request.
newLocationPolicy ::
  LocationPolicy
newLocationPolicy =
  LocationPolicy {locations = Core.Nothing, targetShape = Core.Nothing}

instance Core.FromJSON LocationPolicy where
  parseJSON =
    Core.withObject
      "LocationPolicy"
      ( \o ->
          LocationPolicy
            Core.<$> (o Core..:? "locations")
            Core.<*> (o Core..:? "targetShape")
      )

instance Core.ToJSON LocationPolicy where
  toJSON LocationPolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("locations" Core..=) Core.<$> locations,
            ("targetShape" Core..=) Core.<$> targetShape
          ]
      )

-- | Location configurations mapped by location name. Currently only zone names are supported and must be represented as valid internal URLs, such as zones\/us-central1-a.
--
-- /See:/ 'newLocationPolicy_Locations' smart constructor.
newtype LocationPolicy_Locations = LocationPolicy_Locations
  { -- |
    additional :: (Core.HashMap Core.Text LocationPolicyLocation)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'LocationPolicy_Locations' with the minimum fields required to make a request.
newLocationPolicy_Locations ::
  -- |  See 'additional'.
  Core.HashMap Core.Text LocationPolicyLocation ->
  LocationPolicy_Locations
newLocationPolicy_Locations additional =
  LocationPolicy_Locations {additional = additional}

instance Core.FromJSON LocationPolicy_Locations where
  parseJSON =
    Core.withObject
      "LocationPolicy_Locations"
      ( \o ->
          LocationPolicy_Locations
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON LocationPolicy_Locations where
  toJSON LocationPolicy_Locations {..} =
    Core.toJSON additional

--
-- /See:/ 'newLocationPolicyLocation' smart constructor.
data LocationPolicyLocation = LocationPolicyLocation
  { -- | Constraints that the caller requires on the result distribution in this zone.
    constraints :: (Core.Maybe LocationPolicyLocationConstraints),
    -- | Preference for a given location. Set to either ALLOW or DENY.
    preference :: (Core.Maybe LocationPolicyLocation_Preference)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'LocationPolicyLocation' with the minimum fields required to make a request.
newLocationPolicyLocation ::
  LocationPolicyLocation
newLocationPolicyLocation =
  LocationPolicyLocation {constraints = Core.Nothing, preference = Core.Nothing}

instance Core.FromJSON LocationPolicyLocation where
  parseJSON =
    Core.withObject
      "LocationPolicyLocation"
      ( \o ->
          LocationPolicyLocation
            Core.<$> (o Core..:? "constraints")
            Core.<*> (o Core..:? "preference")
      )

instance Core.ToJSON LocationPolicyLocation where
  toJSON LocationPolicyLocation {..} =
    Core.object
      ( Core.catMaybes
          [ ("constraints" Core..=) Core.<$> constraints,
            ("preference" Core..=) Core.<$> preference
          ]
      )

-- | Per-zone constraints on location policy for this zone.
--
-- /See:/ 'newLocationPolicyLocationConstraints' smart constructor.
newtype LocationPolicyLocationConstraints = LocationPolicyLocationConstraints
  { -- | Maximum number of items that are allowed to be placed in this zone. The value must be non-negative.
    maxCount :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'LocationPolicyLocationConstraints' with the minimum fields required to make a request.
newLocationPolicyLocationConstraints ::
  LocationPolicyLocationConstraints
newLocationPolicyLocationConstraints =
  LocationPolicyLocationConstraints {maxCount = Core.Nothing}

instance
  Core.FromJSON
    LocationPolicyLocationConstraints
  where
  parseJSON =
    Core.withObject
      "LocationPolicyLocationConstraints"
      ( \o ->
          LocationPolicyLocationConstraints
            Core.<$> (o Core..:? "maxCount")
      )

instance
  Core.ToJSON
    LocationPolicyLocationConstraints
  where
  toJSON LocationPolicyLocationConstraints {..} =
    Core.object
      ( Core.catMaybes
          [("maxCount" Core..=) Core.<$> maxCount]
      )

-- | This is deprecated and has no effect. Do not use.
--
-- /See:/ 'newLogConfig' smart constructor.
data LogConfig = LogConfig
  { -- | This is deprecated and has no effect. Do not use.
    cloudAudit :: (Core.Maybe LogConfigCloudAuditOptions),
    -- | This is deprecated and has no effect. Do not use.
    counter :: (Core.Maybe LogConfigCounterOptions),
    -- | This is deprecated and has no effect. Do not use.
    dataAccess :: (Core.Maybe LogConfigDataAccessOptions)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'LogConfig' with the minimum fields required to make a request.
newLogConfig ::
  LogConfig
newLogConfig =
  LogConfig
    { cloudAudit = Core.Nothing,
      counter = Core.Nothing,
      dataAccess = Core.Nothing
    }

instance Core.FromJSON LogConfig where
  parseJSON =
    Core.withObject
      "LogConfig"
      ( \o ->
          LogConfig
            Core.<$> (o Core..:? "cloudAudit")
            Core.<*> (o Core..:? "counter")
            Core.<*> (o Core..:? "dataAccess")
      )

instance Core.ToJSON LogConfig where
  toJSON LogConfig {..} =
    Core.object
      ( Core.catMaybes
          [ ("cloudAudit" Core..=) Core.<$> cloudAudit,
            ("counter" Core..=) Core.<$> counter,
            ("dataAccess" Core..=) Core.<$> dataAccess
          ]
      )

-- | This is deprecated and has no effect. Do not use.
--
-- /See:/ 'newLogConfigCloudAuditOptions' smart constructor.
data LogConfigCloudAuditOptions = LogConfigCloudAuditOptions
  { -- | This is deprecated and has no effect. Do not use.
    authorizationLoggingOptions :: (Core.Maybe AuthorizationLoggingOptions),
    -- | This is deprecated and has no effect. Do not use.
    logName :: (Core.Maybe LogConfigCloudAuditOptions_LogName)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'LogConfigCloudAuditOptions' with the minimum fields required to make a request.
newLogConfigCloudAuditOptions ::
  LogConfigCloudAuditOptions
newLogConfigCloudAuditOptions =
  LogConfigCloudAuditOptions
    { authorizationLoggingOptions = Core.Nothing,
      logName = Core.Nothing
    }

instance Core.FromJSON LogConfigCloudAuditOptions where
  parseJSON =
    Core.withObject
      "LogConfigCloudAuditOptions"
      ( \o ->
          LogConfigCloudAuditOptions
            Core.<$> (o Core..:? "authorizationLoggingOptions")
            Core.<*> (o Core..:? "logName")
      )

instance Core.ToJSON LogConfigCloudAuditOptions where
  toJSON LogConfigCloudAuditOptions {..} =
    Core.object
      ( Core.catMaybes
          [ ("authorizationLoggingOptions" Core..=)
              Core.<$> authorizationLoggingOptions,
            ("logName" Core..=) Core.<$> logName
          ]
      )

-- | This is deprecated and has no effect. Do not use.
--
-- /See:/ 'newLogConfigCounterOptions' smart constructor.
data LogConfigCounterOptions = LogConfigCounterOptions
  { -- | This is deprecated and has no effect. Do not use.
    customFields :: (Core.Maybe [LogConfigCounterOptionsCustomField]),
    -- | This is deprecated and has no effect. Do not use.
    field :: (Core.Maybe Core.Text),
    -- | This is deprecated and has no effect. Do not use.
    metric :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'LogConfigCounterOptions' with the minimum fields required to make a request.
newLogConfigCounterOptions ::
  LogConfigCounterOptions
newLogConfigCounterOptions =
  LogConfigCounterOptions
    { customFields = Core.Nothing,
      field = Core.Nothing,
      metric = Core.Nothing
    }

instance Core.FromJSON LogConfigCounterOptions where
  parseJSON =
    Core.withObject
      "LogConfigCounterOptions"
      ( \o ->
          LogConfigCounterOptions
            Core.<$> (o Core..:? "customFields")
            Core.<*> (o Core..:? "field")
            Core.<*> (o Core..:? "metric")
      )

instance Core.ToJSON LogConfigCounterOptions where
  toJSON LogConfigCounterOptions {..} =
    Core.object
      ( Core.catMaybes
          [ ("customFields" Core..=) Core.<$> customFields,
            ("field" Core..=) Core.<$> field,
            ("metric" Core..=) Core.<$> metric
          ]
      )

-- | This is deprecated and has no effect. Do not use.
--
-- /See:/ 'newLogConfigCounterOptionsCustomField' smart constructor.
data LogConfigCounterOptionsCustomField = LogConfigCounterOptionsCustomField
  { -- | This is deprecated and has no effect. Do not use.
    name :: (Core.Maybe Core.Text),
    -- | This is deprecated and has no effect. Do not use.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'LogConfigCounterOptionsCustomField' with the minimum fields required to make a request.
newLogConfigCounterOptionsCustomField ::
  LogConfigCounterOptionsCustomField
newLogConfigCounterOptionsCustomField =
  LogConfigCounterOptionsCustomField {name = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    LogConfigCounterOptionsCustomField
  where
  parseJSON =
    Core.withObject
      "LogConfigCounterOptionsCustomField"
      ( \o ->
          LogConfigCounterOptionsCustomField
            Core.<$> (o Core..:? "name") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    LogConfigCounterOptionsCustomField
  where
  toJSON LogConfigCounterOptionsCustomField {..} =
    Core.object
      ( Core.catMaybes
          [ ("name" Core..=) Core.<$> name,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | This is deprecated and has no effect. Do not use.
--
-- /See:/ 'newLogConfigDataAccessOptions' smart constructor.
newtype LogConfigDataAccessOptions = LogConfigDataAccessOptions
  { -- | This is deprecated and has no effect. Do not use.
    logMode :: (Core.Maybe LogConfigDataAccessOptions_LogMode)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'LogConfigDataAccessOptions' with the minimum fields required to make a request.
newLogConfigDataAccessOptions ::
  LogConfigDataAccessOptions
newLogConfigDataAccessOptions =
  LogConfigDataAccessOptions {logMode = Core.Nothing}

instance Core.FromJSON LogConfigDataAccessOptions where
  parseJSON =
    Core.withObject
      "LogConfigDataAccessOptions"
      ( \o ->
          LogConfigDataAccessOptions
            Core.<$> (o Core..:? "logMode")
      )

instance Core.ToJSON LogConfigDataAccessOptions where
  toJSON LogConfigDataAccessOptions {..} =
    Core.object
      ( Core.catMaybes
          [("logMode" Core..=) Core.<$> logMode]
      )

-- | Represents a machine image resource. A machine image is a Compute Engine resource that stores all the configuration, metadata, permissions, and data from one or more disks required to create a Virtual machine (VM) instance. For more information, see Machine images.
--
-- /See:/ 'newMachineImage' smart constructor.
data MachineImage = MachineImage
  { -- | [Output Only] The creation timestamp for this machine image in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Input Only] Whether to attempt an application consistent machine image by informing the OS to prepare for the snapshot process.
    guestFlush :: (Core.Maybe Core.Bool),
    -- | [Output Only] A unique identifier for this machine image. The server defines this identifier.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Properties of source instance
    instanceProperties :: (Core.Maybe InstanceProperties),
    -- | [Output Only] The resource type, which is always compute#machineImage for machine image.
    kind :: Core.Text,
    -- | Encrypts the machine image using a customer-supplied encryption key. After you encrypt a machine image using a customer-supplied key, you must provide the same key if you use the machine image later. For example, you must provide the encryption key when you create an instance from the encrypted machine image in a future request. Customer-supplied encryption keys do not protect access to metadata of the machine image. If you do not provide an encryption key when creating the machine image, then the machine image will be encrypted using an automatically generated key and you do not need to provide a key to use the machine image later.
    machineImageEncryptionKey :: (Core.Maybe CustomerEncryptionKey),
    -- | Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] Reserved for future use.
    satisfiesPzs :: (Core.Maybe Core.Bool),
    -- | An array of Machine Image specific properties for disks attached to the source instance
    savedDisks :: (Core.Maybe [SavedDisk]),
    -- | [Output Only] The URL for this machine image. The server defines this URL.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Input Only] The customer-supplied encryption key of the disks attached to the source instance. Required if the source disk is protected by a customer-supplied encryption key.
    sourceDiskEncryptionKeys :: (Core.Maybe [SourceDiskEncryptionKey]),
    -- | The source instance used to create the machine image. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project\/zones\/zone \/instances\/instance - projects\/project\/zones\/zone\/instances\/instance
    sourceInstance :: (Core.Maybe Core.Text),
    -- | [Output Only] DEPRECATED: Please use instance_properties instead for source instance related properties. New properties will not be added to this field.
    sourceInstanceProperties :: (Core.Maybe SourceInstanceProperties),
    -- | [Output Only] The status of the machine image. One of the following values: INVALID, CREATING, READY, DELETING, and UPLOADING.
    status :: (Core.Maybe MachineImage_Status),
    -- | The regional or multi-regional Cloud Storage bucket location where the machine image is stored.
    storageLocations :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Total size of the storage used by the machine image.
    totalStorageBytes :: (Core.Maybe Core.Int64)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'MachineImage' with the minimum fields required to make a request.
newMachineImage ::
  MachineImage
newMachineImage =
  MachineImage
    { creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      guestFlush = Core.Nothing,
      id = Core.Nothing,
      instanceProperties = Core.Nothing,
      kind = "compute#machineImage",
      machineImageEncryptionKey = Core.Nothing,
      name = Core.Nothing,
      satisfiesPzs = Core.Nothing,
      savedDisks = Core.Nothing,
      selfLink = Core.Nothing,
      sourceDiskEncryptionKeys = Core.Nothing,
      sourceInstance = Core.Nothing,
      sourceInstanceProperties = Core.Nothing,
      status = Core.Nothing,
      storageLocations = Core.Nothing,
      totalStorageBytes = Core.Nothing
    }

instance Core.FromJSON MachineImage where
  parseJSON =
    Core.withObject
      "MachineImage"
      ( \o ->
          MachineImage
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "guestFlush")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "instanceProperties")
            Core.<*> (o Core..:? "kind" Core..!= "compute#machineImage")
            Core.<*> (o Core..:? "machineImageEncryptionKey")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "satisfiesPzs")
            Core.<*> (o Core..:? "savedDisks")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "sourceDiskEncryptionKeys")
            Core.<*> (o Core..:? "sourceInstance")
            Core.<*> (o Core..:? "sourceInstanceProperties")
            Core.<*> (o Core..:? "status")
            Core.<*> (o Core..:? "storageLocations")
            Core.<*> ( o Core..:? "totalStorageBytes"
                         Core.<&> Core.fmap Core.fromAsText
                     )
      )

instance Core.ToJSON MachineImage where
  toJSON MachineImage {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("guestFlush" Core..=) Core.<$> guestFlush,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("instanceProperties" Core..=)
              Core.<$> instanceProperties,
            Core.Just ("kind" Core..= kind),
            ("machineImageEncryptionKey" Core..=)
              Core.<$> machineImageEncryptionKey,
            ("name" Core..=) Core.<$> name,
            ("satisfiesPzs" Core..=) Core.<$> satisfiesPzs,
            ("savedDisks" Core..=) Core.<$> savedDisks,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("sourceDiskEncryptionKeys" Core..=)
              Core.<$> sourceDiskEncryptionKeys,
            ("sourceInstance" Core..=) Core.<$> sourceInstance,
            ("sourceInstanceProperties" Core..=)
              Core.<$> sourceInstanceProperties,
            ("status" Core..=) Core.<$> status,
            ("storageLocations" Core..=)
              Core.<$> storageLocations,
            ("totalStorageBytes" Core..=) Core.. Core.AsText
              Core.<$> totalStorageBytes
          ]
      )

-- | A list of machine images.
--
-- /See:/ 'newMachineImageList' smart constructor.
data MachineImageList = MachineImageList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of MachineImage resources.
    items :: (Core.Maybe [MachineImage]),
    -- | [Output Only] The resource type, which is always compute#machineImagesListResponse for machine image lists.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe MachineImageList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'MachineImageList' with the minimum fields required to make a request.
newMachineImageList ::
  MachineImageList
newMachineImageList =
  MachineImageList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#machineImageList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON MachineImageList where
  parseJSON =
    Core.withObject
      "MachineImageList"
      ( \o ->
          MachineImageList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#machineImageList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON MachineImageList where
  toJSON MachineImageList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newMachineImageList_Warning' smart constructor.
data MachineImageList_Warning = MachineImageList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe MachineImageList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [MachineImageList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'MachineImageList_Warning' with the minimum fields required to make a request.
newMachineImageList_Warning ::
  MachineImageList_Warning
newMachineImageList_Warning =
  MachineImageList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON MachineImageList_Warning where
  parseJSON =
    Core.withObject
      "MachineImageList_Warning"
      ( \o ->
          MachineImageList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON MachineImageList_Warning where
  toJSON MachineImageList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newMachineImageList_Warning_DataItem' smart constructor.
data MachineImageList_Warning_DataItem = MachineImageList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'MachineImageList_Warning_DataItem' with the minimum fields required to make a request.
newMachineImageList_Warning_DataItem ::
  MachineImageList_Warning_DataItem
newMachineImageList_Warning_DataItem =
  MachineImageList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    MachineImageList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "MachineImageList_Warning_DataItem"
      ( \o ->
          MachineImageList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    MachineImageList_Warning_DataItem
  where
  toJSON MachineImageList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Represents a Machine Type resource. You can use specific machine types for your VM instances based on performance and pricing requirements. For more information, read Machine Types.
--
-- /See:/ 'newMachineType' smart constructor.
data MachineType = MachineType
  { -- | [Output Only] A list of accelerator configurations assigned to this machine type.
    accelerators :: (Core.Maybe [MachineType_AcceleratorsItem]),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | [Output Only] The deprecation status associated with this machine type. Only applicable if the machine type is unavailable.
    deprecated :: (Core.Maybe DeprecationStatus),
    -- | [Output Only] An optional textual description of the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The number of virtual CPUs that are available to the instance.
    guestCpus :: (Core.Maybe Core.Int32),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Deprecated] This property is deprecated and will never be populated with any relevant values.
    imageSpaceGb :: (Core.Maybe Core.Int32),
    -- | [Output Only] Whether this machine type has a shared CPU. See Shared-core machine types for more information.
    isSharedCpu :: (Core.Maybe Core.Bool),
    -- | [Output Only] The type of the resource. Always compute#machineType for machine types.
    kind :: Core.Text,
    -- | [Output Only] Maximum persistent disks allowed.
    maximumPersistentDisks :: (Core.Maybe Core.Int32),
    -- | [Output Only] Maximum total persistent disks size (GB) allowed.
    maximumPersistentDisksSizeGb :: (Core.Maybe Core.Int64),
    -- | [Output Only] The amount of physical memory available to the instance, defined in MB.
    memoryMb :: (Core.Maybe Core.Int32),
    -- | [Output Only] Name of the resource.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] A list of extended scratch disks assigned to the instance.
    scratchDisks :: (Core.Maybe [MachineType_ScratchDisksItem]),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] The name of the zone where the machine type resides, such as us-central1-a.
    zone :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'MachineType' with the minimum fields required to make a request.
newMachineType ::
  MachineType
newMachineType =
  MachineType
    { accelerators = Core.Nothing,
      creationTimestamp = Core.Nothing,
      deprecated = Core.Nothing,
      description = Core.Nothing,
      guestCpus = Core.Nothing,
      id = Core.Nothing,
      imageSpaceGb = Core.Nothing,
      isSharedCpu = Core.Nothing,
      kind = "compute#machineType",
      maximumPersistentDisks = Core.Nothing,
      maximumPersistentDisksSizeGb = Core.Nothing,
      memoryMb = Core.Nothing,
      name = Core.Nothing,
      scratchDisks = Core.Nothing,
      selfLink = Core.Nothing,
      zone = Core.Nothing
    }

instance Core.FromJSON MachineType where
  parseJSON =
    Core.withObject
      "MachineType"
      ( \o ->
          MachineType
            Core.<$> (o Core..:? "accelerators")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "deprecated")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "guestCpus")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "imageSpaceGb")
            Core.<*> (o Core..:? "isSharedCpu")
            Core.<*> (o Core..:? "kind" Core..!= "compute#machineType")
            Core.<*> (o Core..:? "maximumPersistentDisks")
            Core.<*> ( o Core..:? "maximumPersistentDisksSizeGb"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "memoryMb")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "scratchDisks")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "zone")
      )

instance Core.ToJSON MachineType where
  toJSON MachineType {..} =
    Core.object
      ( Core.catMaybes
          [ ("accelerators" Core..=) Core.<$> accelerators,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("deprecated" Core..=) Core.<$> deprecated,
            ("description" Core..=) Core.<$> description,
            ("guestCpus" Core..=) Core.<$> guestCpus,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("imageSpaceGb" Core..=) Core.<$> imageSpaceGb,
            ("isSharedCpu" Core..=) Core.<$> isSharedCpu,
            Core.Just ("kind" Core..= kind),
            ("maximumPersistentDisks" Core..=)
              Core.<$> maximumPersistentDisks,
            ("maximumPersistentDisksSizeGb" Core..=)
              Core.. Core.AsText
              Core.<$> maximumPersistentDisksSizeGb,
            ("memoryMb" Core..=) Core.<$> memoryMb,
            ("name" Core..=) Core.<$> name,
            ("scratchDisks" Core..=) Core.<$> scratchDisks,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("zone" Core..=) Core.<$> zone
          ]
      )

--
-- /See:/ 'newMachineType_AcceleratorsItem' smart constructor.
data MachineType_AcceleratorsItem = MachineType_AcceleratorsItem
  { -- | Number of accelerator cards exposed to the guest.
    guestAcceleratorCount :: (Core.Maybe Core.Int32),
    -- | The accelerator type resource name, not a full URL, e.g. \'nvidia-tesla-k80\'.
    guestAcceleratorType :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'MachineType_AcceleratorsItem' with the minimum fields required to make a request.
newMachineType_AcceleratorsItem ::
  MachineType_AcceleratorsItem
newMachineType_AcceleratorsItem =
  MachineType_AcceleratorsItem
    { guestAcceleratorCount = Core.Nothing,
      guestAcceleratorType = Core.Nothing
    }

instance Core.FromJSON MachineType_AcceleratorsItem where
  parseJSON =
    Core.withObject
      "MachineType_AcceleratorsItem"
      ( \o ->
          MachineType_AcceleratorsItem
            Core.<$> (o Core..:? "guestAcceleratorCount")
            Core.<*> (o Core..:? "guestAcceleratorType")
      )

instance Core.ToJSON MachineType_AcceleratorsItem where
  toJSON MachineType_AcceleratorsItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("guestAcceleratorCount" Core..=)
              Core.<$> guestAcceleratorCount,
            ("guestAcceleratorType" Core..=)
              Core.<$> guestAcceleratorType
          ]
      )

--
-- /See:/ 'newMachineType_ScratchDisksItem' smart constructor.
newtype MachineType_ScratchDisksItem = MachineType_ScratchDisksItem
  { -- | Size of the scratch disk, defined in GB.
    diskGb :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'MachineType_ScratchDisksItem' with the minimum fields required to make a request.
newMachineType_ScratchDisksItem ::
  MachineType_ScratchDisksItem
newMachineType_ScratchDisksItem =
  MachineType_ScratchDisksItem {diskGb = Core.Nothing}

instance Core.FromJSON MachineType_ScratchDisksItem where
  parseJSON =
    Core.withObject
      "MachineType_ScratchDisksItem"
      ( \o ->
          MachineType_ScratchDisksItem
            Core.<$> (o Core..:? "diskGb")
      )

instance Core.ToJSON MachineType_ScratchDisksItem where
  toJSON MachineType_ScratchDisksItem {..} =
    Core.object
      (Core.catMaybes [("diskGb" Core..=) Core.<$> diskGb])

--
-- /See:/ 'newMachineTypeAggregatedList' smart constructor.
data MachineTypeAggregatedList = MachineTypeAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of MachineTypesScopedList resources.
    items :: (Core.Maybe MachineTypeAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#machineTypeAggregatedList for aggregated lists of machine types.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe MachineTypeAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'MachineTypeAggregatedList' with the minimum fields required to make a request.
newMachineTypeAggregatedList ::
  MachineTypeAggregatedList
newMachineTypeAggregatedList =
  MachineTypeAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#machineTypeAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON MachineTypeAggregatedList where
  parseJSON =
    Core.withObject
      "MachineTypeAggregatedList"
      ( \o ->
          MachineTypeAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#machineTypeAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON MachineTypeAggregatedList where
  toJSON MachineTypeAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of MachineTypesScopedList resources.
--
-- /See:/ 'newMachineTypeAggregatedList_Items' smart constructor.
newtype MachineTypeAggregatedList_Items = MachineTypeAggregatedList_Items
  { -- | [Output Only] Name of the scope containing this set of machine types.
    additional :: (Core.HashMap Core.Text MachineTypesScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'MachineTypeAggregatedList_Items' with the minimum fields required to make a request.
newMachineTypeAggregatedList_Items ::
  -- |  [Output Only] Name of the scope containing this set of machine types. See 'additional'.
  Core.HashMap Core.Text MachineTypesScopedList ->
  MachineTypeAggregatedList_Items
newMachineTypeAggregatedList_Items additional =
  MachineTypeAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    MachineTypeAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "MachineTypeAggregatedList_Items"
      ( \o ->
          MachineTypeAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON MachineTypeAggregatedList_Items where
  toJSON MachineTypeAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newMachineTypeAggregatedList_Warning' smart constructor.
data MachineTypeAggregatedList_Warning = MachineTypeAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe MachineTypeAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [MachineTypeAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'MachineTypeAggregatedList_Warning' with the minimum fields required to make a request.
newMachineTypeAggregatedList_Warning ::
  MachineTypeAggregatedList_Warning
newMachineTypeAggregatedList_Warning =
  MachineTypeAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    MachineTypeAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "MachineTypeAggregatedList_Warning"
      ( \o ->
          MachineTypeAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    MachineTypeAggregatedList_Warning
  where
  toJSON MachineTypeAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newMachineTypeAggregatedList_Warning_DataItem' smart constructor.
data MachineTypeAggregatedList_Warning_DataItem = MachineTypeAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'MachineTypeAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newMachineTypeAggregatedList_Warning_DataItem ::
  MachineTypeAggregatedList_Warning_DataItem
newMachineTypeAggregatedList_Warning_DataItem =
  MachineTypeAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    MachineTypeAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "MachineTypeAggregatedList_Warning_DataItem"
      ( \o ->
          MachineTypeAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    MachineTypeAggregatedList_Warning_DataItem
  where
  toJSON MachineTypeAggregatedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Contains a list of machine types.
--
-- /See:/ 'newMachineTypeList' smart constructor.
data MachineTypeList = MachineTypeList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of MachineType resources.
    items :: (Core.Maybe [MachineType]),
    -- | [Output Only] Type of resource. Always compute#machineTypeList for lists of machine types.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe MachineTypeList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'MachineTypeList' with the minimum fields required to make a request.
newMachineTypeList ::
  MachineTypeList
newMachineTypeList =
  MachineTypeList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#machineTypeList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON MachineTypeList where
  parseJSON =
    Core.withObject
      "MachineTypeList"
      ( \o ->
          MachineTypeList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#machineTypeList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON MachineTypeList where
  toJSON MachineTypeList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newMachineTypeList_Warning' smart constructor.
data MachineTypeList_Warning = MachineTypeList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe MachineTypeList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [MachineTypeList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'MachineTypeList_Warning' with the minimum fields required to make a request.
newMachineTypeList_Warning ::
  MachineTypeList_Warning
newMachineTypeList_Warning =
  MachineTypeList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON MachineTypeList_Warning where
  parseJSON =
    Core.withObject
      "MachineTypeList_Warning"
      ( \o ->
          MachineTypeList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON MachineTypeList_Warning where
  toJSON MachineTypeList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newMachineTypeList_Warning_DataItem' smart constructor.
data MachineTypeList_Warning_DataItem = MachineTypeList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'MachineTypeList_Warning_DataItem' with the minimum fields required to make a request.
newMachineTypeList_Warning_DataItem ::
  MachineTypeList_Warning_DataItem
newMachineTypeList_Warning_DataItem =
  MachineTypeList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    MachineTypeList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "MachineTypeList_Warning_DataItem"
      ( \o ->
          MachineTypeList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON MachineTypeList_Warning_DataItem where
  toJSON MachineTypeList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newMachineTypesScopedList' smart constructor.
data MachineTypesScopedList = MachineTypesScopedList
  { -- | [Output Only] A list of machine types contained in this scope.
    machineTypes :: (Core.Maybe [MachineType]),
    -- | [Output Only] An informational warning that appears when the machine types list is empty.
    warning :: (Core.Maybe MachineTypesScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'MachineTypesScopedList' with the minimum fields required to make a request.
newMachineTypesScopedList ::
  MachineTypesScopedList
newMachineTypesScopedList =
  MachineTypesScopedList {machineTypes = Core.Nothing, warning = Core.Nothing}

instance Core.FromJSON MachineTypesScopedList where
  parseJSON =
    Core.withObject
      "MachineTypesScopedList"
      ( \o ->
          MachineTypesScopedList
            Core.<$> (o Core..:? "machineTypes")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON MachineTypesScopedList where
  toJSON MachineTypesScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("machineTypes" Core..=) Core.<$> machineTypes,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] An informational warning that appears when the machine types list is empty.
--
-- /See:/ 'newMachineTypesScopedList_Warning' smart constructor.
data MachineTypesScopedList_Warning = MachineTypesScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe MachineTypesScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [MachineTypesScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'MachineTypesScopedList_Warning' with the minimum fields required to make a request.
newMachineTypesScopedList_Warning ::
  MachineTypesScopedList_Warning
newMachineTypesScopedList_Warning =
  MachineTypesScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON MachineTypesScopedList_Warning where
  parseJSON =
    Core.withObject
      "MachineTypesScopedList_Warning"
      ( \o ->
          MachineTypesScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON MachineTypesScopedList_Warning where
  toJSON MachineTypesScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newMachineTypesScopedList_Warning_DataItem' smart constructor.
data MachineTypesScopedList_Warning_DataItem = MachineTypesScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'MachineTypesScopedList_Warning_DataItem' with the minimum fields required to make a request.
newMachineTypesScopedList_Warning_DataItem ::
  MachineTypesScopedList_Warning_DataItem
newMachineTypesScopedList_Warning_DataItem =
  MachineTypesScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    MachineTypesScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "MachineTypesScopedList_Warning_DataItem"
      ( \o ->
          MachineTypesScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    MachineTypesScopedList_Warning_DataItem
  where
  toJSON MachineTypesScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | A Managed Instance resource.
--
-- /See:/ 'newManagedInstance' smart constructor.
data ManagedInstance = ManagedInstance
  { -- | [Output Only] The current action that the managed instance group has scheduled for the instance. Possible values: - NONE The instance is running, and the managed instance group does not have any scheduled actions for this instance. - CREATING The managed instance group is creating this instance. If the group fails to create this instance, it will try again until it is successful. - CREATING/WITHOUT/RETRIES The managed instance group is attempting to create this instance only once. If the group fails to create this instance, it does not try again and the group\'s targetSize value is decreased instead. - RECREATING The managed instance group is recreating this instance. - DELETING The managed instance group is permanently deleting this instance. - ABANDONING The managed instance group is abandoning this instance. The instance will be removed from the instance group and from any target pools that are associated with this group. - RESTARTING The managed instance group is restarting the instance. - REFRESHING The
    -- managed instance group is applying configuration changes to the instance without stopping it. For example, the group can update the target pool list for an instance without stopping that instance. - VERIFYING The managed instance group has created the instance and it is in the process of being verified.
    currentAction :: (Core.Maybe ManagedInstance_CurrentAction),
    -- | [Output only] The unique identifier for this resource. This field is empty when instance does not exist.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] The URL of the instance. The URL can exist even if the instance has not yet been created.
    instance' :: (Core.Maybe Core.Text),
    -- | [Output Only] Health state of the instance per health-check.
    instanceHealth :: (Core.Maybe [ManagedInstanceInstanceHealth]),
    -- | [Output Only] The status of the instance. This field is empty when the instance does not exist.
    instanceStatus :: (Core.Maybe ManagedInstance_InstanceStatus),
    -- | [Output Only] Information about the last attempt to create or delete the instance.
    lastAttempt :: (Core.Maybe ManagedInstanceLastAttempt),
    -- | [Output Only] Preserved state applied from per-instance config for this instance.
    preservedStateFromConfig :: (Core.Maybe PreservedState),
    -- | [Output Only] Preserved state generated based on stateful policy for this instance.
    preservedStateFromPolicy :: (Core.Maybe PreservedState),
    -- | [Output Only] Intended version of this instance.
    version :: (Core.Maybe ManagedInstanceVersion)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ManagedInstance' with the minimum fields required to make a request.
newManagedInstance ::
  ManagedInstance
newManagedInstance =
  ManagedInstance
    { currentAction = Core.Nothing,
      id = Core.Nothing,
      instance' = Core.Nothing,
      instanceHealth = Core.Nothing,
      instanceStatus = Core.Nothing,
      lastAttempt = Core.Nothing,
      preservedStateFromConfig = Core.Nothing,
      preservedStateFromPolicy = Core.Nothing,
      version = Core.Nothing
    }

instance Core.FromJSON ManagedInstance where
  parseJSON =
    Core.withObject
      "ManagedInstance"
      ( \o ->
          ManagedInstance
            Core.<$> (o Core..:? "currentAction")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "instance")
            Core.<*> (o Core..:? "instanceHealth")
            Core.<*> (o Core..:? "instanceStatus")
            Core.<*> (o Core..:? "lastAttempt")
            Core.<*> (o Core..:? "preservedStateFromConfig")
            Core.<*> (o Core..:? "preservedStateFromPolicy")
            Core.<*> (o Core..:? "version")
      )

instance Core.ToJSON ManagedInstance where
  toJSON ManagedInstance {..} =
    Core.object
      ( Core.catMaybes
          [ ("currentAction" Core..=) Core.<$> currentAction,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("instance" Core..=) Core.<$> instance',
            ("instanceHealth" Core..=) Core.<$> instanceHealth,
            ("instanceStatus" Core..=) Core.<$> instanceStatus,
            ("lastAttempt" Core..=) Core.<$> lastAttempt,
            ("preservedStateFromConfig" Core..=)
              Core.<$> preservedStateFromConfig,
            ("preservedStateFromPolicy" Core..=)
              Core.<$> preservedStateFromPolicy,
            ("version" Core..=) Core.<$> version
          ]
      )

--
-- /See:/ 'newManagedInstanceInstanceHealth' smart constructor.
data ManagedInstanceInstanceHealth = ManagedInstanceInstanceHealth
  { -- | [Output Only] The current detailed instance health state.
    detailedHealthState :: (Core.Maybe ManagedInstanceInstanceHealth_DetailedHealthState),
    -- | [Output Only] The URL for the health check that verifies whether the instance is healthy.
    healthCheck :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ManagedInstanceInstanceHealth' with the minimum fields required to make a request.
newManagedInstanceInstanceHealth ::
  ManagedInstanceInstanceHealth
newManagedInstanceInstanceHealth =
  ManagedInstanceInstanceHealth
    { detailedHealthState = Core.Nothing,
      healthCheck = Core.Nothing
    }

instance Core.FromJSON ManagedInstanceInstanceHealth where
  parseJSON =
    Core.withObject
      "ManagedInstanceInstanceHealth"
      ( \o ->
          ManagedInstanceInstanceHealth
            Core.<$> (o Core..:? "detailedHealthState")
            Core.<*> (o Core..:? "healthCheck")
      )

instance Core.ToJSON ManagedInstanceInstanceHealth where
  toJSON ManagedInstanceInstanceHealth {..} =
    Core.object
      ( Core.catMaybes
          [ ("detailedHealthState" Core..=)
              Core.<$> detailedHealthState,
            ("healthCheck" Core..=) Core.<$> healthCheck
          ]
      )

--
-- /See:/ 'newManagedInstanceLastAttempt' smart constructor.
newtype ManagedInstanceLastAttempt = ManagedInstanceLastAttempt
  { -- | [Output Only] Encountered errors during the last attempt to create or delete the instance.
    errors :: (Core.Maybe ManagedInstanceLastAttempt_Errors)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ManagedInstanceLastAttempt' with the minimum fields required to make a request.
newManagedInstanceLastAttempt ::
  ManagedInstanceLastAttempt
newManagedInstanceLastAttempt =
  ManagedInstanceLastAttempt {errors = Core.Nothing}

instance Core.FromJSON ManagedInstanceLastAttempt where
  parseJSON =
    Core.withObject
      "ManagedInstanceLastAttempt"
      ( \o ->
          ManagedInstanceLastAttempt
            Core.<$> (o Core..:? "errors")
      )

instance Core.ToJSON ManagedInstanceLastAttempt where
  toJSON ManagedInstanceLastAttempt {..} =
    Core.object
      (Core.catMaybes [("errors" Core..=) Core.<$> errors])

-- | [Output Only] Encountered errors during the last attempt to create or delete the instance.
--
-- /See:/ 'newManagedInstanceLastAttempt_Errors' smart constructor.
newtype ManagedInstanceLastAttempt_Errors = ManagedInstanceLastAttempt_Errors
  { -- | [Output Only] The array of errors encountered while processing this operation.
    errors :: (Core.Maybe [ManagedInstanceLastAttempt_Errors_ErrorsItem])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ManagedInstanceLastAttempt_Errors' with the minimum fields required to make a request.
newManagedInstanceLastAttempt_Errors ::
  ManagedInstanceLastAttempt_Errors
newManagedInstanceLastAttempt_Errors =
  ManagedInstanceLastAttempt_Errors {errors = Core.Nothing}

instance
  Core.FromJSON
    ManagedInstanceLastAttempt_Errors
  where
  parseJSON =
    Core.withObject
      "ManagedInstanceLastAttempt_Errors"
      ( \o ->
          ManagedInstanceLastAttempt_Errors
            Core.<$> (o Core..:? "errors")
      )

instance
  Core.ToJSON
    ManagedInstanceLastAttempt_Errors
  where
  toJSON ManagedInstanceLastAttempt_Errors {..} =
    Core.object
      (Core.catMaybes [("errors" Core..=) Core.<$> errors])

--
-- /See:/ 'newManagedInstanceLastAttempt_Errors_ErrorsItem' smart constructor.
data ManagedInstanceLastAttempt_Errors_ErrorsItem = ManagedInstanceLastAttempt_Errors_ErrorsItem
  { -- | [Output Only] The error type identifier for this error.
    code :: (Core.Maybe Core.Text),
    -- | [Output Only] An optional list of messages that contain the error details. There is a set of defined message types to use for providing details.The syntax depends on the error code. For example, QuotaExceededInfo will have details when the error code is QUOTA_EXCEEDED.
    errorDetails ::
      ( Core.Maybe
          [ManagedInstanceLastAttempt_Errors_ErrorsItem_ErrorDetailsItem]
      ),
    -- | [Output Only] Indicates the field in the request that caused the error. This property is optional.
    location :: (Core.Maybe Core.Text),
    -- | [Output Only] An optional, human-readable error message.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ManagedInstanceLastAttempt_Errors_ErrorsItem' with the minimum fields required to make a request.
newManagedInstanceLastAttempt_Errors_ErrorsItem ::
  ManagedInstanceLastAttempt_Errors_ErrorsItem
newManagedInstanceLastAttempt_Errors_ErrorsItem =
  ManagedInstanceLastAttempt_Errors_ErrorsItem
    { code = Core.Nothing,
      errorDetails = Core.Nothing,
      location = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    ManagedInstanceLastAttempt_Errors_ErrorsItem
  where
  parseJSON =
    Core.withObject
      "ManagedInstanceLastAttempt_Errors_ErrorsItem"
      ( \o ->
          ManagedInstanceLastAttempt_Errors_ErrorsItem
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "errorDetails")
            Core.<*> (o Core..:? "location")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    ManagedInstanceLastAttempt_Errors_ErrorsItem
  where
  toJSON
    ManagedInstanceLastAttempt_Errors_ErrorsItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("code" Core..=) Core.<$> code,
              ("errorDetails" Core..=) Core.<$> errorDetails,
              ("location" Core..=) Core.<$> location,
              ("message" Core..=) Core.<$> message
            ]
        )

--
-- /See:/ 'newManagedInstanceLastAttempt_Errors_ErrorsItem_ErrorDetailsItem' smart constructor.
data ManagedInstanceLastAttempt_Errors_ErrorsItem_ErrorDetailsItem = ManagedInstanceLastAttempt_Errors_ErrorsItem_ErrorDetailsItem
  { -- |
    errorInfo :: (Core.Maybe ErrorInfo),
    -- |
    help :: (Core.Maybe Help),
    -- |
    localizedMessage :: (Core.Maybe LocalizedMessage),
    -- |
    quotaInfo :: (Core.Maybe QuotaExceededInfo)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ManagedInstanceLastAttempt_Errors_ErrorsItem_ErrorDetailsItem' with the minimum fields required to make a request.
newManagedInstanceLastAttempt_Errors_ErrorsItem_ErrorDetailsItem ::
  ManagedInstanceLastAttempt_Errors_ErrorsItem_ErrorDetailsItem
newManagedInstanceLastAttempt_Errors_ErrorsItem_ErrorDetailsItem =
  ManagedInstanceLastAttempt_Errors_ErrorsItem_ErrorDetailsItem
    { errorInfo = Core.Nothing,
      help = Core.Nothing,
      localizedMessage = Core.Nothing,
      quotaInfo = Core.Nothing
    }

instance
  Core.FromJSON
    ManagedInstanceLastAttempt_Errors_ErrorsItem_ErrorDetailsItem
  where
  parseJSON =
    Core.withObject
      "ManagedInstanceLastAttempt_Errors_ErrorsItem_ErrorDetailsItem"
      ( \o ->
          ManagedInstanceLastAttempt_Errors_ErrorsItem_ErrorDetailsItem
            Core.<$> (o Core..:? "errorInfo") Core.<*> (o Core..:? "help")
              Core.<*> (o Core..:? "localizedMessage")
              Core.<*> (o Core..:? "quotaInfo")
      )

instance
  Core.ToJSON
    ManagedInstanceLastAttempt_Errors_ErrorsItem_ErrorDetailsItem
  where
  toJSON
    ManagedInstanceLastAttempt_Errors_ErrorsItem_ErrorDetailsItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("errorInfo" Core..=) Core.<$> errorInfo,
              ("help" Core..=) Core.<$> help,
              ("localizedMessage" Core..=)
                Core.<$> localizedMessage,
              ("quotaInfo" Core..=) Core.<$> quotaInfo
            ]
        )

--
-- /See:/ 'newManagedInstanceVersion' smart constructor.
data ManagedInstanceVersion = ManagedInstanceVersion
  { -- | [Output Only] The intended template of the instance. This field is empty when current_action is one of { DELETING, ABANDONING }.
    instanceTemplate :: (Core.Maybe Core.Text),
    -- | [Output Only] Name of the version.
    name :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ManagedInstanceVersion' with the minimum fields required to make a request.
newManagedInstanceVersion ::
  ManagedInstanceVersion
newManagedInstanceVersion =
  ManagedInstanceVersion {instanceTemplate = Core.Nothing, name = Core.Nothing}

instance Core.FromJSON ManagedInstanceVersion where
  parseJSON =
    Core.withObject
      "ManagedInstanceVersion"
      ( \o ->
          ManagedInstanceVersion
            Core.<$> (o Core..:? "instanceTemplate")
            Core.<*> (o Core..:? "name")
      )

instance Core.ToJSON ManagedInstanceVersion where
  toJSON ManagedInstanceVersion {..} =
    Core.object
      ( Core.catMaybes
          [ ("instanceTemplate" Core..=)
              Core.<$> instanceTemplate,
            ("name" Core..=) Core.<$> name
          ]
      )

-- | A metadata key\/value entry.
--
-- /See:/ 'newMetadata' smart constructor.
data Metadata = Metadata
  { -- | Specifies a fingerprint for this request, which is essentially a hash of the metadata\'s contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the resource.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | Array of key\/value pairs. The total size of all keys and values must be less than 512 KB.
    items :: (Core.Maybe [Metadata_ItemsItem]),
    -- | [Output Only] Type of the resource. Always compute#metadata for metadata.
    kind :: Core.Text
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Metadata' with the minimum fields required to make a request.
newMetadata ::
  Metadata
newMetadata =
  Metadata
    { fingerprint = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#metadata"
    }

instance Core.FromJSON Metadata where
  parseJSON =
    Core.withObject
      "Metadata"
      ( \o ->
          Metadata
            Core.<$> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#metadata")
      )

instance Core.ToJSON Metadata where
  toJSON Metadata {..} =
    Core.object
      ( Core.catMaybes
          [ ("fingerprint" Core..=) Core.<$> fingerprint,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind)
          ]
      )

-- | Metadata
--
-- /See:/ 'newMetadata_ItemsItem' smart constructor.
data Metadata_ItemsItem = Metadata_ItemsItem
  { -- | Key for the metadata entry. Keys must conform to the following regexp: [a-zA-Z0-9-_]+, and be less than 128 bytes in length. This is reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project.
    key :: (Core.Maybe Core.Text),
    -- | Value for the metadata entry. These are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on values is that their size must be less than or equal to 262144 bytes (256 KiB).
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Metadata_ItemsItem' with the minimum fields required to make a request.
newMetadata_ItemsItem ::
  Metadata_ItemsItem
newMetadata_ItemsItem =
  Metadata_ItemsItem {key = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON Metadata_ItemsItem where
  parseJSON =
    Core.withObject
      "Metadata_ItemsItem"
      ( \o ->
          Metadata_ItemsItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON Metadata_ItemsItem where
  toJSON Metadata_ItemsItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Opaque filter criteria used by load balancers to restrict routing configuration to a limited set of load balancing proxies. Proxies and sidecars involved in load balancing would typically present metadata to the load balancers that need to match criteria specified here. If a match takes place, the relevant configuration is made available to those proxies. For each metadataFilter in this list, if its filterMatchCriteria is set to MATCH/ANY, at least one of the filterLabels must match the corresponding label provided in the metadata. If its filterMatchCriteria is set to MATCH/ALL, then all of its filterLabels must match with corresponding labels provided in the metadata. An example for using metadataFilters would be: if load balancing involves Envoys, they receive routing configuration when values in metadataFilters match values supplied in of their XDS requests to loadbalancers.
--
-- /See:/ 'newMetadataFilter' smart constructor.
data MetadataFilter = MetadataFilter
  { -- | The list of label value pairs that must match labels in the provided metadata based on filterMatchCriteria This list must not be empty and can have at the most 64 entries.
    filterLabels :: (Core.Maybe [MetadataFilterLabelMatch]),
    -- | Specifies how individual filter label matches within the list of filterLabels and contributes toward the overall metadataFilter match. Supported values are: - MATCH/ANY: at least one of the filterLabels must have a matching label in the provided metadata. - MATCH/ALL: all filterLabels must have matching labels in the provided metadata.
    filterMatchCriteria :: (Core.Maybe MetadataFilter_FilterMatchCriteria)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'MetadataFilter' with the minimum fields required to make a request.
newMetadataFilter ::
  MetadataFilter
newMetadataFilter =
  MetadataFilter
    { filterLabels = Core.Nothing,
      filterMatchCriteria = Core.Nothing
    }

instance Core.FromJSON MetadataFilter where
  parseJSON =
    Core.withObject
      "MetadataFilter"
      ( \o ->
          MetadataFilter
            Core.<$> (o Core..:? "filterLabels")
            Core.<*> (o Core..:? "filterMatchCriteria")
      )

instance Core.ToJSON MetadataFilter where
  toJSON MetadataFilter {..} =
    Core.object
      ( Core.catMaybes
          [ ("filterLabels" Core..=) Core.<$> filterLabels,
            ("filterMatchCriteria" Core..=)
              Core.<$> filterMatchCriteria
          ]
      )

-- | MetadataFilter label name value pairs that are expected to match corresponding labels presented as metadata to the load balancer.
--
-- /See:/ 'newMetadataFilterLabelMatch' smart constructor.
data MetadataFilterLabelMatch = MetadataFilterLabelMatch
  { -- | Name of metadata label. The name can have a maximum length of 1024 characters and must be at least 1 character long.
    name :: (Core.Maybe Core.Text),
    -- | The value of the label must match the specified value. value can have a maximum length of 1024 characters.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'MetadataFilterLabelMatch' with the minimum fields required to make a request.
newMetadataFilterLabelMatch ::
  MetadataFilterLabelMatch
newMetadataFilterLabelMatch =
  MetadataFilterLabelMatch {name = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON MetadataFilterLabelMatch where
  parseJSON =
    Core.withObject
      "MetadataFilterLabelMatch"
      ( \o ->
          MetadataFilterLabelMatch
            Core.<$> (o Core..:? "name") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON MetadataFilterLabelMatch where
  toJSON MetadataFilterLabelMatch {..} =
    Core.object
      ( Core.catMaybes
          [ ("name" Core..=) Core.<$> name,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | The named port. For example: \<\"http\", 80>.
--
-- /See:/ 'newNamedPort' smart constructor.
data NamedPort = NamedPort
  { -- | The name for this named port. The name must be 1-63 characters long, and comply with RFC1035.
    name :: (Core.Maybe Core.Text),
    -- | The port number, which can be a value between 1 and 65535.
    port :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NamedPort' with the minimum fields required to make a request.
newNamedPort ::
  NamedPort
newNamedPort = NamedPort {name = Core.Nothing, port = Core.Nothing}

instance Core.FromJSON NamedPort where
  parseJSON =
    Core.withObject
      "NamedPort"
      ( \o ->
          NamedPort
            Core.<$> (o Core..:? "name") Core.<*> (o Core..:? "port")
      )

instance Core.ToJSON NamedPort where
  toJSON NamedPort {..} =
    Core.object
      ( Core.catMaybes
          [ ("name" Core..=) Core.<$> name,
            ("port" Core..=) Core.<$> port
          ]
      )

-- | Represents a VPC Network resource. Networks connect resources to each other and to the internet. For more information, read Virtual Private Cloud (VPC) Network.
--
-- /See:/ 'newNetwork' smart constructor.
data Network = Network
  { -- | Deprecated in favor of subnet mode networks. The range of internal addresses that are legal on this network. This range is a CIDR specification, for example: 192.168.0.0\/16. Provided by the client when the network is created.
    iPv4Range :: (Core.Maybe Core.Text),
    -- | Must be set to create a VPC network. If not set, a legacy network is created. When set to true, the VPC network is created in auto mode. When set to false, the VPC network is created in custom mode. An auto mode VPC network starts with one subnet per region. Each subnet has a predetermined range as described in Auto mode VPC network IP ranges. For custom mode VPC networks, you can add subnets using the subnetworks insert method.
    autoCreateSubnetworks :: (Core.Maybe Core.Bool),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this field when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | Enable ULA internal ipv6 on this network. Enabling this feature will assign a \/48 from google defined ULA prefix fd20::\/20. .
    enableUlaInternalIpv6 :: (Core.Maybe Core.Bool),
    -- | [Output Only] URL of the firewall policy the network is associated with.
    firewallPolicy :: (Core.Maybe Core.Text),
    -- | [Output Only] The gateway address for default routing out of the network, selected by Google Cloud.
    gatewayIPv4 :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | When enabling ula internal ipv6, caller optionally can specify the \/48 range they want from the google defined ULA prefix fd20::\/20. The input must be a valid \/48 ULA IPv6 address and must be within the fd20::\/20. Operation will fail if the speficied \/48 is already in used by another resource. If the field is not speficied, then a \/48 range will be randomly allocated from fd20::\/20 and returned via this field. .
    internalIpv6Range :: (Core.Maybe Core.Text),
    -- | [Output Only] Type of the resource. Always compute#network for networks.
    kind :: Core.Text,
    -- | Maximum Transmission Unit in bytes. The minimum value for this field is 1300 and the maximum value is 8896. The suggested value is 1500, which is the default MTU used on the Internet, or 8896 if you want to use Jumbo frames. If unspecified, the value defaults to 1460.
    mtu :: (Core.Maybe Core.Int32),
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
    name :: (Core.Maybe Core.Text),
    -- | The network firewall policy enforcement order. Can be either AFTER/CLASSIC/FIREWALL or BEFORE/CLASSIC/FIREWALL. Defaults to AFTER/CLASSIC/FIREWALL if the field is not specified.
    networkFirewallPolicyEnforcementOrder :: (Core.Maybe Network_NetworkFirewallPolicyEnforcementOrder),
    -- | [Output Only] A list of network peerings for the resource.
    peerings :: (Core.Maybe [NetworkPeering]),
    -- | The network-level routing configuration for this network. Used by Cloud Router to determine what type of network-wide routing behavior to enforce.
    routingConfig :: (Core.Maybe NetworkRoutingConfig),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource with the resource id.
    selfLinkWithId :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined fully-qualified URLs for all subnetworks in this VPC network.
    subnetworks :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Network' with the minimum fields required to make a request.
newNetwork ::
  Network
newNetwork =
  Network
    { iPv4Range = Core.Nothing,
      autoCreateSubnetworks = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      enableUlaInternalIpv6 = Core.Nothing,
      firewallPolicy = Core.Nothing,
      gatewayIPv4 = Core.Nothing,
      id = Core.Nothing,
      internalIpv6Range = Core.Nothing,
      kind = "compute#network",
      mtu = Core.Nothing,
      name = Core.Nothing,
      networkFirewallPolicyEnforcementOrder = Core.Nothing,
      peerings = Core.Nothing,
      routingConfig = Core.Nothing,
      selfLink = Core.Nothing,
      selfLinkWithId = Core.Nothing,
      subnetworks = Core.Nothing
    }

instance Core.FromJSON Network where
  parseJSON =
    Core.withObject
      "Network"
      ( \o ->
          Network
            Core.<$> (o Core..:? "IPv4Range")
            Core.<*> (o Core..:? "autoCreateSubnetworks")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "enableUlaInternalIpv6")
            Core.<*> (o Core..:? "firewallPolicy")
            Core.<*> (o Core..:? "gatewayIPv4")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "internalIpv6Range")
            Core.<*> (o Core..:? "kind" Core..!= "compute#network")
            Core.<*> (o Core..:? "mtu")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "networkFirewallPolicyEnforcementOrder")
            Core.<*> (o Core..:? "peerings")
            Core.<*> (o Core..:? "routingConfig")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "selfLinkWithId")
            Core.<*> (o Core..:? "subnetworks")
      )

instance Core.ToJSON Network where
  toJSON Network {..} =
    Core.object
      ( Core.catMaybes
          [ ("IPv4Range" Core..=) Core.<$> iPv4Range,
            ("autoCreateSubnetworks" Core..=)
              Core.<$> autoCreateSubnetworks,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("enableUlaInternalIpv6" Core..=)
              Core.<$> enableUlaInternalIpv6,
            ("firewallPolicy" Core..=) Core.<$> firewallPolicy,
            ("gatewayIPv4" Core..=) Core.<$> gatewayIPv4,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("internalIpv6Range" Core..=)
              Core.<$> internalIpv6Range,
            Core.Just ("kind" Core..= kind),
            ("mtu" Core..=) Core.<$> mtu,
            ("name" Core..=) Core.<$> name,
            ("networkFirewallPolicyEnforcementOrder" Core..=)
              Core.<$> networkFirewallPolicyEnforcementOrder,
            ("peerings" Core..=) Core.<$> peerings,
            ("routingConfig" Core..=) Core.<$> routingConfig,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("selfLinkWithId" Core..=) Core.<$> selfLinkWithId,
            ("subnetworks" Core..=) Core.<$> subnetworks
          ]
      )

-- | NetworkAttachments A network attachment resource ...
--
-- /See:/ 'newNetworkAttachment' smart constructor.
data NetworkAttachment = NetworkAttachment
  { -- | [Output Only] An array of connections for all the producers connected to this network attachment.
    connectionEndpoints :: (Core.Maybe [NetworkAttachmentConnectedEndpoint]),
    -- |
    connectionPreference :: (Core.Maybe NetworkAttachment_ConnectionPreference),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. An up-to-date fingerprint must be provided in order to patch.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | [Output Only] The unique identifier for the resource type. The server generates this identifier.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource.
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] The URL of the network which the Network Attachment belongs to.
    network :: (Core.Maybe Core.Text),
    -- | Projects that are allowed to connect to this network attachment. The project can be specified using its id or number.
    producerAcceptLists :: (Core.Maybe [Core.Text]),
    -- | Projects that are not allowed to connect to this network attachment. The project can be specified using its id or number.
    producerRejectLists :: (Core.Maybe [Core.Text]),
    -- | [Output Only] URL of the region where the network attachment resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource\'s resource id.
    selfLinkWithId :: (Core.Maybe Core.Text),
    -- | An array of URLs where each entry is the URL of a subnet provided by the service consumer to use for endpoints in the producers that connect to this network attachment.
    subnetworks :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkAttachment' with the minimum fields required to make a request.
newNetworkAttachment ::
  NetworkAttachment
newNetworkAttachment =
  NetworkAttachment
    { connectionEndpoints = Core.Nothing,
      connectionPreference = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      fingerprint = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#networkAttachment",
      name = Core.Nothing,
      network = Core.Nothing,
      producerAcceptLists = Core.Nothing,
      producerRejectLists = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      selfLinkWithId = Core.Nothing,
      subnetworks = Core.Nothing
    }

instance Core.FromJSON NetworkAttachment where
  parseJSON =
    Core.withObject
      "NetworkAttachment"
      ( \o ->
          NetworkAttachment
            Core.<$> (o Core..:? "connectionEndpoints")
            Core.<*> (o Core..:? "connectionPreference")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#networkAttachment"
                     )
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "network")
            Core.<*> (o Core..:? "producerAcceptLists")
            Core.<*> (o Core..:? "producerRejectLists")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "selfLinkWithId")
            Core.<*> (o Core..:? "subnetworks")
      )

instance Core.ToJSON NetworkAttachment where
  toJSON NetworkAttachment {..} =
    Core.object
      ( Core.catMaybes
          [ ("connectionEndpoints" Core..=)
              Core.<$> connectionEndpoints,
            ("connectionPreference" Core..=)
              Core.<$> connectionPreference,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("network" Core..=) Core.<$> network,
            ("producerAcceptLists" Core..=)
              Core.<$> producerAcceptLists,
            ("producerRejectLists" Core..=)
              Core.<$> producerRejectLists,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("selfLinkWithId" Core..=) Core.<$> selfLinkWithId,
            ("subnetworks" Core..=) Core.<$> subnetworks
          ]
      )

-- | Contains a list of NetworkAttachmentsScopedList.
--
-- /See:/ 'newNetworkAttachmentAggregatedList' smart constructor.
data NetworkAttachmentAggregatedList = NetworkAttachmentAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of NetworkAttachmentsScopedList resources.
    items :: (Core.Maybe NetworkAttachmentAggregatedList_Items),
    -- |
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe NetworkAttachmentAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkAttachmentAggregatedList' with the minimum fields required to make a request.
newNetworkAttachmentAggregatedList ::
  NetworkAttachmentAggregatedList
newNetworkAttachmentAggregatedList =
  NetworkAttachmentAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#networkAttachmentAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkAttachmentAggregatedList
  where
  parseJSON =
    Core.withObject
      "NetworkAttachmentAggregatedList"
      ( \o ->
          NetworkAttachmentAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#networkAttachmentAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON NetworkAttachmentAggregatedList where
  toJSON NetworkAttachmentAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of NetworkAttachmentsScopedList resources.
--
-- /See:/ 'newNetworkAttachmentAggregatedList_Items' smart constructor.
newtype NetworkAttachmentAggregatedList_Items = NetworkAttachmentAggregatedList_Items
  { -- | Name of the scope containing this set of NetworkAttachments.
    additional :: (Core.HashMap Core.Text NetworkAttachmentsScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkAttachmentAggregatedList_Items' with the minimum fields required to make a request.
newNetworkAttachmentAggregatedList_Items ::
  -- |  Name of the scope containing this set of NetworkAttachments. See 'additional'.
  Core.HashMap Core.Text NetworkAttachmentsScopedList ->
  NetworkAttachmentAggregatedList_Items
newNetworkAttachmentAggregatedList_Items additional =
  NetworkAttachmentAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    NetworkAttachmentAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "NetworkAttachmentAggregatedList_Items"
      ( \o ->
          NetworkAttachmentAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    NetworkAttachmentAggregatedList_Items
  where
  toJSON NetworkAttachmentAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newNetworkAttachmentAggregatedList_Warning' smart constructor.
data NetworkAttachmentAggregatedList_Warning = NetworkAttachmentAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NetworkAttachmentAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [NetworkAttachmentAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkAttachmentAggregatedList_Warning' with the minimum fields required to make a request.
newNetworkAttachmentAggregatedList_Warning ::
  NetworkAttachmentAggregatedList_Warning
newNetworkAttachmentAggregatedList_Warning =
  NetworkAttachmentAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkAttachmentAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "NetworkAttachmentAggregatedList_Warning"
      ( \o ->
          NetworkAttachmentAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    NetworkAttachmentAggregatedList_Warning
  where
  toJSON NetworkAttachmentAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newNetworkAttachmentAggregatedList_Warning_DataItem' smart constructor.
data NetworkAttachmentAggregatedList_Warning_DataItem = NetworkAttachmentAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkAttachmentAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newNetworkAttachmentAggregatedList_Warning_DataItem ::
  NetworkAttachmentAggregatedList_Warning_DataItem
newNetworkAttachmentAggregatedList_Warning_DataItem =
  NetworkAttachmentAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkAttachmentAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "NetworkAttachmentAggregatedList_Warning_DataItem"
      ( \o ->
          NetworkAttachmentAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    NetworkAttachmentAggregatedList_Warning_DataItem
  where
  toJSON
    NetworkAttachmentAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | [Output Only] A connection connected to this network attachment.
--
-- /See:/ 'newNetworkAttachmentConnectedEndpoint' smart constructor.
data NetworkAttachmentConnectedEndpoint = NetworkAttachmentConnectedEndpoint
  { -- | The IP address assigned to the producer instance network interface. This value will be a range in case of Serverless.
    ipAddress :: (Core.Maybe Core.Text),
    -- | The project id or number of the interface to which the IP was assigned.
    projectIdOrNum :: (Core.Maybe Core.Text),
    -- | Alias IP ranges from the same subnetwork
    secondaryIpCidrRanges :: (Core.Maybe [Core.Text]),
    -- | The status of a connected endpoint to this network attachment.
    status :: (Core.Maybe NetworkAttachmentConnectedEndpoint_Status),
    -- | The subnetwork used to assign the IP to the producer instance network interface.
    subnetwork :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkAttachmentConnectedEndpoint' with the minimum fields required to make a request.
newNetworkAttachmentConnectedEndpoint ::
  NetworkAttachmentConnectedEndpoint
newNetworkAttachmentConnectedEndpoint =
  NetworkAttachmentConnectedEndpoint
    { ipAddress = Core.Nothing,
      projectIdOrNum = Core.Nothing,
      secondaryIpCidrRanges = Core.Nothing,
      status = Core.Nothing,
      subnetwork = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkAttachmentConnectedEndpoint
  where
  parseJSON =
    Core.withObject
      "NetworkAttachmentConnectedEndpoint"
      ( \o ->
          NetworkAttachmentConnectedEndpoint
            Core.<$> (o Core..:? "ipAddress")
            Core.<*> (o Core..:? "projectIdOrNum")
            Core.<*> (o Core..:? "secondaryIpCidrRanges")
            Core.<*> (o Core..:? "status")
            Core.<*> (o Core..:? "subnetwork")
      )

instance
  Core.ToJSON
    NetworkAttachmentConnectedEndpoint
  where
  toJSON NetworkAttachmentConnectedEndpoint {..} =
    Core.object
      ( Core.catMaybes
          [ ("ipAddress" Core..=) Core.<$> ipAddress,
            ("projectIdOrNum" Core..=) Core.<$> projectIdOrNum,
            ("secondaryIpCidrRanges" Core..=)
              Core.<$> secondaryIpCidrRanges,
            ("status" Core..=) Core.<$> status,
            ("subnetwork" Core..=) Core.<$> subnetwork
          ]
      )

--
-- /See:/ 'newNetworkAttachmentList' smart constructor.
data NetworkAttachmentList = NetworkAttachmentList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of NetworkAttachment resources.
    items :: (Core.Maybe [NetworkAttachment]),
    -- |
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe NetworkAttachmentList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkAttachmentList' with the minimum fields required to make a request.
newNetworkAttachmentList ::
  NetworkAttachmentList
newNetworkAttachmentList =
  NetworkAttachmentList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#networkAttachmentList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON NetworkAttachmentList where
  parseJSON =
    Core.withObject
      "NetworkAttachmentList"
      ( \o ->
          NetworkAttachmentList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#networkAttachmentList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON NetworkAttachmentList where
  toJSON NetworkAttachmentList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newNetworkAttachmentList_Warning' smart constructor.
data NetworkAttachmentList_Warning = NetworkAttachmentList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NetworkAttachmentList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [NetworkAttachmentList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkAttachmentList_Warning' with the minimum fields required to make a request.
newNetworkAttachmentList_Warning ::
  NetworkAttachmentList_Warning
newNetworkAttachmentList_Warning =
  NetworkAttachmentList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON NetworkAttachmentList_Warning where
  parseJSON =
    Core.withObject
      "NetworkAttachmentList_Warning"
      ( \o ->
          NetworkAttachmentList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON NetworkAttachmentList_Warning where
  toJSON NetworkAttachmentList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newNetworkAttachmentList_Warning_DataItem' smart constructor.
data NetworkAttachmentList_Warning_DataItem = NetworkAttachmentList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkAttachmentList_Warning_DataItem' with the minimum fields required to make a request.
newNetworkAttachmentList_Warning_DataItem ::
  NetworkAttachmentList_Warning_DataItem
newNetworkAttachmentList_Warning_DataItem =
  NetworkAttachmentList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkAttachmentList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "NetworkAttachmentList_Warning_DataItem"
      ( \o ->
          NetworkAttachmentList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    NetworkAttachmentList_Warning_DataItem
  where
  toJSON NetworkAttachmentList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newNetworkAttachmentsScopedList' smart constructor.
data NetworkAttachmentsScopedList = NetworkAttachmentsScopedList
  { -- | A list of NetworkAttachments contained in this scope.
    networkAttachments :: (Core.Maybe [NetworkAttachment]),
    -- | Informational warning which replaces the list of network attachments when the list is empty.
    warning :: (Core.Maybe NetworkAttachmentsScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkAttachmentsScopedList' with the minimum fields required to make a request.
newNetworkAttachmentsScopedList ::
  NetworkAttachmentsScopedList
newNetworkAttachmentsScopedList =
  NetworkAttachmentsScopedList
    { networkAttachments = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON NetworkAttachmentsScopedList where
  parseJSON =
    Core.withObject
      "NetworkAttachmentsScopedList"
      ( \o ->
          NetworkAttachmentsScopedList
            Core.<$> (o Core..:? "networkAttachments")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON NetworkAttachmentsScopedList where
  toJSON NetworkAttachmentsScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("networkAttachments" Core..=)
              Core.<$> networkAttachments,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of network attachments when the list is empty.
--
-- /See:/ 'newNetworkAttachmentsScopedList_Warning' smart constructor.
data NetworkAttachmentsScopedList_Warning = NetworkAttachmentsScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NetworkAttachmentsScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [NetworkAttachmentsScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkAttachmentsScopedList_Warning' with the minimum fields required to make a request.
newNetworkAttachmentsScopedList_Warning ::
  NetworkAttachmentsScopedList_Warning
newNetworkAttachmentsScopedList_Warning =
  NetworkAttachmentsScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkAttachmentsScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "NetworkAttachmentsScopedList_Warning"
      ( \o ->
          NetworkAttachmentsScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    NetworkAttachmentsScopedList_Warning
  where
  toJSON NetworkAttachmentsScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newNetworkAttachmentsScopedList_Warning_DataItem' smart constructor.
data NetworkAttachmentsScopedList_Warning_DataItem = NetworkAttachmentsScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkAttachmentsScopedList_Warning_DataItem' with the minimum fields required to make a request.
newNetworkAttachmentsScopedList_Warning_DataItem ::
  NetworkAttachmentsScopedList_Warning_DataItem
newNetworkAttachmentsScopedList_Warning_DataItem =
  NetworkAttachmentsScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkAttachmentsScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "NetworkAttachmentsScopedList_Warning_DataItem"
      ( \o ->
          NetworkAttachmentsScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    NetworkAttachmentsScopedList_Warning_DataItem
  where
  toJSON
    NetworkAttachmentsScopedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | Represents a Google Cloud Armor network edge security service resource.
--
-- /See:/ 'newNetworkEdgeSecurityService' smart constructor.
data NetworkEdgeSecurityService = NetworkEdgeSecurityService
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a NetworkEdgeSecurityService. An up-to-date fingerprint must be provided in order to update the NetworkEdgeSecurityService, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a NetworkEdgeSecurityService.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output only] Type of the resource. Always compute#networkEdgeSecurityService for NetworkEdgeSecurityServices
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] URL of the region where the resource resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    region :: (Core.Maybe Core.Text),
    -- | The resource URL for the network edge security service associated with this network edge security service.
    securityPolicy :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource with the resource id.
    selfLinkWithId :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEdgeSecurityService' with the minimum fields required to make a request.
newNetworkEdgeSecurityService ::
  NetworkEdgeSecurityService
newNetworkEdgeSecurityService =
  NetworkEdgeSecurityService
    { creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      fingerprint = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#networkEdgeSecurityService",
      name = Core.Nothing,
      region = Core.Nothing,
      securityPolicy = Core.Nothing,
      selfLink = Core.Nothing,
      selfLinkWithId = Core.Nothing
    }

instance Core.FromJSON NetworkEdgeSecurityService where
  parseJSON =
    Core.withObject
      "NetworkEdgeSecurityService"
      ( \o ->
          NetworkEdgeSecurityService
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#networkEdgeSecurityService"
                     )
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "securityPolicy")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "selfLinkWithId")
      )

instance Core.ToJSON NetworkEdgeSecurityService where
  toJSON NetworkEdgeSecurityService {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("region" Core..=) Core.<$> region,
            ("securityPolicy" Core..=) Core.<$> securityPolicy,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("selfLinkWithId" Core..=) Core.<$> selfLinkWithId
          ]
      )

--
-- /See:/ 'newNetworkEdgeSecurityServiceAggregatedList' smart constructor.
data NetworkEdgeSecurityServiceAggregatedList = NetworkEdgeSecurityServiceAggregatedList
  { -- |
    etag :: (Core.Maybe Core.Text),
    -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of NetworkEdgeSecurityServicesScopedList resources.
    items :: (Core.Maybe NetworkEdgeSecurityServiceAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#networkEdgeSecurityServiceAggregatedList for lists of Network Edge Security Services.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe NetworkEdgeSecurityServiceAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEdgeSecurityServiceAggregatedList' with the minimum fields required to make a request.
newNetworkEdgeSecurityServiceAggregatedList ::
  NetworkEdgeSecurityServiceAggregatedList
newNetworkEdgeSecurityServiceAggregatedList =
  NetworkEdgeSecurityServiceAggregatedList
    { etag = Core.Nothing,
      id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#networkEdgeSecurityServiceAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkEdgeSecurityServiceAggregatedList
  where
  parseJSON =
    Core.withObject
      "NetworkEdgeSecurityServiceAggregatedList"
      ( \o ->
          NetworkEdgeSecurityServiceAggregatedList
            Core.<$> (o Core..:? "etag")
            Core.<*> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#networkEdgeSecurityServiceAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance
  Core.ToJSON
    NetworkEdgeSecurityServiceAggregatedList
  where
  toJSON NetworkEdgeSecurityServiceAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("etag" Core..=) Core.<$> etag,
            ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of NetworkEdgeSecurityServicesScopedList resources.
--
-- /See:/ 'newNetworkEdgeSecurityServiceAggregatedList_Items' smart constructor.
newtype NetworkEdgeSecurityServiceAggregatedList_Items = NetworkEdgeSecurityServiceAggregatedList_Items
  { -- | Name of the scope containing this set of security policies.
    additional :: (Core.HashMap Core.Text NetworkEdgeSecurityServicesScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEdgeSecurityServiceAggregatedList_Items' with the minimum fields required to make a request.
newNetworkEdgeSecurityServiceAggregatedList_Items ::
  -- |  Name of the scope containing this set of security policies. See 'additional'.
  Core.HashMap Core.Text NetworkEdgeSecurityServicesScopedList ->
  NetworkEdgeSecurityServiceAggregatedList_Items
newNetworkEdgeSecurityServiceAggregatedList_Items additional =
  NetworkEdgeSecurityServiceAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    NetworkEdgeSecurityServiceAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "NetworkEdgeSecurityServiceAggregatedList_Items"
      ( \o ->
          NetworkEdgeSecurityServiceAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    NetworkEdgeSecurityServiceAggregatedList_Items
  where
  toJSON
    NetworkEdgeSecurityServiceAggregatedList_Items {..} =
      Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newNetworkEdgeSecurityServiceAggregatedList_Warning' smart constructor.
data NetworkEdgeSecurityServiceAggregatedList_Warning = NetworkEdgeSecurityServiceAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NetworkEdgeSecurityServiceAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' ::
      ( Core.Maybe
          [NetworkEdgeSecurityServiceAggregatedList_Warning_DataItem]
      ),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEdgeSecurityServiceAggregatedList_Warning' with the minimum fields required to make a request.
newNetworkEdgeSecurityServiceAggregatedList_Warning ::
  NetworkEdgeSecurityServiceAggregatedList_Warning
newNetworkEdgeSecurityServiceAggregatedList_Warning =
  NetworkEdgeSecurityServiceAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkEdgeSecurityServiceAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "NetworkEdgeSecurityServiceAggregatedList_Warning"
      ( \o ->
          NetworkEdgeSecurityServiceAggregatedList_Warning
            Core.<$> (o Core..:? "code") Core.<*> (o Core..:? "data")
              Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    NetworkEdgeSecurityServiceAggregatedList_Warning
  where
  toJSON
    NetworkEdgeSecurityServiceAggregatedList_Warning {..} =
      Core.object
        ( Core.catMaybes
            [ ("code" Core..=) Core.<$> code,
              ("data" Core..=) Core.<$> data',
              ("message" Core..=) Core.<$> message
            ]
        )

--
-- /See:/ 'newNetworkEdgeSecurityServiceAggregatedList_Warning_DataItem' smart constructor.
data NetworkEdgeSecurityServiceAggregatedList_Warning_DataItem = NetworkEdgeSecurityServiceAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEdgeSecurityServiceAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newNetworkEdgeSecurityServiceAggregatedList_Warning_DataItem ::
  NetworkEdgeSecurityServiceAggregatedList_Warning_DataItem
newNetworkEdgeSecurityServiceAggregatedList_Warning_DataItem =
  NetworkEdgeSecurityServiceAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkEdgeSecurityServiceAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "NetworkEdgeSecurityServiceAggregatedList_Warning_DataItem"
      ( \o ->
          NetworkEdgeSecurityServiceAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    NetworkEdgeSecurityServiceAggregatedList_Warning_DataItem
  where
  toJSON
    NetworkEdgeSecurityServiceAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

--
-- /See:/ 'newNetworkEdgeSecurityServicesScopedList' smart constructor.
data NetworkEdgeSecurityServicesScopedList = NetworkEdgeSecurityServicesScopedList
  { -- | A list of NetworkEdgeSecurityServices contained in this scope.
    networkEdgeSecurityServices :: (Core.Maybe [NetworkEdgeSecurityService]),
    -- | Informational warning which replaces the list of security policies when the list is empty.
    warning :: (Core.Maybe NetworkEdgeSecurityServicesScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEdgeSecurityServicesScopedList' with the minimum fields required to make a request.
newNetworkEdgeSecurityServicesScopedList ::
  NetworkEdgeSecurityServicesScopedList
newNetworkEdgeSecurityServicesScopedList =
  NetworkEdgeSecurityServicesScopedList
    { networkEdgeSecurityServices = Core.Nothing,
      warning = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkEdgeSecurityServicesScopedList
  where
  parseJSON =
    Core.withObject
      "NetworkEdgeSecurityServicesScopedList"
      ( \o ->
          NetworkEdgeSecurityServicesScopedList
            Core.<$> (o Core..:? "networkEdgeSecurityServices")
            Core.<*> (o Core..:? "warning")
      )

instance
  Core.ToJSON
    NetworkEdgeSecurityServicesScopedList
  where
  toJSON NetworkEdgeSecurityServicesScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("networkEdgeSecurityServices" Core..=)
              Core.<$> networkEdgeSecurityServices,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of security policies when the list is empty.
--
-- /See:/ 'newNetworkEdgeSecurityServicesScopedList_Warning' smart constructor.
data NetworkEdgeSecurityServicesScopedList_Warning = NetworkEdgeSecurityServicesScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NetworkEdgeSecurityServicesScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' ::
      ( Core.Maybe
          [NetworkEdgeSecurityServicesScopedList_Warning_DataItem]
      ),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEdgeSecurityServicesScopedList_Warning' with the minimum fields required to make a request.
newNetworkEdgeSecurityServicesScopedList_Warning ::
  NetworkEdgeSecurityServicesScopedList_Warning
newNetworkEdgeSecurityServicesScopedList_Warning =
  NetworkEdgeSecurityServicesScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkEdgeSecurityServicesScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "NetworkEdgeSecurityServicesScopedList_Warning"
      ( \o ->
          NetworkEdgeSecurityServicesScopedList_Warning
            Core.<$> (o Core..:? "code") Core.<*> (o Core..:? "data")
              Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    NetworkEdgeSecurityServicesScopedList_Warning
  where
  toJSON
    NetworkEdgeSecurityServicesScopedList_Warning {..} =
      Core.object
        ( Core.catMaybes
            [ ("code" Core..=) Core.<$> code,
              ("data" Core..=) Core.<$> data',
              ("message" Core..=) Core.<$> message
            ]
        )

--
-- /See:/ 'newNetworkEdgeSecurityServicesScopedList_Warning_DataItem' smart constructor.
data NetworkEdgeSecurityServicesScopedList_Warning_DataItem = NetworkEdgeSecurityServicesScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEdgeSecurityServicesScopedList_Warning_DataItem' with the minimum fields required to make a request.
newNetworkEdgeSecurityServicesScopedList_Warning_DataItem ::
  NetworkEdgeSecurityServicesScopedList_Warning_DataItem
newNetworkEdgeSecurityServicesScopedList_Warning_DataItem =
  NetworkEdgeSecurityServicesScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkEdgeSecurityServicesScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "NetworkEdgeSecurityServicesScopedList_Warning_DataItem"
      ( \o ->
          NetworkEdgeSecurityServicesScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    NetworkEdgeSecurityServicesScopedList_Warning_DataItem
  where
  toJSON
    NetworkEdgeSecurityServicesScopedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | The network endpoint.
--
-- /See:/ 'newNetworkEndpoint' smart constructor.
data NetworkEndpoint = NetworkEndpoint
  { -- | Metadata defined as annotations on the network endpoint.
    annotations :: (Core.Maybe NetworkEndpoint_Annotations),
    -- | Optional fully qualified domain name of network endpoint. This can only be specified when NetworkEndpointGroup.network/endpoint/type is NON/GCP/FQDN_PORT.
    fqdn :: (Core.Maybe Core.Text),
    -- | The name for a specific VM instance that the IP address belongs to. This is required for network endpoints of type GCE/VM/IP_PORT. The instance must be in the same zone of network endpoint group. The name must be 1-63 characters long, and comply with RFC1035.
    instance' :: (Core.Maybe Core.Text),
    -- | Optional IPv4 address of network endpoint. The IP address must belong to a VM in Compute Engine (either the primary IP or as part of an aliased IP range). If the IP address is not specified, then the primary IP address for the VM instance in the network that the network endpoint group belongs to will be used.
    ipAddress :: (Core.Maybe Core.Text),
    -- | Optional port number of network endpoint. If not specified, the defaultPort for the network endpoint group will be used.
    port :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpoint' with the minimum fields required to make a request.
newNetworkEndpoint ::
  NetworkEndpoint
newNetworkEndpoint =
  NetworkEndpoint
    { annotations = Core.Nothing,
      fqdn = Core.Nothing,
      instance' = Core.Nothing,
      ipAddress = Core.Nothing,
      port = Core.Nothing
    }

instance Core.FromJSON NetworkEndpoint where
  parseJSON =
    Core.withObject
      "NetworkEndpoint"
      ( \o ->
          NetworkEndpoint
            Core.<$> (o Core..:? "annotations")
            Core.<*> (o Core..:? "fqdn")
            Core.<*> (o Core..:? "instance")
            Core.<*> (o Core..:? "ipAddress")
            Core.<*> (o Core..:? "port")
      )

instance Core.ToJSON NetworkEndpoint where
  toJSON NetworkEndpoint {..} =
    Core.object
      ( Core.catMaybes
          [ ("annotations" Core..=) Core.<$> annotations,
            ("fqdn" Core..=) Core.<$> fqdn,
            ("instance" Core..=) Core.<$> instance',
            ("ipAddress" Core..=) Core.<$> ipAddress,
            ("port" Core..=) Core.<$> port
          ]
      )

-- | Metadata defined as annotations on the network endpoint.
--
-- /See:/ 'newNetworkEndpoint_Annotations' smart constructor.
newtype NetworkEndpoint_Annotations = NetworkEndpoint_Annotations
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpoint_Annotations' with the minimum fields required to make a request.
newNetworkEndpoint_Annotations ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  NetworkEndpoint_Annotations
newNetworkEndpoint_Annotations additional =
  NetworkEndpoint_Annotations {additional = additional}

instance Core.FromJSON NetworkEndpoint_Annotations where
  parseJSON =
    Core.withObject
      "NetworkEndpoint_Annotations"
      ( \o ->
          NetworkEndpoint_Annotations
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON NetworkEndpoint_Annotations where
  toJSON NetworkEndpoint_Annotations {..} =
    Core.toJSON additional

-- | Represents a collection of network endpoints. A network endpoint group (NEG) defines how a set of endpoints should be reached, whether they are reachable, and where they are located. For more information about using NEGs, see Setting up external HTTP(S) Load Balancing with internet NEGs, Setting up zonal NEGs, or Setting up external HTTP(S) Load Balancing with serverless NEGs.
--
-- /See:/ 'newNetworkEndpointGroup' smart constructor.
data NetworkEndpointGroup = NetworkEndpointGroup
  { -- | Metadata defined as annotations on the network endpoint group.
    annotations :: (Core.Maybe NetworkEndpointGroup_Annotations),
    -- | Only valid when networkEndpointType is \"SERVERLESS\". Only one of cloudRun, appEngine or cloudFunction may be set.
    appEngine :: (Core.Maybe NetworkEndpointGroupAppEngine),
    -- | Only valid when networkEndpointType is \"SERVERLESS\". Only one of cloudRun, appEngine or cloudFunction may be set.
    cloudFunction :: (Core.Maybe NetworkEndpointGroupCloudFunction),
    -- | Only valid when networkEndpointType is \"SERVERLESS\". Only one of cloudRun, appEngine or cloudFunction may be set.
    cloudRun :: (Core.Maybe NetworkEndpointGroupCloudRun),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | The default port used if the port number is not specified in the network endpoint.
    defaultPort :: (Core.Maybe Core.Int32),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#networkEndpointGroup for network endpoint group.
    kind :: Core.Text,
    -- | Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | The URL of the network to which all network endpoints in the NEG belong. Uses \"default\" project network if unspecified.
    network :: (Core.Maybe Core.Text),
    -- | Type of network endpoints in this network endpoint group. Can be one of GCE/VM/IP, GCE/VM/IP/PORT, NON/GCP/PRIVATE/IP/PORT, INTERNET/FQDN/PORT, INTERNET/IP/PORT, SERVERLESS, PRIVATE/SERVICE_CONNECT.
    networkEndpointType :: (Core.Maybe NetworkEndpointGroup_NetworkEndpointType),
    -- |
    pscData :: (Core.Maybe NetworkEndpointGroupPscData),
    -- | The target service url used to set up private service connection to a Google API or a PSC Producer Service Attachment. An example value is: \"asia-northeast3-cloudkms.googleapis.com\"
    pscTargetService :: (Core.Maybe Core.Text),
    -- | [Output Only] The URL of the region where the network endpoint group is located.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output only] Number of network endpoints in the network endpoint group.
    size :: (Core.Maybe Core.Int32),
    -- | Optional URL of the subnetwork to which all network endpoints in the NEG belong.
    subnetwork :: (Core.Maybe Core.Text),
    -- | [Output Only] The URL of the zone where the network endpoint group is located.
    zone :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroup' with the minimum fields required to make a request.
newNetworkEndpointGroup ::
  NetworkEndpointGroup
newNetworkEndpointGroup =
  NetworkEndpointGroup
    { annotations = Core.Nothing,
      appEngine = Core.Nothing,
      cloudFunction = Core.Nothing,
      cloudRun = Core.Nothing,
      creationTimestamp = Core.Nothing,
      defaultPort = Core.Nothing,
      description = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#networkEndpointGroup",
      name = Core.Nothing,
      network = Core.Nothing,
      networkEndpointType = Core.Nothing,
      pscData = Core.Nothing,
      pscTargetService = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      size = Core.Nothing,
      subnetwork = Core.Nothing,
      zone = Core.Nothing
    }

instance Core.FromJSON NetworkEndpointGroup where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroup"
      ( \o ->
          NetworkEndpointGroup
            Core.<$> (o Core..:? "annotations")
            Core.<*> (o Core..:? "appEngine")
            Core.<*> (o Core..:? "cloudFunction")
            Core.<*> (o Core..:? "cloudRun")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "defaultPort")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#networkEndpointGroup"
                     )
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "network")
            Core.<*> (o Core..:? "networkEndpointType")
            Core.<*> (o Core..:? "pscData")
            Core.<*> (o Core..:? "pscTargetService")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "size")
            Core.<*> (o Core..:? "subnetwork")
            Core.<*> (o Core..:? "zone")
      )

instance Core.ToJSON NetworkEndpointGroup where
  toJSON NetworkEndpointGroup {..} =
    Core.object
      ( Core.catMaybes
          [ ("annotations" Core..=) Core.<$> annotations,
            ("appEngine" Core..=) Core.<$> appEngine,
            ("cloudFunction" Core..=) Core.<$> cloudFunction,
            ("cloudRun" Core..=) Core.<$> cloudRun,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("defaultPort" Core..=) Core.<$> defaultPort,
            ("description" Core..=) Core.<$> description,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("network" Core..=) Core.<$> network,
            ("networkEndpointType" Core..=)
              Core.<$> networkEndpointType,
            ("pscData" Core..=) Core.<$> pscData,
            ("pscTargetService" Core..=)
              Core.<$> pscTargetService,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("size" Core..=) Core.<$> size,
            ("subnetwork" Core..=) Core.<$> subnetwork,
            ("zone" Core..=) Core.<$> zone
          ]
      )

-- | Metadata defined as annotations on the network endpoint group.
--
-- /See:/ 'newNetworkEndpointGroup_Annotations' smart constructor.
newtype NetworkEndpointGroup_Annotations = NetworkEndpointGroup_Annotations
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroup_Annotations' with the minimum fields required to make a request.
newNetworkEndpointGroup_Annotations ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  NetworkEndpointGroup_Annotations
newNetworkEndpointGroup_Annotations additional =
  NetworkEndpointGroup_Annotations {additional = additional}

instance
  Core.FromJSON
    NetworkEndpointGroup_Annotations
  where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroup_Annotations"
      ( \o ->
          NetworkEndpointGroup_Annotations
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON NetworkEndpointGroup_Annotations where
  toJSON NetworkEndpointGroup_Annotations {..} =
    Core.toJSON additional

--
-- /See:/ 'newNetworkEndpointGroupAggregatedList' smart constructor.
data NetworkEndpointGroupAggregatedList = NetworkEndpointGroupAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of NetworkEndpointGroupsScopedList resources.
    items :: (Core.Maybe NetworkEndpointGroupAggregatedList_Items),
    -- | [Output Only] The resource type, which is always compute#networkEndpointGroupAggregatedList for aggregated lists of network endpoint groups.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe NetworkEndpointGroupAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroupAggregatedList' with the minimum fields required to make a request.
newNetworkEndpointGroupAggregatedList ::
  NetworkEndpointGroupAggregatedList
newNetworkEndpointGroupAggregatedList =
  NetworkEndpointGroupAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#networkEndpointGroupAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkEndpointGroupAggregatedList
  where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroupAggregatedList"
      ( \o ->
          NetworkEndpointGroupAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#networkEndpointGroupAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance
  Core.ToJSON
    NetworkEndpointGroupAggregatedList
  where
  toJSON NetworkEndpointGroupAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of NetworkEndpointGroupsScopedList resources.
--
-- /See:/ 'newNetworkEndpointGroupAggregatedList_Items' smart constructor.
newtype NetworkEndpointGroupAggregatedList_Items = NetworkEndpointGroupAggregatedList_Items
  { -- | The name of the scope that contains this set of network endpoint groups.
    additional :: (Core.HashMap Core.Text NetworkEndpointGroupsScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroupAggregatedList_Items' with the minimum fields required to make a request.
newNetworkEndpointGroupAggregatedList_Items ::
  -- |  The name of the scope that contains this set of network endpoint groups. See 'additional'.
  Core.HashMap Core.Text NetworkEndpointGroupsScopedList ->
  NetworkEndpointGroupAggregatedList_Items
newNetworkEndpointGroupAggregatedList_Items additional =
  NetworkEndpointGroupAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    NetworkEndpointGroupAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroupAggregatedList_Items"
      ( \o ->
          NetworkEndpointGroupAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    NetworkEndpointGroupAggregatedList_Items
  where
  toJSON NetworkEndpointGroupAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newNetworkEndpointGroupAggregatedList_Warning' smart constructor.
data NetworkEndpointGroupAggregatedList_Warning = NetworkEndpointGroupAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NetworkEndpointGroupAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [NetworkEndpointGroupAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroupAggregatedList_Warning' with the minimum fields required to make a request.
newNetworkEndpointGroupAggregatedList_Warning ::
  NetworkEndpointGroupAggregatedList_Warning
newNetworkEndpointGroupAggregatedList_Warning =
  NetworkEndpointGroupAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkEndpointGroupAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroupAggregatedList_Warning"
      ( \o ->
          NetworkEndpointGroupAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    NetworkEndpointGroupAggregatedList_Warning
  where
  toJSON NetworkEndpointGroupAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newNetworkEndpointGroupAggregatedList_Warning_DataItem' smart constructor.
data NetworkEndpointGroupAggregatedList_Warning_DataItem = NetworkEndpointGroupAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroupAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newNetworkEndpointGroupAggregatedList_Warning_DataItem ::
  NetworkEndpointGroupAggregatedList_Warning_DataItem
newNetworkEndpointGroupAggregatedList_Warning_DataItem =
  NetworkEndpointGroupAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkEndpointGroupAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroupAggregatedList_Warning_DataItem"
      ( \o ->
          NetworkEndpointGroupAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    NetworkEndpointGroupAggregatedList_Warning_DataItem
  where
  toJSON
    NetworkEndpointGroupAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | Configuration for an App Engine network endpoint group (NEG). The service is optional, may be provided explicitly or in the URL mask. The version is optional and can only be provided explicitly or in the URL mask when service is present. Note: App Engine service must be in the same project and located in the same region as the Serverless NEG.
--
-- /See:/ 'newNetworkEndpointGroupAppEngine' smart constructor.
data NetworkEndpointGroupAppEngine = NetworkEndpointGroupAppEngine
  { -- | Optional serving service. The service name is case-sensitive and must be 1-63 characters long. Example value: \"default\", \"my-service\".
    service :: (Core.Maybe Core.Text),
    -- | A template to parse service and version fields from a request URL. URL mask allows for routing to multiple App Engine services without having to create multiple Network Endpoint Groups and backend services. For example, the request URLs \"foo1-dot-appname.appspot.com\/v1\" and \"foo1-dot-appname.appspot.com\/v2\" can be backed by the same Serverless NEG with URL mask \"\<service>-dot-appname.appspot.com\/\<version>\". The URL mask will parse them to { service = \"foo1\", version = \"v1\" } and { service = \"foo1\", version = \"v2\" } respectively.
    urlMask :: (Core.Maybe Core.Text),
    -- | Optional serving version. The version name is case-sensitive and must be 1-100 characters long. Example value: \"v1\", \"v2\".
    version :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroupAppEngine' with the minimum fields required to make a request.
newNetworkEndpointGroupAppEngine ::
  NetworkEndpointGroupAppEngine
newNetworkEndpointGroupAppEngine =
  NetworkEndpointGroupAppEngine
    { service = Core.Nothing,
      urlMask = Core.Nothing,
      version = Core.Nothing
    }

instance Core.FromJSON NetworkEndpointGroupAppEngine where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroupAppEngine"
      ( \o ->
          NetworkEndpointGroupAppEngine
            Core.<$> (o Core..:? "service")
            Core.<*> (o Core..:? "urlMask")
            Core.<*> (o Core..:? "version")
      )

instance Core.ToJSON NetworkEndpointGroupAppEngine where
  toJSON NetworkEndpointGroupAppEngine {..} =
    Core.object
      ( Core.catMaybes
          [ ("service" Core..=) Core.<$> service,
            ("urlMask" Core..=) Core.<$> urlMask,
            ("version" Core..=) Core.<$> version
          ]
      )

-- | Configuration for a Cloud Function network endpoint group (NEG). The function must be provided explicitly or in the URL mask. Note: Cloud Function must be in the same project and located in the same region as the Serverless NEG.
--
-- /See:/ 'newNetworkEndpointGroupCloudFunction' smart constructor.
data NetworkEndpointGroupCloudFunction = NetworkEndpointGroupCloudFunction
  { -- | A user-defined name of the Cloud Function. The function name is case-sensitive and must be 1-63 characters long. Example value: \"func1\".
    function :: (Core.Maybe Core.Text),
    -- | A template to parse function field from a request URL. URL mask allows for routing to multiple Cloud Functions without having to create multiple Network Endpoint Groups and backend services. For example, request URLs \" mydomain.com\/function1\" and \"mydomain.com\/function2\" can be backed by the same Serverless NEG with URL mask \"\/\<function>\". The URL mask will parse them to { function = \"function1\" } and { function = \"function2\" } respectively.
    urlMask :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroupCloudFunction' with the minimum fields required to make a request.
newNetworkEndpointGroupCloudFunction ::
  NetworkEndpointGroupCloudFunction
newNetworkEndpointGroupCloudFunction =
  NetworkEndpointGroupCloudFunction
    { function = Core.Nothing,
      urlMask = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkEndpointGroupCloudFunction
  where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroupCloudFunction"
      ( \o ->
          NetworkEndpointGroupCloudFunction
            Core.<$> (o Core..:? "function")
            Core.<*> (o Core..:? "urlMask")
      )

instance
  Core.ToJSON
    NetworkEndpointGroupCloudFunction
  where
  toJSON NetworkEndpointGroupCloudFunction {..} =
    Core.object
      ( Core.catMaybes
          [ ("function" Core..=) Core.<$> function,
            ("urlMask" Core..=) Core.<$> urlMask
          ]
      )

-- | Configuration for a Cloud Run network endpoint group (NEG). The service must be provided explicitly or in the URL mask. The tag is optional, may be provided explicitly or in the URL mask. Note: Cloud Run service must be in the same project and located in the same region as the Serverless NEG.
--
-- /See:/ 'newNetworkEndpointGroupCloudRun' smart constructor.
data NetworkEndpointGroupCloudRun = NetworkEndpointGroupCloudRun
  { -- | Cloud Run service is the main resource of Cloud Run. The service must be 1-63 characters long, and comply with RFC1035. Example value: \"run-service\".
    service :: (Core.Maybe Core.Text),
    -- | Optional Cloud Run tag represents the \"named-revision\" to provide additional fine-grained traffic routing information. The tag must be 1-63 characters long, and comply with RFC1035. Example value: \"revision-0010\".
    tag :: (Core.Maybe Core.Text),
    -- | A template to parse \<service> and \<tag> fields from a request URL. URL mask allows for routing to multiple Run services without having to create multiple network endpoint groups and backend services. For example, request URLs \"foo1.domain.com\/bar1\" and \"foo1.domain.com\/bar2\" can be backed by the same Serverless Network Endpoint Group (NEG) with URL mask \"\<tag>.domain.com\/\<service>\". The URL mask will parse them to { service=\"bar1\", tag=\"foo1\" } and { service=\"bar2\", tag=\"foo2\" } respectively.
    urlMask :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroupCloudRun' with the minimum fields required to make a request.
newNetworkEndpointGroupCloudRun ::
  NetworkEndpointGroupCloudRun
newNetworkEndpointGroupCloudRun =
  NetworkEndpointGroupCloudRun
    { service = Core.Nothing,
      tag = Core.Nothing,
      urlMask = Core.Nothing
    }

instance Core.FromJSON NetworkEndpointGroupCloudRun where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroupCloudRun"
      ( \o ->
          NetworkEndpointGroupCloudRun
            Core.<$> (o Core..:? "service")
            Core.<*> (o Core..:? "tag")
            Core.<*> (o Core..:? "urlMask")
      )

instance Core.ToJSON NetworkEndpointGroupCloudRun where
  toJSON NetworkEndpointGroupCloudRun {..} =
    Core.object
      ( Core.catMaybes
          [ ("service" Core..=) Core.<$> service,
            ("tag" Core..=) Core.<$> tag,
            ("urlMask" Core..=) Core.<$> urlMask
          ]
      )

--
-- /See:/ 'newNetworkEndpointGroupList' smart constructor.
data NetworkEndpointGroupList = NetworkEndpointGroupList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of NetworkEndpointGroup resources.
    items :: (Core.Maybe [NetworkEndpointGroup]),
    -- | [Output Only] The resource type, which is always compute#networkEndpointGroupList for network endpoint group lists.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe NetworkEndpointGroupList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroupList' with the minimum fields required to make a request.
newNetworkEndpointGroupList ::
  NetworkEndpointGroupList
newNetworkEndpointGroupList =
  NetworkEndpointGroupList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#networkEndpointGroupList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON NetworkEndpointGroupList where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroupList"
      ( \o ->
          NetworkEndpointGroupList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#networkEndpointGroupList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON NetworkEndpointGroupList where
  toJSON NetworkEndpointGroupList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newNetworkEndpointGroupList_Warning' smart constructor.
data NetworkEndpointGroupList_Warning = NetworkEndpointGroupList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NetworkEndpointGroupList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [NetworkEndpointGroupList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroupList_Warning' with the minimum fields required to make a request.
newNetworkEndpointGroupList_Warning ::
  NetworkEndpointGroupList_Warning
newNetworkEndpointGroupList_Warning =
  NetworkEndpointGroupList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkEndpointGroupList_Warning
  where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroupList_Warning"
      ( \o ->
          NetworkEndpointGroupList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON NetworkEndpointGroupList_Warning where
  toJSON NetworkEndpointGroupList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newNetworkEndpointGroupList_Warning_DataItem' smart constructor.
data NetworkEndpointGroupList_Warning_DataItem = NetworkEndpointGroupList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroupList_Warning_DataItem' with the minimum fields required to make a request.
newNetworkEndpointGroupList_Warning_DataItem ::
  NetworkEndpointGroupList_Warning_DataItem
newNetworkEndpointGroupList_Warning_DataItem =
  NetworkEndpointGroupList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkEndpointGroupList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroupList_Warning_DataItem"
      ( \o ->
          NetworkEndpointGroupList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    NetworkEndpointGroupList_Warning_DataItem
  where
  toJSON NetworkEndpointGroupList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | All data that is specifically relevant to only network endpoint groups of type PRIVATE/SERVICE/CONNECT.
--
-- /See:/ 'newNetworkEndpointGroupPscData' smart constructor.
data NetworkEndpointGroupPscData = NetworkEndpointGroupPscData
  { -- | [Output Only] Address allocated from given subnetwork for PSC. This IP address acts as a VIP for a PSC NEG, allowing it to act as an endpoint in L7 PSC-XLB.
    consumerPscAddress :: (Core.Maybe Core.Text),
    -- | [Output Only] The PSC connection id of the PSC Network Endpoint Group Consumer.
    pscConnectionId :: (Core.Maybe Core.Word64),
    -- | [Output Only] The connection status of the PSC Forwarding Rule.
    pscConnectionStatus :: (Core.Maybe NetworkEndpointGroupPscData_PscConnectionStatus)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroupPscData' with the minimum fields required to make a request.
newNetworkEndpointGroupPscData ::
  NetworkEndpointGroupPscData
newNetworkEndpointGroupPscData =
  NetworkEndpointGroupPscData
    { consumerPscAddress = Core.Nothing,
      pscConnectionId = Core.Nothing,
      pscConnectionStatus = Core.Nothing
    }

instance Core.FromJSON NetworkEndpointGroupPscData where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroupPscData"
      ( \o ->
          NetworkEndpointGroupPscData
            Core.<$> (o Core..:? "consumerPscAddress")
            Core.<*> ( o Core..:? "pscConnectionId"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "pscConnectionStatus")
      )

instance Core.ToJSON NetworkEndpointGroupPscData where
  toJSON NetworkEndpointGroupPscData {..} =
    Core.object
      ( Core.catMaybes
          [ ("consumerPscAddress" Core..=)
              Core.<$> consumerPscAddress,
            ("pscConnectionId" Core..=) Core.. Core.AsText
              Core.<$> pscConnectionId,
            ("pscConnectionStatus" Core..=)
              Core.<$> pscConnectionStatus
          ]
      )

--
-- /See:/ 'newNetworkEndpointGroupsAttachEndpointsRequest' smart constructor.
newtype NetworkEndpointGroupsAttachEndpointsRequest = NetworkEndpointGroupsAttachEndpointsRequest
  { -- | The list of network endpoints to be attached.
    networkEndpoints :: (Core.Maybe [NetworkEndpoint])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroupsAttachEndpointsRequest' with the minimum fields required to make a request.
newNetworkEndpointGroupsAttachEndpointsRequest ::
  NetworkEndpointGroupsAttachEndpointsRequest
newNetworkEndpointGroupsAttachEndpointsRequest =
  NetworkEndpointGroupsAttachEndpointsRequest {networkEndpoints = Core.Nothing}

instance
  Core.FromJSON
    NetworkEndpointGroupsAttachEndpointsRequest
  where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroupsAttachEndpointsRequest"
      ( \o ->
          NetworkEndpointGroupsAttachEndpointsRequest
            Core.<$> (o Core..:? "networkEndpoints")
      )

instance
  Core.ToJSON
    NetworkEndpointGroupsAttachEndpointsRequest
  where
  toJSON
    NetworkEndpointGroupsAttachEndpointsRequest {..} =
      Core.object
        ( Core.catMaybes
            [ ("networkEndpoints" Core..=)
                Core.<$> networkEndpoints
            ]
        )

--
-- /See:/ 'newNetworkEndpointGroupsDetachEndpointsRequest' smart constructor.
newtype NetworkEndpointGroupsDetachEndpointsRequest = NetworkEndpointGroupsDetachEndpointsRequest
  { -- | The list of network endpoints to be detached.
    networkEndpoints :: (Core.Maybe [NetworkEndpoint])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroupsDetachEndpointsRequest' with the minimum fields required to make a request.
newNetworkEndpointGroupsDetachEndpointsRequest ::
  NetworkEndpointGroupsDetachEndpointsRequest
newNetworkEndpointGroupsDetachEndpointsRequest =
  NetworkEndpointGroupsDetachEndpointsRequest {networkEndpoints = Core.Nothing}

instance
  Core.FromJSON
    NetworkEndpointGroupsDetachEndpointsRequest
  where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroupsDetachEndpointsRequest"
      ( \o ->
          NetworkEndpointGroupsDetachEndpointsRequest
            Core.<$> (o Core..:? "networkEndpoints")
      )

instance
  Core.ToJSON
    NetworkEndpointGroupsDetachEndpointsRequest
  where
  toJSON
    NetworkEndpointGroupsDetachEndpointsRequest {..} =
      Core.object
        ( Core.catMaybes
            [ ("networkEndpoints" Core..=)
                Core.<$> networkEndpoints
            ]
        )

--
-- /See:/ 'newNetworkEndpointGroupsListEndpointsRequest' smart constructor.
newtype NetworkEndpointGroupsListEndpointsRequest = NetworkEndpointGroupsListEndpointsRequest
  { -- | Optional query parameter for showing the health status of each network endpoint. Valid options are SKIP or SHOW. If you don\'t specify this parameter, the health status of network endpoints will not be provided.
    healthStatus :: (Core.Maybe NetworkEndpointGroupsListEndpointsRequest_HealthStatus)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroupsListEndpointsRequest' with the minimum fields required to make a request.
newNetworkEndpointGroupsListEndpointsRequest ::
  NetworkEndpointGroupsListEndpointsRequest
newNetworkEndpointGroupsListEndpointsRequest =
  NetworkEndpointGroupsListEndpointsRequest {healthStatus = Core.Nothing}

instance
  Core.FromJSON
    NetworkEndpointGroupsListEndpointsRequest
  where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroupsListEndpointsRequest"
      ( \o ->
          NetworkEndpointGroupsListEndpointsRequest
            Core.<$> (o Core..:? "healthStatus")
      )

instance
  Core.ToJSON
    NetworkEndpointGroupsListEndpointsRequest
  where
  toJSON NetworkEndpointGroupsListEndpointsRequest {..} =
    Core.object
      ( Core.catMaybes
          [("healthStatus" Core..=) Core.<$> healthStatus]
      )

--
-- /See:/ 'newNetworkEndpointGroupsListNetworkEndpoints' smart constructor.
data NetworkEndpointGroupsListNetworkEndpoints = NetworkEndpointGroupsListNetworkEndpoints
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of NetworkEndpointWithHealthStatus resources.
    items :: (Core.Maybe [NetworkEndpointWithHealthStatus]),
    -- | [Output Only] The resource type, which is always compute#networkEndpointGroupsListNetworkEndpoints for the list of network endpoints in the specified network endpoint group.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe NetworkEndpointGroupsListNetworkEndpoints_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroupsListNetworkEndpoints' with the minimum fields required to make a request.
newNetworkEndpointGroupsListNetworkEndpoints ::
  NetworkEndpointGroupsListNetworkEndpoints
newNetworkEndpointGroupsListNetworkEndpoints =
  NetworkEndpointGroupsListNetworkEndpoints
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#networkEndpointGroupsListNetworkEndpoints",
      nextPageToken = Core.Nothing,
      warning = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkEndpointGroupsListNetworkEndpoints
  where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroupsListNetworkEndpoints"
      ( \o ->
          NetworkEndpointGroupsListNetworkEndpoints
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#networkEndpointGroupsListNetworkEndpoints"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "warning")
      )

instance
  Core.ToJSON
    NetworkEndpointGroupsListNetworkEndpoints
  where
  toJSON NetworkEndpointGroupsListNetworkEndpoints {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newNetworkEndpointGroupsListNetworkEndpoints_Warning' smart constructor.
data NetworkEndpointGroupsListNetworkEndpoints_Warning = NetworkEndpointGroupsListNetworkEndpoints_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NetworkEndpointGroupsListNetworkEndpoints_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' ::
      ( Core.Maybe
          [NetworkEndpointGroupsListNetworkEndpoints_Warning_DataItem]
      ),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroupsListNetworkEndpoints_Warning' with the minimum fields required to make a request.
newNetworkEndpointGroupsListNetworkEndpoints_Warning ::
  NetworkEndpointGroupsListNetworkEndpoints_Warning
newNetworkEndpointGroupsListNetworkEndpoints_Warning =
  NetworkEndpointGroupsListNetworkEndpoints_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkEndpointGroupsListNetworkEndpoints_Warning
  where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroupsListNetworkEndpoints_Warning"
      ( \o ->
          NetworkEndpointGroupsListNetworkEndpoints_Warning
            Core.<$> (o Core..:? "code") Core.<*> (o Core..:? "data")
              Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    NetworkEndpointGroupsListNetworkEndpoints_Warning
  where
  toJSON
    NetworkEndpointGroupsListNetworkEndpoints_Warning {..} =
      Core.object
        ( Core.catMaybes
            [ ("code" Core..=) Core.<$> code,
              ("data" Core..=) Core.<$> data',
              ("message" Core..=) Core.<$> message
            ]
        )

--
-- /See:/ 'newNetworkEndpointGroupsListNetworkEndpoints_Warning_DataItem' smart constructor.
data NetworkEndpointGroupsListNetworkEndpoints_Warning_DataItem = NetworkEndpointGroupsListNetworkEndpoints_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroupsListNetworkEndpoints_Warning_DataItem' with the minimum fields required to make a request.
newNetworkEndpointGroupsListNetworkEndpoints_Warning_DataItem ::
  NetworkEndpointGroupsListNetworkEndpoints_Warning_DataItem
newNetworkEndpointGroupsListNetworkEndpoints_Warning_DataItem =
  NetworkEndpointGroupsListNetworkEndpoints_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkEndpointGroupsListNetworkEndpoints_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroupsListNetworkEndpoints_Warning_DataItem"
      ( \o ->
          NetworkEndpointGroupsListNetworkEndpoints_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    NetworkEndpointGroupsListNetworkEndpoints_Warning_DataItem
  where
  toJSON
    NetworkEndpointGroupsListNetworkEndpoints_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

--
-- /See:/ 'newNetworkEndpointGroupsScopedList' smart constructor.
data NetworkEndpointGroupsScopedList = NetworkEndpointGroupsScopedList
  { -- | [Output Only] The list of network endpoint groups that are contained in this scope.
    networkEndpointGroups :: (Core.Maybe [NetworkEndpointGroup]),
    -- | [Output Only] An informational warning that replaces the list of network endpoint groups when the list is empty.
    warning :: (Core.Maybe NetworkEndpointGroupsScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroupsScopedList' with the minimum fields required to make a request.
newNetworkEndpointGroupsScopedList ::
  NetworkEndpointGroupsScopedList
newNetworkEndpointGroupsScopedList =
  NetworkEndpointGroupsScopedList
    { networkEndpointGroups = Core.Nothing,
      warning = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkEndpointGroupsScopedList
  where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroupsScopedList"
      ( \o ->
          NetworkEndpointGroupsScopedList
            Core.<$> (o Core..:? "networkEndpointGroups")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON NetworkEndpointGroupsScopedList where
  toJSON NetworkEndpointGroupsScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("networkEndpointGroups" Core..=)
              Core.<$> networkEndpointGroups,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] An informational warning that replaces the list of network endpoint groups when the list is empty.
--
-- /See:/ 'newNetworkEndpointGroupsScopedList_Warning' smart constructor.
data NetworkEndpointGroupsScopedList_Warning = NetworkEndpointGroupsScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NetworkEndpointGroupsScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [NetworkEndpointGroupsScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroupsScopedList_Warning' with the minimum fields required to make a request.
newNetworkEndpointGroupsScopedList_Warning ::
  NetworkEndpointGroupsScopedList_Warning
newNetworkEndpointGroupsScopedList_Warning =
  NetworkEndpointGroupsScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkEndpointGroupsScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroupsScopedList_Warning"
      ( \o ->
          NetworkEndpointGroupsScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    NetworkEndpointGroupsScopedList_Warning
  where
  toJSON NetworkEndpointGroupsScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newNetworkEndpointGroupsScopedList_Warning_DataItem' smart constructor.
data NetworkEndpointGroupsScopedList_Warning_DataItem = NetworkEndpointGroupsScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointGroupsScopedList_Warning_DataItem' with the minimum fields required to make a request.
newNetworkEndpointGroupsScopedList_Warning_DataItem ::
  NetworkEndpointGroupsScopedList_Warning_DataItem
newNetworkEndpointGroupsScopedList_Warning_DataItem =
  NetworkEndpointGroupsScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkEndpointGroupsScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "NetworkEndpointGroupsScopedList_Warning_DataItem"
      ( \o ->
          NetworkEndpointGroupsScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    NetworkEndpointGroupsScopedList_Warning_DataItem
  where
  toJSON
    NetworkEndpointGroupsScopedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

--
-- /See:/ 'newNetworkEndpointWithHealthStatus' smart constructor.
data NetworkEndpointWithHealthStatus = NetworkEndpointWithHealthStatus
  { -- | [Output only] The health status of network endpoint;
    healths :: (Core.Maybe [HealthStatusForNetworkEndpoint]),
    -- | [Output only] The network endpoint;
    networkEndpoint :: (Core.Maybe NetworkEndpoint)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkEndpointWithHealthStatus' with the minimum fields required to make a request.
newNetworkEndpointWithHealthStatus ::
  NetworkEndpointWithHealthStatus
newNetworkEndpointWithHealthStatus =
  NetworkEndpointWithHealthStatus
    { healths = Core.Nothing,
      networkEndpoint = Core.Nothing
    }

instance
  Core.FromJSON
    NetworkEndpointWithHealthStatus
  where
  parseJSON =
    Core.withObject
      "NetworkEndpointWithHealthStatus"
      ( \o ->
          NetworkEndpointWithHealthStatus
            Core.<$> (o Core..:? "healths")
            Core.<*> (o Core..:? "networkEndpoint")
      )

instance Core.ToJSON NetworkEndpointWithHealthStatus where
  toJSON NetworkEndpointWithHealthStatus {..} =
    Core.object
      ( Core.catMaybes
          [ ("healths" Core..=) Core.<$> healths,
            ("networkEndpoint" Core..=)
              Core.<$> networkEndpoint
          ]
      )

-- | A network interface resource attached to an instance.
--
-- /See:/ 'newNetworkInterface' smart constructor.
data NetworkInterface = NetworkInterface
  { -- | An array of configurations for this interface. Currently, only one access config, ONE/TO/ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have no external internet access.
    accessConfigs :: (Core.Maybe [AccessConfig]),
    -- | An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks.
    aliasIpRanges :: (Core.Maybe [AliasIpRange]),
    -- | Fingerprint hash of contents stored in this network interface. This field will be ignored when inserting an Instance or adding a NetworkInterface. An up-to-date fingerprint must be provided in order to update the NetworkInterface. The request will fail with error 400 Bad Request if the fingerprint is not provided, or 412 Precondition Failed if the fingerprint is out of date.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | The prefix length of the primary internal IPv6 range.
    internalIpv6PrefixLength :: (Core.Maybe Core.Int32),
    -- | An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
    ipv6AccessConfigs :: (Core.Maybe [AccessConfig]),
    -- | [Output Only] One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork. Valid only if stackType is IPV4_IPV6.
    ipv6AccessType :: (Core.Maybe NetworkInterface_Ipv6AccessType),
    -- | An IPv6 internal network address for this network interface. To use a static internal IP address, it must be unused and in the same region as the instance\'s zone. If not specified, Google Cloud will automatically assign an internal IPv6 address from the instance\'s subnetwork.
    ipv6Address :: (Core.Maybe Core.Text),
    -- | [Output Only] Type of the resource. Always compute#networkInterface for network interfaces.
    kind :: Core.Text,
    -- | [Output Only] The name of the network interface, which is generated by the server. For a VM, the network interface uses the nicN naming format. Where N is a value between 0 and 7. The default interface value is nic0.
    name :: (Core.Maybe Core.Text),
    -- | URL of the VPC network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global\/networks\/default is used. If the selected project doesn\'t have the default network, you must specify a network or subnet. If the network is not specified but the subnetwork is specified, the network is inferred. If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project\/global\/networks\/ network - projects\/project\/global\/networks\/network - global\/networks\/default
    network :: (Core.Maybe Core.Text),
    -- | The URL of the network attachment that this interface should connect to in the following format: projects\/{project/number}\/regions\/{region/name}\/networkAttachments\/{network/attachment/name}.
    networkAttachment :: (Core.Maybe Core.Text),
    -- | An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system.
    networkIP :: (Core.Maybe Core.Text),
    -- | The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
    nicType :: (Core.Maybe NetworkInterface_NicType),
    -- | The networking queue count that\'s specified by users for the network interface. Both Rx and Tx queues will be set to this number. It\'ll be empty if not specified by the users.
    queueCount :: (Core.Maybe Core.Int32),
    -- | The stack type for this network interface. To assign only IPv4 addresses, use IPV4/ONLY. To assign both IPv4 and IPv6 addresses, use IPV4/IPV6. If not specified, IPV4_ONLY is used. This field can be both set at instance creation and update network interface operations.
    stackType :: (Core.Maybe NetworkInterface_StackType),
    -- | The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project\/regions\/region \/subnetworks\/subnetwork - regions\/region\/subnetworks\/subnetwork
    subnetwork :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkInterface' with the minimum fields required to make a request.
newNetworkInterface ::
  NetworkInterface
newNetworkInterface =
  NetworkInterface
    { accessConfigs = Core.Nothing,
      aliasIpRanges = Core.Nothing,
      fingerprint = Core.Nothing,
      internalIpv6PrefixLength = Core.Nothing,
      ipv6AccessConfigs = Core.Nothing,
      ipv6AccessType = Core.Nothing,
      ipv6Address = Core.Nothing,
      kind = "compute#networkInterface",
      name = Core.Nothing,
      network = Core.Nothing,
      networkAttachment = Core.Nothing,
      networkIP = Core.Nothing,
      nicType = Core.Nothing,
      queueCount = Core.Nothing,
      stackType = Core.Nothing,
      subnetwork = Core.Nothing
    }

instance Core.FromJSON NetworkInterface where
  parseJSON =
    Core.withObject
      "NetworkInterface"
      ( \o ->
          NetworkInterface
            Core.<$> (o Core..:? "accessConfigs")
            Core.<*> (o Core..:? "aliasIpRanges")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "internalIpv6PrefixLength")
            Core.<*> (o Core..:? "ipv6AccessConfigs")
            Core.<*> (o Core..:? "ipv6AccessType")
            Core.<*> (o Core..:? "ipv6Address")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#networkInterface"
                     )
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "network")
            Core.<*> (o Core..:? "networkAttachment")
            Core.<*> (o Core..:? "networkIP")
            Core.<*> (o Core..:? "nicType")
            Core.<*> (o Core..:? "queueCount")
            Core.<*> (o Core..:? "stackType")
            Core.<*> (o Core..:? "subnetwork")
      )

instance Core.ToJSON NetworkInterface where
  toJSON NetworkInterface {..} =
    Core.object
      ( Core.catMaybes
          [ ("accessConfigs" Core..=) Core.<$> accessConfigs,
            ("aliasIpRanges" Core..=) Core.<$> aliasIpRanges,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("internalIpv6PrefixLength" Core..=)
              Core.<$> internalIpv6PrefixLength,
            ("ipv6AccessConfigs" Core..=)
              Core.<$> ipv6AccessConfigs,
            ("ipv6AccessType" Core..=) Core.<$> ipv6AccessType,
            ("ipv6Address" Core..=) Core.<$> ipv6Address,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("network" Core..=) Core.<$> network,
            ("networkAttachment" Core..=)
              Core.<$> networkAttachment,
            ("networkIP" Core..=) Core.<$> networkIP,
            ("nicType" Core..=) Core.<$> nicType,
            ("queueCount" Core..=) Core.<$> queueCount,
            ("stackType" Core..=) Core.<$> stackType,
            ("subnetwork" Core..=) Core.<$> subnetwork
          ]
      )

-- | Contains a list of networks.
--
-- /See:/ 'newNetworkList' smart constructor.
data NetworkList = NetworkList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of Network resources.
    items :: (Core.Maybe [Network]),
    -- | [Output Only] Type of resource. Always compute#networkList for lists of networks.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe NetworkList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkList' with the minimum fields required to make a request.
newNetworkList ::
  NetworkList
newNetworkList =
  NetworkList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#networkList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON NetworkList where
  parseJSON =
    Core.withObject
      "NetworkList"
      ( \o ->
          NetworkList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#networkList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON NetworkList where
  toJSON NetworkList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newNetworkList_Warning' smart constructor.
data NetworkList_Warning = NetworkList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NetworkList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [NetworkList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkList_Warning' with the minimum fields required to make a request.
newNetworkList_Warning ::
  NetworkList_Warning
newNetworkList_Warning =
  NetworkList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON NetworkList_Warning where
  parseJSON =
    Core.withObject
      "NetworkList_Warning"
      ( \o ->
          NetworkList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON NetworkList_Warning where
  toJSON NetworkList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newNetworkList_Warning_DataItem' smart constructor.
data NetworkList_Warning_DataItem = NetworkList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkList_Warning_DataItem' with the minimum fields required to make a request.
newNetworkList_Warning_DataItem ::
  NetworkList_Warning_DataItem
newNetworkList_Warning_DataItem =
  NetworkList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON NetworkList_Warning_DataItem where
  parseJSON =
    Core.withObject
      "NetworkList_Warning_DataItem"
      ( \o ->
          NetworkList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON NetworkList_Warning_DataItem where
  toJSON NetworkList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | A network peering attached to a network resource. The message includes the peering name, peer network, peering state, and a flag indicating whether Google Compute Engine should automatically create routes for the peering.
--
-- /See:/ 'newNetworkPeering' smart constructor.
data NetworkPeering = NetworkPeering
  { -- | This field will be deprecated soon. Use the exchange/subnet/routes field instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
    autoCreateRoutes :: (Core.Maybe Core.Bool),
    -- | Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
    exchangeSubnetRoutes :: (Core.Maybe Core.Bool),
    -- | Whether to export the custom routes to peer network. The default value is false.
    exportCustomRoutes :: (Core.Maybe Core.Bool),
    -- | Whether subnet routes with public IP range are exported. The default value is true, all subnet routes are exported. IPv4 special-use ranges are always exported to peers and are not controlled by this field.
    exportSubnetRoutesWithPublicIp :: (Core.Maybe Core.Bool),
    -- | Whether to import the custom routes from peer network. The default value is false.
    importCustomRoutes :: (Core.Maybe Core.Bool),
    -- | Whether subnet routes with public IP range are imported. The default value is false. IPv4 special-use ranges are always imported from peers and are not controlled by this field.
    importSubnetRoutesWithPublicIp :: (Core.Maybe Core.Bool),
    -- | Name of this peering. Provided by the client when the peering is created. The name must comply with RFC1035. Specifically, the name must be 1-63 characters long and match regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@. The first character must be a lowercase letter, and all the following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | The URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network.
    network :: (Core.Maybe Core.Text),
    -- | Maximum Transmission Unit in bytes.
    peerMtu :: (Core.Maybe Core.Int32),
    -- | Which IP version(s) of traffic and routes are allowed to be imported or exported between peer networks. The default value is IPV4_ONLY.
    stackType :: (Core.Maybe NetworkPeering_StackType),
    -- | [Output Only] State for the peering, either @ACTIVE@ or @INACTIVE@. The peering is @ACTIVE@ when there\'s a matching configuration in the peer network.
    state :: (Core.Maybe NetworkPeering_State),
    -- | [Output Only] Details about the current state of the peering.
    stateDetails :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkPeering' with the minimum fields required to make a request.
newNetworkPeering ::
  NetworkPeering
newNetworkPeering =
  NetworkPeering
    { autoCreateRoutes = Core.Nothing,
      exchangeSubnetRoutes = Core.Nothing,
      exportCustomRoutes = Core.Nothing,
      exportSubnetRoutesWithPublicIp = Core.Nothing,
      importCustomRoutes = Core.Nothing,
      importSubnetRoutesWithPublicIp = Core.Nothing,
      name = Core.Nothing,
      network = Core.Nothing,
      peerMtu = Core.Nothing,
      stackType = Core.Nothing,
      state = Core.Nothing,
      stateDetails = Core.Nothing
    }

instance Core.FromJSON NetworkPeering where
  parseJSON =
    Core.withObject
      "NetworkPeering"
      ( \o ->
          NetworkPeering
            Core.<$> (o Core..:? "autoCreateRoutes")
            Core.<*> (o Core..:? "exchangeSubnetRoutes")
            Core.<*> (o Core..:? "exportCustomRoutes")
            Core.<*> (o Core..:? "exportSubnetRoutesWithPublicIp")
            Core.<*> (o Core..:? "importCustomRoutes")
            Core.<*> (o Core..:? "importSubnetRoutesWithPublicIp")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "network")
            Core.<*> (o Core..:? "peerMtu")
            Core.<*> (o Core..:? "stackType")
            Core.<*> (o Core..:? "state")
            Core.<*> (o Core..:? "stateDetails")
      )

instance Core.ToJSON NetworkPeering where
  toJSON NetworkPeering {..} =
    Core.object
      ( Core.catMaybes
          [ ("autoCreateRoutes" Core..=)
              Core.<$> autoCreateRoutes,
            ("exchangeSubnetRoutes" Core..=)
              Core.<$> exchangeSubnetRoutes,
            ("exportCustomRoutes" Core..=)
              Core.<$> exportCustomRoutes,
            ("exportSubnetRoutesWithPublicIp" Core..=)
              Core.<$> exportSubnetRoutesWithPublicIp,
            ("importCustomRoutes" Core..=)
              Core.<$> importCustomRoutes,
            ("importSubnetRoutesWithPublicIp" Core..=)
              Core.<$> importSubnetRoutesWithPublicIp,
            ("name" Core..=) Core.<$> name,
            ("network" Core..=) Core.<$> network,
            ("peerMtu" Core..=) Core.<$> peerMtu,
            ("stackType" Core..=) Core.<$> stackType,
            ("state" Core..=) Core.<$> state,
            ("stateDetails" Core..=) Core.<$> stateDetails
          ]
      )

--
-- /See:/ 'newNetworkPerformanceConfig' smart constructor.
newtype NetworkPerformanceConfig = NetworkPerformanceConfig
  { -- |
    totalEgressBandwidthTier :: (Core.Maybe NetworkPerformanceConfig_TotalEgressBandwidthTier)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkPerformanceConfig' with the minimum fields required to make a request.
newNetworkPerformanceConfig ::
  NetworkPerformanceConfig
newNetworkPerformanceConfig =
  NetworkPerformanceConfig {totalEgressBandwidthTier = Core.Nothing}

instance Core.FromJSON NetworkPerformanceConfig where
  parseJSON =
    Core.withObject
      "NetworkPerformanceConfig"
      ( \o ->
          NetworkPerformanceConfig
            Core.<$> (o Core..:? "totalEgressBandwidthTier")
      )

instance Core.ToJSON NetworkPerformanceConfig where
  toJSON NetworkPerformanceConfig {..} =
    Core.object
      ( Core.catMaybes
          [ ("totalEgressBandwidthTier" Core..=)
              Core.<$> totalEgressBandwidthTier
          ]
      )

-- | A routing configuration attached to a network resource. The message includes the list of routers associated with the network, and a flag indicating the type of routing behavior to enforce network-wide.
--
-- /See:/ 'newNetworkRoutingConfig' smart constructor.
newtype NetworkRoutingConfig = NetworkRoutingConfig
  { -- | The network-wide routing mode to use. If set to REGIONAL, this network\'s Cloud Routers will only advertise routes with subnets of this network in the same region as the router. If set to GLOBAL, this network\'s Cloud Routers will advertise routes with all subnets of this network, across regions.
    routingMode :: (Core.Maybe NetworkRoutingConfig_RoutingMode)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworkRoutingConfig' with the minimum fields required to make a request.
newNetworkRoutingConfig ::
  NetworkRoutingConfig
newNetworkRoutingConfig = NetworkRoutingConfig {routingMode = Core.Nothing}

instance Core.FromJSON NetworkRoutingConfig where
  parseJSON =
    Core.withObject
      "NetworkRoutingConfig"
      ( \o ->
          NetworkRoutingConfig
            Core.<$> (o Core..:? "routingMode")
      )

instance Core.ToJSON NetworkRoutingConfig where
  toJSON NetworkRoutingConfig {..} =
    Core.object
      ( Core.catMaybes
          [("routingMode" Core..=) Core.<$> routingMode]
      )

--
-- /See:/ 'newNetworksAddPeeringRequest' smart constructor.
data NetworksAddPeeringRequest = NetworksAddPeeringRequest
  { -- | This field will be deprecated soon. Use exchange/subnet/routes in network_peering instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
    autoCreateRoutes :: (Core.Maybe Core.Bool),
    -- | Name of the peering, which should conform to RFC1035.
    name :: (Core.Maybe Core.Text),
    -- | Network peering parameters. In order to specify route policies for peering using import and export custom routes, you must specify all peering related parameters (name, peer network, exchange/subnet/routes) in the network_peering field. The corresponding fields in NetworksAddPeeringRequest will be deprecated soon.
    networkPeering :: (Core.Maybe NetworkPeering),
    -- | URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network.
    peerNetwork :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworksAddPeeringRequest' with the minimum fields required to make a request.
newNetworksAddPeeringRequest ::
  NetworksAddPeeringRequest
newNetworksAddPeeringRequest =
  NetworksAddPeeringRequest
    { autoCreateRoutes = Core.Nothing,
      name = Core.Nothing,
      networkPeering = Core.Nothing,
      peerNetwork = Core.Nothing
    }

instance Core.FromJSON NetworksAddPeeringRequest where
  parseJSON =
    Core.withObject
      "NetworksAddPeeringRequest"
      ( \o ->
          NetworksAddPeeringRequest
            Core.<$> (o Core..:? "autoCreateRoutes")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "networkPeering")
            Core.<*> (o Core..:? "peerNetwork")
      )

instance Core.ToJSON NetworksAddPeeringRequest where
  toJSON NetworksAddPeeringRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("autoCreateRoutes" Core..=)
              Core.<$> autoCreateRoutes,
            ("name" Core..=) Core.<$> name,
            ("networkPeering" Core..=) Core.<$> networkPeering,
            ("peerNetwork" Core..=) Core.<$> peerNetwork
          ]
      )

--
-- /See:/ 'newNetworksGetEffectiveFirewallsResponse' smart constructor.
data NetworksGetEffectiveFirewallsResponse = NetworksGetEffectiveFirewallsResponse
  { -- | Effective firewalls from firewall policy.
    firewallPolicys ::
      ( Core.Maybe
          [NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy]
      ),
    -- | Effective firewalls on the network.
    firewalls :: (Core.Maybe [Firewall])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworksGetEffectiveFirewallsResponse' with the minimum fields required to make a request.
newNetworksGetEffectiveFirewallsResponse ::
  NetworksGetEffectiveFirewallsResponse
newNetworksGetEffectiveFirewallsResponse =
  NetworksGetEffectiveFirewallsResponse
    { firewallPolicys = Core.Nothing,
      firewalls = Core.Nothing
    }

instance
  Core.FromJSON
    NetworksGetEffectiveFirewallsResponse
  where
  parseJSON =
    Core.withObject
      "NetworksGetEffectiveFirewallsResponse"
      ( \o ->
          NetworksGetEffectiveFirewallsResponse
            Core.<$> (o Core..:? "firewallPolicys")
            Core.<*> (o Core..:? "firewalls")
      )

instance
  Core.ToJSON
    NetworksGetEffectiveFirewallsResponse
  where
  toJSON NetworksGetEffectiveFirewallsResponse {..} =
    Core.object
      ( Core.catMaybes
          [ ("firewallPolicys" Core..=)
              Core.<$> firewallPolicys,
            ("firewalls" Core..=) Core.<$> firewalls
          ]
      )

--
-- /See:/ 'newNetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy' smart constructor.
data NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy = NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy
  { -- | [Output Only] Deprecated, please use short name instead. The display name of the firewall policy.
    displayName :: (Core.Maybe Core.Text),
    -- | [Output Only] The name of the firewall policy.
    name :: (Core.Maybe Core.Text),
    -- | The rules that apply to the network.
    rules :: (Core.Maybe [FirewallPolicyRule]),
    -- | [Output Only] The short name of the firewall policy.
    shortName :: (Core.Maybe Core.Text),
    -- | [Output Only] The type of the firewall policy.
    type' ::
      ( Core.Maybe
          NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy_Type
      )
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy' with the minimum fields required to make a request.
newNetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy ::
  NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy
newNetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy =
  NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy
    { displayName = Core.Nothing,
      name = Core.Nothing,
      rules = Core.Nothing,
      shortName = Core.Nothing,
      type' = Core.Nothing
    }

instance
  Core.FromJSON
    NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy
  where
  parseJSON =
    Core.withObject
      "NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy"
      ( \o ->
          NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy
            Core.<$> (o Core..:? "displayName")
              Core.<*> (o Core..:? "name")
              Core.<*> (o Core..:? "rules")
              Core.<*> (o Core..:? "shortName")
              Core.<*> (o Core..:? "type")
      )

instance
  Core.ToJSON
    NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy
  where
  toJSON
    NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy {..} =
      Core.object
        ( Core.catMaybes
            [ ("displayName" Core..=) Core.<$> displayName,
              ("name" Core..=) Core.<$> name,
              ("rules" Core..=) Core.<$> rules,
              ("shortName" Core..=) Core.<$> shortName,
              ("type" Core..=) Core.<$> type'
            ]
        )

--
-- /See:/ 'newNetworksRemovePeeringRequest' smart constructor.
newtype NetworksRemovePeeringRequest = NetworksRemovePeeringRequest
  { -- | Name of the peering, which should conform to RFC1035.
    name :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworksRemovePeeringRequest' with the minimum fields required to make a request.
newNetworksRemovePeeringRequest ::
  NetworksRemovePeeringRequest
newNetworksRemovePeeringRequest =
  NetworksRemovePeeringRequest {name = Core.Nothing}

instance Core.FromJSON NetworksRemovePeeringRequest where
  parseJSON =
    Core.withObject
      "NetworksRemovePeeringRequest"
      ( \o ->
          NetworksRemovePeeringRequest
            Core.<$> (o Core..:? "name")
      )

instance Core.ToJSON NetworksRemovePeeringRequest where
  toJSON NetworksRemovePeeringRequest {..} =
    Core.object
      (Core.catMaybes [("name" Core..=) Core.<$> name])

--
-- /See:/ 'newNetworksUpdatePeeringRequest' smart constructor.
newtype NetworksUpdatePeeringRequest = NetworksUpdatePeeringRequest
  { -- |
    networkPeering :: (Core.Maybe NetworkPeering)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NetworksUpdatePeeringRequest' with the minimum fields required to make a request.
newNetworksUpdatePeeringRequest ::
  NetworksUpdatePeeringRequest
newNetworksUpdatePeeringRequest =
  NetworksUpdatePeeringRequest {networkPeering = Core.Nothing}

instance Core.FromJSON NetworksUpdatePeeringRequest where
  parseJSON =
    Core.withObject
      "NetworksUpdatePeeringRequest"
      ( \o ->
          NetworksUpdatePeeringRequest
            Core.<$> (o Core..:? "networkPeering")
      )

instance Core.ToJSON NetworksUpdatePeeringRequest where
  toJSON NetworksUpdatePeeringRequest {..} =
    Core.object
      ( Core.catMaybes
          [("networkPeering" Core..=) Core.<$> networkPeering]
      )

-- | Represents a sole-tenant Node Group resource. A sole-tenant node is a physical server that is dedicated to hosting VM instances only for your specific project. Use sole-tenant nodes to keep your instances physically separated from instances in other projects, or to group your instances together on the same host hardware. For more information, read Sole-tenant nodes.
--
-- /See:/ 'newNodeGroup' smart constructor.
data NodeGroup = NodeGroup
  { -- | Specifies how autoscaling should behave.
    autoscalingPolicy :: (Core.Maybe NodeGroupAutoscalingPolicy),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- |
    fingerprint :: (Core.Maybe Core.Base64),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] The type of the resource. Always compute#nodeGroup for node group.
    kind :: Core.Text,
    -- | An opaque location hint used to place the Node close to other resources. This field is for use by internal tools that use the public API. The location hint here on the NodeGroup overrides any location_hint present in the NodeTemplate.
    locationHint :: (Core.Maybe Core.Text),
    -- | Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART/IN/PLACE, or MIGRATE/WITHIN/NODE_GROUP. The default value is DEFAULT. For more information, see Maintenance policies.
    maintenancePolicy :: (Core.Maybe NodeGroup_MaintenancePolicy),
    -- |
    maintenanceWindow :: (Core.Maybe NodeGroupMaintenanceWindow),
    -- | The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | URL of the node template to create the node group from.
    nodeTemplate :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | Share-settings for the node group
    shareSettings :: (Core.Maybe ShareSettings),
    -- | [Output Only] The total number of nodes in the node group.
    size :: (Core.Maybe Core.Int32),
    -- |
    status :: (Core.Maybe NodeGroup_Status),
    -- | [Output Only] The name of the zone where the node group resides, such as us-central1-a.
    zone :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroup' with the minimum fields required to make a request.
newNodeGroup ::
  NodeGroup
newNodeGroup =
  NodeGroup
    { autoscalingPolicy = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      fingerprint = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#nodeGroup",
      locationHint = Core.Nothing,
      maintenancePolicy = Core.Nothing,
      maintenanceWindow = Core.Nothing,
      name = Core.Nothing,
      nodeTemplate = Core.Nothing,
      selfLink = Core.Nothing,
      shareSettings = Core.Nothing,
      size = Core.Nothing,
      status = Core.Nothing,
      zone = Core.Nothing
    }

instance Core.FromJSON NodeGroup where
  parseJSON =
    Core.withObject
      "NodeGroup"
      ( \o ->
          NodeGroup
            Core.<$> (o Core..:? "autoscalingPolicy")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#nodeGroup")
            Core.<*> (o Core..:? "locationHint")
            Core.<*> (o Core..:? "maintenancePolicy")
            Core.<*> (o Core..:? "maintenanceWindow")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "nodeTemplate")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "shareSettings")
            Core.<*> (o Core..:? "size")
            Core.<*> (o Core..:? "status")
            Core.<*> (o Core..:? "zone")
      )

instance Core.ToJSON NodeGroup where
  toJSON NodeGroup {..} =
    Core.object
      ( Core.catMaybes
          [ ("autoscalingPolicy" Core..=)
              Core.<$> autoscalingPolicy,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("locationHint" Core..=) Core.<$> locationHint,
            ("maintenancePolicy" Core..=)
              Core.<$> maintenancePolicy,
            ("maintenanceWindow" Core..=)
              Core.<$> maintenanceWindow,
            ("name" Core..=) Core.<$> name,
            ("nodeTemplate" Core..=) Core.<$> nodeTemplate,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("shareSettings" Core..=) Core.<$> shareSettings,
            ("size" Core..=) Core.<$> size,
            ("status" Core..=) Core.<$> status,
            ("zone" Core..=) Core.<$> zone
          ]
      )

--
-- /See:/ 'newNodeGroupAggregatedList' smart constructor.
data NodeGroupAggregatedList = NodeGroupAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of NodeGroupsScopedList resources.
    items :: (Core.Maybe NodeGroupAggregatedList_Items),
    -- | [Output Only] Type of resource.Always compute#nodeGroupAggregatedList for aggregated lists of node groups.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe NodeGroupAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroupAggregatedList' with the minimum fields required to make a request.
newNodeGroupAggregatedList ::
  NodeGroupAggregatedList
newNodeGroupAggregatedList =
  NodeGroupAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#nodeGroupAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON NodeGroupAggregatedList where
  parseJSON =
    Core.withObject
      "NodeGroupAggregatedList"
      ( \o ->
          NodeGroupAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#nodeGroupAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON NodeGroupAggregatedList where
  toJSON NodeGroupAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of NodeGroupsScopedList resources.
--
-- /See:/ 'newNodeGroupAggregatedList_Items' smart constructor.
newtype NodeGroupAggregatedList_Items = NodeGroupAggregatedList_Items
  { -- | [Output Only] Name of the scope containing this set of node groups.
    additional :: (Core.HashMap Core.Text NodeGroupsScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroupAggregatedList_Items' with the minimum fields required to make a request.
newNodeGroupAggregatedList_Items ::
  -- |  [Output Only] Name of the scope containing this set of node groups. See 'additional'.
  Core.HashMap Core.Text NodeGroupsScopedList ->
  NodeGroupAggregatedList_Items
newNodeGroupAggregatedList_Items additional =
  NodeGroupAggregatedList_Items {additional = additional}

instance Core.FromJSON NodeGroupAggregatedList_Items where
  parseJSON =
    Core.withObject
      "NodeGroupAggregatedList_Items"
      ( \o ->
          NodeGroupAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON NodeGroupAggregatedList_Items where
  toJSON NodeGroupAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newNodeGroupAggregatedList_Warning' smart constructor.
data NodeGroupAggregatedList_Warning = NodeGroupAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NodeGroupAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [NodeGroupAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroupAggregatedList_Warning' with the minimum fields required to make a request.
newNodeGroupAggregatedList_Warning ::
  NodeGroupAggregatedList_Warning
newNodeGroupAggregatedList_Warning =
  NodeGroupAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    NodeGroupAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "NodeGroupAggregatedList_Warning"
      ( \o ->
          NodeGroupAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON NodeGroupAggregatedList_Warning where
  toJSON NodeGroupAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newNodeGroupAggregatedList_Warning_DataItem' smart constructor.
data NodeGroupAggregatedList_Warning_DataItem = NodeGroupAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroupAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newNodeGroupAggregatedList_Warning_DataItem ::
  NodeGroupAggregatedList_Warning_DataItem
newNodeGroupAggregatedList_Warning_DataItem =
  NodeGroupAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    NodeGroupAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "NodeGroupAggregatedList_Warning_DataItem"
      ( \o ->
          NodeGroupAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    NodeGroupAggregatedList_Warning_DataItem
  where
  toJSON NodeGroupAggregatedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newNodeGroupAutoscalingPolicy' smart constructor.
data NodeGroupAutoscalingPolicy = NodeGroupAutoscalingPolicy
  { -- | The maximum number of nodes that the group should have. Must be set if autoscaling is enabled. Maximum value allowed is 100.
    maxNodes :: (Core.Maybe Core.Int32),
    -- | The minimum number of nodes that the group should have.
    minNodes :: (Core.Maybe Core.Int32),
    -- | The autoscaling mode. Set to one of: ON, OFF, or ONLY/SCALE/OUT. For more information, see Autoscaler modes.
    mode :: (Core.Maybe NodeGroupAutoscalingPolicy_Mode)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroupAutoscalingPolicy' with the minimum fields required to make a request.
newNodeGroupAutoscalingPolicy ::
  NodeGroupAutoscalingPolicy
newNodeGroupAutoscalingPolicy =
  NodeGroupAutoscalingPolicy
    { maxNodes = Core.Nothing,
      minNodes = Core.Nothing,
      mode = Core.Nothing
    }

instance Core.FromJSON NodeGroupAutoscalingPolicy where
  parseJSON =
    Core.withObject
      "NodeGroupAutoscalingPolicy"
      ( \o ->
          NodeGroupAutoscalingPolicy
            Core.<$> (o Core..:? "maxNodes")
            Core.<*> (o Core..:? "minNodes")
            Core.<*> (o Core..:? "mode")
      )

instance Core.ToJSON NodeGroupAutoscalingPolicy where
  toJSON NodeGroupAutoscalingPolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("maxNodes" Core..=) Core.<$> maxNodes,
            ("minNodes" Core..=) Core.<$> minNodes,
            ("mode" Core..=) Core.<$> mode
          ]
      )

-- | Contains a list of nodeGroups.
--
-- /See:/ 'newNodeGroupList' smart constructor.
data NodeGroupList = NodeGroupList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of NodeGroup resources.
    items :: (Core.Maybe [NodeGroup]),
    -- | [Output Only] Type of resource.Always compute#nodeGroupList for lists of node groups.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe NodeGroupList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroupList' with the minimum fields required to make a request.
newNodeGroupList ::
  NodeGroupList
newNodeGroupList =
  NodeGroupList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#nodeGroupList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON NodeGroupList where
  parseJSON =
    Core.withObject
      "NodeGroupList"
      ( \o ->
          NodeGroupList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#nodeGroupList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON NodeGroupList where
  toJSON NodeGroupList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newNodeGroupList_Warning' smart constructor.
data NodeGroupList_Warning = NodeGroupList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NodeGroupList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [NodeGroupList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroupList_Warning' with the minimum fields required to make a request.
newNodeGroupList_Warning ::
  NodeGroupList_Warning
newNodeGroupList_Warning =
  NodeGroupList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON NodeGroupList_Warning where
  parseJSON =
    Core.withObject
      "NodeGroupList_Warning"
      ( \o ->
          NodeGroupList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON NodeGroupList_Warning where
  toJSON NodeGroupList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newNodeGroupList_Warning_DataItem' smart constructor.
data NodeGroupList_Warning_DataItem = NodeGroupList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroupList_Warning_DataItem' with the minimum fields required to make a request.
newNodeGroupList_Warning_DataItem ::
  NodeGroupList_Warning_DataItem
newNodeGroupList_Warning_DataItem =
  NodeGroupList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON NodeGroupList_Warning_DataItem where
  parseJSON =
    Core.withObject
      "NodeGroupList_Warning_DataItem"
      ( \o ->
          NodeGroupList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON NodeGroupList_Warning_DataItem where
  toJSON NodeGroupList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Time window specified for daily maintenance operations. GCE\'s internal maintenance will be performed within this window.
--
-- /See:/ 'newNodeGroupMaintenanceWindow' smart constructor.
data NodeGroupMaintenanceWindow = NodeGroupMaintenanceWindow
  { -- | [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario.
    maintenanceDuration :: (Core.Maybe Duration),
    -- | Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
    startTime :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroupMaintenanceWindow' with the minimum fields required to make a request.
newNodeGroupMaintenanceWindow ::
  NodeGroupMaintenanceWindow
newNodeGroupMaintenanceWindow =
  NodeGroupMaintenanceWindow
    { maintenanceDuration = Core.Nothing,
      startTime = Core.Nothing
    }

instance Core.FromJSON NodeGroupMaintenanceWindow where
  parseJSON =
    Core.withObject
      "NodeGroupMaintenanceWindow"
      ( \o ->
          NodeGroupMaintenanceWindow
            Core.<$> (o Core..:? "maintenanceDuration")
            Core.<*> (o Core..:? "startTime")
      )

instance Core.ToJSON NodeGroupMaintenanceWindow where
  toJSON NodeGroupMaintenanceWindow {..} =
    Core.object
      ( Core.catMaybes
          [ ("maintenanceDuration" Core..=)
              Core.<$> maintenanceDuration,
            ("startTime" Core..=) Core.<$> startTime
          ]
      )

--
-- /See:/ 'newNodeGroupNode' smart constructor.
data NodeGroupNode = NodeGroupNode
  { -- | Accelerators for this node.
    accelerators :: (Core.Maybe [AcceleratorConfig]),
    -- | Node resources that are reserved by all instances.
    consumedResources :: (Core.Maybe InstanceConsumptionInfo),
    -- | CPU overcommit.
    cpuOvercommitType :: (Core.Maybe NodeGroupNode_CpuOvercommitType),
    -- | Local disk configurations.
    disks :: (Core.Maybe [LocalDisk]),
    -- | Instance data that shows consumed resources on the node.
    instanceConsumptionData :: (Core.Maybe [InstanceConsumptionData]),
    -- | Instances scheduled on this node.
    instances :: (Core.Maybe [Core.Text]),
    -- | The name of the node.
    name :: (Core.Maybe Core.Text),
    -- | The type of this node.
    nodeType :: (Core.Maybe Core.Text),
    -- | [Output Only] Reserved for future use.
    satisfiesPzs :: (Core.Maybe Core.Bool),
    -- | Binding properties for the physical server.
    serverBinding :: (Core.Maybe ServerBinding),
    -- | Server ID associated with this node.
    serverId :: (Core.Maybe Core.Text),
    -- |
    status :: (Core.Maybe NodeGroupNode_Status),
    -- | Total amount of available resources on the node.
    totalResources :: (Core.Maybe InstanceConsumptionInfo)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroupNode' with the minimum fields required to make a request.
newNodeGroupNode ::
  NodeGroupNode
newNodeGroupNode =
  NodeGroupNode
    { accelerators = Core.Nothing,
      consumedResources = Core.Nothing,
      cpuOvercommitType = Core.Nothing,
      disks = Core.Nothing,
      instanceConsumptionData = Core.Nothing,
      instances = Core.Nothing,
      name = Core.Nothing,
      nodeType = Core.Nothing,
      satisfiesPzs = Core.Nothing,
      serverBinding = Core.Nothing,
      serverId = Core.Nothing,
      status = Core.Nothing,
      totalResources = Core.Nothing
    }

instance Core.FromJSON NodeGroupNode where
  parseJSON =
    Core.withObject
      "NodeGroupNode"
      ( \o ->
          NodeGroupNode
            Core.<$> (o Core..:? "accelerators")
            Core.<*> (o Core..:? "consumedResources")
            Core.<*> (o Core..:? "cpuOvercommitType")
            Core.<*> (o Core..:? "disks")
            Core.<*> (o Core..:? "instanceConsumptionData")
            Core.<*> (o Core..:? "instances")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "nodeType")
            Core.<*> (o Core..:? "satisfiesPzs")
            Core.<*> (o Core..:? "serverBinding")
            Core.<*> (o Core..:? "serverId")
            Core.<*> (o Core..:? "status")
            Core.<*> (o Core..:? "totalResources")
      )

instance Core.ToJSON NodeGroupNode where
  toJSON NodeGroupNode {..} =
    Core.object
      ( Core.catMaybes
          [ ("accelerators" Core..=) Core.<$> accelerators,
            ("consumedResources" Core..=)
              Core.<$> consumedResources,
            ("cpuOvercommitType" Core..=)
              Core.<$> cpuOvercommitType,
            ("disks" Core..=) Core.<$> disks,
            ("instanceConsumptionData" Core..=)
              Core.<$> instanceConsumptionData,
            ("instances" Core..=) Core.<$> instances,
            ("name" Core..=) Core.<$> name,
            ("nodeType" Core..=) Core.<$> nodeType,
            ("satisfiesPzs" Core..=) Core.<$> satisfiesPzs,
            ("serverBinding" Core..=) Core.<$> serverBinding,
            ("serverId" Core..=) Core.<$> serverId,
            ("status" Core..=) Core.<$> status,
            ("totalResources" Core..=) Core.<$> totalResources
          ]
      )

--
-- /See:/ 'newNodeGroupsAddNodesRequest' smart constructor.
newtype NodeGroupsAddNodesRequest = NodeGroupsAddNodesRequest
  { -- | Count of additional nodes to be added to the node group.
    additionalNodeCount :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroupsAddNodesRequest' with the minimum fields required to make a request.
newNodeGroupsAddNodesRequest ::
  NodeGroupsAddNodesRequest
newNodeGroupsAddNodesRequest =
  NodeGroupsAddNodesRequest {additionalNodeCount = Core.Nothing}

instance Core.FromJSON NodeGroupsAddNodesRequest where
  parseJSON =
    Core.withObject
      "NodeGroupsAddNodesRequest"
      ( \o ->
          NodeGroupsAddNodesRequest
            Core.<$> (o Core..:? "additionalNodeCount")
      )

instance Core.ToJSON NodeGroupsAddNodesRequest where
  toJSON NodeGroupsAddNodesRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("additionalNodeCount" Core..=)
              Core.<$> additionalNodeCount
          ]
      )

--
-- /See:/ 'newNodeGroupsDeleteNodesRequest' smart constructor.
newtype NodeGroupsDeleteNodesRequest = NodeGroupsDeleteNodesRequest
  { -- | Names of the nodes to delete.
    nodes :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroupsDeleteNodesRequest' with the minimum fields required to make a request.
newNodeGroupsDeleteNodesRequest ::
  NodeGroupsDeleteNodesRequest
newNodeGroupsDeleteNodesRequest =
  NodeGroupsDeleteNodesRequest {nodes = Core.Nothing}

instance Core.FromJSON NodeGroupsDeleteNodesRequest where
  parseJSON =
    Core.withObject
      "NodeGroupsDeleteNodesRequest"
      ( \o ->
          NodeGroupsDeleteNodesRequest
            Core.<$> (o Core..:? "nodes")
      )

instance Core.ToJSON NodeGroupsDeleteNodesRequest where
  toJSON NodeGroupsDeleteNodesRequest {..} =
    Core.object
      (Core.catMaybes [("nodes" Core..=) Core.<$> nodes])

--
-- /See:/ 'newNodeGroupsListNodes' smart constructor.
data NodeGroupsListNodes = NodeGroupsListNodes
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of Node resources.
    items :: (Core.Maybe [NodeGroupNode]),
    -- | [Output Only] The resource type, which is always compute.nodeGroupsListNodes for the list of nodes in the specified node group.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe NodeGroupsListNodes_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroupsListNodes' with the minimum fields required to make a request.
newNodeGroupsListNodes ::
  NodeGroupsListNodes
newNodeGroupsListNodes =
  NodeGroupsListNodes
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#nodeGroupsListNodes",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON NodeGroupsListNodes where
  parseJSON =
    Core.withObject
      "NodeGroupsListNodes"
      ( \o ->
          NodeGroupsListNodes
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#nodeGroupsListNodes"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON NodeGroupsListNodes where
  toJSON NodeGroupsListNodes {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newNodeGroupsListNodes_Warning' smart constructor.
data NodeGroupsListNodes_Warning = NodeGroupsListNodes_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NodeGroupsListNodes_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [NodeGroupsListNodes_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroupsListNodes_Warning' with the minimum fields required to make a request.
newNodeGroupsListNodes_Warning ::
  NodeGroupsListNodes_Warning
newNodeGroupsListNodes_Warning =
  NodeGroupsListNodes_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON NodeGroupsListNodes_Warning where
  parseJSON =
    Core.withObject
      "NodeGroupsListNodes_Warning"
      ( \o ->
          NodeGroupsListNodes_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON NodeGroupsListNodes_Warning where
  toJSON NodeGroupsListNodes_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newNodeGroupsListNodes_Warning_DataItem' smart constructor.
data NodeGroupsListNodes_Warning_DataItem = NodeGroupsListNodes_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroupsListNodes_Warning_DataItem' with the minimum fields required to make a request.
newNodeGroupsListNodes_Warning_DataItem ::
  NodeGroupsListNodes_Warning_DataItem
newNodeGroupsListNodes_Warning_DataItem =
  NodeGroupsListNodes_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    NodeGroupsListNodes_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "NodeGroupsListNodes_Warning_DataItem"
      ( \o ->
          NodeGroupsListNodes_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    NodeGroupsListNodes_Warning_DataItem
  where
  toJSON NodeGroupsListNodes_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newNodeGroupsScopedList' smart constructor.
data NodeGroupsScopedList = NodeGroupsScopedList
  { -- | [Output Only] A list of node groups contained in this scope.
    nodeGroups :: (Core.Maybe [NodeGroup]),
    -- | [Output Only] An informational warning that appears when the nodeGroup list is empty.
    warning :: (Core.Maybe NodeGroupsScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroupsScopedList' with the minimum fields required to make a request.
newNodeGroupsScopedList ::
  NodeGroupsScopedList
newNodeGroupsScopedList =
  NodeGroupsScopedList {nodeGroups = Core.Nothing, warning = Core.Nothing}

instance Core.FromJSON NodeGroupsScopedList where
  parseJSON =
    Core.withObject
      "NodeGroupsScopedList"
      ( \o ->
          NodeGroupsScopedList
            Core.<$> (o Core..:? "nodeGroups")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON NodeGroupsScopedList where
  toJSON NodeGroupsScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("nodeGroups" Core..=) Core.<$> nodeGroups,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] An informational warning that appears when the nodeGroup list is empty.
--
-- /See:/ 'newNodeGroupsScopedList_Warning' smart constructor.
data NodeGroupsScopedList_Warning = NodeGroupsScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NodeGroupsScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [NodeGroupsScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroupsScopedList_Warning' with the minimum fields required to make a request.
newNodeGroupsScopedList_Warning ::
  NodeGroupsScopedList_Warning
newNodeGroupsScopedList_Warning =
  NodeGroupsScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON NodeGroupsScopedList_Warning where
  parseJSON =
    Core.withObject
      "NodeGroupsScopedList_Warning"
      ( \o ->
          NodeGroupsScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON NodeGroupsScopedList_Warning where
  toJSON NodeGroupsScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newNodeGroupsScopedList_Warning_DataItem' smart constructor.
data NodeGroupsScopedList_Warning_DataItem = NodeGroupsScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroupsScopedList_Warning_DataItem' with the minimum fields required to make a request.
newNodeGroupsScopedList_Warning_DataItem ::
  NodeGroupsScopedList_Warning_DataItem
newNodeGroupsScopedList_Warning_DataItem =
  NodeGroupsScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    NodeGroupsScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "NodeGroupsScopedList_Warning_DataItem"
      ( \o ->
          NodeGroupsScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    NodeGroupsScopedList_Warning_DataItem
  where
  toJSON NodeGroupsScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newNodeGroupsSetNodeTemplateRequest' smart constructor.
newtype NodeGroupsSetNodeTemplateRequest = NodeGroupsSetNodeTemplateRequest
  { -- | Full or partial URL of the node template resource to be updated for this node group.
    nodeTemplate :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroupsSetNodeTemplateRequest' with the minimum fields required to make a request.
newNodeGroupsSetNodeTemplateRequest ::
  NodeGroupsSetNodeTemplateRequest
newNodeGroupsSetNodeTemplateRequest =
  NodeGroupsSetNodeTemplateRequest {nodeTemplate = Core.Nothing}

instance
  Core.FromJSON
    NodeGroupsSetNodeTemplateRequest
  where
  parseJSON =
    Core.withObject
      "NodeGroupsSetNodeTemplateRequest"
      ( \o ->
          NodeGroupsSetNodeTemplateRequest
            Core.<$> (o Core..:? "nodeTemplate")
      )

instance Core.ToJSON NodeGroupsSetNodeTemplateRequest where
  toJSON NodeGroupsSetNodeTemplateRequest {..} =
    Core.object
      ( Core.catMaybes
          [("nodeTemplate" Core..=) Core.<$> nodeTemplate]
      )

--
-- /See:/ 'newNodeGroupsSimulateMaintenanceEventRequest' smart constructor.
newtype NodeGroupsSimulateMaintenanceEventRequest = NodeGroupsSimulateMaintenanceEventRequest
  { -- | Names of the nodes to go under maintenance simulation.
    nodes :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeGroupsSimulateMaintenanceEventRequest' with the minimum fields required to make a request.
newNodeGroupsSimulateMaintenanceEventRequest ::
  NodeGroupsSimulateMaintenanceEventRequest
newNodeGroupsSimulateMaintenanceEventRequest =
  NodeGroupsSimulateMaintenanceEventRequest {nodes = Core.Nothing}

instance
  Core.FromJSON
    NodeGroupsSimulateMaintenanceEventRequest
  where
  parseJSON =
    Core.withObject
      "NodeGroupsSimulateMaintenanceEventRequest"
      ( \o ->
          NodeGroupsSimulateMaintenanceEventRequest
            Core.<$> (o Core..:? "nodes")
      )

instance
  Core.ToJSON
    NodeGroupsSimulateMaintenanceEventRequest
  where
  toJSON NodeGroupsSimulateMaintenanceEventRequest {..} =
    Core.object
      (Core.catMaybes [("nodes" Core..=) Core.<$> nodes])

-- | Represent a sole-tenant Node Template resource. You can use a template to define properties for nodes in a node group. For more information, read Creating node groups and instances.
--
-- /See:/ 'newNodeTemplate' smart constructor.
data NodeTemplate = NodeTemplate
  { -- |
    accelerators :: (Core.Maybe [AcceleratorConfig]),
    -- | CPU overcommit.
    cpuOvercommitType :: (Core.Maybe NodeTemplate_CpuOvercommitType),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- |
    disks :: (Core.Maybe [LocalDisk]),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] The type of the resource. Always compute#nodeTemplate for node templates.
    kind :: Core.Text,
    -- | The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | Labels to use for node affinity, which will be used in instance scheduling.
    nodeAffinityLabels :: (Core.Maybe NodeTemplate_NodeAffinityLabels),
    -- | The node type to use for nodes group that are created from this template.
    nodeType :: (Core.Maybe Core.Text),
    -- | Do not use. Instead, use the node_type property.
    nodeTypeFlexibility :: (Core.Maybe NodeTemplateNodeTypeFlexibility),
    -- | [Output Only] The name of the region where the node template resides, such as us-central1.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | Sets the binding properties for the physical server. Valid values include: - /[Default]/ RESTART/NODE/ON/ANY/SERVER: Restarts VMs on any available physical server - RESTART/NODE/ON/MINIMAL/SERVER: Restarts VMs on the same physical server whenever possible See Sole-tenant node options for more information.
    serverBinding :: (Core.Maybe ServerBinding),
    -- | [Output Only] The status of the node template. One of the following values: CREATING, READY, and DELETING.
    status :: (Core.Maybe NodeTemplate_Status),
    -- | [Output Only] An optional, human-readable explanation of the status.
    statusMessage :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTemplate' with the minimum fields required to make a request.
newNodeTemplate ::
  NodeTemplate
newNodeTemplate =
  NodeTemplate
    { accelerators = Core.Nothing,
      cpuOvercommitType = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      disks = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#nodeTemplate",
      name = Core.Nothing,
      nodeAffinityLabels = Core.Nothing,
      nodeType = Core.Nothing,
      nodeTypeFlexibility = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      serverBinding = Core.Nothing,
      status = Core.Nothing,
      statusMessage = Core.Nothing
    }

instance Core.FromJSON NodeTemplate where
  parseJSON =
    Core.withObject
      "NodeTemplate"
      ( \o ->
          NodeTemplate
            Core.<$> (o Core..:? "accelerators")
            Core.<*> (o Core..:? "cpuOvercommitType")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "disks")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#nodeTemplate")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "nodeAffinityLabels")
            Core.<*> (o Core..:? "nodeType")
            Core.<*> (o Core..:? "nodeTypeFlexibility")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "serverBinding")
            Core.<*> (o Core..:? "status")
            Core.<*> (o Core..:? "statusMessage")
      )

instance Core.ToJSON NodeTemplate where
  toJSON NodeTemplate {..} =
    Core.object
      ( Core.catMaybes
          [ ("accelerators" Core..=) Core.<$> accelerators,
            ("cpuOvercommitType" Core..=)
              Core.<$> cpuOvercommitType,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("disks" Core..=) Core.<$> disks,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("nodeAffinityLabels" Core..=)
              Core.<$> nodeAffinityLabels,
            ("nodeType" Core..=) Core.<$> nodeType,
            ("nodeTypeFlexibility" Core..=)
              Core.<$> nodeTypeFlexibility,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("serverBinding" Core..=) Core.<$> serverBinding,
            ("status" Core..=) Core.<$> status,
            ("statusMessage" Core..=) Core.<$> statusMessage
          ]
      )

-- | Labels to use for node affinity, which will be used in instance scheduling.
--
-- /See:/ 'newNodeTemplate_NodeAffinityLabels' smart constructor.
newtype NodeTemplate_NodeAffinityLabels = NodeTemplate_NodeAffinityLabels
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTemplate_NodeAffinityLabels' with the minimum fields required to make a request.
newNodeTemplate_NodeAffinityLabels ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  NodeTemplate_NodeAffinityLabels
newNodeTemplate_NodeAffinityLabels additional =
  NodeTemplate_NodeAffinityLabels {additional = additional}

instance
  Core.FromJSON
    NodeTemplate_NodeAffinityLabels
  where
  parseJSON =
    Core.withObject
      "NodeTemplate_NodeAffinityLabels"
      ( \o ->
          NodeTemplate_NodeAffinityLabels
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON NodeTemplate_NodeAffinityLabels where
  toJSON NodeTemplate_NodeAffinityLabels {..} =
    Core.toJSON additional

--
-- /See:/ 'newNodeTemplateAggregatedList' smart constructor.
data NodeTemplateAggregatedList = NodeTemplateAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of NodeTemplatesScopedList resources.
    items :: (Core.Maybe NodeTemplateAggregatedList_Items),
    -- | [Output Only] Type of resource.Always compute#nodeTemplateAggregatedList for aggregated lists of node templates.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe NodeTemplateAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTemplateAggregatedList' with the minimum fields required to make a request.
newNodeTemplateAggregatedList ::
  NodeTemplateAggregatedList
newNodeTemplateAggregatedList =
  NodeTemplateAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#nodeTemplateAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON NodeTemplateAggregatedList where
  parseJSON =
    Core.withObject
      "NodeTemplateAggregatedList"
      ( \o ->
          NodeTemplateAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#nodeTemplateAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON NodeTemplateAggregatedList where
  toJSON NodeTemplateAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of NodeTemplatesScopedList resources.
--
-- /See:/ 'newNodeTemplateAggregatedList_Items' smart constructor.
newtype NodeTemplateAggregatedList_Items = NodeTemplateAggregatedList_Items
  { -- | [Output Only] Name of the scope containing this set of node templates.
    additional :: (Core.HashMap Core.Text NodeTemplatesScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTemplateAggregatedList_Items' with the minimum fields required to make a request.
newNodeTemplateAggregatedList_Items ::
  -- |  [Output Only] Name of the scope containing this set of node templates. See 'additional'.
  Core.HashMap Core.Text NodeTemplatesScopedList ->
  NodeTemplateAggregatedList_Items
newNodeTemplateAggregatedList_Items additional =
  NodeTemplateAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    NodeTemplateAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "NodeTemplateAggregatedList_Items"
      ( \o ->
          NodeTemplateAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON NodeTemplateAggregatedList_Items where
  toJSON NodeTemplateAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newNodeTemplateAggregatedList_Warning' smart constructor.
data NodeTemplateAggregatedList_Warning = NodeTemplateAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NodeTemplateAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [NodeTemplateAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTemplateAggregatedList_Warning' with the minimum fields required to make a request.
newNodeTemplateAggregatedList_Warning ::
  NodeTemplateAggregatedList_Warning
newNodeTemplateAggregatedList_Warning =
  NodeTemplateAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    NodeTemplateAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "NodeTemplateAggregatedList_Warning"
      ( \o ->
          NodeTemplateAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    NodeTemplateAggregatedList_Warning
  where
  toJSON NodeTemplateAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newNodeTemplateAggregatedList_Warning_DataItem' smart constructor.
data NodeTemplateAggregatedList_Warning_DataItem = NodeTemplateAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTemplateAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newNodeTemplateAggregatedList_Warning_DataItem ::
  NodeTemplateAggregatedList_Warning_DataItem
newNodeTemplateAggregatedList_Warning_DataItem =
  NodeTemplateAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    NodeTemplateAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "NodeTemplateAggregatedList_Warning_DataItem"
      ( \o ->
          NodeTemplateAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    NodeTemplateAggregatedList_Warning_DataItem
  where
  toJSON
    NodeTemplateAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | Contains a list of node templates.
--
-- /See:/ 'newNodeTemplateList' smart constructor.
data NodeTemplateList = NodeTemplateList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of NodeTemplate resources.
    items :: (Core.Maybe [NodeTemplate]),
    -- | [Output Only] Type of resource.Always compute#nodeTemplateList for lists of node templates.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe NodeTemplateList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTemplateList' with the minimum fields required to make a request.
newNodeTemplateList ::
  NodeTemplateList
newNodeTemplateList =
  NodeTemplateList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#nodeTemplateList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON NodeTemplateList where
  parseJSON =
    Core.withObject
      "NodeTemplateList"
      ( \o ->
          NodeTemplateList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#nodeTemplateList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON NodeTemplateList where
  toJSON NodeTemplateList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newNodeTemplateList_Warning' smart constructor.
data NodeTemplateList_Warning = NodeTemplateList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NodeTemplateList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [NodeTemplateList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTemplateList_Warning' with the minimum fields required to make a request.
newNodeTemplateList_Warning ::
  NodeTemplateList_Warning
newNodeTemplateList_Warning =
  NodeTemplateList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON NodeTemplateList_Warning where
  parseJSON =
    Core.withObject
      "NodeTemplateList_Warning"
      ( \o ->
          NodeTemplateList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON NodeTemplateList_Warning where
  toJSON NodeTemplateList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newNodeTemplateList_Warning_DataItem' smart constructor.
data NodeTemplateList_Warning_DataItem = NodeTemplateList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTemplateList_Warning_DataItem' with the minimum fields required to make a request.
newNodeTemplateList_Warning_DataItem ::
  NodeTemplateList_Warning_DataItem
newNodeTemplateList_Warning_DataItem =
  NodeTemplateList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    NodeTemplateList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "NodeTemplateList_Warning_DataItem"
      ( \o ->
          NodeTemplateList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    NodeTemplateList_Warning_DataItem
  where
  toJSON NodeTemplateList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newNodeTemplateNodeTypeFlexibility' smart constructor.
data NodeTemplateNodeTypeFlexibility = NodeTemplateNodeTypeFlexibility
  { -- |
    cpus :: (Core.Maybe Core.Text),
    -- |
    localSsd :: (Core.Maybe Core.Text),
    -- |
    memory :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTemplateNodeTypeFlexibility' with the minimum fields required to make a request.
newNodeTemplateNodeTypeFlexibility ::
  NodeTemplateNodeTypeFlexibility
newNodeTemplateNodeTypeFlexibility =
  NodeTemplateNodeTypeFlexibility
    { cpus = Core.Nothing,
      localSsd = Core.Nothing,
      memory = Core.Nothing
    }

instance
  Core.FromJSON
    NodeTemplateNodeTypeFlexibility
  where
  parseJSON =
    Core.withObject
      "NodeTemplateNodeTypeFlexibility"
      ( \o ->
          NodeTemplateNodeTypeFlexibility
            Core.<$> (o Core..:? "cpus")
            Core.<*> (o Core..:? "localSsd")
            Core.<*> (o Core..:? "memory")
      )

instance Core.ToJSON NodeTemplateNodeTypeFlexibility where
  toJSON NodeTemplateNodeTypeFlexibility {..} =
    Core.object
      ( Core.catMaybes
          [ ("cpus" Core..=) Core.<$> cpus,
            ("localSsd" Core..=) Core.<$> localSsd,
            ("memory" Core..=) Core.<$> memory
          ]
      )

--
-- /See:/ 'newNodeTemplatesScopedList' smart constructor.
data NodeTemplatesScopedList = NodeTemplatesScopedList
  { -- | [Output Only] A list of node templates contained in this scope.
    nodeTemplates :: (Core.Maybe [NodeTemplate]),
    -- | [Output Only] An informational warning that appears when the node templates list is empty.
    warning :: (Core.Maybe NodeTemplatesScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTemplatesScopedList' with the minimum fields required to make a request.
newNodeTemplatesScopedList ::
  NodeTemplatesScopedList
newNodeTemplatesScopedList =
  NodeTemplatesScopedList {nodeTemplates = Core.Nothing, warning = Core.Nothing}

instance Core.FromJSON NodeTemplatesScopedList where
  parseJSON =
    Core.withObject
      "NodeTemplatesScopedList"
      ( \o ->
          NodeTemplatesScopedList
            Core.<$> (o Core..:? "nodeTemplates")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON NodeTemplatesScopedList where
  toJSON NodeTemplatesScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("nodeTemplates" Core..=) Core.<$> nodeTemplates,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] An informational warning that appears when the node templates list is empty.
--
-- /See:/ 'newNodeTemplatesScopedList_Warning' smart constructor.
data NodeTemplatesScopedList_Warning = NodeTemplatesScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NodeTemplatesScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [NodeTemplatesScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTemplatesScopedList_Warning' with the minimum fields required to make a request.
newNodeTemplatesScopedList_Warning ::
  NodeTemplatesScopedList_Warning
newNodeTemplatesScopedList_Warning =
  NodeTemplatesScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    NodeTemplatesScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "NodeTemplatesScopedList_Warning"
      ( \o ->
          NodeTemplatesScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON NodeTemplatesScopedList_Warning where
  toJSON NodeTemplatesScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newNodeTemplatesScopedList_Warning_DataItem' smart constructor.
data NodeTemplatesScopedList_Warning_DataItem = NodeTemplatesScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTemplatesScopedList_Warning_DataItem' with the minimum fields required to make a request.
newNodeTemplatesScopedList_Warning_DataItem ::
  NodeTemplatesScopedList_Warning_DataItem
newNodeTemplatesScopedList_Warning_DataItem =
  NodeTemplatesScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    NodeTemplatesScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "NodeTemplatesScopedList_Warning_DataItem"
      ( \o ->
          NodeTemplatesScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    NodeTemplatesScopedList_Warning_DataItem
  where
  toJSON NodeTemplatesScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Represent a sole-tenant Node Type resource. Each node within a node group must have a node type. A node type specifies the total amount of cores and memory for that node. Currently, the only available node type is n1-node-96-624 node type that has 96 vCPUs and 624 GB of memory, available in multiple zones. For more information read Node types.
--
-- /See:/ 'newNodeType' smart constructor.
data NodeType = NodeType
  { -- | [Output Only] The CPU platform used by this node type.
    cpuPlatform :: (Core.Maybe Core.Text),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | [Output Only] The deprecation status associated with this node type.
    deprecated :: (Core.Maybe DeprecationStatus),
    -- | [Output Only] An optional textual description of the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The number of virtual CPUs that are available to the node type.
    guestCpus :: (Core.Maybe Core.Int32),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] The type of the resource. Always compute#nodeType for node types.
    kind :: Core.Text,
    -- | [Output Only] Local SSD available to the node type, defined in GB.
    localSsdGb :: (Core.Maybe Core.Int32),
    -- | [Output Only] The amount of physical memory available to the node type, defined in MB.
    memoryMb :: (Core.Maybe Core.Int32),
    -- | [Output Only] Name of the resource.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] The name of the zone where the node type resides, such as us-central1-a.
    zone :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeType' with the minimum fields required to make a request.
newNodeType ::
  NodeType
newNodeType =
  NodeType
    { cpuPlatform = Core.Nothing,
      creationTimestamp = Core.Nothing,
      deprecated = Core.Nothing,
      description = Core.Nothing,
      guestCpus = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#nodeType",
      localSsdGb = Core.Nothing,
      memoryMb = Core.Nothing,
      name = Core.Nothing,
      selfLink = Core.Nothing,
      zone = Core.Nothing
    }

instance Core.FromJSON NodeType where
  parseJSON =
    Core.withObject
      "NodeType"
      ( \o ->
          NodeType
            Core.<$> (o Core..:? "cpuPlatform")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "deprecated")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "guestCpus")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#nodeType")
            Core.<*> (o Core..:? "localSsdGb")
            Core.<*> (o Core..:? "memoryMb")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "zone")
      )

instance Core.ToJSON NodeType where
  toJSON NodeType {..} =
    Core.object
      ( Core.catMaybes
          [ ("cpuPlatform" Core..=) Core.<$> cpuPlatform,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("deprecated" Core..=) Core.<$> deprecated,
            ("description" Core..=) Core.<$> description,
            ("guestCpus" Core..=) Core.<$> guestCpus,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("localSsdGb" Core..=) Core.<$> localSsdGb,
            ("memoryMb" Core..=) Core.<$> memoryMb,
            ("name" Core..=) Core.<$> name,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("zone" Core..=) Core.<$> zone
          ]
      )

--
-- /See:/ 'newNodeTypeAggregatedList' smart constructor.
data NodeTypeAggregatedList = NodeTypeAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of NodeTypesScopedList resources.
    items :: (Core.Maybe NodeTypeAggregatedList_Items),
    -- | [Output Only] Type of resource.Always compute#nodeTypeAggregatedList for aggregated lists of node types.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe NodeTypeAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTypeAggregatedList' with the minimum fields required to make a request.
newNodeTypeAggregatedList ::
  NodeTypeAggregatedList
newNodeTypeAggregatedList =
  NodeTypeAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#nodeTypeAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON NodeTypeAggregatedList where
  parseJSON =
    Core.withObject
      "NodeTypeAggregatedList"
      ( \o ->
          NodeTypeAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#nodeTypeAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON NodeTypeAggregatedList where
  toJSON NodeTypeAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of NodeTypesScopedList resources.
--
-- /See:/ 'newNodeTypeAggregatedList_Items' smart constructor.
newtype NodeTypeAggregatedList_Items = NodeTypeAggregatedList_Items
  { -- | [Output Only] Name of the scope containing this set of node types.
    additional :: (Core.HashMap Core.Text NodeTypesScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTypeAggregatedList_Items' with the minimum fields required to make a request.
newNodeTypeAggregatedList_Items ::
  -- |  [Output Only] Name of the scope containing this set of node types. See 'additional'.
  Core.HashMap Core.Text NodeTypesScopedList ->
  NodeTypeAggregatedList_Items
newNodeTypeAggregatedList_Items additional =
  NodeTypeAggregatedList_Items {additional = additional}

instance Core.FromJSON NodeTypeAggregatedList_Items where
  parseJSON =
    Core.withObject
      "NodeTypeAggregatedList_Items"
      ( \o ->
          NodeTypeAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON NodeTypeAggregatedList_Items where
  toJSON NodeTypeAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newNodeTypeAggregatedList_Warning' smart constructor.
data NodeTypeAggregatedList_Warning = NodeTypeAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NodeTypeAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [NodeTypeAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTypeAggregatedList_Warning' with the minimum fields required to make a request.
newNodeTypeAggregatedList_Warning ::
  NodeTypeAggregatedList_Warning
newNodeTypeAggregatedList_Warning =
  NodeTypeAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON NodeTypeAggregatedList_Warning where
  parseJSON =
    Core.withObject
      "NodeTypeAggregatedList_Warning"
      ( \o ->
          NodeTypeAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON NodeTypeAggregatedList_Warning where
  toJSON NodeTypeAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newNodeTypeAggregatedList_Warning_DataItem' smart constructor.
data NodeTypeAggregatedList_Warning_DataItem = NodeTypeAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTypeAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newNodeTypeAggregatedList_Warning_DataItem ::
  NodeTypeAggregatedList_Warning_DataItem
newNodeTypeAggregatedList_Warning_DataItem =
  NodeTypeAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    NodeTypeAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "NodeTypeAggregatedList_Warning_DataItem"
      ( \o ->
          NodeTypeAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    NodeTypeAggregatedList_Warning_DataItem
  where
  toJSON NodeTypeAggregatedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Contains a list of node types.
--
-- /See:/ 'newNodeTypeList' smart constructor.
data NodeTypeList = NodeTypeList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of NodeType resources.
    items :: (Core.Maybe [NodeType]),
    -- | [Output Only] Type of resource.Always compute#nodeTypeList for lists of node types.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe NodeTypeList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTypeList' with the minimum fields required to make a request.
newNodeTypeList ::
  NodeTypeList
newNodeTypeList =
  NodeTypeList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#nodeTypeList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON NodeTypeList where
  parseJSON =
    Core.withObject
      "NodeTypeList"
      ( \o ->
          NodeTypeList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#nodeTypeList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON NodeTypeList where
  toJSON NodeTypeList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newNodeTypeList_Warning' smart constructor.
data NodeTypeList_Warning = NodeTypeList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NodeTypeList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [NodeTypeList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTypeList_Warning' with the minimum fields required to make a request.
newNodeTypeList_Warning ::
  NodeTypeList_Warning
newNodeTypeList_Warning =
  NodeTypeList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON NodeTypeList_Warning where
  parseJSON =
    Core.withObject
      "NodeTypeList_Warning"
      ( \o ->
          NodeTypeList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON NodeTypeList_Warning where
  toJSON NodeTypeList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newNodeTypeList_Warning_DataItem' smart constructor.
data NodeTypeList_Warning_DataItem = NodeTypeList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTypeList_Warning_DataItem' with the minimum fields required to make a request.
newNodeTypeList_Warning_DataItem ::
  NodeTypeList_Warning_DataItem
newNodeTypeList_Warning_DataItem =
  NodeTypeList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON NodeTypeList_Warning_DataItem where
  parseJSON =
    Core.withObject
      "NodeTypeList_Warning_DataItem"
      ( \o ->
          NodeTypeList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON NodeTypeList_Warning_DataItem where
  toJSON NodeTypeList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newNodeTypesScopedList' smart constructor.
data NodeTypesScopedList = NodeTypesScopedList
  { -- | [Output Only] A list of node types contained in this scope.
    nodeTypes :: (Core.Maybe [NodeType]),
    -- | [Output Only] An informational warning that appears when the node types list is empty.
    warning :: (Core.Maybe NodeTypesScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTypesScopedList' with the minimum fields required to make a request.
newNodeTypesScopedList ::
  NodeTypesScopedList
newNodeTypesScopedList =
  NodeTypesScopedList {nodeTypes = Core.Nothing, warning = Core.Nothing}

instance Core.FromJSON NodeTypesScopedList where
  parseJSON =
    Core.withObject
      "NodeTypesScopedList"
      ( \o ->
          NodeTypesScopedList
            Core.<$> (o Core..:? "nodeTypes")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON NodeTypesScopedList where
  toJSON NodeTypesScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("nodeTypes" Core..=) Core.<$> nodeTypes,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] An informational warning that appears when the node types list is empty.
--
-- /See:/ 'newNodeTypesScopedList_Warning' smart constructor.
data NodeTypesScopedList_Warning = NodeTypesScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NodeTypesScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [NodeTypesScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTypesScopedList_Warning' with the minimum fields required to make a request.
newNodeTypesScopedList_Warning ::
  NodeTypesScopedList_Warning
newNodeTypesScopedList_Warning =
  NodeTypesScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON NodeTypesScopedList_Warning where
  parseJSON =
    Core.withObject
      "NodeTypesScopedList_Warning"
      ( \o ->
          NodeTypesScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON NodeTypesScopedList_Warning where
  toJSON NodeTypesScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newNodeTypesScopedList_Warning_DataItem' smart constructor.
data NodeTypesScopedList_Warning_DataItem = NodeTypesScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NodeTypesScopedList_Warning_DataItem' with the minimum fields required to make a request.
newNodeTypesScopedList_Warning_DataItem ::
  NodeTypesScopedList_Warning_DataItem
newNodeTypesScopedList_Warning_DataItem =
  NodeTypesScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    NodeTypesScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "NodeTypesScopedList_Warning_DataItem"
      ( \o ->
          NodeTypesScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    NodeTypesScopedList_Warning_DataItem
  where
  toJSON NodeTypesScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Represents a notification endpoint. A notification endpoint resource defines an endpoint to receive notifications when there are status changes detected by the associated health check service. For more information, see Health checks overview.
--
-- /See:/ 'newNotificationEndpoint' smart constructor.
data NotificationEndpoint = NotificationEndpoint
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | Settings of the gRPC notification endpoint including the endpoint URL and the retry duration.
    grpcSettings :: (Core.Maybe NotificationEndpointGrpcSettings),
    -- | [Output Only] A unique identifier for this resource type. The server generates this identifier.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#notificationEndpoint for notification endpoints.
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] URL of the region where the notification endpoint resides. This field applies only to the regional resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NotificationEndpoint' with the minimum fields required to make a request.
newNotificationEndpoint ::
  NotificationEndpoint
newNotificationEndpoint =
  NotificationEndpoint
    { creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      grpcSettings = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#notificationEndpoint",
      name = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing
    }

instance Core.FromJSON NotificationEndpoint where
  parseJSON =
    Core.withObject
      "NotificationEndpoint"
      ( \o ->
          NotificationEndpoint
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "grpcSettings")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#notificationEndpoint"
                     )
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
      )

instance Core.ToJSON NotificationEndpoint where
  toJSON NotificationEndpoint {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("grpcSettings" Core..=) Core.<$> grpcSettings,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink
          ]
      )

-- | Represents a gRPC setting that describes one gRPC notification endpoint and the retry duration attempting to send notification to this endpoint.
--
-- /See:/ 'newNotificationEndpointGrpcSettings' smart constructor.
data NotificationEndpointGrpcSettings = NotificationEndpointGrpcSettings
  { -- | Optional. If specified, this field is used to set the authority header by the sender of notifications. See https:\/\/tools.ietf.org\/html\/rfc7540#section-8.1.2.3
    authority :: (Core.Maybe Core.Text),
    -- | Endpoint to which gRPC notifications are sent. This must be a valid gRPCLB DNS name.
    endpoint :: (Core.Maybe Core.Text),
    -- | Optional. If specified, this field is used to populate the \"name\" field in gRPC requests.
    payloadName :: (Core.Maybe Core.Text),
    -- | Optional. This field is used to configure how often to send a full update of all non-healthy backends. If unspecified, full updates are not sent. If specified, must be in the range between 600 seconds to 3600 seconds. Nanos are disallowed. Can only be set for regional notification endpoints.
    resendInterval :: (Core.Maybe Duration),
    -- | How much time (in seconds) is spent attempting notification retries until a successful response is received. Default is 30s. Limit is 20m (1200s). Must be a positive number.
    retryDurationSec :: (Core.Maybe Core.Word32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NotificationEndpointGrpcSettings' with the minimum fields required to make a request.
newNotificationEndpointGrpcSettings ::
  NotificationEndpointGrpcSettings
newNotificationEndpointGrpcSettings =
  NotificationEndpointGrpcSettings
    { authority = Core.Nothing,
      endpoint = Core.Nothing,
      payloadName = Core.Nothing,
      resendInterval = Core.Nothing,
      retryDurationSec = Core.Nothing
    }

instance
  Core.FromJSON
    NotificationEndpointGrpcSettings
  where
  parseJSON =
    Core.withObject
      "NotificationEndpointGrpcSettings"
      ( \o ->
          NotificationEndpointGrpcSettings
            Core.<$> (o Core..:? "authority")
            Core.<*> (o Core..:? "endpoint")
            Core.<*> (o Core..:? "payloadName")
            Core.<*> (o Core..:? "resendInterval")
            Core.<*> (o Core..:? "retryDurationSec")
      )

instance Core.ToJSON NotificationEndpointGrpcSettings where
  toJSON NotificationEndpointGrpcSettings {..} =
    Core.object
      ( Core.catMaybes
          [ ("authority" Core..=) Core.<$> authority,
            ("endpoint" Core..=) Core.<$> endpoint,
            ("payloadName" Core..=) Core.<$> payloadName,
            ("resendInterval" Core..=) Core.<$> resendInterval,
            ("retryDurationSec" Core..=)
              Core.<$> retryDurationSec
          ]
      )

--
-- /See:/ 'newNotificationEndpointList' smart constructor.
data NotificationEndpointList = NotificationEndpointList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of NotificationEndpoint resources.
    items :: (Core.Maybe [NotificationEndpoint]),
    -- | [Output Only] Type of the resource. Always compute#notificationEndpoint for notification endpoints.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe NotificationEndpointList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NotificationEndpointList' with the minimum fields required to make a request.
newNotificationEndpointList ::
  NotificationEndpointList
newNotificationEndpointList =
  NotificationEndpointList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#notificationEndpointList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON NotificationEndpointList where
  parseJSON =
    Core.withObject
      "NotificationEndpointList"
      ( \o ->
          NotificationEndpointList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#notificationEndpointList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON NotificationEndpointList where
  toJSON NotificationEndpointList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newNotificationEndpointList_Warning' smart constructor.
data NotificationEndpointList_Warning = NotificationEndpointList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe NotificationEndpointList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [NotificationEndpointList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NotificationEndpointList_Warning' with the minimum fields required to make a request.
newNotificationEndpointList_Warning ::
  NotificationEndpointList_Warning
newNotificationEndpointList_Warning =
  NotificationEndpointList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    NotificationEndpointList_Warning
  where
  parseJSON =
    Core.withObject
      "NotificationEndpointList_Warning"
      ( \o ->
          NotificationEndpointList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON NotificationEndpointList_Warning where
  toJSON NotificationEndpointList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newNotificationEndpointList_Warning_DataItem' smart constructor.
data NotificationEndpointList_Warning_DataItem = NotificationEndpointList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'NotificationEndpointList_Warning_DataItem' with the minimum fields required to make a request.
newNotificationEndpointList_Warning_DataItem ::
  NotificationEndpointList_Warning_DataItem
newNotificationEndpointList_Warning_DataItem =
  NotificationEndpointList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    NotificationEndpointList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "NotificationEndpointList_Warning_DataItem"
      ( \o ->
          NotificationEndpointList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    NotificationEndpointList_Warning_DataItem
  where
  toJSON NotificationEndpointList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Represents an Operation resource. Google Compute Engine has three Operation resources: * </compute/docs/reference/rest/v1/globalOperations Global> * </compute/docs/reference/rest/v1/regionOperations Regional> * </compute/docs/reference/rest/v1/zoneOperations Zonal> You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the @globalOperations@ resource. - For regional operations, use the @regionOperations@ resource. - For zonal operations, use the @zonalOperations@ resource. For more information, read Global, Regional, and Zonal Resources.
--
-- /See:/ 'newOperation' smart constructor.
data Operation = Operation
  { -- | [Output Only] The value of @requestId@ if you provided it in the request. Not present otherwise.
    clientOperationId :: (Core.Maybe Core.Text),
    -- | [Deprecated] This field is deprecated.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | [Output Only] A textual description of the operation, which is set when the operation is created.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The time that this operation was completed. This value is in RFC3339 text format.
    endTime :: (Core.Maybe Core.Text),
    -- | [Output Only] If errors are generated during processing of the operation, this field will be populated.
    error :: (Core.Maybe Operation_Error),
    -- | [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as @NOT FOUND@.
    httpErrorMessage :: (Core.Maybe Core.Text),
    -- | [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a @404@ means the resource was not found.
    httpErrorStatusCode :: (Core.Maybe Core.Int32),
    -- | [Output Only] The unique identifier for the operation. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] The time that this operation was requested. This value is in RFC3339 text format.
    insertTime :: (Core.Maybe Core.Text),
    -- | [Output Only] Type of the resource. Always @compute#operation@ for Operation resources.
    kind :: Core.Text,
    -- | [Output Only] Name of the operation.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] An ID that represents a group of operations, such as when a group of operations results from a @bulkInsert@ API request.
    operationGroupId :: (Core.Maybe Core.Text),
    -- | [Output Only] The type of operation, such as @insert@, @update@, or @delete@, and so on.
    operationType :: (Core.Maybe Core.Text),
    -- | [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.
    progress :: (Core.Maybe Core.Int32),
    -- | [Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.
    startTime :: (Core.Maybe Core.Text),
    -- | [Output Only] The status of the operation, which can be one of the following: @PENDING@, @RUNNING@, or @DONE@.
    status :: (Core.Maybe Operation_Status),
    -- | [Output Only] An optional textual description of the current status of the operation.
    statusMessage :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique target ID, which identifies a specific incarnation of the target resource.
    targetId :: (Core.Maybe Core.Word64),
    -- | [Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.
    targetLink :: (Core.Maybe Core.Text),
    -- | [Output Only] User who requested the operation, for example: @user\@example.com@.
    user :: (Core.Maybe Core.Text),
    -- | [Output Only] If warning messages are generated during processing of the operation, this field will be populated.
    warnings :: (Core.Maybe [Operation_WarningsItem]),
    -- | [Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations.
    zone :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Operation' with the minimum fields required to make a request.
newOperation ::
  Operation
newOperation =
  Operation
    { clientOperationId = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      endTime = Core.Nothing,
      error = Core.Nothing,
      httpErrorMessage = Core.Nothing,
      httpErrorStatusCode = Core.Nothing,
      id = Core.Nothing,
      insertTime = Core.Nothing,
      kind = "compute#operation",
      name = Core.Nothing,
      operationGroupId = Core.Nothing,
      operationType = Core.Nothing,
      progress = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      startTime = Core.Nothing,
      status = Core.Nothing,
      statusMessage = Core.Nothing,
      targetId = Core.Nothing,
      targetLink = Core.Nothing,
      user = Core.Nothing,
      warnings = Core.Nothing,
      zone = Core.Nothing
    }

instance Core.FromJSON Operation where
  parseJSON =
    Core.withObject
      "Operation"
      ( \o ->
          Operation
            Core.<$> (o Core..:? "clientOperationId")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "endTime")
            Core.<*> (o Core..:? "error")
            Core.<*> (o Core..:? "httpErrorMessage")
            Core.<*> (o Core..:? "httpErrorStatusCode")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "insertTime")
            Core.<*> (o Core..:? "kind" Core..!= "compute#operation")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "operationGroupId")
            Core.<*> (o Core..:? "operationType")
            Core.<*> (o Core..:? "progress")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "startTime")
            Core.<*> (o Core..:? "status")
            Core.<*> (o Core..:? "statusMessage")
            Core.<*> ( o Core..:? "targetId"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "targetLink")
            Core.<*> (o Core..:? "user")
            Core.<*> (o Core..:? "warnings")
            Core.<*> (o Core..:? "zone")
      )

instance Core.ToJSON Operation where
  toJSON Operation {..} =
    Core.object
      ( Core.catMaybes
          [ ("clientOperationId" Core..=)
              Core.<$> clientOperationId,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("endTime" Core..=) Core.<$> endTime,
            ("error" Core..=) Core.<$> error,
            ("httpErrorMessage" Core..=)
              Core.<$> httpErrorMessage,
            ("httpErrorStatusCode" Core..=)
              Core.<$> httpErrorStatusCode,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("insertTime" Core..=) Core.<$> insertTime,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("operationGroupId" Core..=)
              Core.<$> operationGroupId,
            ("operationType" Core..=) Core.<$> operationType,
            ("progress" Core..=) Core.<$> progress,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("startTime" Core..=) Core.<$> startTime,
            ("status" Core..=) Core.<$> status,
            ("statusMessage" Core..=) Core.<$> statusMessage,
            ("targetId" Core..=) Core.. Core.AsText
              Core.<$> targetId,
            ("targetLink" Core..=) Core.<$> targetLink,
            ("user" Core..=) Core.<$> user,
            ("warnings" Core..=) Core.<$> warnings,
            ("zone" Core..=) Core.<$> zone
          ]
      )

-- | [Output Only] If errors are generated during processing of the operation, this field will be populated.
--
-- /See:/ 'newOperation_Error' smart constructor.
newtype Operation_Error = Operation_Error
  { -- | [Output Only] The array of errors encountered while processing this operation.
    errors :: (Core.Maybe [Operation_Error_ErrorsItem])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Operation_Error' with the minimum fields required to make a request.
newOperation_Error ::
  Operation_Error
newOperation_Error = Operation_Error {errors = Core.Nothing}

instance Core.FromJSON Operation_Error where
  parseJSON =
    Core.withObject
      "Operation_Error"
      ( \o ->
          Operation_Error Core.<$> (o Core..:? "errors")
      )

instance Core.ToJSON Operation_Error where
  toJSON Operation_Error {..} =
    Core.object
      (Core.catMaybes [("errors" Core..=) Core.<$> errors])

--
-- /See:/ 'newOperation_Error_ErrorsItem' smart constructor.
data Operation_Error_ErrorsItem = Operation_Error_ErrorsItem
  { -- | [Output Only] The error type identifier for this error.
    code :: (Core.Maybe Core.Text),
    -- | [Output Only] An optional list of messages that contain the error details. There is a set of defined message types to use for providing details.The syntax depends on the error code. For example, QuotaExceededInfo will have details when the error code is QUOTA_EXCEEDED.
    errorDetails :: (Core.Maybe [Operation_Error_ErrorsItem_ErrorDetailsItem]),
    -- | [Output Only] Indicates the field in the request that caused the error. This property is optional.
    location :: (Core.Maybe Core.Text),
    -- | [Output Only] An optional, human-readable error message.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Operation_Error_ErrorsItem' with the minimum fields required to make a request.
newOperation_Error_ErrorsItem ::
  Operation_Error_ErrorsItem
newOperation_Error_ErrorsItem =
  Operation_Error_ErrorsItem
    { code = Core.Nothing,
      errorDetails = Core.Nothing,
      location = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON Operation_Error_ErrorsItem where
  parseJSON =
    Core.withObject
      "Operation_Error_ErrorsItem"
      ( \o ->
          Operation_Error_ErrorsItem
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "errorDetails")
            Core.<*> (o Core..:? "location")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON Operation_Error_ErrorsItem where
  toJSON Operation_Error_ErrorsItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("errorDetails" Core..=) Core.<$> errorDetails,
            ("location" Core..=) Core.<$> location,
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newOperation_Error_ErrorsItem_ErrorDetailsItem' smart constructor.
data Operation_Error_ErrorsItem_ErrorDetailsItem = Operation_Error_ErrorsItem_ErrorDetailsItem
  { -- |
    errorInfo :: (Core.Maybe ErrorInfo),
    -- |
    help :: (Core.Maybe Help),
    -- |
    localizedMessage :: (Core.Maybe LocalizedMessage),
    -- |
    quotaInfo :: (Core.Maybe QuotaExceededInfo)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Operation_Error_ErrorsItem_ErrorDetailsItem' with the minimum fields required to make a request.
newOperation_Error_ErrorsItem_ErrorDetailsItem ::
  Operation_Error_ErrorsItem_ErrorDetailsItem
newOperation_Error_ErrorsItem_ErrorDetailsItem =
  Operation_Error_ErrorsItem_ErrorDetailsItem
    { errorInfo = Core.Nothing,
      help = Core.Nothing,
      localizedMessage = Core.Nothing,
      quotaInfo = Core.Nothing
    }

instance
  Core.FromJSON
    Operation_Error_ErrorsItem_ErrorDetailsItem
  where
  parseJSON =
    Core.withObject
      "Operation_Error_ErrorsItem_ErrorDetailsItem"
      ( \o ->
          Operation_Error_ErrorsItem_ErrorDetailsItem
            Core.<$> (o Core..:? "errorInfo")
            Core.<*> (o Core..:? "help")
            Core.<*> (o Core..:? "localizedMessage")
            Core.<*> (o Core..:? "quotaInfo")
      )

instance
  Core.ToJSON
    Operation_Error_ErrorsItem_ErrorDetailsItem
  where
  toJSON
    Operation_Error_ErrorsItem_ErrorDetailsItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("errorInfo" Core..=) Core.<$> errorInfo,
              ("help" Core..=) Core.<$> help,
              ("localizedMessage" Core..=)
                Core.<$> localizedMessage,
              ("quotaInfo" Core..=) Core.<$> quotaInfo
            ]
        )

--
-- /See:/ 'newOperation_WarningsItem' smart constructor.
data Operation_WarningsItem = Operation_WarningsItem
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe Operation_WarningsItem_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [Operation_WarningsItem_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Operation_WarningsItem' with the minimum fields required to make a request.
newOperation_WarningsItem ::
  Operation_WarningsItem
newOperation_WarningsItem =
  Operation_WarningsItem
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON Operation_WarningsItem where
  parseJSON =
    Core.withObject
      "Operation_WarningsItem"
      ( \o ->
          Operation_WarningsItem
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON Operation_WarningsItem where
  toJSON Operation_WarningsItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newOperation_WarningsItem_DataItem' smart constructor.
data Operation_WarningsItem_DataItem = Operation_WarningsItem_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Operation_WarningsItem_DataItem' with the minimum fields required to make a request.
newOperation_WarningsItem_DataItem ::
  Operation_WarningsItem_DataItem
newOperation_WarningsItem_DataItem =
  Operation_WarningsItem_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    Operation_WarningsItem_DataItem
  where
  parseJSON =
    Core.withObject
      "Operation_WarningsItem_DataItem"
      ( \o ->
          Operation_WarningsItem_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON Operation_WarningsItem_DataItem where
  toJSON Operation_WarningsItem_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newOperationAggregatedList' smart constructor.
data OperationAggregatedList = OperationAggregatedList
  { -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | [Output Only] A map of scoped operation lists.
    items :: (Core.Maybe OperationAggregatedList_Items),
    -- | [Output Only] Type of resource. Always @compute#operationAggregatedList@ for aggregated lists of operations.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than @maxResults@, use the @nextPageToken@ as a value for the query parameter @pageToken@ in the next list request. Subsequent list requests will have their own @nextPageToken@ to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe OperationAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'OperationAggregatedList' with the minimum fields required to make a request.
newOperationAggregatedList ::
  OperationAggregatedList
newOperationAggregatedList =
  OperationAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#operationAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON OperationAggregatedList where
  parseJSON =
    Core.withObject
      "OperationAggregatedList"
      ( \o ->
          OperationAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#operationAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON OperationAggregatedList where
  toJSON OperationAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] A map of scoped operation lists.
--
-- /See:/ 'newOperationAggregatedList_Items' smart constructor.
newtype OperationAggregatedList_Items = OperationAggregatedList_Items
  { -- | [Output Only] Name of the scope containing this set of operations.
    additional :: (Core.HashMap Core.Text OperationsScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'OperationAggregatedList_Items' with the minimum fields required to make a request.
newOperationAggregatedList_Items ::
  -- |  [Output Only] Name of the scope containing this set of operations. See 'additional'.
  Core.HashMap Core.Text OperationsScopedList ->
  OperationAggregatedList_Items
newOperationAggregatedList_Items additional =
  OperationAggregatedList_Items {additional = additional}

instance Core.FromJSON OperationAggregatedList_Items where
  parseJSON =
    Core.withObject
      "OperationAggregatedList_Items"
      ( \o ->
          OperationAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON OperationAggregatedList_Items where
  toJSON OperationAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newOperationAggregatedList_Warning' smart constructor.
data OperationAggregatedList_Warning = OperationAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe OperationAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [OperationAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'OperationAggregatedList_Warning' with the minimum fields required to make a request.
newOperationAggregatedList_Warning ::
  OperationAggregatedList_Warning
newOperationAggregatedList_Warning =
  OperationAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    OperationAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "OperationAggregatedList_Warning"
      ( \o ->
          OperationAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON OperationAggregatedList_Warning where
  toJSON OperationAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newOperationAggregatedList_Warning_DataItem' smart constructor.
data OperationAggregatedList_Warning_DataItem = OperationAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'OperationAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newOperationAggregatedList_Warning_DataItem ::
  OperationAggregatedList_Warning_DataItem
newOperationAggregatedList_Warning_DataItem =
  OperationAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    OperationAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "OperationAggregatedList_Warning_DataItem"
      ( \o ->
          OperationAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    OperationAggregatedList_Warning_DataItem
  where
  toJSON OperationAggregatedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Contains a list of Operation resources.
--
-- /See:/ 'newOperationList' smart constructor.
data OperationList = OperationList
  { -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | [Output Only] A list of Operation resources.
    items :: (Core.Maybe [Operation]),
    -- | [Output Only] Type of resource. Always @compute#operations@ for Operations resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than @maxResults@, use the @nextPageToken@ as a value for the query parameter @pageToken@ in the next list request. Subsequent list requests will have their own @nextPageToken@ to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe OperationList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'OperationList' with the minimum fields required to make a request.
newOperationList ::
  OperationList
newOperationList =
  OperationList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#operationList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON OperationList where
  parseJSON =
    Core.withObject
      "OperationList"
      ( \o ->
          OperationList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#operationList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON OperationList where
  toJSON OperationList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newOperationList_Warning' smart constructor.
data OperationList_Warning = OperationList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe OperationList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [OperationList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'OperationList_Warning' with the minimum fields required to make a request.
newOperationList_Warning ::
  OperationList_Warning
newOperationList_Warning =
  OperationList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON OperationList_Warning where
  parseJSON =
    Core.withObject
      "OperationList_Warning"
      ( \o ->
          OperationList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON OperationList_Warning where
  toJSON OperationList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newOperationList_Warning_DataItem' smart constructor.
data OperationList_Warning_DataItem = OperationList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'OperationList_Warning_DataItem' with the minimum fields required to make a request.
newOperationList_Warning_DataItem ::
  OperationList_Warning_DataItem
newOperationList_Warning_DataItem =
  OperationList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON OperationList_Warning_DataItem where
  parseJSON =
    Core.withObject
      "OperationList_Warning_DataItem"
      ( \o ->
          OperationList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON OperationList_Warning_DataItem where
  toJSON OperationList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newOperationsScopedList' smart constructor.
data OperationsScopedList = OperationsScopedList
  { -- | [Output Only] A list of operations contained in this scope.
    operations :: (Core.Maybe [Operation]),
    -- | [Output Only] Informational warning which replaces the list of operations when the list is empty.
    warning :: (Core.Maybe OperationsScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'OperationsScopedList' with the minimum fields required to make a request.
newOperationsScopedList ::
  OperationsScopedList
newOperationsScopedList =
  OperationsScopedList {operations = Core.Nothing, warning = Core.Nothing}

instance Core.FromJSON OperationsScopedList where
  parseJSON =
    Core.withObject
      "OperationsScopedList"
      ( \o ->
          OperationsScopedList
            Core.<$> (o Core..:? "operations")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON OperationsScopedList where
  toJSON OperationsScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("operations" Core..=) Core.<$> operations,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning which replaces the list of operations when the list is empty.
--
-- /See:/ 'newOperationsScopedList_Warning' smart constructor.
data OperationsScopedList_Warning = OperationsScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe OperationsScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [OperationsScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'OperationsScopedList_Warning' with the minimum fields required to make a request.
newOperationsScopedList_Warning ::
  OperationsScopedList_Warning
newOperationsScopedList_Warning =
  OperationsScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON OperationsScopedList_Warning where
  parseJSON =
    Core.withObject
      "OperationsScopedList_Warning"
      ( \o ->
          OperationsScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON OperationsScopedList_Warning where
  toJSON OperationsScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newOperationsScopedList_Warning_DataItem' smart constructor.
data OperationsScopedList_Warning_DataItem = OperationsScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'OperationsScopedList_Warning_DataItem' with the minimum fields required to make a request.
newOperationsScopedList_Warning_DataItem ::
  OperationsScopedList_Warning_DataItem
newOperationsScopedList_Warning_DataItem =
  OperationsScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    OperationsScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "OperationsScopedList_Warning_DataItem"
      ( \o ->
          OperationsScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    OperationsScopedList_Warning_DataItem
  where
  toJSON OperationsScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service.
--
-- /See:/ 'newOutlierDetection' smart constructor.
data OutlierDetection = OutlierDetection
  { -- | The base time that a host is ejected for. The real ejection time is equal to the base ejection time multiplied by the number of times the host has been ejected. Defaults to 30000ms or 30s.
    baseEjectionTime :: (Core.Maybe Duration),
    -- | Number of errors before a host is ejected from the connection pool. When the backend host is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    consecutiveErrors :: (Core.Maybe Core.Int32),
    -- | The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 3. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    consecutiveGatewayFailure :: (Core.Maybe Core.Int32),
    -- | The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    enforcingConsecutiveErrors :: (Core.Maybe Core.Int32),
    -- | The percentage chance that a host will be actually ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.
    enforcingConsecutiveGatewayFailure :: (Core.Maybe Core.Int32),
    -- | The percentage chance that a host will be actually ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
    enforcingSuccessRate :: (Core.Maybe Core.Int32),
    -- | Time interval between ejection analysis sweeps. This can result in both new ejections as well as hosts being returned to service. Defaults to 1 second.
    interval :: (Core.Maybe Duration),
    -- | Maximum percentage of hosts in the load balancing pool for the backend service that can be ejected. Defaults to 50%.
    maxEjectionPercent :: (Core.Maybe Core.Int32),
    -- | The number of hosts in a cluster that must have enough request volume to detect success rate outliers. If the number of hosts is less than this setting, outlier detection via success rate statistics is not performed for any host in the cluster. Defaults to 5.
    successRateMinimumHosts :: (Core.Maybe Core.Int32),
    -- | The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this host in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that host. Defaults to 100.
    successRateRequestVolume :: (Core.Maybe Core.Int32),
    -- | This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * success/rate/stdev_factor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900.
    successRateStdevFactor :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'OutlierDetection' with the minimum fields required to make a request.
newOutlierDetection ::
  OutlierDetection
newOutlierDetection =
  OutlierDetection
    { baseEjectionTime = Core.Nothing,
      consecutiveErrors = Core.Nothing,
      consecutiveGatewayFailure = Core.Nothing,
      enforcingConsecutiveErrors = Core.Nothing,
      enforcingConsecutiveGatewayFailure = Core.Nothing,
      enforcingSuccessRate = Core.Nothing,
      interval = Core.Nothing,
      maxEjectionPercent = Core.Nothing,
      successRateMinimumHosts = Core.Nothing,
      successRateRequestVolume = Core.Nothing,
      successRateStdevFactor = Core.Nothing
    }

instance Core.FromJSON OutlierDetection where
  parseJSON =
    Core.withObject
      "OutlierDetection"
      ( \o ->
          OutlierDetection
            Core.<$> (o Core..:? "baseEjectionTime")
            Core.<*> (o Core..:? "consecutiveErrors")
            Core.<*> (o Core..:? "consecutiveGatewayFailure")
            Core.<*> (o Core..:? "enforcingConsecutiveErrors")
            Core.<*> (o Core..:? "enforcingConsecutiveGatewayFailure")
            Core.<*> (o Core..:? "enforcingSuccessRate")
            Core.<*> (o Core..:? "interval")
            Core.<*> (o Core..:? "maxEjectionPercent")
            Core.<*> (o Core..:? "successRateMinimumHosts")
            Core.<*> (o Core..:? "successRateRequestVolume")
            Core.<*> (o Core..:? "successRateStdevFactor")
      )

instance Core.ToJSON OutlierDetection where
  toJSON OutlierDetection {..} =
    Core.object
      ( Core.catMaybes
          [ ("baseEjectionTime" Core..=)
              Core.<$> baseEjectionTime,
            ("consecutiveErrors" Core..=)
              Core.<$> consecutiveErrors,
            ("consecutiveGatewayFailure" Core..=)
              Core.<$> consecutiveGatewayFailure,
            ("enforcingConsecutiveErrors" Core..=)
              Core.<$> enforcingConsecutiveErrors,
            ("enforcingConsecutiveGatewayFailure" Core..=)
              Core.<$> enforcingConsecutiveGatewayFailure,
            ("enforcingSuccessRate" Core..=)
              Core.<$> enforcingSuccessRate,
            ("interval" Core..=) Core.<$> interval,
            ("maxEjectionPercent" Core..=)
              Core.<$> maxEjectionPercent,
            ("successRateMinimumHosts" Core..=)
              Core.<$> successRateMinimumHosts,
            ("successRateRequestVolume" Core..=)
              Core.<$> successRateRequestVolume,
            ("successRateStdevFactor" Core..=)
              Core.<$> successRateStdevFactor
          ]
      )

-- | Next free: 7
--
-- /See:/ 'newPacketIntervals' smart constructor.
data PacketIntervals = PacketIntervals
  { -- | Average observed inter-packet interval in milliseconds.
    avgMs :: (Core.Maybe Core.Int64),
    -- | From how long ago in the past these intervals were observed.
    duration :: (Core.Maybe PacketIntervals_Duration),
    -- | Maximum observed inter-packet interval in milliseconds.
    maxMs :: (Core.Maybe Core.Int64),
    -- | Minimum observed inter-packet interval in milliseconds.
    minMs :: (Core.Maybe Core.Int64),
    -- | Number of inter-packet intervals from which these statistics were derived.
    numIntervals :: (Core.Maybe Core.Int64),
    -- | The type of packets for which inter-packet intervals were computed.
    type' :: (Core.Maybe PacketIntervals_Type)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PacketIntervals' with the minimum fields required to make a request.
newPacketIntervals ::
  PacketIntervals
newPacketIntervals =
  PacketIntervals
    { avgMs = Core.Nothing,
      duration = Core.Nothing,
      maxMs = Core.Nothing,
      minMs = Core.Nothing,
      numIntervals = Core.Nothing,
      type' = Core.Nothing
    }

instance Core.FromJSON PacketIntervals where
  parseJSON =
    Core.withObject
      "PacketIntervals"
      ( \o ->
          PacketIntervals
            Core.<$> ( o Core..:? "avgMs"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "duration")
            Core.<*> ( o Core..:? "maxMs"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> ( o Core..:? "minMs"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> ( o Core..:? "numIntervals"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "type")
      )

instance Core.ToJSON PacketIntervals where
  toJSON PacketIntervals {..} =
    Core.object
      ( Core.catMaybes
          [ ("avgMs" Core..=) Core.. Core.AsText Core.<$> avgMs,
            ("duration" Core..=) Core.<$> duration,
            ("maxMs" Core..=) Core.. Core.AsText Core.<$> maxMs,
            ("minMs" Core..=) Core.. Core.AsText Core.<$> minMs,
            ("numIntervals" Core..=) Core.. Core.AsText
              Core.<$> numIntervals,
            ("type" Core..=) Core.<$> type'
          ]
      )

-- | Represents a Packet Mirroring resource. Packet Mirroring clones the traffic of specified instances in your Virtual Private Cloud (VPC) network and forwards it to a collector destination, such as an instance group of an internal TCP\/UDP load balancer, for analysis or examination. For more information about setting up Packet Mirroring, see Using Packet Mirroring.
--
-- /See:/ 'newPacketMirroring' smart constructor.
data PacketMirroring = PacketMirroring
  { -- | The Forwarding Rule resource of type loadBalancingScheme=INTERNAL that will be used as collector for mirrored traffic. The specified forwarding rule must have isMirroringCollector set to true.
    collectorIlb :: (Core.Maybe PacketMirroringForwardingRuleInfo),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | Indicates whether or not this packet mirroring takes effect. If set to FALSE, this packet mirroring policy will not be enforced on the network. The default is TRUE.
    enable :: (Core.Maybe PacketMirroring_Enable),
    -- | Filter for mirrored traffic. If unspecified, all traffic is mirrored.
    filter :: (Core.Maybe PacketMirroringFilter),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#packetMirroring for packet mirrorings.
    kind :: Core.Text,
    -- | PacketMirroring mirroredResourceInfos. MirroredResourceInfo specifies a set of mirrored VM instances, subnetworks and\/or tags for which traffic from\/to all VM instances will be mirrored.
    mirroredResources :: (Core.Maybe PacketMirroringMirroredResourceInfo),
    -- | Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | Specifies the mirrored VPC network. Only packets in this network will be mirrored. All mirrored VMs should have a NIC in the given network. All mirrored subnetworks should belong to the given network.
    network :: (Core.Maybe PacketMirroringNetworkInfo),
    -- | The priority of applying this configuration. Priority is used to break ties in cases where there is more than one matching rule. In the case of two rules that apply for a given Instance, the one with the lowest-numbered priority value wins. Default value is 1000. Valid range is 0 through 65535.
    priority :: (Core.Maybe Core.Word32),
    -- | [Output Only] URI of the region where the packetMirroring resides.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PacketMirroring' with the minimum fields required to make a request.
newPacketMirroring ::
  PacketMirroring
newPacketMirroring =
  PacketMirroring
    { collectorIlb = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      enable = Core.Nothing,
      filter = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#packetMirroring",
      mirroredResources = Core.Nothing,
      name = Core.Nothing,
      network = Core.Nothing,
      priority = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing
    }

instance Core.FromJSON PacketMirroring where
  parseJSON =
    Core.withObject
      "PacketMirroring"
      ( \o ->
          PacketMirroring
            Core.<$> (o Core..:? "collectorIlb")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "enable")
            Core.<*> (o Core..:? "filter")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#packetMirroring"
                     )
            Core.<*> (o Core..:? "mirroredResources")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "network")
            Core.<*> (o Core..:? "priority")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
      )

instance Core.ToJSON PacketMirroring where
  toJSON PacketMirroring {..} =
    Core.object
      ( Core.catMaybes
          [ ("collectorIlb" Core..=) Core.<$> collectorIlb,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("enable" Core..=) Core.<$> enable,
            ("filter" Core..=) Core.<$> filter,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("mirroredResources" Core..=)
              Core.<$> mirroredResources,
            ("name" Core..=) Core.<$> name,
            ("network" Core..=) Core.<$> network,
            ("priority" Core..=) Core.<$> priority,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink
          ]
      )

-- | Contains a list of packetMirrorings.
--
-- /See:/ 'newPacketMirroringAggregatedList' smart constructor.
data PacketMirroringAggregatedList = PacketMirroringAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of PacketMirroring resources.
    items :: (Core.Maybe PacketMirroringAggregatedList_Items),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe PacketMirroringAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PacketMirroringAggregatedList' with the minimum fields required to make a request.
newPacketMirroringAggregatedList ::
  PacketMirroringAggregatedList
newPacketMirroringAggregatedList =
  PacketMirroringAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#packetMirroringAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON PacketMirroringAggregatedList where
  parseJSON =
    Core.withObject
      "PacketMirroringAggregatedList"
      ( \o ->
          PacketMirroringAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#packetMirroringAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON PacketMirroringAggregatedList where
  toJSON PacketMirroringAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of PacketMirroring resources.
--
-- /See:/ 'newPacketMirroringAggregatedList_Items' smart constructor.
newtype PacketMirroringAggregatedList_Items = PacketMirroringAggregatedList_Items
  { -- | Name of the scope containing this set of packetMirrorings.
    additional :: (Core.HashMap Core.Text PacketMirroringsScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PacketMirroringAggregatedList_Items' with the minimum fields required to make a request.
newPacketMirroringAggregatedList_Items ::
  -- |  Name of the scope containing this set of packetMirrorings. See 'additional'.
  Core.HashMap Core.Text PacketMirroringsScopedList ->
  PacketMirroringAggregatedList_Items
newPacketMirroringAggregatedList_Items additional =
  PacketMirroringAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    PacketMirroringAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "PacketMirroringAggregatedList_Items"
      ( \o ->
          PacketMirroringAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    PacketMirroringAggregatedList_Items
  where
  toJSON PacketMirroringAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newPacketMirroringAggregatedList_Warning' smart constructor.
data PacketMirroringAggregatedList_Warning = PacketMirroringAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe PacketMirroringAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [PacketMirroringAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PacketMirroringAggregatedList_Warning' with the minimum fields required to make a request.
newPacketMirroringAggregatedList_Warning ::
  PacketMirroringAggregatedList_Warning
newPacketMirroringAggregatedList_Warning =
  PacketMirroringAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    PacketMirroringAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "PacketMirroringAggregatedList_Warning"
      ( \o ->
          PacketMirroringAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    PacketMirroringAggregatedList_Warning
  where
  toJSON PacketMirroringAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newPacketMirroringAggregatedList_Warning_DataItem' smart constructor.
data PacketMirroringAggregatedList_Warning_DataItem = PacketMirroringAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PacketMirroringAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newPacketMirroringAggregatedList_Warning_DataItem ::
  PacketMirroringAggregatedList_Warning_DataItem
newPacketMirroringAggregatedList_Warning_DataItem =
  PacketMirroringAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    PacketMirroringAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "PacketMirroringAggregatedList_Warning_DataItem"
      ( \o ->
          PacketMirroringAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    PacketMirroringAggregatedList_Warning_DataItem
  where
  toJSON
    PacketMirroringAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

--
-- /See:/ 'newPacketMirroringFilter' smart constructor.
data PacketMirroringFilter = PacketMirroringFilter
  { -- | Protocols that apply as filter on mirrored traffic. If no protocols are specified, all traffic that matches the specified CIDR ranges is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
    iPProtocols :: (Core.Maybe [Core.Text]),
    -- | IP CIDR ranges that apply as filter on the source (ingress) or destination (egress) IP in the IP header. Only IPv4 is supported. If no ranges are specified, all traffic that matches the specified IPProtocols is mirrored. If neither cidrRanges nor IPProtocols is specified, all traffic is mirrored.
    cidrRanges :: (Core.Maybe [Core.Text]),
    -- | Direction of traffic to mirror, either INGRESS, EGRESS, or BOTH. The default is BOTH.
    direction :: (Core.Maybe PacketMirroringFilter_Direction)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PacketMirroringFilter' with the minimum fields required to make a request.
newPacketMirroringFilter ::
  PacketMirroringFilter
newPacketMirroringFilter =
  PacketMirroringFilter
    { iPProtocols = Core.Nothing,
      cidrRanges = Core.Nothing,
      direction = Core.Nothing
    }

instance Core.FromJSON PacketMirroringFilter where
  parseJSON =
    Core.withObject
      "PacketMirroringFilter"
      ( \o ->
          PacketMirroringFilter
            Core.<$> (o Core..:? "IPProtocols")
            Core.<*> (o Core..:? "cidrRanges")
            Core.<*> (o Core..:? "direction")
      )

instance Core.ToJSON PacketMirroringFilter where
  toJSON PacketMirroringFilter {..} =
    Core.object
      ( Core.catMaybes
          [ ("IPProtocols" Core..=) Core.<$> iPProtocols,
            ("cidrRanges" Core..=) Core.<$> cidrRanges,
            ("direction" Core..=) Core.<$> direction
          ]
      )

--
-- /See:/ 'newPacketMirroringForwardingRuleInfo' smart constructor.
data PacketMirroringForwardingRuleInfo = PacketMirroringForwardingRuleInfo
  { -- | [Output Only] Unique identifier for the forwarding rule; defined by the server.
    canonicalUrl :: (Core.Maybe Core.Text),
    -- | Resource URL to the forwarding rule representing the ILB configured as destination of the mirrored traffic.
    url :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PacketMirroringForwardingRuleInfo' with the minimum fields required to make a request.
newPacketMirroringForwardingRuleInfo ::
  PacketMirroringForwardingRuleInfo
newPacketMirroringForwardingRuleInfo =
  PacketMirroringForwardingRuleInfo
    { canonicalUrl = Core.Nothing,
      url = Core.Nothing
    }

instance
  Core.FromJSON
    PacketMirroringForwardingRuleInfo
  where
  parseJSON =
    Core.withObject
      "PacketMirroringForwardingRuleInfo"
      ( \o ->
          PacketMirroringForwardingRuleInfo
            Core.<$> (o Core..:? "canonicalUrl")
            Core.<*> (o Core..:? "url")
      )

instance
  Core.ToJSON
    PacketMirroringForwardingRuleInfo
  where
  toJSON PacketMirroringForwardingRuleInfo {..} =
    Core.object
      ( Core.catMaybes
          [ ("canonicalUrl" Core..=) Core.<$> canonicalUrl,
            ("url" Core..=) Core.<$> url
          ]
      )

-- | Contains a list of PacketMirroring resources.
--
-- /See:/ 'newPacketMirroringList' smart constructor.
data PacketMirroringList = PacketMirroringList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of PacketMirroring resources.
    items :: (Core.Maybe [PacketMirroring]),
    -- | [Output Only] Type of resource. Always compute#packetMirroring for packetMirrorings.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe PacketMirroringList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PacketMirroringList' with the minimum fields required to make a request.
newPacketMirroringList ::
  PacketMirroringList
newPacketMirroringList =
  PacketMirroringList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#packetMirroringList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON PacketMirroringList where
  parseJSON =
    Core.withObject
      "PacketMirroringList"
      ( \o ->
          PacketMirroringList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#packetMirroringList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON PacketMirroringList where
  toJSON PacketMirroringList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newPacketMirroringList_Warning' smart constructor.
data PacketMirroringList_Warning = PacketMirroringList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe PacketMirroringList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [PacketMirroringList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PacketMirroringList_Warning' with the minimum fields required to make a request.
newPacketMirroringList_Warning ::
  PacketMirroringList_Warning
newPacketMirroringList_Warning =
  PacketMirroringList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON PacketMirroringList_Warning where
  parseJSON =
    Core.withObject
      "PacketMirroringList_Warning"
      ( \o ->
          PacketMirroringList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON PacketMirroringList_Warning where
  toJSON PacketMirroringList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newPacketMirroringList_Warning_DataItem' smart constructor.
data PacketMirroringList_Warning_DataItem = PacketMirroringList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PacketMirroringList_Warning_DataItem' with the minimum fields required to make a request.
newPacketMirroringList_Warning_DataItem ::
  PacketMirroringList_Warning_DataItem
newPacketMirroringList_Warning_DataItem =
  PacketMirroringList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    PacketMirroringList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "PacketMirroringList_Warning_DataItem"
      ( \o ->
          PacketMirroringList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    PacketMirroringList_Warning_DataItem
  where
  toJSON PacketMirroringList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newPacketMirroringMirroredResourceInfo' smart constructor.
data PacketMirroringMirroredResourceInfo = PacketMirroringMirroredResourceInfo
  { -- | A set of virtual machine instances that are being mirrored. They must live in zones contained in the same region as this packetMirroring. Note that this config will apply only to those network interfaces of the Instances that belong to the network specified in this packetMirroring. You may specify a maximum of 50 Instances.
    instances :: (Core.Maybe [PacketMirroringMirroredResourceInfoInstanceInfo]),
    -- | A set of subnetworks for which traffic from\/to all VM instances will be mirrored. They must live in the same region as this packetMirroring. You may specify a maximum of 5 subnetworks.
    subnetworks :: (Core.Maybe [PacketMirroringMirroredResourceInfoSubnetInfo]),
    -- | A set of mirrored tags. Traffic from\/to all VM instances that have one or more of these tags will be mirrored.
    tags :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PacketMirroringMirroredResourceInfo' with the minimum fields required to make a request.
newPacketMirroringMirroredResourceInfo ::
  PacketMirroringMirroredResourceInfo
newPacketMirroringMirroredResourceInfo =
  PacketMirroringMirroredResourceInfo
    { instances = Core.Nothing,
      subnetworks = Core.Nothing,
      tags = Core.Nothing
    }

instance
  Core.FromJSON
    PacketMirroringMirroredResourceInfo
  where
  parseJSON =
    Core.withObject
      "PacketMirroringMirroredResourceInfo"
      ( \o ->
          PacketMirroringMirroredResourceInfo
            Core.<$> (o Core..:? "instances")
            Core.<*> (o Core..:? "subnetworks")
            Core.<*> (o Core..:? "tags")
      )

instance
  Core.ToJSON
    PacketMirroringMirroredResourceInfo
  where
  toJSON PacketMirroringMirroredResourceInfo {..} =
    Core.object
      ( Core.catMaybes
          [ ("instances" Core..=) Core.<$> instances,
            ("subnetworks" Core..=) Core.<$> subnetworks,
            ("tags" Core..=) Core.<$> tags
          ]
      )

--
-- /See:/ 'newPacketMirroringMirroredResourceInfoInstanceInfo' smart constructor.
data PacketMirroringMirroredResourceInfoInstanceInfo = PacketMirroringMirroredResourceInfoInstanceInfo
  { -- | [Output Only] Unique identifier for the instance; defined by the server.
    canonicalUrl :: (Core.Maybe Core.Text),
    -- | Resource URL to the virtual machine instance which is being mirrored.
    url :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PacketMirroringMirroredResourceInfoInstanceInfo' with the minimum fields required to make a request.
newPacketMirroringMirroredResourceInfoInstanceInfo ::
  PacketMirroringMirroredResourceInfoInstanceInfo
newPacketMirroringMirroredResourceInfoInstanceInfo =
  PacketMirroringMirroredResourceInfoInstanceInfo
    { canonicalUrl = Core.Nothing,
      url = Core.Nothing
    }

instance
  Core.FromJSON
    PacketMirroringMirroredResourceInfoInstanceInfo
  where
  parseJSON =
    Core.withObject
      "PacketMirroringMirroredResourceInfoInstanceInfo"
      ( \o ->
          PacketMirroringMirroredResourceInfoInstanceInfo
            Core.<$> (o Core..:? "canonicalUrl")
              Core.<*> (o Core..:? "url")
      )

instance
  Core.ToJSON
    PacketMirroringMirroredResourceInfoInstanceInfo
  where
  toJSON
    PacketMirroringMirroredResourceInfoInstanceInfo {..} =
      Core.object
        ( Core.catMaybes
            [ ("canonicalUrl" Core..=) Core.<$> canonicalUrl,
              ("url" Core..=) Core.<$> url
            ]
        )

--
-- /See:/ 'newPacketMirroringMirroredResourceInfoSubnetInfo' smart constructor.
data PacketMirroringMirroredResourceInfoSubnetInfo = PacketMirroringMirroredResourceInfoSubnetInfo
  { -- | [Output Only] Unique identifier for the subnetwork; defined by the server.
    canonicalUrl :: (Core.Maybe Core.Text),
    -- | Resource URL to the subnetwork for which traffic from\/to all VM instances will be mirrored.
    url :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PacketMirroringMirroredResourceInfoSubnetInfo' with the minimum fields required to make a request.
newPacketMirroringMirroredResourceInfoSubnetInfo ::
  PacketMirroringMirroredResourceInfoSubnetInfo
newPacketMirroringMirroredResourceInfoSubnetInfo =
  PacketMirroringMirroredResourceInfoSubnetInfo
    { canonicalUrl = Core.Nothing,
      url = Core.Nothing
    }

instance
  Core.FromJSON
    PacketMirroringMirroredResourceInfoSubnetInfo
  where
  parseJSON =
    Core.withObject
      "PacketMirroringMirroredResourceInfoSubnetInfo"
      ( \o ->
          PacketMirroringMirroredResourceInfoSubnetInfo
            Core.<$> (o Core..:? "canonicalUrl")
              Core.<*> (o Core..:? "url")
      )

instance
  Core.ToJSON
    PacketMirroringMirroredResourceInfoSubnetInfo
  where
  toJSON
    PacketMirroringMirroredResourceInfoSubnetInfo {..} =
      Core.object
        ( Core.catMaybes
            [ ("canonicalUrl" Core..=) Core.<$> canonicalUrl,
              ("url" Core..=) Core.<$> url
            ]
        )

--
-- /See:/ 'newPacketMirroringNetworkInfo' smart constructor.
data PacketMirroringNetworkInfo = PacketMirroringNetworkInfo
  { -- | [Output Only] Unique identifier for the network; defined by the server.
    canonicalUrl :: (Core.Maybe Core.Text),
    -- | URL of the network resource.
    url :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PacketMirroringNetworkInfo' with the minimum fields required to make a request.
newPacketMirroringNetworkInfo ::
  PacketMirroringNetworkInfo
newPacketMirroringNetworkInfo =
  PacketMirroringNetworkInfo {canonicalUrl = Core.Nothing, url = Core.Nothing}

instance Core.FromJSON PacketMirroringNetworkInfo where
  parseJSON =
    Core.withObject
      "PacketMirroringNetworkInfo"
      ( \o ->
          PacketMirroringNetworkInfo
            Core.<$> (o Core..:? "canonicalUrl")
            Core.<*> (o Core..:? "url")
      )

instance Core.ToJSON PacketMirroringNetworkInfo where
  toJSON PacketMirroringNetworkInfo {..} =
    Core.object
      ( Core.catMaybes
          [ ("canonicalUrl" Core..=) Core.<$> canonicalUrl,
            ("url" Core..=) Core.<$> url
          ]
      )

--
-- /See:/ 'newPacketMirroringsScopedList' smart constructor.
data PacketMirroringsScopedList = PacketMirroringsScopedList
  { -- | A list of packetMirrorings contained in this scope.
    packetMirrorings :: (Core.Maybe [PacketMirroring]),
    -- | Informational warning which replaces the list of packetMirrorings when the list is empty.
    warning :: (Core.Maybe PacketMirroringsScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PacketMirroringsScopedList' with the minimum fields required to make a request.
newPacketMirroringsScopedList ::
  PacketMirroringsScopedList
newPacketMirroringsScopedList =
  PacketMirroringsScopedList
    { packetMirrorings = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON PacketMirroringsScopedList where
  parseJSON =
    Core.withObject
      "PacketMirroringsScopedList"
      ( \o ->
          PacketMirroringsScopedList
            Core.<$> (o Core..:? "packetMirrorings")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON PacketMirroringsScopedList where
  toJSON PacketMirroringsScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("packetMirrorings" Core..=)
              Core.<$> packetMirrorings,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of packetMirrorings when the list is empty.
--
-- /See:/ 'newPacketMirroringsScopedList_Warning' smart constructor.
data PacketMirroringsScopedList_Warning = PacketMirroringsScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe PacketMirroringsScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [PacketMirroringsScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PacketMirroringsScopedList_Warning' with the minimum fields required to make a request.
newPacketMirroringsScopedList_Warning ::
  PacketMirroringsScopedList_Warning
newPacketMirroringsScopedList_Warning =
  PacketMirroringsScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    PacketMirroringsScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "PacketMirroringsScopedList_Warning"
      ( \o ->
          PacketMirroringsScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    PacketMirroringsScopedList_Warning
  where
  toJSON PacketMirroringsScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newPacketMirroringsScopedList_Warning_DataItem' smart constructor.
data PacketMirroringsScopedList_Warning_DataItem = PacketMirroringsScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PacketMirroringsScopedList_Warning_DataItem' with the minimum fields required to make a request.
newPacketMirroringsScopedList_Warning_DataItem ::
  PacketMirroringsScopedList_Warning_DataItem
newPacketMirroringsScopedList_Warning_DataItem =
  PacketMirroringsScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    PacketMirroringsScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "PacketMirroringsScopedList_Warning_DataItem"
      ( \o ->
          PacketMirroringsScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    PacketMirroringsScopedList_Warning_DataItem
  where
  toJSON
    PacketMirroringsScopedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | A matcher for the path portion of the URL. The BackendService from the longest-matched rule will serve the URL. If no rule was matched, the default service is used.
--
-- /See:/ 'newPathMatcher' smart constructor.
data PathMatcher = PathMatcher
  { -- | defaultRouteAction takes effect when none of the pathRules or routeRules match. The load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices. Only one of defaultRouteAction or defaultUrlRedirect must be set. URL maps for Classic external HTTP(S) load balancers only support the urlRewrite action within a path matcher\'s defaultRouteAction.
    defaultRouteAction :: (Core.Maybe HttpRouteAction),
    -- | The full or partial URL to the BackendService resource. This URL is used if none of the pathRules or routeRules defined by this PathMatcher are matched. For example, the following are all valid URLs to a BackendService resource: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project \/global\/backendServices\/backendService - compute\/v1\/projects\/project\/global\/backendServices\/backendService - global\/backendServices\/backendService If defaultRouteAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if defaultRouteAction specifies any weightedBackendServices, defaultService must not be specified. Only one of defaultService, defaultUrlRedirect , or defaultRouteAction.weightedBackendService must be set. Authorization requires one or more of the following Google IAM permissions on the specified resource
    -- default_service: - compute.backendBuckets.use - compute.backendServices.use
    defaultService :: (Core.Maybe Core.Text),
    -- | When none of the specified pathRules or routeRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set. Not supported when the URL map is bound to a target gRPC proxy.
    defaultUrlRedirect :: (Core.Maybe HttpRedirectAction),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | Specifies changes to request and response headers that need to take effect for the selected backend service. HeaderAction specified here are applied after the matching HttpRouteRule HeaderAction and before the HeaderAction in the UrlMap HeaderAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
    headerAction :: (Core.Maybe HttpHeaderAction),
    -- | The name to which this PathMatcher is referred by the HostRule.
    name :: (Core.Maybe Core.Text),
    -- | The list of path rules. Use this list instead of routeRules when routing based on simple path matching is all that\'s required. The order by which path rules are specified does not matter. Matches are always done on the longest-path-first basis. For example: a pathRule with a path \/a\/b\/c\/* will match before \/a\/b\/* irrespective of the order in which those paths appear in this list. Within a given pathMatcher, only one of pathRules or routeRules must be set.
    pathRules :: (Core.Maybe [PathRule]),
    -- | The list of HTTP route rules. Use this list instead of pathRules when advanced route matching and routing actions are desired. routeRules are evaluated in order of priority, from the lowest to highest number. Within a given pathMatcher, you can set only one of pathRules or routeRules.
    routeRules :: (Core.Maybe [HttpRouteRule])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PathMatcher' with the minimum fields required to make a request.
newPathMatcher ::
  PathMatcher
newPathMatcher =
  PathMatcher
    { defaultRouteAction = Core.Nothing,
      defaultService = Core.Nothing,
      defaultUrlRedirect = Core.Nothing,
      description = Core.Nothing,
      headerAction = Core.Nothing,
      name = Core.Nothing,
      pathRules = Core.Nothing,
      routeRules = Core.Nothing
    }

instance Core.FromJSON PathMatcher where
  parseJSON =
    Core.withObject
      "PathMatcher"
      ( \o ->
          PathMatcher
            Core.<$> (o Core..:? "defaultRouteAction")
            Core.<*> (o Core..:? "defaultService")
            Core.<*> (o Core..:? "defaultUrlRedirect")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "headerAction")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "pathRules")
            Core.<*> (o Core..:? "routeRules")
      )

instance Core.ToJSON PathMatcher where
  toJSON PathMatcher {..} =
    Core.object
      ( Core.catMaybes
          [ ("defaultRouteAction" Core..=)
              Core.<$> defaultRouteAction,
            ("defaultService" Core..=) Core.<$> defaultService,
            ("defaultUrlRedirect" Core..=)
              Core.<$> defaultUrlRedirect,
            ("description" Core..=) Core.<$> description,
            ("headerAction" Core..=) Core.<$> headerAction,
            ("name" Core..=) Core.<$> name,
            ("pathRules" Core..=) Core.<$> pathRules,
            ("routeRules" Core..=) Core.<$> routeRules
          ]
      )

-- | A path-matching rule for a URL. If matched, will use the specified BackendService to handle the traffic arriving at this URL.
--
-- /See:/ 'newPathRule' smart constructor.
data PathRule = PathRule
  { -- | The list of path patterns to match. Each must start with \/ and the only place a * is allowed is at the end following a \/. The string fed to the path matcher does not include any text after the first ? or #, and those chars are not allowed here.
    paths :: (Core.Maybe [Core.Text]),
    -- | In response to a matching path, the load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the selected backend. If routeAction specifies any weightedBackendServices, service must not be set. Conversely if service is set, routeAction cannot contain any weightedBackendServices. Only one of routeAction or urlRedirect must be set. URL maps for Classic external HTTP(S) load balancers only support the urlRewrite action within a path rule\'s routeAction.
    routeAction :: (Core.Maybe HttpRouteAction),
    -- | The full or partial URL of the backend service resource to which traffic is directed if this rule is matched. If routeAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if service is specified, routeAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of urlRedirect, service or routeAction.weightedBackendService must be set.
    service :: (Core.Maybe Core.Text),
    -- | When a path pattern is matched, the request is redirected to a URL specified by urlRedirect. If urlRedirect is specified, service or routeAction must not be set. Not supported when the URL map is bound to a target gRPC proxy.
    urlRedirect :: (Core.Maybe HttpRedirectAction)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PathRule' with the minimum fields required to make a request.
newPathRule ::
  PathRule
newPathRule =
  PathRule
    { paths = Core.Nothing,
      routeAction = Core.Nothing,
      service = Core.Nothing,
      urlRedirect = Core.Nothing
    }

instance Core.FromJSON PathRule where
  parseJSON =
    Core.withObject
      "PathRule"
      ( \o ->
          PathRule
            Core.<$> (o Core..:? "paths")
            Core.<*> (o Core..:? "routeAction")
            Core.<*> (o Core..:? "service")
            Core.<*> (o Core..:? "urlRedirect")
      )

instance Core.ToJSON PathRule where
  toJSON PathRule {..} =
    Core.object
      ( Core.catMaybes
          [ ("paths" Core..=) Core.<$> paths,
            ("routeAction" Core..=) Core.<$> routeAction,
            ("service" Core..=) Core.<$> service,
            ("urlRedirect" Core..=) Core.<$> urlRedirect
          ]
      )

--
-- /See:/ 'newPerInstanceConfig' smart constructor.
data PerInstanceConfig = PerInstanceConfig
  { -- | Fingerprint of this per-instance config. This field can be used in optimistic locking. It is ignored when inserting a per-instance config. An up-to-date fingerprint must be provided in order to update an existing per-instance configuration or the field needs to be unset.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | The name of a per-instance configuration and its corresponding instance. Serves as a merge key during UpdatePerInstanceConfigs operations, that is, if a per-instance configuration with the same name exists then it will be updated, otherwise a new one will be created for the VM instance with the same name. An attempt to create a per-instance configconfiguration for a VM instance that either doesn\'t exist or is not part of the group will result in an error.
    name :: (Core.Maybe Core.Text),
    -- | The intended preserved state for the given instance. Does not contain preserved state generated from a stateful policy.
    preservedState :: (Core.Maybe PreservedState),
    -- | The status of applying this per-instance configuration on the corresponding managed instance.
    status :: (Core.Maybe PerInstanceConfig_Status)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PerInstanceConfig' with the minimum fields required to make a request.
newPerInstanceConfig ::
  PerInstanceConfig
newPerInstanceConfig =
  PerInstanceConfig
    { fingerprint = Core.Nothing,
      name = Core.Nothing,
      preservedState = Core.Nothing,
      status = Core.Nothing
    }

instance Core.FromJSON PerInstanceConfig where
  parseJSON =
    Core.withObject
      "PerInstanceConfig"
      ( \o ->
          PerInstanceConfig
            Core.<$> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "preservedState")
            Core.<*> (o Core..:? "status")
      )

instance Core.ToJSON PerInstanceConfig where
  toJSON PerInstanceConfig {..} =
    Core.object
      ( Core.catMaybes
          [ ("fingerprint" Core..=) Core.<$> fingerprint,
            ("name" Core..=) Core.<$> name,
            ("preservedState" Core..=) Core.<$> preservedState,
            ("status" Core..=) Core.<$> status
          ]
      )

-- | An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A @Policy@ is a collection of @bindings@. A @binding@ binds one or more @members@, or principals, to a single @role@. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A @role@ is a named list of permissions; each @role@ can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a @binding@ can also specify a @condition@, which is a logical expression that allows access to a resource only if the expression evaluates to @true@. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the <https://cloud.google.com/iam/help/conditions/resource-policies IAM documentation>. __JSON example:__ { \"bindings\": [ { \"role\": \"roles\/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike\@example.com\",
-- \"group:admins\@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id\@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles\/resourcemanager.organizationViewer\", \"members\": [ \"user:eve\@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time \< timestamp(\'2020-10-01T00:00:00.000Z\')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } __YAML example:__ bindings: - members: - user:mike\@example.com - group:admins\@example.com - domain:google.com - serviceAccount:my-project-id\@appspot.gserviceaccount.com role: roles\/resourcemanager.organizationAdmin - members: - user:eve\@example.com role: roles\/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time \< timestamp(\'2020-10-01T00:00:00.000Z\') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the
-- <https://cloud.google.com/iam/docs/ IAM documentation>.
--
-- /See:/ 'newPolicy' smart constructor.
data Policy = Policy
  { -- | Specifies cloud audit logging configuration for this policy.
    auditConfigs :: (Core.Maybe [AuditConfig]),
    -- | Associates a list of @members@, or principals, with a @role@. Optionally, may specify a @condition@ that determines how and when the @bindings@ are applied. Each of the @bindings@ must contain at least one principal. The @bindings@ in a @Policy@ can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the @bindings@ grant 50 different roles to @user:alice\@example.com@, and not to any other principal, then you can add another 1,450 principals to the @bindings@ in the @Policy@.
    bindings :: (Core.Maybe [Binding]),
    -- | @etag@ is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the @etag@ in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An @etag@ is returned in the response to @getIamPolicy@, and systems are expected to put that etag in the request to @setIamPolicy@ to ensure that their change will be applied to the same version of the policy. __Important:__ If you use IAM Conditions, you must include the @etag@ field whenever you call @setIamPolicy@. If you omit this field, then IAM allows you to overwrite a version @3@ policy with a version @1@ policy, and all of the conditions in the version @3@ policy are lost.
    etag :: (Core.Maybe Core.Base64),
    -- | This is deprecated and has no effect. Do not use.
    rules :: (Core.Maybe [Rule]),
    -- | Specifies the format of the policy. Valid values are @0@, @1@, and @3@. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version @3@. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions __Important:__ If you use IAM Conditions, you must include the @etag@ field whenever you call @setIamPolicy@. If you omit this field, then IAM allows you to overwrite a version @3@ policy with a version @1@ policy, and all of the conditions in the version @3@ policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the
    -- <https://cloud.google.com/iam/help/conditions/resource-policies IAM documentation>.
    version :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Policy' with the minimum fields required to make a request.
newPolicy ::
  Policy
newPolicy =
  Policy
    { auditConfigs = Core.Nothing,
      bindings = Core.Nothing,
      etag = Core.Nothing,
      rules = Core.Nothing,
      version = Core.Nothing
    }

instance Core.FromJSON Policy where
  parseJSON =
    Core.withObject
      "Policy"
      ( \o ->
          Policy
            Core.<$> (o Core..:? "auditConfigs")
            Core.<*> (o Core..:? "bindings")
            Core.<*> (o Core..:? "etag")
            Core.<*> (o Core..:? "rules")
            Core.<*> (o Core..:? "version")
      )

instance Core.ToJSON Policy where
  toJSON Policy {..} =
    Core.object
      ( Core.catMaybes
          [ ("auditConfigs" Core..=) Core.<$> auditConfigs,
            ("bindings" Core..=) Core.<$> bindings,
            ("etag" Core..=) Core.<$> etag,
            ("rules" Core..=) Core.<$> rules,
            ("version" Core..=) Core.<$> version
          ]
      )

--
-- /See:/ 'newPreconfiguredWafSet' smart constructor.
newtype PreconfiguredWafSet = PreconfiguredWafSet
  { -- | List of entities that are currently supported for WAF rules.
    expressionSets :: (Core.Maybe [WafExpressionSet])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PreconfiguredWafSet' with the minimum fields required to make a request.
newPreconfiguredWafSet ::
  PreconfiguredWafSet
newPreconfiguredWafSet = PreconfiguredWafSet {expressionSets = Core.Nothing}

instance Core.FromJSON PreconfiguredWafSet where
  parseJSON =
    Core.withObject
      "PreconfiguredWafSet"
      ( \o ->
          PreconfiguredWafSet
            Core.<$> (o Core..:? "expressionSets")
      )

instance Core.ToJSON PreconfiguredWafSet where
  toJSON PreconfiguredWafSet {..} =
    Core.object
      ( Core.catMaybes
          [("expressionSets" Core..=) Core.<$> expressionSets]
      )

-- | Preserved state for a given instance.
--
-- /See:/ 'newPreservedState' smart constructor.
data PreservedState = PreservedState
  { -- | Preserved disks defined for this instance. This map is keyed with the device names of the disks.
    disks :: (Core.Maybe PreservedState_Disks),
    -- | Preserved metadata defined for this instance.
    metadata :: (Core.Maybe PreservedState_Metadata)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PreservedState' with the minimum fields required to make a request.
newPreservedState ::
  PreservedState
newPreservedState =
  PreservedState {disks = Core.Nothing, metadata = Core.Nothing}

instance Core.FromJSON PreservedState where
  parseJSON =
    Core.withObject
      "PreservedState"
      ( \o ->
          PreservedState
            Core.<$> (o Core..:? "disks")
            Core.<*> (o Core..:? "metadata")
      )

instance Core.ToJSON PreservedState where
  toJSON PreservedState {..} =
    Core.object
      ( Core.catMaybes
          [ ("disks" Core..=) Core.<$> disks,
            ("metadata" Core..=) Core.<$> metadata
          ]
      )

-- | Preserved disks defined for this instance. This map is keyed with the device names of the disks.
--
-- /See:/ 'newPreservedState_Disks' smart constructor.
newtype PreservedState_Disks = PreservedState_Disks
  { -- |
    additional :: (Core.HashMap Core.Text PreservedStatePreservedDisk)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PreservedState_Disks' with the minimum fields required to make a request.
newPreservedState_Disks ::
  -- |  See 'additional'.
  Core.HashMap Core.Text PreservedStatePreservedDisk ->
  PreservedState_Disks
newPreservedState_Disks additional =
  PreservedState_Disks {additional = additional}

instance Core.FromJSON PreservedState_Disks where
  parseJSON =
    Core.withObject
      "PreservedState_Disks"
      ( \o ->
          PreservedState_Disks
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON PreservedState_Disks where
  toJSON PreservedState_Disks {..} =
    Core.toJSON additional

-- | Preserved metadata defined for this instance.
--
-- /See:/ 'newPreservedState_Metadata' smart constructor.
newtype PreservedState_Metadata = PreservedState_Metadata
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PreservedState_Metadata' with the minimum fields required to make a request.
newPreservedState_Metadata ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  PreservedState_Metadata
newPreservedState_Metadata additional =
  PreservedState_Metadata {additional = additional}

instance Core.FromJSON PreservedState_Metadata where
  parseJSON =
    Core.withObject
      "PreservedState_Metadata"
      ( \o ->
          PreservedState_Metadata
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON PreservedState_Metadata where
  toJSON PreservedState_Metadata {..} =
    Core.toJSON additional

--
-- /See:/ 'newPreservedStatePreservedDisk' smart constructor.
data PreservedStatePreservedDisk = PreservedStatePreservedDisk
  { -- | These stateful disks will never be deleted during autohealing, update, instance recreate operations. This flag is used to configure if the disk should be deleted after it is no longer used by the group, e.g. when the given instance or the whole MIG is deleted. Note: disks attached in READ_ONLY mode cannot be auto-deleted.
    autoDelete :: (Core.Maybe PreservedStatePreservedDisk_AutoDelete),
    -- | The mode in which to attach this disk, either READ/WRITE or READ/ONLY. If not specified, the default is to attach the disk in READ_WRITE mode.
    mode :: (Core.Maybe PreservedStatePreservedDisk_Mode),
    -- | The URL of the disk resource that is stateful and should be attached to the VM instance.
    source :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PreservedStatePreservedDisk' with the minimum fields required to make a request.
newPreservedStatePreservedDisk ::
  PreservedStatePreservedDisk
newPreservedStatePreservedDisk =
  PreservedStatePreservedDisk
    { autoDelete = Core.Nothing,
      mode = Core.Nothing,
      source = Core.Nothing
    }

instance Core.FromJSON PreservedStatePreservedDisk where
  parseJSON =
    Core.withObject
      "PreservedStatePreservedDisk"
      ( \o ->
          PreservedStatePreservedDisk
            Core.<$> (o Core..:? "autoDelete")
            Core.<*> (o Core..:? "mode")
            Core.<*> (o Core..:? "source")
      )

instance Core.ToJSON PreservedStatePreservedDisk where
  toJSON PreservedStatePreservedDisk {..} =
    Core.object
      ( Core.catMaybes
          [ ("autoDelete" Core..=) Core.<$> autoDelete,
            ("mode" Core..=) Core.<$> mode,
            ("source" Core..=) Core.<$> source
          ]
      )

-- | Represents a Project resource. A project is used to organize resources in a Google Cloud Platform environment. For more information, read about the Resource Hierarchy.
--
-- /See:/ 'newProject' smart constructor.
data Project = Project
  { -- | Metadata key\/value pairs available to all instances contained in this project. See Custom metadata for more information.
    commonInstanceMetadata :: (Core.Maybe Metadata),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | This signifies the default network tier used for configuring resources of the project and can only take the following values: PREMIUM, STANDARD. Initially the default network tier is PREMIUM.
    defaultNetworkTier :: (Core.Maybe Project_DefaultNetworkTier),
    -- | [Output Only] Default service account used by VMs running in this project.
    defaultServiceAccount :: (Core.Maybe Core.Text),
    -- | An optional textual description of the resource.
    description :: (Core.Maybe Core.Text),
    -- | Restricted features enabled for use on this project.
    enabledFeatures :: (Core.Maybe [Core.Text]),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server. This is /not/ the project ID, and is just a unique ID used by Compute Engine to identify resources.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#project for projects.
    kind :: Core.Text,
    -- | The project ID. For example: my-example-project. Use the project ID to make requests to Compute Engine.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] Quotas assigned to this project.
    quotas :: (Core.Maybe [Quota]),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | The naming prefix for daily usage reports and the Google Cloud Storage bucket where they are stored.
    usageExportLocation :: (Core.Maybe UsageExportLocation),
    -- | [Output Only] Default internal DNS setting used by VMs running in this project.
    vmDnsSetting :: (Core.Maybe Project_VmDnsSetting),
    -- | [Output Only] The role this project has in a shared VPC configuration. Currently, only projects with the host role, which is specified by the value HOST, are differentiated.
    xpnProjectStatus :: (Core.Maybe Project_XpnProjectStatus)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Project' with the minimum fields required to make a request.
newProject ::
  Project
newProject =
  Project
    { commonInstanceMetadata = Core.Nothing,
      creationTimestamp = Core.Nothing,
      defaultNetworkTier = Core.Nothing,
      defaultServiceAccount = Core.Nothing,
      description = Core.Nothing,
      enabledFeatures = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#project",
      name = Core.Nothing,
      quotas = Core.Nothing,
      selfLink = Core.Nothing,
      usageExportLocation = Core.Nothing,
      vmDnsSetting = Core.Nothing,
      xpnProjectStatus = Core.Nothing
    }

instance Core.FromJSON Project where
  parseJSON =
    Core.withObject
      "Project"
      ( \o ->
          Project
            Core.<$> (o Core..:? "commonInstanceMetadata")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "defaultNetworkTier")
            Core.<*> (o Core..:? "defaultServiceAccount")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "enabledFeatures")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#project")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "quotas")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "usageExportLocation")
            Core.<*> (o Core..:? "vmDnsSetting")
            Core.<*> (o Core..:? "xpnProjectStatus")
      )

instance Core.ToJSON Project where
  toJSON Project {..} =
    Core.object
      ( Core.catMaybes
          [ ("commonInstanceMetadata" Core..=)
              Core.<$> commonInstanceMetadata,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("defaultNetworkTier" Core..=)
              Core.<$> defaultNetworkTier,
            ("defaultServiceAccount" Core..=)
              Core.<$> defaultServiceAccount,
            ("description" Core..=) Core.<$> description,
            ("enabledFeatures" Core..=) Core.<$> enabledFeatures,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("quotas" Core..=) Core.<$> quotas,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("usageExportLocation" Core..=)
              Core.<$> usageExportLocation,
            ("vmDnsSetting" Core..=) Core.<$> vmDnsSetting,
            ("xpnProjectStatus" Core..=)
              Core.<$> xpnProjectStatus
          ]
      )

--
-- /See:/ 'newProjectsDisableXpnResourceRequest' smart constructor.
newtype ProjectsDisableXpnResourceRequest = ProjectsDisableXpnResourceRequest
  { -- | Service resource (a.k.a service project) ID.
    xpnResource :: (Core.Maybe XpnResourceId)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ProjectsDisableXpnResourceRequest' with the minimum fields required to make a request.
newProjectsDisableXpnResourceRequest ::
  ProjectsDisableXpnResourceRequest
newProjectsDisableXpnResourceRequest =
  ProjectsDisableXpnResourceRequest {xpnResource = Core.Nothing}

instance
  Core.FromJSON
    ProjectsDisableXpnResourceRequest
  where
  parseJSON =
    Core.withObject
      "ProjectsDisableXpnResourceRequest"
      ( \o ->
          ProjectsDisableXpnResourceRequest
            Core.<$> (o Core..:? "xpnResource")
      )

instance
  Core.ToJSON
    ProjectsDisableXpnResourceRequest
  where
  toJSON ProjectsDisableXpnResourceRequest {..} =
    Core.object
      ( Core.catMaybes
          [("xpnResource" Core..=) Core.<$> xpnResource]
      )

--
-- /See:/ 'newProjectsEnableXpnResourceRequest' smart constructor.
newtype ProjectsEnableXpnResourceRequest = ProjectsEnableXpnResourceRequest
  { -- | Service resource (a.k.a service project) ID.
    xpnResource :: (Core.Maybe XpnResourceId)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ProjectsEnableXpnResourceRequest' with the minimum fields required to make a request.
newProjectsEnableXpnResourceRequest ::
  ProjectsEnableXpnResourceRequest
newProjectsEnableXpnResourceRequest =
  ProjectsEnableXpnResourceRequest {xpnResource = Core.Nothing}

instance
  Core.FromJSON
    ProjectsEnableXpnResourceRequest
  where
  parseJSON =
    Core.withObject
      "ProjectsEnableXpnResourceRequest"
      ( \o ->
          ProjectsEnableXpnResourceRequest
            Core.<$> (o Core..:? "xpnResource")
      )

instance Core.ToJSON ProjectsEnableXpnResourceRequest where
  toJSON ProjectsEnableXpnResourceRequest {..} =
    Core.object
      ( Core.catMaybes
          [("xpnResource" Core..=) Core.<$> xpnResource]
      )

--
-- /See:/ 'newProjectsGetXpnResources' smart constructor.
data ProjectsGetXpnResources = ProjectsGetXpnResources
  { -- | [Output Only] Type of resource. Always compute#projectsGetXpnResources for lists of service resources (a.k.a service projects)
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | Service resources (a.k.a service projects) attached to this project as their shared VPC host.
    resources :: (Core.Maybe [XpnResourceId])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ProjectsGetXpnResources' with the minimum fields required to make a request.
newProjectsGetXpnResources ::
  ProjectsGetXpnResources
newProjectsGetXpnResources =
  ProjectsGetXpnResources
    { kind = "compute#projectsGetXpnResources",
      nextPageToken = Core.Nothing,
      resources = Core.Nothing
    }

instance Core.FromJSON ProjectsGetXpnResources where
  parseJSON =
    Core.withObject
      "ProjectsGetXpnResources"
      ( \o ->
          ProjectsGetXpnResources
            Core.<$> ( o Core..:? "kind"
                         Core..!= "compute#projectsGetXpnResources"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "resources")
      )

instance Core.ToJSON ProjectsGetXpnResources where
  toJSON ProjectsGetXpnResources {..} =
    Core.object
      ( Core.catMaybes
          [ Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("resources" Core..=) Core.<$> resources
          ]
      )

--
-- /See:/ 'newProjectsListXpnHostsRequest' smart constructor.
newtype ProjectsListXpnHostsRequest = ProjectsListXpnHostsRequest
  { -- | Optional organization ID managed by Cloud Resource Manager, for which to list shared VPC host projects. If not specified, the organization will be inferred from the project.
    organization :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ProjectsListXpnHostsRequest' with the minimum fields required to make a request.
newProjectsListXpnHostsRequest ::
  ProjectsListXpnHostsRequest
newProjectsListXpnHostsRequest =
  ProjectsListXpnHostsRequest {organization = Core.Nothing}

instance Core.FromJSON ProjectsListXpnHostsRequest where
  parseJSON =
    Core.withObject
      "ProjectsListXpnHostsRequest"
      ( \o ->
          ProjectsListXpnHostsRequest
            Core.<$> (o Core..:? "organization")
      )

instance Core.ToJSON ProjectsListXpnHostsRequest where
  toJSON ProjectsListXpnHostsRequest {..} =
    Core.object
      ( Core.catMaybes
          [("organization" Core..=) Core.<$> organization]
      )

--
-- /See:/ 'newProjectsSetDefaultNetworkTierRequest' smart constructor.
newtype ProjectsSetDefaultNetworkTierRequest = ProjectsSetDefaultNetworkTierRequest
  { -- | Default network tier to be set.
    networkTier :: (Core.Maybe ProjectsSetDefaultNetworkTierRequest_NetworkTier)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ProjectsSetDefaultNetworkTierRequest' with the minimum fields required to make a request.
newProjectsSetDefaultNetworkTierRequest ::
  ProjectsSetDefaultNetworkTierRequest
newProjectsSetDefaultNetworkTierRequest =
  ProjectsSetDefaultNetworkTierRequest {networkTier = Core.Nothing}

instance
  Core.FromJSON
    ProjectsSetDefaultNetworkTierRequest
  where
  parseJSON =
    Core.withObject
      "ProjectsSetDefaultNetworkTierRequest"
      ( \o ->
          ProjectsSetDefaultNetworkTierRequest
            Core.<$> (o Core..:? "networkTier")
      )

instance
  Core.ToJSON
    ProjectsSetDefaultNetworkTierRequest
  where
  toJSON ProjectsSetDefaultNetworkTierRequest {..} =
    Core.object
      ( Core.catMaybes
          [("networkTier" Core..=) Core.<$> networkTier]
      )

-- | A public advertised prefix represents an aggregated IP prefix or netblock which customers bring to cloud. The IP prefix is a single unit of route advertisement and is announced globally to the internet.
--
-- /See:/ 'newPublicAdvertisedPrefix' smart constructor.
data PublicAdvertisedPrefix = PublicAdvertisedPrefix
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | The IPv4 address to be used for reverse DNS verification.
    dnsVerificationIp :: (Core.Maybe Core.Text),
    -- | Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a new PublicAdvertisedPrefix. An up-to-date fingerprint must be provided in order to update the PublicAdvertisedPrefix, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a PublicAdvertisedPrefix.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | [Output Only] The unique identifier for the resource type. The server generates this identifier.
    id :: (Core.Maybe Core.Word64),
    -- | The IPv4 address range, in CIDR format, represented by this public advertised prefix.
    ipCidrRange :: (Core.Maybe Core.Text),
    -- | [Output Only] Type of the resource. Always compute#publicAdvertisedPrefix for public advertised prefixes.
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] The list of public delegated prefixes that exist for this public advertised prefix.
    publicDelegatedPrefixs :: (Core.Maybe [PublicAdvertisedPrefixPublicDelegatedPrefix]),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] The shared secret to be used for reverse DNS verification.
    sharedSecret :: (Core.Maybe Core.Text),
    -- | The status of the public advertised prefix. Possible values include: - @INITIAL@: RPKI validation is complete. - @PTR_CONFIGURED@: User has configured the PTR. - @VALIDATED@: Reverse DNS lookup is successful. - @REVERSE_DNS_LOOKUP_FAILED@: Reverse DNS lookup failed. - @PREFIX_CONFIGURATION_IN_PROGRESS@: The prefix is being configured. - @PREFIX_CONFIGURATION_COMPLETE@: The prefix is fully configured. - @PREFIX_REMOVAL_IN_PROGRESS@: The prefix is being removed.
    status :: (Core.Maybe PublicAdvertisedPrefix_Status)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PublicAdvertisedPrefix' with the minimum fields required to make a request.
newPublicAdvertisedPrefix ::
  PublicAdvertisedPrefix
newPublicAdvertisedPrefix =
  PublicAdvertisedPrefix
    { creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      dnsVerificationIp = Core.Nothing,
      fingerprint = Core.Nothing,
      id = Core.Nothing,
      ipCidrRange = Core.Nothing,
      kind = "compute#publicAdvertisedPrefix",
      name = Core.Nothing,
      publicDelegatedPrefixs = Core.Nothing,
      selfLink = Core.Nothing,
      sharedSecret = Core.Nothing,
      status = Core.Nothing
    }

instance Core.FromJSON PublicAdvertisedPrefix where
  parseJSON =
    Core.withObject
      "PublicAdvertisedPrefix"
      ( \o ->
          PublicAdvertisedPrefix
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "dnsVerificationIp")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "ipCidrRange")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#publicAdvertisedPrefix"
                     )
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "publicDelegatedPrefixs")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "sharedSecret")
            Core.<*> (o Core..:? "status")
      )

instance Core.ToJSON PublicAdvertisedPrefix where
  toJSON PublicAdvertisedPrefix {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("dnsVerificationIp" Core..=)
              Core.<$> dnsVerificationIp,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("ipCidrRange" Core..=) Core.<$> ipCidrRange,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("publicDelegatedPrefixs" Core..=)
              Core.<$> publicDelegatedPrefixs,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("sharedSecret" Core..=) Core.<$> sharedSecret,
            ("status" Core..=) Core.<$> status
          ]
      )

--
-- /See:/ 'newPublicAdvertisedPrefixList' smart constructor.
data PublicAdvertisedPrefixList = PublicAdvertisedPrefixList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of PublicAdvertisedPrefix resources.
    items :: (Core.Maybe [PublicAdvertisedPrefix]),
    -- | [Output Only] Type of the resource. Always compute#publicAdvertisedPrefix for public advertised prefixes.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe PublicAdvertisedPrefixList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PublicAdvertisedPrefixList' with the minimum fields required to make a request.
newPublicAdvertisedPrefixList ::
  PublicAdvertisedPrefixList
newPublicAdvertisedPrefixList =
  PublicAdvertisedPrefixList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#publicAdvertisedPrefixList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON PublicAdvertisedPrefixList where
  parseJSON =
    Core.withObject
      "PublicAdvertisedPrefixList"
      ( \o ->
          PublicAdvertisedPrefixList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#publicAdvertisedPrefixList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON PublicAdvertisedPrefixList where
  toJSON PublicAdvertisedPrefixList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newPublicAdvertisedPrefixList_Warning' smart constructor.
data PublicAdvertisedPrefixList_Warning = PublicAdvertisedPrefixList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe PublicAdvertisedPrefixList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [PublicAdvertisedPrefixList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PublicAdvertisedPrefixList_Warning' with the minimum fields required to make a request.
newPublicAdvertisedPrefixList_Warning ::
  PublicAdvertisedPrefixList_Warning
newPublicAdvertisedPrefixList_Warning =
  PublicAdvertisedPrefixList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    PublicAdvertisedPrefixList_Warning
  where
  parseJSON =
    Core.withObject
      "PublicAdvertisedPrefixList_Warning"
      ( \o ->
          PublicAdvertisedPrefixList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    PublicAdvertisedPrefixList_Warning
  where
  toJSON PublicAdvertisedPrefixList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newPublicAdvertisedPrefixList_Warning_DataItem' smart constructor.
data PublicAdvertisedPrefixList_Warning_DataItem = PublicAdvertisedPrefixList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PublicAdvertisedPrefixList_Warning_DataItem' with the minimum fields required to make a request.
newPublicAdvertisedPrefixList_Warning_DataItem ::
  PublicAdvertisedPrefixList_Warning_DataItem
newPublicAdvertisedPrefixList_Warning_DataItem =
  PublicAdvertisedPrefixList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    PublicAdvertisedPrefixList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "PublicAdvertisedPrefixList_Warning_DataItem"
      ( \o ->
          PublicAdvertisedPrefixList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    PublicAdvertisedPrefixList_Warning_DataItem
  where
  toJSON
    PublicAdvertisedPrefixList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | Represents a CIDR range which can be used to assign addresses.
--
-- /See:/ 'newPublicAdvertisedPrefixPublicDelegatedPrefix' smart constructor.
data PublicAdvertisedPrefixPublicDelegatedPrefix = PublicAdvertisedPrefixPublicDelegatedPrefix
  { -- | The IP address range of the public delegated prefix
    ipRange :: (Core.Maybe Core.Text),
    -- | The name of the public delegated prefix
    name :: (Core.Maybe Core.Text),
    -- | The project number of the public delegated prefix
    project :: (Core.Maybe Core.Text),
    -- | The region of the public delegated prefix if it is regional. If absent, the prefix is global.
    region :: (Core.Maybe Core.Text),
    -- | The status of the public delegated prefix. Possible values are: INITIALIZING: The public delegated prefix is being initialized and addresses cannot be created yet. ANNOUNCED: The public delegated prefix is active.
    status :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PublicAdvertisedPrefixPublicDelegatedPrefix' with the minimum fields required to make a request.
newPublicAdvertisedPrefixPublicDelegatedPrefix ::
  PublicAdvertisedPrefixPublicDelegatedPrefix
newPublicAdvertisedPrefixPublicDelegatedPrefix =
  PublicAdvertisedPrefixPublicDelegatedPrefix
    { ipRange = Core.Nothing,
      name = Core.Nothing,
      project = Core.Nothing,
      region = Core.Nothing,
      status = Core.Nothing
    }

instance
  Core.FromJSON
    PublicAdvertisedPrefixPublicDelegatedPrefix
  where
  parseJSON =
    Core.withObject
      "PublicAdvertisedPrefixPublicDelegatedPrefix"
      ( \o ->
          PublicAdvertisedPrefixPublicDelegatedPrefix
            Core.<$> (o Core..:? "ipRange")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "project")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "status")
      )

instance
  Core.ToJSON
    PublicAdvertisedPrefixPublicDelegatedPrefix
  where
  toJSON
    PublicAdvertisedPrefixPublicDelegatedPrefix {..} =
      Core.object
        ( Core.catMaybes
            [ ("ipRange" Core..=) Core.<$> ipRange,
              ("name" Core..=) Core.<$> name,
              ("project" Core..=) Core.<$> project,
              ("region" Core..=) Core.<$> region,
              ("status" Core..=) Core.<$> status
            ]
        )

-- | A PublicDelegatedPrefix resource represents an IP block within a PublicAdvertisedPrefix that is configured within a single cloud scope (global or region). IPs in the block can be allocated to resources within that scope. Public delegated prefixes may be further broken up into smaller IP blocks in the same scope as the parent block.
--
-- /See:/ 'newPublicDelegatedPrefix' smart constructor.
data PublicDelegatedPrefix = PublicDelegatedPrefix
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a new PublicDelegatedPrefix. An up-to-date fingerprint must be provided in order to update the PublicDelegatedPrefix, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a PublicDelegatedPrefix.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | [Output Only] The unique identifier for the resource type. The server generates this identifier.
    id :: (Core.Maybe Core.Word64),
    -- | The IPv4 address range, in CIDR format, represented by this public delegated prefix.
    ipCidrRange :: (Core.Maybe Core.Text),
    -- | If true, the prefix will be live migrated.
    isLiveMigration :: (Core.Maybe Core.Bool),
    -- | [Output Only] Type of the resource. Always compute#publicDelegatedPrefix for public delegated prefixes.
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | The URL of parent prefix. Either PublicAdvertisedPrefix or PublicDelegatedPrefix.
    parentPrefix :: (Core.Maybe Core.Text),
    -- | The list of sub public delegated prefixes that exist for this public delegated prefix.
    publicDelegatedSubPrefixs :: (Core.Maybe [PublicDelegatedPrefixPublicDelegatedSubPrefix]),
    -- | [Output Only] URL of the region where the public delegated prefix resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] The status of the public delegated prefix, which can be one of following values: - @INITIALIZING@ The public delegated prefix is being initialized and addresses cannot be created yet. - @READY_TO_ANNOUNCE@ The public delegated prefix is a live migration prefix and is active. - @ANNOUNCED@ The public delegated prefix is active. - @DELETING@ The public delegated prefix is being deprovsioned.
    status :: (Core.Maybe PublicDelegatedPrefix_Status)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PublicDelegatedPrefix' with the minimum fields required to make a request.
newPublicDelegatedPrefix ::
  PublicDelegatedPrefix
newPublicDelegatedPrefix =
  PublicDelegatedPrefix
    { creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      fingerprint = Core.Nothing,
      id = Core.Nothing,
      ipCidrRange = Core.Nothing,
      isLiveMigration = Core.Nothing,
      kind = "compute#publicDelegatedPrefix",
      name = Core.Nothing,
      parentPrefix = Core.Nothing,
      publicDelegatedSubPrefixs = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      status = Core.Nothing
    }

instance Core.FromJSON PublicDelegatedPrefix where
  parseJSON =
    Core.withObject
      "PublicDelegatedPrefix"
      ( \o ->
          PublicDelegatedPrefix
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "ipCidrRange")
            Core.<*> (o Core..:? "isLiveMigration")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#publicDelegatedPrefix"
                     )
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "parentPrefix")
            Core.<*> (o Core..:? "publicDelegatedSubPrefixs")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "status")
      )

instance Core.ToJSON PublicDelegatedPrefix where
  toJSON PublicDelegatedPrefix {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("ipCidrRange" Core..=) Core.<$> ipCidrRange,
            ("isLiveMigration" Core..=) Core.<$> isLiveMigration,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("parentPrefix" Core..=) Core.<$> parentPrefix,
            ("publicDelegatedSubPrefixs" Core..=)
              Core.<$> publicDelegatedSubPrefixs,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("status" Core..=) Core.<$> status
          ]
      )

--
-- /See:/ 'newPublicDelegatedPrefixAggregatedList' smart constructor.
data PublicDelegatedPrefixAggregatedList = PublicDelegatedPrefixAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of PublicDelegatedPrefixesScopedList resources.
    items :: (Core.Maybe PublicDelegatedPrefixAggregatedList_Items),
    -- | [Output Only] Type of the resource. Always compute#publicDelegatedPrefixAggregatedList for aggregated lists of public delegated prefixes.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe PublicDelegatedPrefixAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PublicDelegatedPrefixAggregatedList' with the minimum fields required to make a request.
newPublicDelegatedPrefixAggregatedList ::
  PublicDelegatedPrefixAggregatedList
newPublicDelegatedPrefixAggregatedList =
  PublicDelegatedPrefixAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#publicDelegatedPrefixAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance
  Core.FromJSON
    PublicDelegatedPrefixAggregatedList
  where
  parseJSON =
    Core.withObject
      "PublicDelegatedPrefixAggregatedList"
      ( \o ->
          PublicDelegatedPrefixAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#publicDelegatedPrefixAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance
  Core.ToJSON
    PublicDelegatedPrefixAggregatedList
  where
  toJSON PublicDelegatedPrefixAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of PublicDelegatedPrefixesScopedList resources.
--
-- /See:/ 'newPublicDelegatedPrefixAggregatedList_Items' smart constructor.
newtype PublicDelegatedPrefixAggregatedList_Items = PublicDelegatedPrefixAggregatedList_Items
  { -- | [Output Only] Name of the scope containing this set of PublicDelegatedPrefixes.
    additional :: (Core.HashMap Core.Text PublicDelegatedPrefixesScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PublicDelegatedPrefixAggregatedList_Items' with the minimum fields required to make a request.
newPublicDelegatedPrefixAggregatedList_Items ::
  -- |  [Output Only] Name of the scope containing this set of PublicDelegatedPrefixes. See 'additional'.
  Core.HashMap Core.Text PublicDelegatedPrefixesScopedList ->
  PublicDelegatedPrefixAggregatedList_Items
newPublicDelegatedPrefixAggregatedList_Items additional =
  PublicDelegatedPrefixAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    PublicDelegatedPrefixAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "PublicDelegatedPrefixAggregatedList_Items"
      ( \o ->
          PublicDelegatedPrefixAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    PublicDelegatedPrefixAggregatedList_Items
  where
  toJSON PublicDelegatedPrefixAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newPublicDelegatedPrefixAggregatedList_Warning' smart constructor.
data PublicDelegatedPrefixAggregatedList_Warning = PublicDelegatedPrefixAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe PublicDelegatedPrefixAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [PublicDelegatedPrefixAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PublicDelegatedPrefixAggregatedList_Warning' with the minimum fields required to make a request.
newPublicDelegatedPrefixAggregatedList_Warning ::
  PublicDelegatedPrefixAggregatedList_Warning
newPublicDelegatedPrefixAggregatedList_Warning =
  PublicDelegatedPrefixAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    PublicDelegatedPrefixAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "PublicDelegatedPrefixAggregatedList_Warning"
      ( \o ->
          PublicDelegatedPrefixAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    PublicDelegatedPrefixAggregatedList_Warning
  where
  toJSON
    PublicDelegatedPrefixAggregatedList_Warning {..} =
      Core.object
        ( Core.catMaybes
            [ ("code" Core..=) Core.<$> code,
              ("data" Core..=) Core.<$> data',
              ("message" Core..=) Core.<$> message
            ]
        )

--
-- /See:/ 'newPublicDelegatedPrefixAggregatedList_Warning_DataItem' smart constructor.
data PublicDelegatedPrefixAggregatedList_Warning_DataItem = PublicDelegatedPrefixAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PublicDelegatedPrefixAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newPublicDelegatedPrefixAggregatedList_Warning_DataItem ::
  PublicDelegatedPrefixAggregatedList_Warning_DataItem
newPublicDelegatedPrefixAggregatedList_Warning_DataItem =
  PublicDelegatedPrefixAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    PublicDelegatedPrefixAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "PublicDelegatedPrefixAggregatedList_Warning_DataItem"
      ( \o ->
          PublicDelegatedPrefixAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    PublicDelegatedPrefixAggregatedList_Warning_DataItem
  where
  toJSON
    PublicDelegatedPrefixAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

--
-- /See:/ 'newPublicDelegatedPrefixList' smart constructor.
data PublicDelegatedPrefixList = PublicDelegatedPrefixList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of PublicDelegatedPrefix resources.
    items :: (Core.Maybe [PublicDelegatedPrefix]),
    -- | [Output Only] Type of the resource. Always compute#publicDelegatedPrefixList for public delegated prefixes.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe PublicDelegatedPrefixList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PublicDelegatedPrefixList' with the minimum fields required to make a request.
newPublicDelegatedPrefixList ::
  PublicDelegatedPrefixList
newPublicDelegatedPrefixList =
  PublicDelegatedPrefixList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#publicDelegatedPrefixList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON PublicDelegatedPrefixList where
  parseJSON =
    Core.withObject
      "PublicDelegatedPrefixList"
      ( \o ->
          PublicDelegatedPrefixList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#publicDelegatedPrefixList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON PublicDelegatedPrefixList where
  toJSON PublicDelegatedPrefixList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newPublicDelegatedPrefixList_Warning' smart constructor.
data PublicDelegatedPrefixList_Warning = PublicDelegatedPrefixList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe PublicDelegatedPrefixList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [PublicDelegatedPrefixList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PublicDelegatedPrefixList_Warning' with the minimum fields required to make a request.
newPublicDelegatedPrefixList_Warning ::
  PublicDelegatedPrefixList_Warning
newPublicDelegatedPrefixList_Warning =
  PublicDelegatedPrefixList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    PublicDelegatedPrefixList_Warning
  where
  parseJSON =
    Core.withObject
      "PublicDelegatedPrefixList_Warning"
      ( \o ->
          PublicDelegatedPrefixList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    PublicDelegatedPrefixList_Warning
  where
  toJSON PublicDelegatedPrefixList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newPublicDelegatedPrefixList_Warning_DataItem' smart constructor.
data PublicDelegatedPrefixList_Warning_DataItem = PublicDelegatedPrefixList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PublicDelegatedPrefixList_Warning_DataItem' with the minimum fields required to make a request.
newPublicDelegatedPrefixList_Warning_DataItem ::
  PublicDelegatedPrefixList_Warning_DataItem
newPublicDelegatedPrefixList_Warning_DataItem =
  PublicDelegatedPrefixList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    PublicDelegatedPrefixList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "PublicDelegatedPrefixList_Warning_DataItem"
      ( \o ->
          PublicDelegatedPrefixList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    PublicDelegatedPrefixList_Warning_DataItem
  where
  toJSON PublicDelegatedPrefixList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Represents a sub PublicDelegatedPrefix.
--
-- /See:/ 'newPublicDelegatedPrefixPublicDelegatedSubPrefix' smart constructor.
data PublicDelegatedPrefixPublicDelegatedSubPrefix = PublicDelegatedPrefixPublicDelegatedSubPrefix
  { -- | Name of the project scoping this PublicDelegatedSubPrefix.
    delegateeProject :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | The IPv4 address range, in CIDR format, represented by this sub public delegated prefix.
    ipCidrRange :: (Core.Maybe Core.Text),
    -- | Whether the sub prefix is delegated to create Address resources in the delegatee project.
    isAddress :: (Core.Maybe Core.Bool),
    -- | The name of the sub public delegated prefix.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] The region of the sub public delegated prefix if it is regional. If absent, the sub prefix is global.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] The status of the sub public delegated prefix.
    status :: (Core.Maybe PublicDelegatedPrefixPublicDelegatedSubPrefix_Status)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PublicDelegatedPrefixPublicDelegatedSubPrefix' with the minimum fields required to make a request.
newPublicDelegatedPrefixPublicDelegatedSubPrefix ::
  PublicDelegatedPrefixPublicDelegatedSubPrefix
newPublicDelegatedPrefixPublicDelegatedSubPrefix =
  PublicDelegatedPrefixPublicDelegatedSubPrefix
    { delegateeProject = Core.Nothing,
      description = Core.Nothing,
      ipCidrRange = Core.Nothing,
      isAddress = Core.Nothing,
      name = Core.Nothing,
      region = Core.Nothing,
      status = Core.Nothing
    }

instance
  Core.FromJSON
    PublicDelegatedPrefixPublicDelegatedSubPrefix
  where
  parseJSON =
    Core.withObject
      "PublicDelegatedPrefixPublicDelegatedSubPrefix"
      ( \o ->
          PublicDelegatedPrefixPublicDelegatedSubPrefix
            Core.<$> (o Core..:? "delegateeProject")
              Core.<*> (o Core..:? "description")
              Core.<*> (o Core..:? "ipCidrRange")
              Core.<*> (o Core..:? "isAddress")
              Core.<*> (o Core..:? "name")
              Core.<*> (o Core..:? "region")
              Core.<*> (o Core..:? "status")
      )

instance
  Core.ToJSON
    PublicDelegatedPrefixPublicDelegatedSubPrefix
  where
  toJSON
    PublicDelegatedPrefixPublicDelegatedSubPrefix {..} =
      Core.object
        ( Core.catMaybes
            [ ("delegateeProject" Core..=)
                Core.<$> delegateeProject,
              ("description" Core..=) Core.<$> description,
              ("ipCidrRange" Core..=) Core.<$> ipCidrRange,
              ("isAddress" Core..=) Core.<$> isAddress,
              ("name" Core..=) Core.<$> name,
              ("region" Core..=) Core.<$> region,
              ("status" Core..=) Core.<$> status
            ]
        )

--
-- /See:/ 'newPublicDelegatedPrefixesScopedList' smart constructor.
data PublicDelegatedPrefixesScopedList = PublicDelegatedPrefixesScopedList
  { -- | [Output Only] A list of PublicDelegatedPrefixes contained in this scope.
    publicDelegatedPrefixes :: (Core.Maybe [PublicDelegatedPrefix]),
    -- | [Output Only] Informational warning which replaces the list of public delegated prefixes when the list is empty.
    warning :: (Core.Maybe PublicDelegatedPrefixesScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PublicDelegatedPrefixesScopedList' with the minimum fields required to make a request.
newPublicDelegatedPrefixesScopedList ::
  PublicDelegatedPrefixesScopedList
newPublicDelegatedPrefixesScopedList =
  PublicDelegatedPrefixesScopedList
    { publicDelegatedPrefixes = Core.Nothing,
      warning = Core.Nothing
    }

instance
  Core.FromJSON
    PublicDelegatedPrefixesScopedList
  where
  parseJSON =
    Core.withObject
      "PublicDelegatedPrefixesScopedList"
      ( \o ->
          PublicDelegatedPrefixesScopedList
            Core.<$> (o Core..:? "publicDelegatedPrefixes")
            Core.<*> (o Core..:? "warning")
      )

instance
  Core.ToJSON
    PublicDelegatedPrefixesScopedList
  where
  toJSON PublicDelegatedPrefixesScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("publicDelegatedPrefixes" Core..=)
              Core.<$> publicDelegatedPrefixes,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning which replaces the list of public delegated prefixes when the list is empty.
--
-- /See:/ 'newPublicDelegatedPrefixesScopedList_Warning' smart constructor.
data PublicDelegatedPrefixesScopedList_Warning = PublicDelegatedPrefixesScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe PublicDelegatedPrefixesScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [PublicDelegatedPrefixesScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PublicDelegatedPrefixesScopedList_Warning' with the minimum fields required to make a request.
newPublicDelegatedPrefixesScopedList_Warning ::
  PublicDelegatedPrefixesScopedList_Warning
newPublicDelegatedPrefixesScopedList_Warning =
  PublicDelegatedPrefixesScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    PublicDelegatedPrefixesScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "PublicDelegatedPrefixesScopedList_Warning"
      ( \o ->
          PublicDelegatedPrefixesScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    PublicDelegatedPrefixesScopedList_Warning
  where
  toJSON PublicDelegatedPrefixesScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newPublicDelegatedPrefixesScopedList_Warning_DataItem' smart constructor.
data PublicDelegatedPrefixesScopedList_Warning_DataItem = PublicDelegatedPrefixesScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'PublicDelegatedPrefixesScopedList_Warning_DataItem' with the minimum fields required to make a request.
newPublicDelegatedPrefixesScopedList_Warning_DataItem ::
  PublicDelegatedPrefixesScopedList_Warning_DataItem
newPublicDelegatedPrefixesScopedList_Warning_DataItem =
  PublicDelegatedPrefixesScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    PublicDelegatedPrefixesScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "PublicDelegatedPrefixesScopedList_Warning_DataItem"
      ( \o ->
          PublicDelegatedPrefixesScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    PublicDelegatedPrefixesScopedList_Warning_DataItem
  where
  toJSON
    PublicDelegatedPrefixesScopedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | A quotas entry.
--
-- /See:/ 'newQuota' smart constructor.
data Quota = Quota
  { -- | [Output Only] Quota limit for this metric.
    limit :: (Core.Maybe Core.Double),
    -- | [Output Only] Name of the quota metric.
    metric :: (Core.Maybe Quota_Metric),
    -- | [Output Only] Owning resource. This is the resource on which this quota is applied.
    owner :: (Core.Maybe Core.Text),
    -- | [Output Only] Current usage of this metric.
    usage :: (Core.Maybe Core.Double)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Quota' with the minimum fields required to make a request.
newQuota ::
  Quota
newQuota =
  Quota
    { limit = Core.Nothing,
      metric = Core.Nothing,
      owner = Core.Nothing,
      usage = Core.Nothing
    }

instance Core.FromJSON Quota where
  parseJSON =
    Core.withObject
      "Quota"
      ( \o ->
          Quota
            Core.<$> (o Core..:? "limit")
            Core.<*> (o Core..:? "metric")
            Core.<*> (o Core..:? "owner")
            Core.<*> (o Core..:? "usage")
      )

instance Core.ToJSON Quota where
  toJSON Quota {..} =
    Core.object
      ( Core.catMaybes
          [ ("limit" Core..=) Core.<$> limit,
            ("metric" Core..=) Core.<$> metric,
            ("owner" Core..=) Core.<$> owner,
            ("usage" Core..=) Core.<$> usage
          ]
      )

-- | Additional details for quota exceeded error for resource quota.
--
-- /See:/ 'newQuotaExceededInfo' smart constructor.
data QuotaExceededInfo = QuotaExceededInfo
  { -- | The map holding related quota dimensions.
    dimensions :: (Core.Maybe QuotaExceededInfo_Dimensions),
    -- | Current effective quota limit. The limit\'s unit depends on the quota type or metric.
    limit :: (Core.Maybe Core.Double),
    -- | The name of the quota limit.
    limitName :: (Core.Maybe Core.Text),
    -- | The Compute Engine quota metric name.
    metricName :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'QuotaExceededInfo' with the minimum fields required to make a request.
newQuotaExceededInfo ::
  QuotaExceededInfo
newQuotaExceededInfo =
  QuotaExceededInfo
    { dimensions = Core.Nothing,
      limit = Core.Nothing,
      limitName = Core.Nothing,
      metricName = Core.Nothing
    }

instance Core.FromJSON QuotaExceededInfo where
  parseJSON =
    Core.withObject
      "QuotaExceededInfo"
      ( \o ->
          QuotaExceededInfo
            Core.<$> (o Core..:? "dimensions")
            Core.<*> (o Core..:? "limit")
            Core.<*> (o Core..:? "limitName")
            Core.<*> (o Core..:? "metricName")
      )

instance Core.ToJSON QuotaExceededInfo where
  toJSON QuotaExceededInfo {..} =
    Core.object
      ( Core.catMaybes
          [ ("dimensions" Core..=) Core.<$> dimensions,
            ("limit" Core..=) Core.<$> limit,
            ("limitName" Core..=) Core.<$> limitName,
            ("metricName" Core..=) Core.<$> metricName
          ]
      )

-- | The map holding related quota dimensions.
--
-- /See:/ 'newQuotaExceededInfo_Dimensions' smart constructor.
newtype QuotaExceededInfo_Dimensions = QuotaExceededInfo_Dimensions
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'QuotaExceededInfo_Dimensions' with the minimum fields required to make a request.
newQuotaExceededInfo_Dimensions ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  QuotaExceededInfo_Dimensions
newQuotaExceededInfo_Dimensions additional =
  QuotaExceededInfo_Dimensions {additional = additional}

instance Core.FromJSON QuotaExceededInfo_Dimensions where
  parseJSON =
    Core.withObject
      "QuotaExceededInfo_Dimensions"
      ( \o ->
          QuotaExceededInfo_Dimensions
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON QuotaExceededInfo_Dimensions where
  toJSON QuotaExceededInfo_Dimensions {..} =
    Core.toJSON additional

-- | Represents a reference to a resource.
--
-- /See:/ 'newReference' smart constructor.
data Reference = Reference
  { -- | [Output Only] Type of the resource. Always compute#reference for references.
    kind :: Core.Text,
    -- | A description of the reference type with no implied semantics. Possible values include: 1. MEMBER_OF
    referenceType :: (Core.Maybe Core.Text),
    -- | URL of the resource which refers to the target.
    referrer :: (Core.Maybe Core.Text),
    -- | URL of the resource to which this reference points.
    target :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Reference' with the minimum fields required to make a request.
newReference ::
  Reference
newReference =
  Reference
    { kind = "compute#reference",
      referenceType = Core.Nothing,
      referrer = Core.Nothing,
      target = Core.Nothing
    }

instance Core.FromJSON Reference where
  parseJSON =
    Core.withObject
      "Reference"
      ( \o ->
          Reference
            Core.<$> (o Core..:? "kind" Core..!= "compute#reference")
            Core.<*> (o Core..:? "referenceType")
            Core.<*> (o Core..:? "referrer")
            Core.<*> (o Core..:? "target")
      )

instance Core.ToJSON Reference where
  toJSON Reference {..} =
    Core.object
      ( Core.catMaybes
          [ Core.Just ("kind" Core..= kind),
            ("referenceType" Core..=) Core.<$> referenceType,
            ("referrer" Core..=) Core.<$> referrer,
            ("target" Core..=) Core.<$> target
          ]
      )

-- | Represents a Region resource. A region is a geographical area where a resource is located. For more information, read Regions and Zones.
--
-- /See:/ 'newRegion' smart constructor.
data Region = Region
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | [Output Only] The deprecation status associated with this region.
    deprecated :: (Core.Maybe DeprecationStatus),
    -- | [Output Only] Textual description of the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#region for regions.
    kind :: Core.Text,
    -- | [Output Only] Name of the resource.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] Quotas assigned to this region.
    quotas :: (Core.Maybe [Quota]),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Status of the region, either UP or DOWN.
    status :: (Core.Maybe Region_Status),
    -- | [Output Only] Reserved for future use.
    supportsPzs :: (Core.Maybe Core.Bool),
    -- | [Output Only] A list of zones available in this region, in the form of resource URLs.
    zones :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Region' with the minimum fields required to make a request.
newRegion ::
  Region
newRegion =
  Region
    { creationTimestamp = Core.Nothing,
      deprecated = Core.Nothing,
      description = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#region",
      name = Core.Nothing,
      quotas = Core.Nothing,
      selfLink = Core.Nothing,
      status = Core.Nothing,
      supportsPzs = Core.Nothing,
      zones = Core.Nothing
    }

instance Core.FromJSON Region where
  parseJSON =
    Core.withObject
      "Region"
      ( \o ->
          Region
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "deprecated")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#region")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "quotas")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "status")
            Core.<*> (o Core..:? "supportsPzs")
            Core.<*> (o Core..:? "zones")
      )

instance Core.ToJSON Region where
  toJSON Region {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("deprecated" Core..=) Core.<$> deprecated,
            ("description" Core..=) Core.<$> description,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("quotas" Core..=) Core.<$> quotas,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("status" Core..=) Core.<$> status,
            ("supportsPzs" Core..=) Core.<$> supportsPzs,
            ("zones" Core..=) Core.<$> zones
          ]
      )

-- | Contains a list of autoscalers.
--
-- /See:/ 'newRegionAutoscalerList' smart constructor.
data RegionAutoscalerList = RegionAutoscalerList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of Autoscaler resources.
    items :: (Core.Maybe [Autoscaler]),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe RegionAutoscalerList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionAutoscalerList' with the minimum fields required to make a request.
newRegionAutoscalerList ::
  RegionAutoscalerList
newRegionAutoscalerList =
  RegionAutoscalerList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#regionAutoscalerList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON RegionAutoscalerList where
  parseJSON =
    Core.withObject
      "RegionAutoscalerList"
      ( \o ->
          RegionAutoscalerList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#regionAutoscalerList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON RegionAutoscalerList where
  toJSON RegionAutoscalerList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newRegionAutoscalerList_Warning' smart constructor.
data RegionAutoscalerList_Warning = RegionAutoscalerList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe RegionAutoscalerList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [RegionAutoscalerList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionAutoscalerList_Warning' with the minimum fields required to make a request.
newRegionAutoscalerList_Warning ::
  RegionAutoscalerList_Warning
newRegionAutoscalerList_Warning =
  RegionAutoscalerList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON RegionAutoscalerList_Warning where
  parseJSON =
    Core.withObject
      "RegionAutoscalerList_Warning"
      ( \o ->
          RegionAutoscalerList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON RegionAutoscalerList_Warning where
  toJSON RegionAutoscalerList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newRegionAutoscalerList_Warning_DataItem' smart constructor.
data RegionAutoscalerList_Warning_DataItem = RegionAutoscalerList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionAutoscalerList_Warning_DataItem' with the minimum fields required to make a request.
newRegionAutoscalerList_Warning_DataItem ::
  RegionAutoscalerList_Warning_DataItem
newRegionAutoscalerList_Warning_DataItem =
  RegionAutoscalerList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    RegionAutoscalerList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "RegionAutoscalerList_Warning_DataItem"
      ( \o ->
          RegionAutoscalerList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    RegionAutoscalerList_Warning_DataItem
  where
  toJSON RegionAutoscalerList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newRegionDiskTypeList' smart constructor.
data RegionDiskTypeList = RegionDiskTypeList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of DiskType resources.
    items :: (Core.Maybe [DiskType]),
    -- | [Output Only] Type of resource. Always compute#regionDiskTypeList for region disk types.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe RegionDiskTypeList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionDiskTypeList' with the minimum fields required to make a request.
newRegionDiskTypeList ::
  RegionDiskTypeList
newRegionDiskTypeList =
  RegionDiskTypeList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#regionDiskTypeList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON RegionDiskTypeList where
  parseJSON =
    Core.withObject
      "RegionDiskTypeList"
      ( \o ->
          RegionDiskTypeList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#regionDiskTypeList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON RegionDiskTypeList where
  toJSON RegionDiskTypeList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newRegionDiskTypeList_Warning' smart constructor.
data RegionDiskTypeList_Warning = RegionDiskTypeList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe RegionDiskTypeList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [RegionDiskTypeList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionDiskTypeList_Warning' with the minimum fields required to make a request.
newRegionDiskTypeList_Warning ::
  RegionDiskTypeList_Warning
newRegionDiskTypeList_Warning =
  RegionDiskTypeList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON RegionDiskTypeList_Warning where
  parseJSON =
    Core.withObject
      "RegionDiskTypeList_Warning"
      ( \o ->
          RegionDiskTypeList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON RegionDiskTypeList_Warning where
  toJSON RegionDiskTypeList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newRegionDiskTypeList_Warning_DataItem' smart constructor.
data RegionDiskTypeList_Warning_DataItem = RegionDiskTypeList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionDiskTypeList_Warning_DataItem' with the minimum fields required to make a request.
newRegionDiskTypeList_Warning_DataItem ::
  RegionDiskTypeList_Warning_DataItem
newRegionDiskTypeList_Warning_DataItem =
  RegionDiskTypeList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    RegionDiskTypeList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "RegionDiskTypeList_Warning_DataItem"
      ( \o ->
          RegionDiskTypeList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    RegionDiskTypeList_Warning_DataItem
  where
  toJSON RegionDiskTypeList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newRegionDisksAddResourcePoliciesRequest' smart constructor.
newtype RegionDisksAddResourcePoliciesRequest = RegionDisksAddResourcePoliciesRequest
  { -- | Resource policies to be added to this disk.
    resourcePolicies :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionDisksAddResourcePoliciesRequest' with the minimum fields required to make a request.
newRegionDisksAddResourcePoliciesRequest ::
  RegionDisksAddResourcePoliciesRequest
newRegionDisksAddResourcePoliciesRequest =
  RegionDisksAddResourcePoliciesRequest {resourcePolicies = Core.Nothing}

instance
  Core.FromJSON
    RegionDisksAddResourcePoliciesRequest
  where
  parseJSON =
    Core.withObject
      "RegionDisksAddResourcePoliciesRequest"
      ( \o ->
          RegionDisksAddResourcePoliciesRequest
            Core.<$> (o Core..:? "resourcePolicies")
      )

instance
  Core.ToJSON
    RegionDisksAddResourcePoliciesRequest
  where
  toJSON RegionDisksAddResourcePoliciesRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("resourcePolicies" Core..=)
              Core.<$> resourcePolicies
          ]
      )

--
-- /See:/ 'newRegionDisksRemoveResourcePoliciesRequest' smart constructor.
newtype RegionDisksRemoveResourcePoliciesRequest = RegionDisksRemoveResourcePoliciesRequest
  { -- | Resource policies to be removed from this disk.
    resourcePolicies :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionDisksRemoveResourcePoliciesRequest' with the minimum fields required to make a request.
newRegionDisksRemoveResourcePoliciesRequest ::
  RegionDisksRemoveResourcePoliciesRequest
newRegionDisksRemoveResourcePoliciesRequest =
  RegionDisksRemoveResourcePoliciesRequest {resourcePolicies = Core.Nothing}

instance
  Core.FromJSON
    RegionDisksRemoveResourcePoliciesRequest
  where
  parseJSON =
    Core.withObject
      "RegionDisksRemoveResourcePoliciesRequest"
      ( \o ->
          RegionDisksRemoveResourcePoliciesRequest
            Core.<$> (o Core..:? "resourcePolicies")
      )

instance
  Core.ToJSON
    RegionDisksRemoveResourcePoliciesRequest
  where
  toJSON RegionDisksRemoveResourcePoliciesRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("resourcePolicies" Core..=)
              Core.<$> resourcePolicies
          ]
      )

--
-- /See:/ 'newRegionDisksResizeRequest' smart constructor.
newtype RegionDisksResizeRequest = RegionDisksResizeRequest
  { -- | The new size of the regional persistent disk, which is specified in GB.
    sizeGb :: (Core.Maybe Core.Int64)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionDisksResizeRequest' with the minimum fields required to make a request.
newRegionDisksResizeRequest ::
  RegionDisksResizeRequest
newRegionDisksResizeRequest = RegionDisksResizeRequest {sizeGb = Core.Nothing}

instance Core.FromJSON RegionDisksResizeRequest where
  parseJSON =
    Core.withObject
      "RegionDisksResizeRequest"
      ( \o ->
          RegionDisksResizeRequest
            Core.<$> ( o Core..:? "sizeGb"
                         Core.<&> Core.fmap Core.fromAsText
                     )
      )

instance Core.ToJSON RegionDisksResizeRequest where
  toJSON RegionDisksResizeRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("sizeGb" Core..=) Core.. Core.AsText
              Core.<$> sizeGb
          ]
      )

-- | Contains a list of InstanceGroup resources.
--
-- /See:/ 'newRegionInstanceGroupList' smart constructor.
data RegionInstanceGroupList = RegionInstanceGroupList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of InstanceGroup resources.
    items :: (Core.Maybe [InstanceGroup]),
    -- | The resource type.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe RegionInstanceGroupList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupList' with the minimum fields required to make a request.
newRegionInstanceGroupList ::
  RegionInstanceGroupList
newRegionInstanceGroupList =
  RegionInstanceGroupList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#regionInstanceGroupList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON RegionInstanceGroupList where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupList"
      ( \o ->
          RegionInstanceGroupList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#regionInstanceGroupList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON RegionInstanceGroupList where
  toJSON RegionInstanceGroupList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newRegionInstanceGroupList_Warning' smart constructor.
data RegionInstanceGroupList_Warning = RegionInstanceGroupList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe RegionInstanceGroupList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [RegionInstanceGroupList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupList_Warning' with the minimum fields required to make a request.
newRegionInstanceGroupList_Warning ::
  RegionInstanceGroupList_Warning
newRegionInstanceGroupList_Warning =
  RegionInstanceGroupList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    RegionInstanceGroupList_Warning
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupList_Warning"
      ( \o ->
          RegionInstanceGroupList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON RegionInstanceGroupList_Warning where
  toJSON RegionInstanceGroupList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newRegionInstanceGroupList_Warning_DataItem' smart constructor.
data RegionInstanceGroupList_Warning_DataItem = RegionInstanceGroupList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupList_Warning_DataItem' with the minimum fields required to make a request.
newRegionInstanceGroupList_Warning_DataItem ::
  RegionInstanceGroupList_Warning_DataItem
newRegionInstanceGroupList_Warning_DataItem =
  RegionInstanceGroupList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    RegionInstanceGroupList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupList_Warning_DataItem"
      ( \o ->
          RegionInstanceGroupList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    RegionInstanceGroupList_Warning_DataItem
  where
  toJSON RegionInstanceGroupList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | RegionInstanceGroupManagers.deletePerInstanceConfigs
--
-- /See:/ 'newRegionInstanceGroupManagerDeleteInstanceConfigReq' smart constructor.
newtype RegionInstanceGroupManagerDeleteInstanceConfigReq = RegionInstanceGroupManagerDeleteInstanceConfigReq
  { -- | The list of instance names for which we want to delete per-instance configs on this managed instance group.
    names :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupManagerDeleteInstanceConfigReq' with the minimum fields required to make a request.
newRegionInstanceGroupManagerDeleteInstanceConfigReq ::
  RegionInstanceGroupManagerDeleteInstanceConfigReq
newRegionInstanceGroupManagerDeleteInstanceConfigReq =
  RegionInstanceGroupManagerDeleteInstanceConfigReq {names = Core.Nothing}

instance
  Core.FromJSON
    RegionInstanceGroupManagerDeleteInstanceConfigReq
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupManagerDeleteInstanceConfigReq"
      ( \o ->
          RegionInstanceGroupManagerDeleteInstanceConfigReq
            Core.<$> (o Core..:? "names")
      )

instance
  Core.ToJSON
    RegionInstanceGroupManagerDeleteInstanceConfigReq
  where
  toJSON
    RegionInstanceGroupManagerDeleteInstanceConfigReq {..} =
      Core.object
        (Core.catMaybes [("names" Core..=) Core.<$> names])

-- | Contains a list of managed instance groups.
--
-- /See:/ 'newRegionInstanceGroupManagerList' smart constructor.
data RegionInstanceGroupManagerList = RegionInstanceGroupManagerList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of InstanceGroupManager resources.
    items :: (Core.Maybe [InstanceGroupManager]),
    -- | [Output Only] The resource type, which is always compute#instanceGroupManagerList for a list of managed instance groups that exist in th regional scope.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe RegionInstanceGroupManagerList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupManagerList' with the minimum fields required to make a request.
newRegionInstanceGroupManagerList ::
  RegionInstanceGroupManagerList
newRegionInstanceGroupManagerList =
  RegionInstanceGroupManagerList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#regionInstanceGroupManagerList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON RegionInstanceGroupManagerList where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupManagerList"
      ( \o ->
          RegionInstanceGroupManagerList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#regionInstanceGroupManagerList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON RegionInstanceGroupManagerList where
  toJSON RegionInstanceGroupManagerList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newRegionInstanceGroupManagerList_Warning' smart constructor.
data RegionInstanceGroupManagerList_Warning = RegionInstanceGroupManagerList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe RegionInstanceGroupManagerList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [RegionInstanceGroupManagerList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupManagerList_Warning' with the minimum fields required to make a request.
newRegionInstanceGroupManagerList_Warning ::
  RegionInstanceGroupManagerList_Warning
newRegionInstanceGroupManagerList_Warning =
  RegionInstanceGroupManagerList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    RegionInstanceGroupManagerList_Warning
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupManagerList_Warning"
      ( \o ->
          RegionInstanceGroupManagerList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    RegionInstanceGroupManagerList_Warning
  where
  toJSON RegionInstanceGroupManagerList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newRegionInstanceGroupManagerList_Warning_DataItem' smart constructor.
data RegionInstanceGroupManagerList_Warning_DataItem = RegionInstanceGroupManagerList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupManagerList_Warning_DataItem' with the minimum fields required to make a request.
newRegionInstanceGroupManagerList_Warning_DataItem ::
  RegionInstanceGroupManagerList_Warning_DataItem
newRegionInstanceGroupManagerList_Warning_DataItem =
  RegionInstanceGroupManagerList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    RegionInstanceGroupManagerList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupManagerList_Warning_DataItem"
      ( \o ->
          RegionInstanceGroupManagerList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    RegionInstanceGroupManagerList_Warning_DataItem
  where
  toJSON
    RegionInstanceGroupManagerList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | RegionInstanceGroupManagers.patchPerInstanceConfigs
--
-- /See:/ 'newRegionInstanceGroupManagerPatchInstanceConfigReq' smart constructor.
newtype RegionInstanceGroupManagerPatchInstanceConfigReq = RegionInstanceGroupManagerPatchInstanceConfigReq
  { -- | The list of per-instance configurations to insert or patch on this managed instance group.
    perInstanceConfigs :: (Core.Maybe [PerInstanceConfig])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupManagerPatchInstanceConfigReq' with the minimum fields required to make a request.
newRegionInstanceGroupManagerPatchInstanceConfigReq ::
  RegionInstanceGroupManagerPatchInstanceConfigReq
newRegionInstanceGroupManagerPatchInstanceConfigReq =
  RegionInstanceGroupManagerPatchInstanceConfigReq
    { perInstanceConfigs = Core.Nothing
    }

instance
  Core.FromJSON
    RegionInstanceGroupManagerPatchInstanceConfigReq
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupManagerPatchInstanceConfigReq"
      ( \o ->
          RegionInstanceGroupManagerPatchInstanceConfigReq
            Core.<$> (o Core..:? "perInstanceConfigs")
      )

instance
  Core.ToJSON
    RegionInstanceGroupManagerPatchInstanceConfigReq
  where
  toJSON
    RegionInstanceGroupManagerPatchInstanceConfigReq {..} =
      Core.object
        ( Core.catMaybes
            [ ("perInstanceConfigs" Core..=)
                Core.<$> perInstanceConfigs
            ]
        )

-- | RegionInstanceGroupManagers.updatePerInstanceConfigs
--
-- /See:/ 'newRegionInstanceGroupManagerUpdateInstanceConfigReq' smart constructor.
newtype RegionInstanceGroupManagerUpdateInstanceConfigReq = RegionInstanceGroupManagerUpdateInstanceConfigReq
  { -- | The list of per-instance configurations to insert or patch on this managed instance group.
    perInstanceConfigs :: (Core.Maybe [PerInstanceConfig])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupManagerUpdateInstanceConfigReq' with the minimum fields required to make a request.
newRegionInstanceGroupManagerUpdateInstanceConfigReq ::
  RegionInstanceGroupManagerUpdateInstanceConfigReq
newRegionInstanceGroupManagerUpdateInstanceConfigReq =
  RegionInstanceGroupManagerUpdateInstanceConfigReq
    { perInstanceConfigs = Core.Nothing
    }

instance
  Core.FromJSON
    RegionInstanceGroupManagerUpdateInstanceConfigReq
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupManagerUpdateInstanceConfigReq"
      ( \o ->
          RegionInstanceGroupManagerUpdateInstanceConfigReq
            Core.<$> (o Core..:? "perInstanceConfigs")
      )

instance
  Core.ToJSON
    RegionInstanceGroupManagerUpdateInstanceConfigReq
  where
  toJSON
    RegionInstanceGroupManagerUpdateInstanceConfigReq {..} =
      Core.object
        ( Core.catMaybes
            [ ("perInstanceConfigs" Core..=)
                Core.<$> perInstanceConfigs
            ]
        )

--
-- /See:/ 'newRegionInstanceGroupManagersAbandonInstancesRequest' smart constructor.
newtype RegionInstanceGroupManagersAbandonInstancesRequest = RegionInstanceGroupManagersAbandonInstancesRequest
  { -- | The URLs of one or more instances to abandon. This can be a full URL or a partial URL, such as zones\/[ZONE]\/instances\/[INSTANCE_NAME].
    instances :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupManagersAbandonInstancesRequest' with the minimum fields required to make a request.
newRegionInstanceGroupManagersAbandonInstancesRequest ::
  RegionInstanceGroupManagersAbandonInstancesRequest
newRegionInstanceGroupManagersAbandonInstancesRequest =
  RegionInstanceGroupManagersAbandonInstancesRequest {instances = Core.Nothing}

instance
  Core.FromJSON
    RegionInstanceGroupManagersAbandonInstancesRequest
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupManagersAbandonInstancesRequest"
      ( \o ->
          RegionInstanceGroupManagersAbandonInstancesRequest
            Core.<$> (o Core..:? "instances")
      )

instance
  Core.ToJSON
    RegionInstanceGroupManagersAbandonInstancesRequest
  where
  toJSON
    RegionInstanceGroupManagersAbandonInstancesRequest {..} =
      Core.object
        ( Core.catMaybes
            [("instances" Core..=) Core.<$> instances]
        )

-- | RegionInstanceGroupManagers.applyUpdatesToInstances
--
-- /See:/ 'newRegionInstanceGroupManagersApplyUpdatesRequest' smart constructor.
data RegionInstanceGroupManagersApplyUpdatesRequest = RegionInstanceGroupManagersApplyUpdatesRequest
  { -- | Flag to update all instances instead of specified list of “instances”. If the flag is set to true then the instances may not be specified in the request.
    allInstances :: (Core.Maybe Core.Bool),
    -- | The list of URLs of one or more instances for which you want to apply updates. Each URL can be a full URL or a partial URL, such as zones\/[ZONE]\/instances\/[INSTANCE_NAME].
    instances :: (Core.Maybe [Core.Text]),
    -- | The minimal action that you want to perform on each instance during the update: - REPLACE: At minimum, delete the instance and create it again. - RESTART: Stop the instance and start it again. - REFRESH: Do not stop the instance. - NONE: Do not disrupt the instance at all. By default, the minimum action is NONE. If your update requires a more disruptive action than you set with this flag, the necessary action is performed to execute the update.
    minimalAction ::
      ( Core.Maybe
          RegionInstanceGroupManagersApplyUpdatesRequest_MinimalAction
      ),
    -- | The most disruptive action that you want to perform on each instance during the update: - REPLACE: Delete the instance and create it again. - RESTART: Stop the instance and start it again. - REFRESH: Do not stop the instance. - NONE: Do not disrupt the instance at all. By default, the most disruptive allowed action is REPLACE. If your update requires a more disruptive action than you set with this flag, the update request will fail.
    mostDisruptiveAllowedAction ::
      ( Core.Maybe
          RegionInstanceGroupManagersApplyUpdatesRequest_MostDisruptiveAllowedAction
      )
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupManagersApplyUpdatesRequest' with the minimum fields required to make a request.
newRegionInstanceGroupManagersApplyUpdatesRequest ::
  RegionInstanceGroupManagersApplyUpdatesRequest
newRegionInstanceGroupManagersApplyUpdatesRequest =
  RegionInstanceGroupManagersApplyUpdatesRequest
    { allInstances = Core.Nothing,
      instances = Core.Nothing,
      minimalAction = Core.Nothing,
      mostDisruptiveAllowedAction = Core.Nothing
    }

instance
  Core.FromJSON
    RegionInstanceGroupManagersApplyUpdatesRequest
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupManagersApplyUpdatesRequest"
      ( \o ->
          RegionInstanceGroupManagersApplyUpdatesRequest
            Core.<$> (o Core..:? "allInstances")
              Core.<*> (o Core..:? "instances")
              Core.<*> (o Core..:? "minimalAction")
              Core.<*> (o Core..:? "mostDisruptiveAllowedAction")
      )

instance
  Core.ToJSON
    RegionInstanceGroupManagersApplyUpdatesRequest
  where
  toJSON
    RegionInstanceGroupManagersApplyUpdatesRequest {..} =
      Core.object
        ( Core.catMaybes
            [ ("allInstances" Core..=) Core.<$> allInstances,
              ("instances" Core..=) Core.<$> instances,
              ("minimalAction" Core..=) Core.<$> minimalAction,
              ("mostDisruptiveAllowedAction" Core..=)
                Core.<$> mostDisruptiveAllowedAction
            ]
        )

-- | RegionInstanceGroupManagers.createInstances
--
-- /See:/ 'newRegionInstanceGroupManagersCreateInstancesRequest' smart constructor.
newtype RegionInstanceGroupManagersCreateInstancesRequest = RegionInstanceGroupManagersCreateInstancesRequest
  { -- | [Required] List of specifications of per-instance configs.
    instances :: (Core.Maybe [PerInstanceConfig])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupManagersCreateInstancesRequest' with the minimum fields required to make a request.
newRegionInstanceGroupManagersCreateInstancesRequest ::
  RegionInstanceGroupManagersCreateInstancesRequest
newRegionInstanceGroupManagersCreateInstancesRequest =
  RegionInstanceGroupManagersCreateInstancesRequest {instances = Core.Nothing}

instance
  Core.FromJSON
    RegionInstanceGroupManagersCreateInstancesRequest
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupManagersCreateInstancesRequest"
      ( \o ->
          RegionInstanceGroupManagersCreateInstancesRequest
            Core.<$> (o Core..:? "instances")
      )

instance
  Core.ToJSON
    RegionInstanceGroupManagersCreateInstancesRequest
  where
  toJSON
    RegionInstanceGroupManagersCreateInstancesRequest {..} =
      Core.object
        ( Core.catMaybes
            [("instances" Core..=) Core.<$> instances]
        )

--
-- /See:/ 'newRegionInstanceGroupManagersDeleteInstancesRequest' smart constructor.
data RegionInstanceGroupManagersDeleteInstancesRequest = RegionInstanceGroupManagersDeleteInstancesRequest
  { -- | The URLs of one or more instances to delete. This can be a full URL or a partial URL, such as zones\/[ZONE]\/instances\/[INSTANCE_NAME].
    instances :: (Core.Maybe [Core.Text]),
    -- | Specifies whether the request should proceed despite the inclusion of instances that are not members of the group or that are already in the process of being deleted or abandoned. If this field is set to @false@ and such an instance is specified in the request, the operation fails. The operation always fails if the request contains a malformed instance URL or a reference to an instance that exists in a zone or region other than the group\'s zone or region.
    skipInstancesOnValidationError :: (Core.Maybe Core.Bool)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupManagersDeleteInstancesRequest' with the minimum fields required to make a request.
newRegionInstanceGroupManagersDeleteInstancesRequest ::
  RegionInstanceGroupManagersDeleteInstancesRequest
newRegionInstanceGroupManagersDeleteInstancesRequest =
  RegionInstanceGroupManagersDeleteInstancesRequest
    { instances = Core.Nothing,
      skipInstancesOnValidationError = Core.Nothing
    }

instance
  Core.FromJSON
    RegionInstanceGroupManagersDeleteInstancesRequest
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupManagersDeleteInstancesRequest"
      ( \o ->
          RegionInstanceGroupManagersDeleteInstancesRequest
            Core.<$> (o Core..:? "instances")
              Core.<*> (o Core..:? "skipInstancesOnValidationError")
      )

instance
  Core.ToJSON
    RegionInstanceGroupManagersDeleteInstancesRequest
  where
  toJSON
    RegionInstanceGroupManagersDeleteInstancesRequest {..} =
      Core.object
        ( Core.catMaybes
            [ ("instances" Core..=) Core.<$> instances,
              ("skipInstancesOnValidationError" Core..=)
                Core.<$> skipInstancesOnValidationError
            ]
        )

--
-- /See:/ 'newRegionInstanceGroupManagersListErrorsResponse' smart constructor.
data RegionInstanceGroupManagersListErrorsResponse = RegionInstanceGroupManagersListErrorsResponse
  { -- | [Output Only] The list of errors of the managed instance group.
    items :: (Core.Maybe [InstanceManagedByIgmError]),
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupManagersListErrorsResponse' with the minimum fields required to make a request.
newRegionInstanceGroupManagersListErrorsResponse ::
  RegionInstanceGroupManagersListErrorsResponse
newRegionInstanceGroupManagersListErrorsResponse =
  RegionInstanceGroupManagersListErrorsResponse
    { items = Core.Nothing,
      nextPageToken = Core.Nothing
    }

instance
  Core.FromJSON
    RegionInstanceGroupManagersListErrorsResponse
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupManagersListErrorsResponse"
      ( \o ->
          RegionInstanceGroupManagersListErrorsResponse
            Core.<$> (o Core..:? "items")
              Core.<*> (o Core..:? "nextPageToken")
      )

instance
  Core.ToJSON
    RegionInstanceGroupManagersListErrorsResponse
  where
  toJSON
    RegionInstanceGroupManagersListErrorsResponse {..} =
      Core.object
        ( Core.catMaybes
            [ ("items" Core..=) Core.<$> items,
              ("nextPageToken" Core..=) Core.<$> nextPageToken
            ]
        )

--
-- /See:/ 'newRegionInstanceGroupManagersListInstanceConfigsResp' smart constructor.
data RegionInstanceGroupManagersListInstanceConfigsResp = RegionInstanceGroupManagersListInstanceConfigsResp
  { -- | [Output Only] The list of PerInstanceConfig.
    items :: (Core.Maybe [PerInstanceConfig]),
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning ::
      ( Core.Maybe
          RegionInstanceGroupManagersListInstanceConfigsResp_Warning
      )
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupManagersListInstanceConfigsResp' with the minimum fields required to make a request.
newRegionInstanceGroupManagersListInstanceConfigsResp ::
  RegionInstanceGroupManagersListInstanceConfigsResp
newRegionInstanceGroupManagersListInstanceConfigsResp =
  RegionInstanceGroupManagersListInstanceConfigsResp
    { items = Core.Nothing,
      nextPageToken = Core.Nothing,
      warning = Core.Nothing
    }

instance
  Core.FromJSON
    RegionInstanceGroupManagersListInstanceConfigsResp
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupManagersListInstanceConfigsResp"
      ( \o ->
          RegionInstanceGroupManagersListInstanceConfigsResp
            Core.<$> (o Core..:? "items")
              Core.<*> (o Core..:? "nextPageToken")
              Core.<*> (o Core..:? "warning")
      )

instance
  Core.ToJSON
    RegionInstanceGroupManagersListInstanceConfigsResp
  where
  toJSON
    RegionInstanceGroupManagersListInstanceConfigsResp {..} =
      Core.object
        ( Core.catMaybes
            [ ("items" Core..=) Core.<$> items,
              ("nextPageToken" Core..=) Core.<$> nextPageToken,
              ("warning" Core..=) Core.<$> warning
            ]
        )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newRegionInstanceGroupManagersListInstanceConfigsResp_Warning' smart constructor.
data RegionInstanceGroupManagersListInstanceConfigsResp_Warning = RegionInstanceGroupManagersListInstanceConfigsResp_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code ::
      ( Core.Maybe
          RegionInstanceGroupManagersListInstanceConfigsResp_Warning_Code
      ),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' ::
      ( Core.Maybe
          [RegionInstanceGroupManagersListInstanceConfigsResp_Warning_DataItem]
      ),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupManagersListInstanceConfigsResp_Warning' with the minimum fields required to make a request.
newRegionInstanceGroupManagersListInstanceConfigsResp_Warning ::
  RegionInstanceGroupManagersListInstanceConfigsResp_Warning
newRegionInstanceGroupManagersListInstanceConfigsResp_Warning =
  RegionInstanceGroupManagersListInstanceConfigsResp_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    RegionInstanceGroupManagersListInstanceConfigsResp_Warning
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupManagersListInstanceConfigsResp_Warning"
      ( \o ->
          RegionInstanceGroupManagersListInstanceConfigsResp_Warning
            Core.<$> (o Core..:? "code") Core.<*> (o Core..:? "data")
              Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    RegionInstanceGroupManagersListInstanceConfigsResp_Warning
  where
  toJSON
    RegionInstanceGroupManagersListInstanceConfigsResp_Warning {..} =
      Core.object
        ( Core.catMaybes
            [ ("code" Core..=) Core.<$> code,
              ("data" Core..=) Core.<$> data',
              ("message" Core..=) Core.<$> message
            ]
        )

--
-- /See:/ 'newRegionInstanceGroupManagersListInstanceConfigsResp_Warning_DataItem' smart constructor.
data RegionInstanceGroupManagersListInstanceConfigsResp_Warning_DataItem = RegionInstanceGroupManagersListInstanceConfigsResp_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupManagersListInstanceConfigsResp_Warning_DataItem' with the minimum fields required to make a request.
newRegionInstanceGroupManagersListInstanceConfigsResp_Warning_DataItem ::
  RegionInstanceGroupManagersListInstanceConfigsResp_Warning_DataItem
newRegionInstanceGroupManagersListInstanceConfigsResp_Warning_DataItem =
  RegionInstanceGroupManagersListInstanceConfigsResp_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    RegionInstanceGroupManagersListInstanceConfigsResp_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupManagersListInstanceConfigsResp_Warning_DataItem"
      ( \o ->
          RegionInstanceGroupManagersListInstanceConfigsResp_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    RegionInstanceGroupManagersListInstanceConfigsResp_Warning_DataItem
  where
  toJSON
    RegionInstanceGroupManagersListInstanceConfigsResp_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

--
-- /See:/ 'newRegionInstanceGroupManagersListInstancesResponse' smart constructor.
data RegionInstanceGroupManagersListInstancesResponse = RegionInstanceGroupManagersListInstancesResponse
  { -- | A list of managed instances.
    managedInstances :: (Core.Maybe [ManagedInstance]),
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupManagersListInstancesResponse' with the minimum fields required to make a request.
newRegionInstanceGroupManagersListInstancesResponse ::
  RegionInstanceGroupManagersListInstancesResponse
newRegionInstanceGroupManagersListInstancesResponse =
  RegionInstanceGroupManagersListInstancesResponse
    { managedInstances = Core.Nothing,
      nextPageToken = Core.Nothing
    }

instance
  Core.FromJSON
    RegionInstanceGroupManagersListInstancesResponse
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupManagersListInstancesResponse"
      ( \o ->
          RegionInstanceGroupManagersListInstancesResponse
            Core.<$> (o Core..:? "managedInstances")
              Core.<*> (o Core..:? "nextPageToken")
      )

instance
  Core.ToJSON
    RegionInstanceGroupManagersListInstancesResponse
  where
  toJSON
    RegionInstanceGroupManagersListInstancesResponse {..} =
      Core.object
        ( Core.catMaybes
            [ ("managedInstances" Core..=)
                Core.<$> managedInstances,
              ("nextPageToken" Core..=) Core.<$> nextPageToken
            ]
        )

--
-- /See:/ 'newRegionInstanceGroupManagersRecreateRequest' smart constructor.
newtype RegionInstanceGroupManagersRecreateRequest = RegionInstanceGroupManagersRecreateRequest
  { -- | The URLs of one or more instances to recreate. This can be a full URL or a partial URL, such as zones\/[ZONE]\/instances\/[INSTANCE_NAME].
    instances :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupManagersRecreateRequest' with the minimum fields required to make a request.
newRegionInstanceGroupManagersRecreateRequest ::
  RegionInstanceGroupManagersRecreateRequest
newRegionInstanceGroupManagersRecreateRequest =
  RegionInstanceGroupManagersRecreateRequest {instances = Core.Nothing}

instance
  Core.FromJSON
    RegionInstanceGroupManagersRecreateRequest
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupManagersRecreateRequest"
      ( \o ->
          RegionInstanceGroupManagersRecreateRequest
            Core.<$> (o Core..:? "instances")
      )

instance
  Core.ToJSON
    RegionInstanceGroupManagersRecreateRequest
  where
  toJSON RegionInstanceGroupManagersRecreateRequest {..} =
    Core.object
      ( Core.catMaybes
          [("instances" Core..=) Core.<$> instances]
      )

--
-- /See:/ 'newRegionInstanceGroupManagersSetTargetPoolsRequest' smart constructor.
data RegionInstanceGroupManagersSetTargetPoolsRequest = RegionInstanceGroupManagersSetTargetPoolsRequest
  { -- | Fingerprint of the target pools information, which is a hash of the contents. This field is used for optimistic locking when you update the target pool entries. This field is optional.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | The URL of all TargetPool resources to which instances in the instanceGroup field are added. The target pools automatically apply to all of the instances in the managed instance group.
    targetPools :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupManagersSetTargetPoolsRequest' with the minimum fields required to make a request.
newRegionInstanceGroupManagersSetTargetPoolsRequest ::
  RegionInstanceGroupManagersSetTargetPoolsRequest
newRegionInstanceGroupManagersSetTargetPoolsRequest =
  RegionInstanceGroupManagersSetTargetPoolsRequest
    { fingerprint = Core.Nothing,
      targetPools = Core.Nothing
    }

instance
  Core.FromJSON
    RegionInstanceGroupManagersSetTargetPoolsRequest
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupManagersSetTargetPoolsRequest"
      ( \o ->
          RegionInstanceGroupManagersSetTargetPoolsRequest
            Core.<$> (o Core..:? "fingerprint")
              Core.<*> (o Core..:? "targetPools")
      )

instance
  Core.ToJSON
    RegionInstanceGroupManagersSetTargetPoolsRequest
  where
  toJSON
    RegionInstanceGroupManagersSetTargetPoolsRequest {..} =
      Core.object
        ( Core.catMaybes
            [ ("fingerprint" Core..=) Core.<$> fingerprint,
              ("targetPools" Core..=) Core.<$> targetPools
            ]
        )

--
-- /See:/ 'newRegionInstanceGroupManagersSetTemplateRequest' smart constructor.
newtype RegionInstanceGroupManagersSetTemplateRequest = RegionInstanceGroupManagersSetTemplateRequest
  { -- | URL of the InstanceTemplate resource from which all new instances will be created.
    instanceTemplate :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupManagersSetTemplateRequest' with the minimum fields required to make a request.
newRegionInstanceGroupManagersSetTemplateRequest ::
  RegionInstanceGroupManagersSetTemplateRequest
newRegionInstanceGroupManagersSetTemplateRequest =
  RegionInstanceGroupManagersSetTemplateRequest
    { instanceTemplate = Core.Nothing
    }

instance
  Core.FromJSON
    RegionInstanceGroupManagersSetTemplateRequest
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupManagersSetTemplateRequest"
      ( \o ->
          RegionInstanceGroupManagersSetTemplateRequest
            Core.<$> (o Core..:? "instanceTemplate")
      )

instance
  Core.ToJSON
    RegionInstanceGroupManagersSetTemplateRequest
  where
  toJSON
    RegionInstanceGroupManagersSetTemplateRequest {..} =
      Core.object
        ( Core.catMaybes
            [ ("instanceTemplate" Core..=)
                Core.<$> instanceTemplate
            ]
        )

--
-- /See:/ 'newRegionInstanceGroupsListInstances' smart constructor.
data RegionInstanceGroupsListInstances = RegionInstanceGroupsListInstances
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of InstanceWithNamedPorts resources.
    items :: (Core.Maybe [InstanceWithNamedPorts]),
    -- | The resource type.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe RegionInstanceGroupsListInstances_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupsListInstances' with the minimum fields required to make a request.
newRegionInstanceGroupsListInstances ::
  RegionInstanceGroupsListInstances
newRegionInstanceGroupsListInstances =
  RegionInstanceGroupsListInstances
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#regionInstanceGroupsListInstances",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance
  Core.FromJSON
    RegionInstanceGroupsListInstances
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupsListInstances"
      ( \o ->
          RegionInstanceGroupsListInstances
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#regionInstanceGroupsListInstances"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance
  Core.ToJSON
    RegionInstanceGroupsListInstances
  where
  toJSON RegionInstanceGroupsListInstances {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newRegionInstanceGroupsListInstances_Warning' smart constructor.
data RegionInstanceGroupsListInstances_Warning = RegionInstanceGroupsListInstances_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe RegionInstanceGroupsListInstances_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [RegionInstanceGroupsListInstances_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupsListInstances_Warning' with the minimum fields required to make a request.
newRegionInstanceGroupsListInstances_Warning ::
  RegionInstanceGroupsListInstances_Warning
newRegionInstanceGroupsListInstances_Warning =
  RegionInstanceGroupsListInstances_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    RegionInstanceGroupsListInstances_Warning
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupsListInstances_Warning"
      ( \o ->
          RegionInstanceGroupsListInstances_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    RegionInstanceGroupsListInstances_Warning
  where
  toJSON RegionInstanceGroupsListInstances_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newRegionInstanceGroupsListInstances_Warning_DataItem' smart constructor.
data RegionInstanceGroupsListInstances_Warning_DataItem = RegionInstanceGroupsListInstances_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupsListInstances_Warning_DataItem' with the minimum fields required to make a request.
newRegionInstanceGroupsListInstances_Warning_DataItem ::
  RegionInstanceGroupsListInstances_Warning_DataItem
newRegionInstanceGroupsListInstances_Warning_DataItem =
  RegionInstanceGroupsListInstances_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    RegionInstanceGroupsListInstances_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupsListInstances_Warning_DataItem"
      ( \o ->
          RegionInstanceGroupsListInstances_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    RegionInstanceGroupsListInstances_Warning_DataItem
  where
  toJSON
    RegionInstanceGroupsListInstances_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

--
-- /See:/ 'newRegionInstanceGroupsListInstancesRequest' smart constructor.
data RegionInstanceGroupsListInstancesRequest = RegionInstanceGroupsListInstancesRequest
  { -- | Instances in which state should be returned. Valid options are: \'ALL\', \'RUNNING\'. By default, it lists all instances.
    instanceState :: (Core.Maybe RegionInstanceGroupsListInstancesRequest_InstanceState),
    -- | Name of port user is interested in. It is optional. If it is set, only information about this ports will be returned. If it is not set, all the named ports will be returned. Always lists all instances.
    portName :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupsListInstancesRequest' with the minimum fields required to make a request.
newRegionInstanceGroupsListInstancesRequest ::
  RegionInstanceGroupsListInstancesRequest
newRegionInstanceGroupsListInstancesRequest =
  RegionInstanceGroupsListInstancesRequest
    { instanceState = Core.Nothing,
      portName = Core.Nothing
    }

instance
  Core.FromJSON
    RegionInstanceGroupsListInstancesRequest
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupsListInstancesRequest"
      ( \o ->
          RegionInstanceGroupsListInstancesRequest
            Core.<$> (o Core..:? "instanceState")
            Core.<*> (o Core..:? "portName")
      )

instance
  Core.ToJSON
    RegionInstanceGroupsListInstancesRequest
  where
  toJSON RegionInstanceGroupsListInstancesRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("instanceState" Core..=) Core.<$> instanceState,
            ("portName" Core..=) Core.<$> portName
          ]
      )

--
-- /See:/ 'newRegionInstanceGroupsSetNamedPortsRequest' smart constructor.
data RegionInstanceGroupsSetNamedPortsRequest = RegionInstanceGroupsSetNamedPortsRequest
  { -- | The fingerprint of the named ports information for this instance group. Use this optional property to prevent conflicts when multiple users change the named ports settings concurrently. Obtain the fingerprint with the instanceGroups.get method. Then, include the fingerprint in your request to ensure that you do not overwrite changes that were applied from another concurrent request.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | The list of named ports to set for this instance group.
    namedPorts :: (Core.Maybe [NamedPort])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionInstanceGroupsSetNamedPortsRequest' with the minimum fields required to make a request.
newRegionInstanceGroupsSetNamedPortsRequest ::
  RegionInstanceGroupsSetNamedPortsRequest
newRegionInstanceGroupsSetNamedPortsRequest =
  RegionInstanceGroupsSetNamedPortsRequest
    { fingerprint = Core.Nothing,
      namedPorts = Core.Nothing
    }

instance
  Core.FromJSON
    RegionInstanceGroupsSetNamedPortsRequest
  where
  parseJSON =
    Core.withObject
      "RegionInstanceGroupsSetNamedPortsRequest"
      ( \o ->
          RegionInstanceGroupsSetNamedPortsRequest
            Core.<$> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "namedPorts")
      )

instance
  Core.ToJSON
    RegionInstanceGroupsSetNamedPortsRequest
  where
  toJSON RegionInstanceGroupsSetNamedPortsRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("fingerprint" Core..=) Core.<$> fingerprint,
            ("namedPorts" Core..=) Core.<$> namedPorts
          ]
      )

-- | Contains a list of region resources.
--
-- /See:/ 'newRegionList' smart constructor.
data RegionList = RegionList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of Region resources.
    items :: (Core.Maybe [Region]),
    -- | [Output Only] Type of resource. Always compute#regionList for lists of regions.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe RegionList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionList' with the minimum fields required to make a request.
newRegionList ::
  RegionList
newRegionList =
  RegionList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#regionList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON RegionList where
  parseJSON =
    Core.withObject
      "RegionList"
      ( \o ->
          RegionList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#regionList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON RegionList where
  toJSON RegionList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newRegionList_Warning' smart constructor.
data RegionList_Warning = RegionList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe RegionList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [RegionList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionList_Warning' with the minimum fields required to make a request.
newRegionList_Warning ::
  RegionList_Warning
newRegionList_Warning =
  RegionList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON RegionList_Warning where
  parseJSON =
    Core.withObject
      "RegionList_Warning"
      ( \o ->
          RegionList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON RegionList_Warning where
  toJSON RegionList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newRegionList_Warning_DataItem' smart constructor.
data RegionList_Warning_DataItem = RegionList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionList_Warning_DataItem' with the minimum fields required to make a request.
newRegionList_Warning_DataItem ::
  RegionList_Warning_DataItem
newRegionList_Warning_DataItem =
  RegionList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON RegionList_Warning_DataItem where
  parseJSON =
    Core.withObject
      "RegionList_Warning_DataItem"
      ( \o ->
          RegionList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON RegionList_Warning_DataItem where
  toJSON RegionList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newRegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse' smart constructor.
data RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse = RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse
  { -- | Effective firewalls from firewall policy.
    firewallPolicys ::
      ( Core.Maybe
          [RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy]
      ),
    -- | Effective firewalls on the network.
    firewalls :: (Core.Maybe [Firewall])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse' with the minimum fields required to make a request.
newRegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse ::
  RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse
newRegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse =
  RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse
    { firewallPolicys = Core.Nothing,
      firewalls = Core.Nothing
    }

instance
  Core.FromJSON
    RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse
  where
  parseJSON =
    Core.withObject
      "RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse"
      ( \o ->
          RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse
            Core.<$> (o Core..:? "firewallPolicys")
              Core.<*> (o Core..:? "firewalls")
      )

instance
  Core.ToJSON
    RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse
  where
  toJSON
    RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse {..} =
      Core.object
        ( Core.catMaybes
            [ ("firewallPolicys" Core..=)
                Core.<$> firewallPolicys,
              ("firewalls" Core..=) Core.<$> firewalls
            ]
        )

--
-- /See:/ 'newRegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy' smart constructor.
data RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy = RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy
  { -- | [Output Only] The display name of the firewall policy.
    displayName :: (Core.Maybe Core.Text),
    -- | [Output Only] The name of the firewall policy.
    name :: (Core.Maybe Core.Text),
    -- | The rules that apply to the network.
    rules :: (Core.Maybe [FirewallPolicyRule]),
    -- | [Output Only] The type of the firewall policy. Can be one of HIERARCHY, NETWORK, NETWORK_REGIONAL.
    type' ::
      ( Core.Maybe
          RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy_Type
      )
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy' with the minimum fields required to make a request.
newRegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy ::
  RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy
newRegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy =
  RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy
    { displayName = Core.Nothing,
      name = Core.Nothing,
      rules = Core.Nothing,
      type' = Core.Nothing
    }

instance
  Core.FromJSON
    RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy
  where
  parseJSON =
    Core.withObject
      "RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy"
      ( \o ->
          RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy
            Core.<$> (o Core..:? "displayName")
              Core.<*> (o Core..:? "name")
              Core.<*> (o Core..:? "rules")
              Core.<*> (o Core..:? "type")
      )

instance
  Core.ToJSON
    RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy
  where
  toJSON
    RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy {..} =
      Core.object
        ( Core.catMaybes
            [ ("displayName" Core..=) Core.<$> displayName,
              ("name" Core..=) Core.<$> name,
              ("rules" Core..=) Core.<$> rules,
              ("type" Core..=) Core.<$> type'
            ]
        )

--
-- /See:/ 'newRegionSetLabelsRequest' smart constructor.
data RegionSetLabelsRequest = RegionSetLabelsRequest
  { -- | The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. Make a get() request to the resource to get the latest fingerprint.
    labelFingerprint :: (Core.Maybe Core.Base64),
    -- | The labels to set for this resource.
    labels :: (Core.Maybe RegionSetLabelsRequest_Labels)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionSetLabelsRequest' with the minimum fields required to make a request.
newRegionSetLabelsRequest ::
  RegionSetLabelsRequest
newRegionSetLabelsRequest =
  RegionSetLabelsRequest
    { labelFingerprint = Core.Nothing,
      labels = Core.Nothing
    }

instance Core.FromJSON RegionSetLabelsRequest where
  parseJSON =
    Core.withObject
      "RegionSetLabelsRequest"
      ( \o ->
          RegionSetLabelsRequest
            Core.<$> (o Core..:? "labelFingerprint")
            Core.<*> (o Core..:? "labels")
      )

instance Core.ToJSON RegionSetLabelsRequest where
  toJSON RegionSetLabelsRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("labelFingerprint" Core..=)
              Core.<$> labelFingerprint,
            ("labels" Core..=) Core.<$> labels
          ]
      )

-- | The labels to set for this resource.
--
-- /See:/ 'newRegionSetLabelsRequest_Labels' smart constructor.
newtype RegionSetLabelsRequest_Labels = RegionSetLabelsRequest_Labels
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionSetLabelsRequest_Labels' with the minimum fields required to make a request.
newRegionSetLabelsRequest_Labels ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  RegionSetLabelsRequest_Labels
newRegionSetLabelsRequest_Labels additional =
  RegionSetLabelsRequest_Labels {additional = additional}

instance Core.FromJSON RegionSetLabelsRequest_Labels where
  parseJSON =
    Core.withObject
      "RegionSetLabelsRequest_Labels"
      ( \o ->
          RegionSetLabelsRequest_Labels
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON RegionSetLabelsRequest_Labels where
  toJSON RegionSetLabelsRequest_Labels {..} =
    Core.toJSON additional

--
-- /See:/ 'newRegionSetPolicyRequest' smart constructor.
data RegionSetPolicyRequest = RegionSetPolicyRequest
  { -- | Flatten Policy to create a backwacd compatible wire-format. Deprecated. Use \'policy\' to specify bindings.
    bindings :: (Core.Maybe [Binding]),
    -- | Flatten Policy to create a backward compatible wire-format. Deprecated. Use \'policy\' to specify the etag.
    etag :: (Core.Maybe Core.Base64),
    -- | REQUIRED: The complete policy to be applied to the \'resource\'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them.
    policy :: (Core.Maybe Policy)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionSetPolicyRequest' with the minimum fields required to make a request.
newRegionSetPolicyRequest ::
  RegionSetPolicyRequest
newRegionSetPolicyRequest =
  RegionSetPolicyRequest
    { bindings = Core.Nothing,
      etag = Core.Nothing,
      policy = Core.Nothing
    }

instance Core.FromJSON RegionSetPolicyRequest where
  parseJSON =
    Core.withObject
      "RegionSetPolicyRequest"
      ( \o ->
          RegionSetPolicyRequest
            Core.<$> (o Core..:? "bindings")
            Core.<*> (o Core..:? "etag")
            Core.<*> (o Core..:? "policy")
      )

instance Core.ToJSON RegionSetPolicyRequest where
  toJSON RegionSetPolicyRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("bindings" Core..=) Core.<$> bindings,
            ("etag" Core..=) Core.<$> etag,
            ("policy" Core..=) Core.<$> policy
          ]
      )

--
-- /See:/ 'newRegionTargetHttpsProxiesSetSslCertificatesRequest' smart constructor.
newtype RegionTargetHttpsProxiesSetSslCertificatesRequest = RegionTargetHttpsProxiesSetSslCertificatesRequest
  { -- | New set of SslCertificate resources to associate with this TargetHttpsProxy resource.
    sslCertificates :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionTargetHttpsProxiesSetSslCertificatesRequest' with the minimum fields required to make a request.
newRegionTargetHttpsProxiesSetSslCertificatesRequest ::
  RegionTargetHttpsProxiesSetSslCertificatesRequest
newRegionTargetHttpsProxiesSetSslCertificatesRequest =
  RegionTargetHttpsProxiesSetSslCertificatesRequest
    { sslCertificates = Core.Nothing
    }

instance
  Core.FromJSON
    RegionTargetHttpsProxiesSetSslCertificatesRequest
  where
  parseJSON =
    Core.withObject
      "RegionTargetHttpsProxiesSetSslCertificatesRequest"
      ( \o ->
          RegionTargetHttpsProxiesSetSslCertificatesRequest
            Core.<$> (o Core..:? "sslCertificates")
      )

instance
  Core.ToJSON
    RegionTargetHttpsProxiesSetSslCertificatesRequest
  where
  toJSON
    RegionTargetHttpsProxiesSetSslCertificatesRequest {..} =
      Core.object
        ( Core.catMaybes
            [ ("sslCertificates" Core..=)
                Core.<$> sslCertificates
            ]
        )

--
-- /See:/ 'newRegionUrlMapsValidateRequest' smart constructor.
newtype RegionUrlMapsValidateRequest = RegionUrlMapsValidateRequest
  { -- | Content of the UrlMap to be validated.
    resource :: (Core.Maybe UrlMap)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RegionUrlMapsValidateRequest' with the minimum fields required to make a request.
newRegionUrlMapsValidateRequest ::
  RegionUrlMapsValidateRequest
newRegionUrlMapsValidateRequest =
  RegionUrlMapsValidateRequest {resource = Core.Nothing}

instance Core.FromJSON RegionUrlMapsValidateRequest where
  parseJSON =
    Core.withObject
      "RegionUrlMapsValidateRequest"
      ( \o ->
          RegionUrlMapsValidateRequest
            Core.<$> (o Core..:? "resource")
      )

instance Core.ToJSON RegionUrlMapsValidateRequest where
  toJSON RegionUrlMapsValidateRequest {..} =
    Core.object
      ( Core.catMaybes
          [("resource" Core..=) Core.<$> resource]
      )

-- | A policy that specifies how requests intended for the route\'s backends are shadowed to a separate mirrored backend service. The load balancer doesn\'t wait for responses from the shadow service. Before sending traffic to the shadow service, the host or authority header is suffixed with -shadow.
--
-- /See:/ 'newRequestMirrorPolicy' smart constructor.
newtype RequestMirrorPolicy = RequestMirrorPolicy
  { -- | The full or partial URL to the BackendService resource being mirrored to. The backend service configured for a mirroring policy must reference backends that are of the same type as the original backend service matched in the URL map. Serverless NEG backends are not currently supported as a mirrored backend service.
    backendService :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RequestMirrorPolicy' with the minimum fields required to make a request.
newRequestMirrorPolicy ::
  RequestMirrorPolicy
newRequestMirrorPolicy = RequestMirrorPolicy {backendService = Core.Nothing}

instance Core.FromJSON RequestMirrorPolicy where
  parseJSON =
    Core.withObject
      "RequestMirrorPolicy"
      ( \o ->
          RequestMirrorPolicy
            Core.<$> (o Core..:? "backendService")
      )

instance Core.ToJSON RequestMirrorPolicy where
  toJSON RequestMirrorPolicy {..} =
    Core.object
      ( Core.catMaybes
          [("backendService" Core..=) Core.<$> backendService]
      )

-- | Represents a reservation resource. A reservation ensures that capacity is held in a specific zone even if the reserved VMs are not running. For more information, read Reserving zonal resources.
--
-- /See:/ 'newReservation' smart constructor.
data Reservation = Reservation
  { -- | [Output Only] Full or partial URL to a parent commitment. This field displays for reservations that are tied to a commitment.
    commitment :: (Core.Maybe Core.Text),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#reservations for reservations.
    kind :: Core.Text,
    -- | The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | Resource policies to be added to this reservation. The key is defined by user, and the value is resource policy url. This is to define placement policy with reservation.
    resourcePolicies :: (Core.Maybe Reservation_ResourcePolicies),
    -- | [Output Only] Status information for Reservation resource.
    resourceStatus :: (Core.Maybe AllocationResourceStatus),
    -- | [Output Only] Reserved for future use.
    satisfiesPzs :: (Core.Maybe Core.Bool),
    -- | [Output Only] Server-defined fully-qualified URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | Specify share-settings to create a shared reservation. This property is optional. For more information about the syntax and options for this field and its subfields, see the guide for creating a shared reservation.
    shareSettings :: (Core.Maybe ShareSettings),
    -- | Reservation for instances with specific machine shapes.
    specificReservation :: (Core.Maybe AllocationSpecificSKUReservation),
    -- | Indicates whether the reservation can be consumed by VMs with affinity for \"any\" reservation. If the field is set, then only VMs that target the reservation by name can consume from this reservation.
    specificReservationRequired :: (Core.Maybe Core.Bool),
    -- | [Output Only] The status of the reservation.
    status :: (Core.Maybe Reservation_Status),
    -- | Zone in which the reservation resides. A zone must be provided if the reservation is created within a commitment.
    zone :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Reservation' with the minimum fields required to make a request.
newReservation ::
  Reservation
newReservation =
  Reservation
    { commitment = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#reservation",
      name = Core.Nothing,
      resourcePolicies = Core.Nothing,
      resourceStatus = Core.Nothing,
      satisfiesPzs = Core.Nothing,
      selfLink = Core.Nothing,
      shareSettings = Core.Nothing,
      specificReservation = Core.Nothing,
      specificReservationRequired = Core.Nothing,
      status = Core.Nothing,
      zone = Core.Nothing
    }

instance Core.FromJSON Reservation where
  parseJSON =
    Core.withObject
      "Reservation"
      ( \o ->
          Reservation
            Core.<$> (o Core..:? "commitment")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#reservation")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "resourcePolicies")
            Core.<*> (o Core..:? "resourceStatus")
            Core.<*> (o Core..:? "satisfiesPzs")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "shareSettings")
            Core.<*> (o Core..:? "specificReservation")
            Core.<*> (o Core..:? "specificReservationRequired")
            Core.<*> (o Core..:? "status")
            Core.<*> (o Core..:? "zone")
      )

instance Core.ToJSON Reservation where
  toJSON Reservation {..} =
    Core.object
      ( Core.catMaybes
          [ ("commitment" Core..=) Core.<$> commitment,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("resourcePolicies" Core..=)
              Core.<$> resourcePolicies,
            ("resourceStatus" Core..=) Core.<$> resourceStatus,
            ("satisfiesPzs" Core..=) Core.<$> satisfiesPzs,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("shareSettings" Core..=) Core.<$> shareSettings,
            ("specificReservation" Core..=)
              Core.<$> specificReservation,
            ("specificReservationRequired" Core..=)
              Core.<$> specificReservationRequired,
            ("status" Core..=) Core.<$> status,
            ("zone" Core..=) Core.<$> zone
          ]
      )

-- | Resource policies to be added to this reservation. The key is defined by user, and the value is resource policy url. This is to define placement policy with reservation.
--
-- /See:/ 'newReservation_ResourcePolicies' smart constructor.
newtype Reservation_ResourcePolicies = Reservation_ResourcePolicies
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Reservation_ResourcePolicies' with the minimum fields required to make a request.
newReservation_ResourcePolicies ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  Reservation_ResourcePolicies
newReservation_ResourcePolicies additional =
  Reservation_ResourcePolicies {additional = additional}

instance Core.FromJSON Reservation_ResourcePolicies where
  parseJSON =
    Core.withObject
      "Reservation_ResourcePolicies"
      ( \o ->
          Reservation_ResourcePolicies
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON Reservation_ResourcePolicies where
  toJSON Reservation_ResourcePolicies {..} =
    Core.toJSON additional

-- | Specifies the reservations that this instance can consume from.
--
-- /See:/ 'newReservationAffinity' smart constructor.
data ReservationAffinity = ReservationAffinity
  { -- | Specifies the type of reservation from which this instance can consume resources: ANY/RESERVATION (default), SPECIFIC/RESERVATION, or NO_RESERVATION. See Consuming reserved instances for examples.
    consumeReservationType :: (Core.Maybe ReservationAffinity_ConsumeReservationType),
    -- | Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify googleapis.com\/reservation-name as the key and specify the name of your reservation as its value.
    key :: (Core.Maybe Core.Text),
    -- | Corresponds to the label values of a reservation resource. This can be either a name to a reservation in the same project or \"projects\/different-project\/reservations\/some-reservation-name\" to target a shared reservation in the same zone but in a different project.
    values :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ReservationAffinity' with the minimum fields required to make a request.
newReservationAffinity ::
  ReservationAffinity
newReservationAffinity =
  ReservationAffinity
    { consumeReservationType = Core.Nothing,
      key = Core.Nothing,
      values = Core.Nothing
    }

instance Core.FromJSON ReservationAffinity where
  parseJSON =
    Core.withObject
      "ReservationAffinity"
      ( \o ->
          ReservationAffinity
            Core.<$> (o Core..:? "consumeReservationType")
            Core.<*> (o Core..:? "key")
            Core.<*> (o Core..:? "values")
      )

instance Core.ToJSON ReservationAffinity where
  toJSON ReservationAffinity {..} =
    Core.object
      ( Core.catMaybes
          [ ("consumeReservationType" Core..=)
              Core.<$> consumeReservationType,
            ("key" Core..=) Core.<$> key,
            ("values" Core..=) Core.<$> values
          ]
      )

-- | Contains a list of reservations.
--
-- /See:/ 'newReservationAggregatedList' smart constructor.
data ReservationAggregatedList = ReservationAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of Allocation resources.
    items :: (Core.Maybe ReservationAggregatedList_Items),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe ReservationAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ReservationAggregatedList' with the minimum fields required to make a request.
newReservationAggregatedList ::
  ReservationAggregatedList
newReservationAggregatedList =
  ReservationAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#reservationAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON ReservationAggregatedList where
  parseJSON =
    Core.withObject
      "ReservationAggregatedList"
      ( \o ->
          ReservationAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#reservationAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON ReservationAggregatedList where
  toJSON ReservationAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of Allocation resources.
--
-- /See:/ 'newReservationAggregatedList_Items' smart constructor.
newtype ReservationAggregatedList_Items = ReservationAggregatedList_Items
  { -- | Name of the scope containing this set of reservations.
    additional :: (Core.HashMap Core.Text ReservationsScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ReservationAggregatedList_Items' with the minimum fields required to make a request.
newReservationAggregatedList_Items ::
  -- |  Name of the scope containing this set of reservations. See 'additional'.
  Core.HashMap Core.Text ReservationsScopedList ->
  ReservationAggregatedList_Items
newReservationAggregatedList_Items additional =
  ReservationAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    ReservationAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "ReservationAggregatedList_Items"
      ( \o ->
          ReservationAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON ReservationAggregatedList_Items where
  toJSON ReservationAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newReservationAggregatedList_Warning' smart constructor.
data ReservationAggregatedList_Warning = ReservationAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe ReservationAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [ReservationAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ReservationAggregatedList_Warning' with the minimum fields required to make a request.
newReservationAggregatedList_Warning ::
  ReservationAggregatedList_Warning
newReservationAggregatedList_Warning =
  ReservationAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    ReservationAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "ReservationAggregatedList_Warning"
      ( \o ->
          ReservationAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    ReservationAggregatedList_Warning
  where
  toJSON ReservationAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newReservationAggregatedList_Warning_DataItem' smart constructor.
data ReservationAggregatedList_Warning_DataItem = ReservationAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ReservationAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newReservationAggregatedList_Warning_DataItem ::
  ReservationAggregatedList_Warning_DataItem
newReservationAggregatedList_Warning_DataItem =
  ReservationAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    ReservationAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "ReservationAggregatedList_Warning_DataItem"
      ( \o ->
          ReservationAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    ReservationAggregatedList_Warning_DataItem
  where
  toJSON ReservationAggregatedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newReservationList' smart constructor.
data ReservationList = ReservationList
  { -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | [Output Only] A list of Allocation resources.
    items :: (Core.Maybe [Reservation]),
    -- | [Output Only] Type of resource.Always compute#reservationsList for listsof reservations
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe ReservationList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ReservationList' with the minimum fields required to make a request.
newReservationList ::
  ReservationList
newReservationList =
  ReservationList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#reservationList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON ReservationList where
  parseJSON =
    Core.withObject
      "ReservationList"
      ( \o ->
          ReservationList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#reservationList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON ReservationList where
  toJSON ReservationList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newReservationList_Warning' smart constructor.
data ReservationList_Warning = ReservationList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe ReservationList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [ReservationList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ReservationList_Warning' with the minimum fields required to make a request.
newReservationList_Warning ::
  ReservationList_Warning
newReservationList_Warning =
  ReservationList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON ReservationList_Warning where
  parseJSON =
    Core.withObject
      "ReservationList_Warning"
      ( \o ->
          ReservationList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON ReservationList_Warning where
  toJSON ReservationList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newReservationList_Warning_DataItem' smart constructor.
data ReservationList_Warning_DataItem = ReservationList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ReservationList_Warning_DataItem' with the minimum fields required to make a request.
newReservationList_Warning_DataItem ::
  ReservationList_Warning_DataItem
newReservationList_Warning_DataItem =
  ReservationList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    ReservationList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "ReservationList_Warning_DataItem"
      ( \o ->
          ReservationList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON ReservationList_Warning_DataItem where
  toJSON ReservationList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newReservationsResizeRequest' smart constructor.
newtype ReservationsResizeRequest = ReservationsResizeRequest
  { -- | Number of allocated resources can be resized with minimum = 1 and maximum = 1000.
    specificSkuCount :: (Core.Maybe Core.Int64)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ReservationsResizeRequest' with the minimum fields required to make a request.
newReservationsResizeRequest ::
  ReservationsResizeRequest
newReservationsResizeRequest =
  ReservationsResizeRequest {specificSkuCount = Core.Nothing}

instance Core.FromJSON ReservationsResizeRequest where
  parseJSON =
    Core.withObject
      "ReservationsResizeRequest"
      ( \o ->
          ReservationsResizeRequest
            Core.<$> ( o Core..:? "specificSkuCount"
                         Core.<&> Core.fmap Core.fromAsText
                     )
      )

instance Core.ToJSON ReservationsResizeRequest where
  toJSON ReservationsResizeRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("specificSkuCount" Core..=) Core.. Core.AsText
              Core.<$> specificSkuCount
          ]
      )

--
-- /See:/ 'newReservationsScopedList' smart constructor.
data ReservationsScopedList = ReservationsScopedList
  { -- | A list of reservations contained in this scope.
    reservations :: (Core.Maybe [Reservation]),
    -- | Informational warning which replaces the list of reservations when the list is empty.
    warning :: (Core.Maybe ReservationsScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ReservationsScopedList' with the minimum fields required to make a request.
newReservationsScopedList ::
  ReservationsScopedList
newReservationsScopedList =
  ReservationsScopedList {reservations = Core.Nothing, warning = Core.Nothing}

instance Core.FromJSON ReservationsScopedList where
  parseJSON =
    Core.withObject
      "ReservationsScopedList"
      ( \o ->
          ReservationsScopedList
            Core.<$> (o Core..:? "reservations")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON ReservationsScopedList where
  toJSON ReservationsScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("reservations" Core..=) Core.<$> reservations,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of reservations when the list is empty.
--
-- /See:/ 'newReservationsScopedList_Warning' smart constructor.
data ReservationsScopedList_Warning = ReservationsScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe ReservationsScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [ReservationsScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ReservationsScopedList_Warning' with the minimum fields required to make a request.
newReservationsScopedList_Warning ::
  ReservationsScopedList_Warning
newReservationsScopedList_Warning =
  ReservationsScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON ReservationsScopedList_Warning where
  parseJSON =
    Core.withObject
      "ReservationsScopedList_Warning"
      ( \o ->
          ReservationsScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON ReservationsScopedList_Warning where
  toJSON ReservationsScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newReservationsScopedList_Warning_DataItem' smart constructor.
data ReservationsScopedList_Warning_DataItem = ReservationsScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ReservationsScopedList_Warning_DataItem' with the minimum fields required to make a request.
newReservationsScopedList_Warning_DataItem ::
  ReservationsScopedList_Warning_DataItem
newReservationsScopedList_Warning_DataItem =
  ReservationsScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    ReservationsScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "ReservationsScopedList_Warning_DataItem"
      ( \o ->
          ReservationsScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    ReservationsScopedList_Warning_DataItem
  where
  toJSON ReservationsScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Commitment for a particular resource (a Commitment is composed of one or more of these).
--
-- /See:/ 'newResourceCommitment' smart constructor.
data ResourceCommitment = ResourceCommitment
  { -- | Name of the accelerator type resource. Applicable only when the type is ACCELERATOR.
    acceleratorType :: (Core.Maybe Core.Text),
    -- | The amount of the resource purchased (in a type-dependent unit, such as bytes). For vCPUs, this can just be an integer. For memory, this must be provided in MB. Memory must be a multiple of 256 MB, with up to 6.5GB of memory per every vCPU.
    amount :: (Core.Maybe Core.Int64),
    -- | Type of resource for which this commitment applies. Possible values are VCPU, MEMORY, LOCAL_SSD, and ACCELERATOR.
    type' :: (Core.Maybe ResourceCommitment_Type)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourceCommitment' with the minimum fields required to make a request.
newResourceCommitment ::
  ResourceCommitment
newResourceCommitment =
  ResourceCommitment
    { acceleratorType = Core.Nothing,
      amount = Core.Nothing,
      type' = Core.Nothing
    }

instance Core.FromJSON ResourceCommitment where
  parseJSON =
    Core.withObject
      "ResourceCommitment"
      ( \o ->
          ResourceCommitment
            Core.<$> (o Core..:? "acceleratorType")
            Core.<*> ( o Core..:? "amount"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "type")
      )

instance Core.ToJSON ResourceCommitment where
  toJSON ResourceCommitment {..} =
    Core.object
      ( Core.catMaybes
          [ ("acceleratorType" Core..=)
              Core.<$> acceleratorType,
            ("amount" Core..=) Core.. Core.AsText
              Core.<$> amount,
            ("type" Core..=) Core.<$> type'
          ]
      )

--
-- /See:/ 'newResourceGroupReference' smart constructor.
newtype ResourceGroupReference = ResourceGroupReference
  { -- | A URI referencing one of the instance groups or network endpoint groups listed in the backend service.
    group' :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourceGroupReference' with the minimum fields required to make a request.
newResourceGroupReference ::
  ResourceGroupReference
newResourceGroupReference = ResourceGroupReference {group' = Core.Nothing}

instance Core.FromJSON ResourceGroupReference where
  parseJSON =
    Core.withObject
      "ResourceGroupReference"
      ( \o ->
          ResourceGroupReference Core.<$> (o Core..:? "group")
      )

instance Core.ToJSON ResourceGroupReference where
  toJSON ResourceGroupReference {..} =
    Core.object
      (Core.catMaybes [("group" Core..=) Core.<$> group'])

--
-- /See:/ 'newResourcePoliciesScopedList' smart constructor.
data ResourcePoliciesScopedList = ResourcePoliciesScopedList
  { -- | A list of resourcePolicies contained in this scope.
    resourcePolicies :: (Core.Maybe [ResourcePolicy]),
    -- | Informational warning which replaces the list of resourcePolicies when the list is empty.
    warning :: (Core.Maybe ResourcePoliciesScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePoliciesScopedList' with the minimum fields required to make a request.
newResourcePoliciesScopedList ::
  ResourcePoliciesScopedList
newResourcePoliciesScopedList =
  ResourcePoliciesScopedList
    { resourcePolicies = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON ResourcePoliciesScopedList where
  parseJSON =
    Core.withObject
      "ResourcePoliciesScopedList"
      ( \o ->
          ResourcePoliciesScopedList
            Core.<$> (o Core..:? "resourcePolicies")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON ResourcePoliciesScopedList where
  toJSON ResourcePoliciesScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("resourcePolicies" Core..=)
              Core.<$> resourcePolicies,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of resourcePolicies when the list is empty.
--
-- /See:/ 'newResourcePoliciesScopedList_Warning' smart constructor.
data ResourcePoliciesScopedList_Warning = ResourcePoliciesScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe ResourcePoliciesScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [ResourcePoliciesScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePoliciesScopedList_Warning' with the minimum fields required to make a request.
newResourcePoliciesScopedList_Warning ::
  ResourcePoliciesScopedList_Warning
newResourcePoliciesScopedList_Warning =
  ResourcePoliciesScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    ResourcePoliciesScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "ResourcePoliciesScopedList_Warning"
      ( \o ->
          ResourcePoliciesScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    ResourcePoliciesScopedList_Warning
  where
  toJSON ResourcePoliciesScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newResourcePoliciesScopedList_Warning_DataItem' smart constructor.
data ResourcePoliciesScopedList_Warning_DataItem = ResourcePoliciesScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePoliciesScopedList_Warning_DataItem' with the minimum fields required to make a request.
newResourcePoliciesScopedList_Warning_DataItem ::
  ResourcePoliciesScopedList_Warning_DataItem
newResourcePoliciesScopedList_Warning_DataItem =
  ResourcePoliciesScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    ResourcePoliciesScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "ResourcePoliciesScopedList_Warning_DataItem"
      ( \o ->
          ResourcePoliciesScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    ResourcePoliciesScopedList_Warning_DataItem
  where
  toJSON
    ResourcePoliciesScopedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | Represents a Resource Policy resource. You can use resource policies to schedule actions for some Compute Engine resources. For example, you can use them to schedule persistent disk snapshots.
--
-- /See:/ 'newResourcePolicy' smart constructor.
data ResourcePolicy = ResourcePolicy
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- |
    description :: (Core.Maybe Core.Text),
    -- | Resource policy for instances for placement configuration.
    groupPlacementPolicy :: (Core.Maybe ResourcePolicyGroupPlacementPolicy),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | Resource policy for scheduling instance operations.
    instanceSchedulePolicy :: (Core.Maybe ResourcePolicyInstanceSchedulePolicy),
    -- | [Output Only] Type of the resource. Always compute#resource_policies for resource policies.
    kind :: Core.Text,
    -- | The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- |
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] The system status of the resource policy.
    resourceStatus :: (Core.Maybe ResourcePolicyResourceStatus),
    -- | [Output Only] Server-defined fully-qualified URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | Resource policy for persistent disks for creating snapshots.
    snapshotSchedulePolicy :: (Core.Maybe ResourcePolicySnapshotSchedulePolicy),
    -- | [Output Only] The status of resource policy creation.
    status :: (Core.Maybe ResourcePolicy_Status)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicy' with the minimum fields required to make a request.
newResourcePolicy ::
  ResourcePolicy
newResourcePolicy =
  ResourcePolicy
    { creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      groupPlacementPolicy = Core.Nothing,
      id = Core.Nothing,
      instanceSchedulePolicy = Core.Nothing,
      kind = "compute#resourcePolicy",
      name = Core.Nothing,
      region = Core.Nothing,
      resourceStatus = Core.Nothing,
      selfLink = Core.Nothing,
      snapshotSchedulePolicy = Core.Nothing,
      status = Core.Nothing
    }

instance Core.FromJSON ResourcePolicy where
  parseJSON =
    Core.withObject
      "ResourcePolicy"
      ( \o ->
          ResourcePolicy
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "groupPlacementPolicy")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "instanceSchedulePolicy")
            Core.<*> (o Core..:? "kind" Core..!= "compute#resourcePolicy")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "resourceStatus")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "snapshotSchedulePolicy")
            Core.<*> (o Core..:? "status")
      )

instance Core.ToJSON ResourcePolicy where
  toJSON ResourcePolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("groupPlacementPolicy" Core..=)
              Core.<$> groupPlacementPolicy,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("instanceSchedulePolicy" Core..=)
              Core.<$> instanceSchedulePolicy,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("region" Core..=) Core.<$> region,
            ("resourceStatus" Core..=) Core.<$> resourceStatus,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("snapshotSchedulePolicy" Core..=)
              Core.<$> snapshotSchedulePolicy,
            ("status" Core..=) Core.<$> status
          ]
      )

-- | Contains a list of resourcePolicies.
--
-- /See:/ 'newResourcePolicyAggregatedList' smart constructor.
data ResourcePolicyAggregatedList = ResourcePolicyAggregatedList
  { -- |
    etag :: (Core.Maybe Core.Text),
    -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of ResourcePolicy resources.
    items :: (Core.Maybe ResourcePolicyAggregatedList_Items),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe ResourcePolicyAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicyAggregatedList' with the minimum fields required to make a request.
newResourcePolicyAggregatedList ::
  ResourcePolicyAggregatedList
newResourcePolicyAggregatedList =
  ResourcePolicyAggregatedList
    { etag = Core.Nothing,
      id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#resourcePolicyAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON ResourcePolicyAggregatedList where
  parseJSON =
    Core.withObject
      "ResourcePolicyAggregatedList"
      ( \o ->
          ResourcePolicyAggregatedList
            Core.<$> (o Core..:? "etag")
            Core.<*> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#resourcePolicyAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON ResourcePolicyAggregatedList where
  toJSON ResourcePolicyAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("etag" Core..=) Core.<$> etag,
            ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of ResourcePolicy resources.
--
-- /See:/ 'newResourcePolicyAggregatedList_Items' smart constructor.
newtype ResourcePolicyAggregatedList_Items = ResourcePolicyAggregatedList_Items
  { -- | Name of the scope containing this set of resourcePolicies.
    additional :: (Core.HashMap Core.Text ResourcePoliciesScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicyAggregatedList_Items' with the minimum fields required to make a request.
newResourcePolicyAggregatedList_Items ::
  -- |  Name of the scope containing this set of resourcePolicies. See 'additional'.
  Core.HashMap Core.Text ResourcePoliciesScopedList ->
  ResourcePolicyAggregatedList_Items
newResourcePolicyAggregatedList_Items additional =
  ResourcePolicyAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    ResourcePolicyAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "ResourcePolicyAggregatedList_Items"
      ( \o ->
          ResourcePolicyAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    ResourcePolicyAggregatedList_Items
  where
  toJSON ResourcePolicyAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newResourcePolicyAggregatedList_Warning' smart constructor.
data ResourcePolicyAggregatedList_Warning = ResourcePolicyAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe ResourcePolicyAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [ResourcePolicyAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicyAggregatedList_Warning' with the minimum fields required to make a request.
newResourcePolicyAggregatedList_Warning ::
  ResourcePolicyAggregatedList_Warning
newResourcePolicyAggregatedList_Warning =
  ResourcePolicyAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    ResourcePolicyAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "ResourcePolicyAggregatedList_Warning"
      ( \o ->
          ResourcePolicyAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    ResourcePolicyAggregatedList_Warning
  where
  toJSON ResourcePolicyAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newResourcePolicyAggregatedList_Warning_DataItem' smart constructor.
data ResourcePolicyAggregatedList_Warning_DataItem = ResourcePolicyAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicyAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newResourcePolicyAggregatedList_Warning_DataItem ::
  ResourcePolicyAggregatedList_Warning_DataItem
newResourcePolicyAggregatedList_Warning_DataItem =
  ResourcePolicyAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    ResourcePolicyAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "ResourcePolicyAggregatedList_Warning_DataItem"
      ( \o ->
          ResourcePolicyAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    ResourcePolicyAggregatedList_Warning_DataItem
  where
  toJSON
    ResourcePolicyAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | Time window specified for daily operations.
--
-- /See:/ 'newResourcePolicyDailyCycle' smart constructor.
data ResourcePolicyDailyCycle = ResourcePolicyDailyCycle
  { -- | Defines a schedule with units measured in days. The value determines how many days pass between the start of each cycle.
    daysInCycle :: (Core.Maybe Core.Int32),
    -- | [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario.
    duration :: (Core.Maybe Core.Text),
    -- | Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
    startTime :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicyDailyCycle' with the minimum fields required to make a request.
newResourcePolicyDailyCycle ::
  ResourcePolicyDailyCycle
newResourcePolicyDailyCycle =
  ResourcePolicyDailyCycle
    { daysInCycle = Core.Nothing,
      duration = Core.Nothing,
      startTime = Core.Nothing
    }

instance Core.FromJSON ResourcePolicyDailyCycle where
  parseJSON =
    Core.withObject
      "ResourcePolicyDailyCycle"
      ( \o ->
          ResourcePolicyDailyCycle
            Core.<$> (o Core..:? "daysInCycle")
            Core.<*> (o Core..:? "duration")
            Core.<*> (o Core..:? "startTime")
      )

instance Core.ToJSON ResourcePolicyDailyCycle where
  toJSON ResourcePolicyDailyCycle {..} =
    Core.object
      ( Core.catMaybes
          [ ("daysInCycle" Core..=) Core.<$> daysInCycle,
            ("duration" Core..=) Core.<$> duration,
            ("startTime" Core..=) Core.<$> startTime
          ]
      )

-- | A GroupPlacementPolicy specifies resource placement configuration. It specifies the failure bucket separation as well as network locality
--
-- /See:/ 'newResourcePolicyGroupPlacementPolicy' smart constructor.
data ResourcePolicyGroupPlacementPolicy = ResourcePolicyGroupPlacementPolicy
  { -- | The number of availability domains to spread instances across. If two instances are in different availability domain, they are not in the same low latency network.
    availabilityDomainCount :: (Core.Maybe Core.Int32),
    -- | Specifies network collocation
    collocation :: (Core.Maybe ResourcePolicyGroupPlacementPolicy_Collocation),
    -- | Number of VMs in this placement group. Google does not recommend that you use this field unless you use a compact policy and you want your policy to work only if it contains this exact number of VMs.
    vmCount :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicyGroupPlacementPolicy' with the minimum fields required to make a request.
newResourcePolicyGroupPlacementPolicy ::
  ResourcePolicyGroupPlacementPolicy
newResourcePolicyGroupPlacementPolicy =
  ResourcePolicyGroupPlacementPolicy
    { availabilityDomainCount = Core.Nothing,
      collocation = Core.Nothing,
      vmCount = Core.Nothing
    }

instance
  Core.FromJSON
    ResourcePolicyGroupPlacementPolicy
  where
  parseJSON =
    Core.withObject
      "ResourcePolicyGroupPlacementPolicy"
      ( \o ->
          ResourcePolicyGroupPlacementPolicy
            Core.<$> (o Core..:? "availabilityDomainCount")
            Core.<*> (o Core..:? "collocation")
            Core.<*> (o Core..:? "vmCount")
      )

instance
  Core.ToJSON
    ResourcePolicyGroupPlacementPolicy
  where
  toJSON ResourcePolicyGroupPlacementPolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("availabilityDomainCount" Core..=)
              Core.<$> availabilityDomainCount,
            ("collocation" Core..=) Core.<$> collocation,
            ("vmCount" Core..=) Core.<$> vmCount
          ]
      )

-- | Time window specified for hourly operations.
--
-- /See:/ 'newResourcePolicyHourlyCycle' smart constructor.
data ResourcePolicyHourlyCycle = ResourcePolicyHourlyCycle
  { -- | [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario.
    duration :: (Core.Maybe Core.Text),
    -- | Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.
    hoursInCycle :: (Core.Maybe Core.Int32),
    -- | Time within the window to start the operations. It must be in format \"HH:MM\", where HH : [00-23] and MM : [00-00] GMT.
    startTime :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicyHourlyCycle' with the minimum fields required to make a request.
newResourcePolicyHourlyCycle ::
  ResourcePolicyHourlyCycle
newResourcePolicyHourlyCycle =
  ResourcePolicyHourlyCycle
    { duration = Core.Nothing,
      hoursInCycle = Core.Nothing,
      startTime = Core.Nothing
    }

instance Core.FromJSON ResourcePolicyHourlyCycle where
  parseJSON =
    Core.withObject
      "ResourcePolicyHourlyCycle"
      ( \o ->
          ResourcePolicyHourlyCycle
            Core.<$> (o Core..:? "duration")
            Core.<*> (o Core..:? "hoursInCycle")
            Core.<*> (o Core..:? "startTime")
      )

instance Core.ToJSON ResourcePolicyHourlyCycle where
  toJSON ResourcePolicyHourlyCycle {..} =
    Core.object
      ( Core.catMaybes
          [ ("duration" Core..=) Core.<$> duration,
            ("hoursInCycle" Core..=) Core.<$> hoursInCycle,
            ("startTime" Core..=) Core.<$> startTime
          ]
      )

-- | An InstanceSchedulePolicy specifies when and how frequent certain operations are performed on the instance.
--
-- /See:/ 'newResourcePolicyInstanceSchedulePolicy' smart constructor.
data ResourcePolicyInstanceSchedulePolicy = ResourcePolicyInstanceSchedulePolicy
  { -- | The expiration time of the schedule. The timestamp is an RFC3339 string.
    expirationTime :: (Core.Maybe Core.Text),
    -- | The start time of the schedule. The timestamp is an RFC3339 string.
    startTime :: (Core.Maybe Core.Text),
    -- | Specifies the time zone to be used in interpreting Schedule.schedule. The value of this field must be a time zone name from the tz database: https:\/\/wikipedia.org\/wiki\/Tz_database.
    timeZone :: (Core.Maybe Core.Text),
    -- | Specifies the schedule for starting instances.
    vmStartSchedule :: (Core.Maybe ResourcePolicyInstanceSchedulePolicySchedule),
    -- | Specifies the schedule for stopping instances.
    vmStopSchedule :: (Core.Maybe ResourcePolicyInstanceSchedulePolicySchedule)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicyInstanceSchedulePolicy' with the minimum fields required to make a request.
newResourcePolicyInstanceSchedulePolicy ::
  ResourcePolicyInstanceSchedulePolicy
newResourcePolicyInstanceSchedulePolicy =
  ResourcePolicyInstanceSchedulePolicy
    { expirationTime = Core.Nothing,
      startTime = Core.Nothing,
      timeZone = Core.Nothing,
      vmStartSchedule = Core.Nothing,
      vmStopSchedule = Core.Nothing
    }

instance
  Core.FromJSON
    ResourcePolicyInstanceSchedulePolicy
  where
  parseJSON =
    Core.withObject
      "ResourcePolicyInstanceSchedulePolicy"
      ( \o ->
          ResourcePolicyInstanceSchedulePolicy
            Core.<$> (o Core..:? "expirationTime")
            Core.<*> (o Core..:? "startTime")
            Core.<*> (o Core..:? "timeZone")
            Core.<*> (o Core..:? "vmStartSchedule")
            Core.<*> (o Core..:? "vmStopSchedule")
      )

instance
  Core.ToJSON
    ResourcePolicyInstanceSchedulePolicy
  where
  toJSON ResourcePolicyInstanceSchedulePolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("expirationTime" Core..=) Core.<$> expirationTime,
            ("startTime" Core..=) Core.<$> startTime,
            ("timeZone" Core..=) Core.<$> timeZone,
            ("vmStartSchedule" Core..=) Core.<$> vmStartSchedule,
            ("vmStopSchedule" Core..=) Core.<$> vmStopSchedule
          ]
      )

-- | Schedule for an instance operation.
--
-- /See:/ 'newResourcePolicyInstanceSchedulePolicySchedule' smart constructor.
newtype ResourcePolicyInstanceSchedulePolicySchedule = ResourcePolicyInstanceSchedulePolicySchedule
  { -- | Specifies the frequency for the operation, using the unix-cron format.
    schedule :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicyInstanceSchedulePolicySchedule' with the minimum fields required to make a request.
newResourcePolicyInstanceSchedulePolicySchedule ::
  ResourcePolicyInstanceSchedulePolicySchedule
newResourcePolicyInstanceSchedulePolicySchedule =
  ResourcePolicyInstanceSchedulePolicySchedule {schedule = Core.Nothing}

instance
  Core.FromJSON
    ResourcePolicyInstanceSchedulePolicySchedule
  where
  parseJSON =
    Core.withObject
      "ResourcePolicyInstanceSchedulePolicySchedule"
      ( \o ->
          ResourcePolicyInstanceSchedulePolicySchedule
            Core.<$> (o Core..:? "schedule")
      )

instance
  Core.ToJSON
    ResourcePolicyInstanceSchedulePolicySchedule
  where
  toJSON
    ResourcePolicyInstanceSchedulePolicySchedule {..} =
      Core.object
        ( Core.catMaybes
            [("schedule" Core..=) Core.<$> schedule]
        )

--
-- /See:/ 'newResourcePolicyList' smart constructor.
data ResourcePolicyList = ResourcePolicyList
  { -- |
    etag :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | [Output Only] A list of ResourcePolicy resources.
    items :: (Core.Maybe [ResourcePolicy]),
    -- | [Output Only] Type of resource.Always compute#resourcePoliciesList for listsof resourcePolicies
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe ResourcePolicyList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicyList' with the minimum fields required to make a request.
newResourcePolicyList ::
  ResourcePolicyList
newResourcePolicyList =
  ResourcePolicyList
    { etag = Core.Nothing,
      id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#resourcePolicyList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON ResourcePolicyList where
  parseJSON =
    Core.withObject
      "ResourcePolicyList"
      ( \o ->
          ResourcePolicyList
            Core.<$> (o Core..:? "etag")
            Core.<*> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#resourcePolicyList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON ResourcePolicyList where
  toJSON ResourcePolicyList {..} =
    Core.object
      ( Core.catMaybes
          [ ("etag" Core..=) Core.<$> etag,
            ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newResourcePolicyList_Warning' smart constructor.
data ResourcePolicyList_Warning = ResourcePolicyList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe ResourcePolicyList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [ResourcePolicyList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicyList_Warning' with the minimum fields required to make a request.
newResourcePolicyList_Warning ::
  ResourcePolicyList_Warning
newResourcePolicyList_Warning =
  ResourcePolicyList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON ResourcePolicyList_Warning where
  parseJSON =
    Core.withObject
      "ResourcePolicyList_Warning"
      ( \o ->
          ResourcePolicyList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON ResourcePolicyList_Warning where
  toJSON ResourcePolicyList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newResourcePolicyList_Warning_DataItem' smart constructor.
data ResourcePolicyList_Warning_DataItem = ResourcePolicyList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicyList_Warning_DataItem' with the minimum fields required to make a request.
newResourcePolicyList_Warning_DataItem ::
  ResourcePolicyList_Warning_DataItem
newResourcePolicyList_Warning_DataItem =
  ResourcePolicyList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    ResourcePolicyList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "ResourcePolicyList_Warning_DataItem"
      ( \o ->
          ResourcePolicyList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    ResourcePolicyList_Warning_DataItem
  where
  toJSON ResourcePolicyList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Contains output only fields. Use this sub-message for all output fields set on ResourcePolicy. The internal structure of this \"status\" field should mimic the structure of ResourcePolicy proto specification.
--
-- /See:/ 'newResourcePolicyResourceStatus' smart constructor.
newtype ResourcePolicyResourceStatus = ResourcePolicyResourceStatus
  { -- | [Output Only] Specifies a set of output values reffering to the instance/schedule/policy system status. This field should have the same name as corresponding policy field.
    instanceSchedulePolicy ::
      ( Core.Maybe
          ResourcePolicyResourceStatusInstanceSchedulePolicyStatus
      )
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicyResourceStatus' with the minimum fields required to make a request.
newResourcePolicyResourceStatus ::
  ResourcePolicyResourceStatus
newResourcePolicyResourceStatus =
  ResourcePolicyResourceStatus {instanceSchedulePolicy = Core.Nothing}

instance Core.FromJSON ResourcePolicyResourceStatus where
  parseJSON =
    Core.withObject
      "ResourcePolicyResourceStatus"
      ( \o ->
          ResourcePolicyResourceStatus
            Core.<$> (o Core..:? "instanceSchedulePolicy")
      )

instance Core.ToJSON ResourcePolicyResourceStatus where
  toJSON ResourcePolicyResourceStatus {..} =
    Core.object
      ( Core.catMaybes
          [ ("instanceSchedulePolicy" Core..=)
              Core.<$> instanceSchedulePolicy
          ]
      )

--
-- /See:/ 'newResourcePolicyResourceStatusInstanceSchedulePolicyStatus' smart constructor.
data ResourcePolicyResourceStatusInstanceSchedulePolicyStatus = ResourcePolicyResourceStatusInstanceSchedulePolicyStatus
  { -- | [Output Only] The last time the schedule successfully ran. The timestamp is an RFC3339 string.
    lastRunStartTime :: (Core.Maybe Core.Text),
    -- | [Output Only] The next time the schedule is planned to run. The actual time might be slightly different. The timestamp is an RFC3339 string.
    nextRunStartTime :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicyResourceStatusInstanceSchedulePolicyStatus' with the minimum fields required to make a request.
newResourcePolicyResourceStatusInstanceSchedulePolicyStatus ::
  ResourcePolicyResourceStatusInstanceSchedulePolicyStatus
newResourcePolicyResourceStatusInstanceSchedulePolicyStatus =
  ResourcePolicyResourceStatusInstanceSchedulePolicyStatus
    { lastRunStartTime = Core.Nothing,
      nextRunStartTime = Core.Nothing
    }

instance
  Core.FromJSON
    ResourcePolicyResourceStatusInstanceSchedulePolicyStatus
  where
  parseJSON =
    Core.withObject
      "ResourcePolicyResourceStatusInstanceSchedulePolicyStatus"
      ( \o ->
          ResourcePolicyResourceStatusInstanceSchedulePolicyStatus
            Core.<$> (o Core..:? "lastRunStartTime")
              Core.<*> (o Core..:? "nextRunStartTime")
      )

instance
  Core.ToJSON
    ResourcePolicyResourceStatusInstanceSchedulePolicyStatus
  where
  toJSON
    ResourcePolicyResourceStatusInstanceSchedulePolicyStatus {..} =
      Core.object
        ( Core.catMaybes
            [ ("lastRunStartTime" Core..=)
                Core.<$> lastRunStartTime,
              ("nextRunStartTime" Core..=)
                Core.<$> nextRunStartTime
            ]
        )

-- | A snapshot schedule policy specifies when and how frequently snapshots are to be created for the target disk. Also specifies how many and how long these scheduled snapshots should be retained.
--
-- /See:/ 'newResourcePolicySnapshotSchedulePolicy' smart constructor.
data ResourcePolicySnapshotSchedulePolicy = ResourcePolicySnapshotSchedulePolicy
  { -- | Retention policy applied to snapshots created by this resource policy.
    retentionPolicy :: (Core.Maybe ResourcePolicySnapshotSchedulePolicyRetentionPolicy),
    -- | A Vm Maintenance Policy specifies what kind of infrastructure maintenance we are allowed to perform on this VM and when. Schedule that is applied to disks covered by this policy.
    schedule :: (Core.Maybe ResourcePolicySnapshotSchedulePolicySchedule),
    -- | Properties with which snapshots are created such as labels, encryption keys.
    snapshotProperties :: (Core.Maybe ResourcePolicySnapshotSchedulePolicySnapshotProperties)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicySnapshotSchedulePolicy' with the minimum fields required to make a request.
newResourcePolicySnapshotSchedulePolicy ::
  ResourcePolicySnapshotSchedulePolicy
newResourcePolicySnapshotSchedulePolicy =
  ResourcePolicySnapshotSchedulePolicy
    { retentionPolicy = Core.Nothing,
      schedule = Core.Nothing,
      snapshotProperties = Core.Nothing
    }

instance
  Core.FromJSON
    ResourcePolicySnapshotSchedulePolicy
  where
  parseJSON =
    Core.withObject
      "ResourcePolicySnapshotSchedulePolicy"
      ( \o ->
          ResourcePolicySnapshotSchedulePolicy
            Core.<$> (o Core..:? "retentionPolicy")
            Core.<*> (o Core..:? "schedule")
            Core.<*> (o Core..:? "snapshotProperties")
      )

instance
  Core.ToJSON
    ResourcePolicySnapshotSchedulePolicy
  where
  toJSON ResourcePolicySnapshotSchedulePolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("retentionPolicy" Core..=)
              Core.<$> retentionPolicy,
            ("schedule" Core..=) Core.<$> schedule,
            ("snapshotProperties" Core..=)
              Core.<$> snapshotProperties
          ]
      )

-- | Policy for retention of scheduled snapshots.
--
-- /See:/ 'newResourcePolicySnapshotSchedulePolicyRetentionPolicy' smart constructor.
data ResourcePolicySnapshotSchedulePolicyRetentionPolicy = ResourcePolicySnapshotSchedulePolicyRetentionPolicy
  { -- | Maximum age of the snapshot that is allowed to be kept.
    maxRetentionDays :: (Core.Maybe Core.Int32),
    -- | Specifies the behavior to apply to scheduled snapshots when the source disk is deleted.
    onSourceDiskDelete ::
      ( Core.Maybe
          ResourcePolicySnapshotSchedulePolicyRetentionPolicy_OnSourceDiskDelete
      )
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicySnapshotSchedulePolicyRetentionPolicy' with the minimum fields required to make a request.
newResourcePolicySnapshotSchedulePolicyRetentionPolicy ::
  ResourcePolicySnapshotSchedulePolicyRetentionPolicy
newResourcePolicySnapshotSchedulePolicyRetentionPolicy =
  ResourcePolicySnapshotSchedulePolicyRetentionPolicy
    { maxRetentionDays = Core.Nothing,
      onSourceDiskDelete = Core.Nothing
    }

instance
  Core.FromJSON
    ResourcePolicySnapshotSchedulePolicyRetentionPolicy
  where
  parseJSON =
    Core.withObject
      "ResourcePolicySnapshotSchedulePolicyRetentionPolicy"
      ( \o ->
          ResourcePolicySnapshotSchedulePolicyRetentionPolicy
            Core.<$> (o Core..:? "maxRetentionDays")
              Core.<*> (o Core..:? "onSourceDiskDelete")
      )

instance
  Core.ToJSON
    ResourcePolicySnapshotSchedulePolicyRetentionPolicy
  where
  toJSON
    ResourcePolicySnapshotSchedulePolicyRetentionPolicy {..} =
      Core.object
        ( Core.catMaybes
            [ ("maxRetentionDays" Core..=)
                Core.<$> maxRetentionDays,
              ("onSourceDiskDelete" Core..=)
                Core.<$> onSourceDiskDelete
            ]
        )

-- | A schedule for disks where the schedueled operations are performed.
--
-- /See:/ 'newResourcePolicySnapshotSchedulePolicySchedule' smart constructor.
data ResourcePolicySnapshotSchedulePolicySchedule = ResourcePolicySnapshotSchedulePolicySchedule
  { -- |
    dailySchedule :: (Core.Maybe ResourcePolicyDailyCycle),
    -- |
    hourlySchedule :: (Core.Maybe ResourcePolicyHourlyCycle),
    -- |
    weeklySchedule :: (Core.Maybe ResourcePolicyWeeklyCycle)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicySnapshotSchedulePolicySchedule' with the minimum fields required to make a request.
newResourcePolicySnapshotSchedulePolicySchedule ::
  ResourcePolicySnapshotSchedulePolicySchedule
newResourcePolicySnapshotSchedulePolicySchedule =
  ResourcePolicySnapshotSchedulePolicySchedule
    { dailySchedule = Core.Nothing,
      hourlySchedule = Core.Nothing,
      weeklySchedule = Core.Nothing
    }

instance
  Core.FromJSON
    ResourcePolicySnapshotSchedulePolicySchedule
  where
  parseJSON =
    Core.withObject
      "ResourcePolicySnapshotSchedulePolicySchedule"
      ( \o ->
          ResourcePolicySnapshotSchedulePolicySchedule
            Core.<$> (o Core..:? "dailySchedule")
            Core.<*> (o Core..:? "hourlySchedule")
            Core.<*> (o Core..:? "weeklySchedule")
      )

instance
  Core.ToJSON
    ResourcePolicySnapshotSchedulePolicySchedule
  where
  toJSON
    ResourcePolicySnapshotSchedulePolicySchedule {..} =
      Core.object
        ( Core.catMaybes
            [ ("dailySchedule" Core..=) Core.<$> dailySchedule,
              ("hourlySchedule" Core..=) Core.<$> hourlySchedule,
              ("weeklySchedule" Core..=) Core.<$> weeklySchedule
            ]
        )

-- | Specified snapshot properties for scheduled snapshots created by this policy.
--
-- /See:/ 'newResourcePolicySnapshotSchedulePolicySnapshotProperties' smart constructor.
data ResourcePolicySnapshotSchedulePolicySnapshotProperties = ResourcePolicySnapshotSchedulePolicySnapshotProperties
  { -- | Chain name that the snapshot is created in.
    chainName :: (Core.Maybe Core.Text),
    -- | Indication to perform a \'guest aware\' snapshot.
    guestFlush :: (Core.Maybe Core.Bool),
    -- | Labels to apply to scheduled snapshots. These can be later modified by the setLabels method. Label values may be empty.
    labels ::
      ( Core.Maybe
          ResourcePolicySnapshotSchedulePolicySnapshotProperties_Labels
      ),
    -- | Cloud Storage bucket storage location of the auto snapshot (regional or multi-regional).
    storageLocations :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicySnapshotSchedulePolicySnapshotProperties' with the minimum fields required to make a request.
newResourcePolicySnapshotSchedulePolicySnapshotProperties ::
  ResourcePolicySnapshotSchedulePolicySnapshotProperties
newResourcePolicySnapshotSchedulePolicySnapshotProperties =
  ResourcePolicySnapshotSchedulePolicySnapshotProperties
    { chainName = Core.Nothing,
      guestFlush = Core.Nothing,
      labels = Core.Nothing,
      storageLocations = Core.Nothing
    }

instance
  Core.FromJSON
    ResourcePolicySnapshotSchedulePolicySnapshotProperties
  where
  parseJSON =
    Core.withObject
      "ResourcePolicySnapshotSchedulePolicySnapshotProperties"
      ( \o ->
          ResourcePolicySnapshotSchedulePolicySnapshotProperties
            Core.<$> (o Core..:? "chainName")
              Core.<*> (o Core..:? "guestFlush")
              Core.<*> (o Core..:? "labels")
              Core.<*> (o Core..:? "storageLocations")
      )

instance
  Core.ToJSON
    ResourcePolicySnapshotSchedulePolicySnapshotProperties
  where
  toJSON
    ResourcePolicySnapshotSchedulePolicySnapshotProperties {..} =
      Core.object
        ( Core.catMaybes
            [ ("chainName" Core..=) Core.<$> chainName,
              ("guestFlush" Core..=) Core.<$> guestFlush,
              ("labels" Core..=) Core.<$> labels,
              ("storageLocations" Core..=)
                Core.<$> storageLocations
            ]
        )

-- | Labels to apply to scheduled snapshots. These can be later modified by the setLabels method. Label values may be empty.
--
-- /See:/ 'newResourcePolicySnapshotSchedulePolicySnapshotProperties_Labels' smart constructor.
newtype ResourcePolicySnapshotSchedulePolicySnapshotProperties_Labels = ResourcePolicySnapshotSchedulePolicySnapshotProperties_Labels
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicySnapshotSchedulePolicySnapshotProperties_Labels' with the minimum fields required to make a request.
newResourcePolicySnapshotSchedulePolicySnapshotProperties_Labels ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  ResourcePolicySnapshotSchedulePolicySnapshotProperties_Labels
newResourcePolicySnapshotSchedulePolicySnapshotProperties_Labels additional =
  ResourcePolicySnapshotSchedulePolicySnapshotProperties_Labels
    { additional = additional
    }

instance
  Core.FromJSON
    ResourcePolicySnapshotSchedulePolicySnapshotProperties_Labels
  where
  parseJSON =
    Core.withObject
      "ResourcePolicySnapshotSchedulePolicySnapshotProperties_Labels"
      ( \o ->
          ResourcePolicySnapshotSchedulePolicySnapshotProperties_Labels
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    ResourcePolicySnapshotSchedulePolicySnapshotProperties_Labels
  where
  toJSON
    ResourcePolicySnapshotSchedulePolicySnapshotProperties_Labels {..} =
      Core.toJSON additional

-- | Time window specified for weekly operations.
--
-- /See:/ 'newResourcePolicyWeeklyCycle' smart constructor.
newtype ResourcePolicyWeeklyCycle = ResourcePolicyWeeklyCycle
  { -- | Up to 7 intervals\/windows, one for each day of the week.
    dayOfWeeks :: (Core.Maybe [ResourcePolicyWeeklyCycleDayOfWeek])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicyWeeklyCycle' with the minimum fields required to make a request.
newResourcePolicyWeeklyCycle ::
  ResourcePolicyWeeklyCycle
newResourcePolicyWeeklyCycle =
  ResourcePolicyWeeklyCycle {dayOfWeeks = Core.Nothing}

instance Core.FromJSON ResourcePolicyWeeklyCycle where
  parseJSON =
    Core.withObject
      "ResourcePolicyWeeklyCycle"
      ( \o ->
          ResourcePolicyWeeklyCycle
            Core.<$> (o Core..:? "dayOfWeeks")
      )

instance Core.ToJSON ResourcePolicyWeeklyCycle where
  toJSON ResourcePolicyWeeklyCycle {..} =
    Core.object
      ( Core.catMaybes
          [("dayOfWeeks" Core..=) Core.<$> dayOfWeeks]
      )

--
-- /See:/ 'newResourcePolicyWeeklyCycleDayOfWeek' smart constructor.
data ResourcePolicyWeeklyCycleDayOfWeek = ResourcePolicyWeeklyCycleDayOfWeek
  { -- | Defines a schedule that runs on specific days of the week. Specify one or more days. The following options are available: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
    day :: (Core.Maybe ResourcePolicyWeeklyCycleDayOfWeek_Day),
    -- | [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario.
    duration :: (Core.Maybe Core.Text),
    -- | Time within the window to start the operations. It must be in format \"HH:MM\", where HH : [00-23] and MM : [00-00] GMT.
    startTime :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourcePolicyWeeklyCycleDayOfWeek' with the minimum fields required to make a request.
newResourcePolicyWeeklyCycleDayOfWeek ::
  ResourcePolicyWeeklyCycleDayOfWeek
newResourcePolicyWeeklyCycleDayOfWeek =
  ResourcePolicyWeeklyCycleDayOfWeek
    { day = Core.Nothing,
      duration = Core.Nothing,
      startTime = Core.Nothing
    }

instance
  Core.FromJSON
    ResourcePolicyWeeklyCycleDayOfWeek
  where
  parseJSON =
    Core.withObject
      "ResourcePolicyWeeklyCycleDayOfWeek"
      ( \o ->
          ResourcePolicyWeeklyCycleDayOfWeek
            Core.<$> (o Core..:? "day")
            Core.<*> (o Core..:? "duration")
            Core.<*> (o Core..:? "startTime")
      )

instance
  Core.ToJSON
    ResourcePolicyWeeklyCycleDayOfWeek
  where
  toJSON ResourcePolicyWeeklyCycleDayOfWeek {..} =
    Core.object
      ( Core.catMaybes
          [ ("day" Core..=) Core.<$> day,
            ("duration" Core..=) Core.<$> duration,
            ("startTime" Core..=) Core.<$> startTime
          ]
      )

-- | Contains output only fields. Use this sub-message for actual values set on Instance attributes as compared to the value requested by the user (intent) in their instance CRUD calls.
--
-- /See:/ 'newResourceStatus' smart constructor.
newtype ResourceStatus = ResourceStatus
  { -- | [Output Only] An opaque ID of the host on which the VM is running.
    physicalHost :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ResourceStatus' with the minimum fields required to make a request.
newResourceStatus ::
  ResourceStatus
newResourceStatus = ResourceStatus {physicalHost = Core.Nothing}

instance Core.FromJSON ResourceStatus where
  parseJSON =
    Core.withObject
      "ResourceStatus"
      ( \o ->
          ResourceStatus Core.<$> (o Core..:? "physicalHost")
      )

instance Core.ToJSON ResourceStatus where
  toJSON ResourceStatus {..} =
    Core.object
      ( Core.catMaybes
          [("physicalHost" Core..=) Core.<$> physicalHost]
      )

-- | Represents a Route resource. A route defines a path from VM instances in the VPC network to a specific destination. This destination can be inside or outside the VPC network. For more information, read the Routes overview.
--
-- /See:/ 'newRoute' smart constructor.
data Route = Route
  { -- | [Output Only] AS path.
    asPaths :: (Core.Maybe [RouteAsPath]),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this field when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | The destination range of outgoing packets that this route applies to. Both IPv4 and IPv6 are supported.
    destRange :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of this resource. Always compute#routes for Route resources.
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@. The first character must be a lowercase letter, and all following characters (except for the last character) must be a dash, lowercase letter, or digit. The last character must be a lowercase letter or digit.
    name :: (Core.Maybe Core.Text),
    -- | Fully-qualified URL of the network that this route applies to.
    network :: (Core.Maybe Core.Text),
    -- | The URL to a gateway that should handle matching packets. You can only specify the internet gateway using a full or partial valid URL: projects\/ project\/global\/gateways\/default-internet-gateway
    nextHopGateway :: (Core.Maybe Core.Text),
    -- | The URL to a forwarding rule of type loadBalancingScheme=INTERNAL that should handle matching packets or the IP address of the forwarding Rule. For example, the following are all valid URLs: - 10.128.0.56 - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project\/regions\/region \/forwardingRules\/forwardingRule - regions\/region\/forwardingRules\/forwardingRule
    nextHopIlb :: (Core.Maybe Core.Text),
    -- | The URL to an instance that should handle matching packets. You can specify this as a full or partial URL. For example: https:\/\/www.googleapis.com\/compute\/v1\/projects\/project\/zones\/zone\/instances\/
    nextHopInstance :: (Core.Maybe Core.Text),
    -- | The network IP address of an instance that should handle matching packets. Only IPv4 is supported.
    nextHopIp :: (Core.Maybe Core.Text),
    -- | The URL of the local network if it should handle matching packets.
    nextHopNetwork :: (Core.Maybe Core.Text),
    -- | [Output Only] The network peering name that should handle matching packets, which should conform to RFC1035.
    nextHopPeering :: (Core.Maybe Core.Text),
    -- | The URL to a VpnTunnel that should handle matching packets.
    nextHopVpnTunnel :: (Core.Maybe Core.Text),
    -- | The priority of this route. Priority is used to break ties in cases where there is more than one matching route of equal prefix length. In cases where multiple routes have equal prefix length, the one with the lowest-numbered priority value wins. The default value is @1000@. The priority value must be from @0@ to @65535@, inclusive.
    priority :: (Core.Maybe Core.Word32),
    -- | [Output only] The status of the route.
    routeStatus :: (Core.Maybe Route_RouteStatus),
    -- | [Output Only] The type of this route, which can be one of the following values: - \'TRANSIT\' for a transit route that this router learned from another Cloud Router and will readvertise to one of its BGP peers - \'SUBNET\' for a route from a subnet of the VPC - \'BGP\' for a route learned from a BGP peer of this router - \'STATIC\' for a static route
    routeType :: (Core.Maybe Route_RouteType),
    -- | [Output Only] Server-defined fully-qualified URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | A list of instance tags to which this route applies.
    tags :: (Core.Maybe [Core.Text]),
    -- | [Output Only] If potential misconfigurations are detected for this route, this field will be populated with warning messages.
    warnings :: (Core.Maybe [Route_WarningsItem])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Route' with the minimum fields required to make a request.
newRoute ::
  Route
newRoute =
  Route
    { asPaths = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      destRange = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#route",
      name = Core.Nothing,
      network = Core.Nothing,
      nextHopGateway = Core.Nothing,
      nextHopIlb = Core.Nothing,
      nextHopInstance = Core.Nothing,
      nextHopIp = Core.Nothing,
      nextHopNetwork = Core.Nothing,
      nextHopPeering = Core.Nothing,
      nextHopVpnTunnel = Core.Nothing,
      priority = Core.Nothing,
      routeStatus = Core.Nothing,
      routeType = Core.Nothing,
      selfLink = Core.Nothing,
      tags = Core.Nothing,
      warnings = Core.Nothing
    }

instance Core.FromJSON Route where
  parseJSON =
    Core.withObject
      "Route"
      ( \o ->
          Route
            Core.<$> (o Core..:? "asPaths")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "destRange")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#route")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "network")
            Core.<*> (o Core..:? "nextHopGateway")
            Core.<*> (o Core..:? "nextHopIlb")
            Core.<*> (o Core..:? "nextHopInstance")
            Core.<*> (o Core..:? "nextHopIp")
            Core.<*> (o Core..:? "nextHopNetwork")
            Core.<*> (o Core..:? "nextHopPeering")
            Core.<*> (o Core..:? "nextHopVpnTunnel")
            Core.<*> (o Core..:? "priority")
            Core.<*> (o Core..:? "routeStatus")
            Core.<*> (o Core..:? "routeType")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "tags")
            Core.<*> (o Core..:? "warnings")
      )

instance Core.ToJSON Route where
  toJSON Route {..} =
    Core.object
      ( Core.catMaybes
          [ ("asPaths" Core..=) Core.<$> asPaths,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("destRange" Core..=) Core.<$> destRange,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("network" Core..=) Core.<$> network,
            ("nextHopGateway" Core..=) Core.<$> nextHopGateway,
            ("nextHopIlb" Core..=) Core.<$> nextHopIlb,
            ("nextHopInstance" Core..=) Core.<$> nextHopInstance,
            ("nextHopIp" Core..=) Core.<$> nextHopIp,
            ("nextHopNetwork" Core..=) Core.<$> nextHopNetwork,
            ("nextHopPeering" Core..=) Core.<$> nextHopPeering,
            ("nextHopVpnTunnel" Core..=)
              Core.<$> nextHopVpnTunnel,
            ("priority" Core..=) Core.<$> priority,
            ("routeStatus" Core..=) Core.<$> routeStatus,
            ("routeType" Core..=) Core.<$> routeType,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("tags" Core..=) Core.<$> tags,
            ("warnings" Core..=) Core.<$> warnings
          ]
      )

--
-- /See:/ 'newRoute_WarningsItem' smart constructor.
data Route_WarningsItem = Route_WarningsItem
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe Route_WarningsItem_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [Route_WarningsItem_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Route_WarningsItem' with the minimum fields required to make a request.
newRoute_WarningsItem ::
  Route_WarningsItem
newRoute_WarningsItem =
  Route_WarningsItem
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON Route_WarningsItem where
  parseJSON =
    Core.withObject
      "Route_WarningsItem"
      ( \o ->
          Route_WarningsItem
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON Route_WarningsItem where
  toJSON Route_WarningsItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newRoute_WarningsItem_DataItem' smart constructor.
data Route_WarningsItem_DataItem = Route_WarningsItem_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Route_WarningsItem_DataItem' with the minimum fields required to make a request.
newRoute_WarningsItem_DataItem ::
  Route_WarningsItem_DataItem
newRoute_WarningsItem_DataItem =
  Route_WarningsItem_DataItem {key = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON Route_WarningsItem_DataItem where
  parseJSON =
    Core.withObject
      "Route_WarningsItem_DataItem"
      ( \o ->
          Route_WarningsItem_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON Route_WarningsItem_DataItem where
  toJSON Route_WarningsItem_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newRouteAsPath' smart constructor.
data RouteAsPath = RouteAsPath
  { -- | [Output Only] The AS numbers of the AS Path.
    asLists :: (Core.Maybe [Core.Word32]),
    -- | [Output Only] The type of the AS Path, which can be one of the following values: - \'AS/SET\': unordered set of autonomous systems that the route in has traversed - \'AS/SEQUENCE\': ordered set of autonomous systems that the route has traversed - \'AS/CONFED/SEQUENCE\': ordered set of Member Autonomous Systems in the local confederation that the route has traversed - \'AS/CONFED/SET\': unordered set of Member Autonomous Systems in the local confederation that the route has traversed
    pathSegmentType :: (Core.Maybe RouteAsPath_PathSegmentType)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouteAsPath' with the minimum fields required to make a request.
newRouteAsPath ::
  RouteAsPath
newRouteAsPath =
  RouteAsPath {asLists = Core.Nothing, pathSegmentType = Core.Nothing}

instance Core.FromJSON RouteAsPath where
  parseJSON =
    Core.withObject
      "RouteAsPath"
      ( \o ->
          RouteAsPath
            Core.<$> (o Core..:? "asLists")
            Core.<*> (o Core..:? "pathSegmentType")
      )

instance Core.ToJSON RouteAsPath where
  toJSON RouteAsPath {..} =
    Core.object
      ( Core.catMaybes
          [ ("asLists" Core..=) Core.<$> asLists,
            ("pathSegmentType" Core..=)
              Core.<$> pathSegmentType
          ]
      )

-- | Contains a list of Route resources.
--
-- /See:/ 'newRouteList' smart constructor.
data RouteList = RouteList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of Route resources.
    items :: (Core.Maybe [Route]),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe RouteList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouteList' with the minimum fields required to make a request.
newRouteList ::
  RouteList
newRouteList =
  RouteList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#routeList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON RouteList where
  parseJSON =
    Core.withObject
      "RouteList"
      ( \o ->
          RouteList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#routeList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON RouteList where
  toJSON RouteList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newRouteList_Warning' smart constructor.
data RouteList_Warning = RouteList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe RouteList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [RouteList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouteList_Warning' with the minimum fields required to make a request.
newRouteList_Warning ::
  RouteList_Warning
newRouteList_Warning =
  RouteList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON RouteList_Warning where
  parseJSON =
    Core.withObject
      "RouteList_Warning"
      ( \o ->
          RouteList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON RouteList_Warning where
  toJSON RouteList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newRouteList_Warning_DataItem' smart constructor.
data RouteList_Warning_DataItem = RouteList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouteList_Warning_DataItem' with the minimum fields required to make a request.
newRouteList_Warning_DataItem ::
  RouteList_Warning_DataItem
newRouteList_Warning_DataItem =
  RouteList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON RouteList_Warning_DataItem where
  parseJSON =
    Core.withObject
      "RouteList_Warning_DataItem"
      ( \o ->
          RouteList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON RouteList_Warning_DataItem where
  toJSON RouteList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Represents a Cloud Router resource. For more information about Cloud Router, read the Cloud Router overview.
--
-- /See:/ 'newRouter' smart constructor.
data Router = Router
  { -- | BGP information specific to this router.
    bgp :: (Core.Maybe RouterBgp),
    -- | BGP information that must be configured into the routing stack to establish BGP peering. This information must specify the peer ASN and either the interface name, IP address, or peer IP address. Please refer to RFC4273.
    bgpPeers :: (Core.Maybe [RouterBgpPeer]),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | Indicates if a router is dedicated for use with encrypted VLAN attachments (interconnectAttachments).
    encryptedInterconnectRouter :: (Core.Maybe Core.Bool),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | Router interfaces. Each interface requires either one linked resource, (for example, linkedVpnTunnel), or IP address and IP address range (for example, ipRange), or both.
    interfaces :: (Core.Maybe [RouterInterface]),
    -- | [Output Only] Type of resource. Always compute#router for routers.
    kind :: Core.Text,
    -- | Keys used for MD5 authentication.
    md5AuthenticationKeys :: (Core.Maybe [RouterMd5AuthenticationKey]),
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | A list of NAT services created in this router.
    nats :: (Core.Maybe [RouterNat]),
    -- | URI of the network to which this router belongs.
    network :: (Core.Maybe Core.Text),
    -- | [Output Only] URI of the region where the router resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Router' with the minimum fields required to make a request.
newRouter ::
  Router
newRouter =
  Router
    { bgp = Core.Nothing,
      bgpPeers = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      encryptedInterconnectRouter = Core.Nothing,
      id = Core.Nothing,
      interfaces = Core.Nothing,
      kind = "compute#router",
      md5AuthenticationKeys = Core.Nothing,
      name = Core.Nothing,
      nats = Core.Nothing,
      network = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing
    }

instance Core.FromJSON Router where
  parseJSON =
    Core.withObject
      "Router"
      ( \o ->
          Router
            Core.<$> (o Core..:? "bgp")
            Core.<*> (o Core..:? "bgpPeers")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "encryptedInterconnectRouter")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "interfaces")
            Core.<*> (o Core..:? "kind" Core..!= "compute#router")
            Core.<*> (o Core..:? "md5AuthenticationKeys")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "nats")
            Core.<*> (o Core..:? "network")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
      )

instance Core.ToJSON Router where
  toJSON Router {..} =
    Core.object
      ( Core.catMaybes
          [ ("bgp" Core..=) Core.<$> bgp,
            ("bgpPeers" Core..=) Core.<$> bgpPeers,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("encryptedInterconnectRouter" Core..=)
              Core.<$> encryptedInterconnectRouter,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("interfaces" Core..=) Core.<$> interfaces,
            Core.Just ("kind" Core..= kind),
            ("md5AuthenticationKeys" Core..=)
              Core.<$> md5AuthenticationKeys,
            ("name" Core..=) Core.<$> name,
            ("nats" Core..=) Core.<$> nats,
            ("network" Core..=) Core.<$> network,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink
          ]
      )

-- | Description-tagged IP ranges for the router to advertise.
--
-- /See:/ 'newRouterAdvertisedIpRange' smart constructor.
data RouterAdvertisedIpRange = RouterAdvertisedIpRange
  { -- | User-specified description for the IP range.
    description :: (Core.Maybe Core.Text),
    -- | The IP range to advertise. The value must be a CIDR-formatted string.
    range :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterAdvertisedIpRange' with the minimum fields required to make a request.
newRouterAdvertisedIpRange ::
  RouterAdvertisedIpRange
newRouterAdvertisedIpRange =
  RouterAdvertisedIpRange {description = Core.Nothing, range = Core.Nothing}

instance Core.FromJSON RouterAdvertisedIpRange where
  parseJSON =
    Core.withObject
      "RouterAdvertisedIpRange"
      ( \o ->
          RouterAdvertisedIpRange
            Core.<$> (o Core..:? "description")
            Core.<*> (o Core..:? "range")
      )

instance Core.ToJSON RouterAdvertisedIpRange where
  toJSON RouterAdvertisedIpRange {..} =
    Core.object
      ( Core.catMaybes
          [ ("description" Core..=) Core.<$> description,
            ("range" Core..=) Core.<$> range
          ]
      )

-- | Contains a list of routers.
--
-- /See:/ 'newRouterAggregatedList' smart constructor.
data RouterAggregatedList = RouterAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of Router resources.
    items :: (Core.Maybe RouterAggregatedList_Items),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe RouterAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterAggregatedList' with the minimum fields required to make a request.
newRouterAggregatedList ::
  RouterAggregatedList
newRouterAggregatedList =
  RouterAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#routerAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON RouterAggregatedList where
  parseJSON =
    Core.withObject
      "RouterAggregatedList"
      ( \o ->
          RouterAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#routerAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON RouterAggregatedList where
  toJSON RouterAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of Router resources.
--
-- /See:/ 'newRouterAggregatedList_Items' smart constructor.
newtype RouterAggregatedList_Items = RouterAggregatedList_Items
  { -- | Name of the scope containing this set of routers.
    additional :: (Core.HashMap Core.Text RoutersScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterAggregatedList_Items' with the minimum fields required to make a request.
newRouterAggregatedList_Items ::
  -- |  Name of the scope containing this set of routers. See 'additional'.
  Core.HashMap Core.Text RoutersScopedList ->
  RouterAggregatedList_Items
newRouterAggregatedList_Items additional =
  RouterAggregatedList_Items {additional = additional}

instance Core.FromJSON RouterAggregatedList_Items where
  parseJSON =
    Core.withObject
      "RouterAggregatedList_Items"
      ( \o ->
          RouterAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON RouterAggregatedList_Items where
  toJSON RouterAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newRouterAggregatedList_Warning' smart constructor.
data RouterAggregatedList_Warning = RouterAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe RouterAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [RouterAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterAggregatedList_Warning' with the minimum fields required to make a request.
newRouterAggregatedList_Warning ::
  RouterAggregatedList_Warning
newRouterAggregatedList_Warning =
  RouterAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON RouterAggregatedList_Warning where
  parseJSON =
    Core.withObject
      "RouterAggregatedList_Warning"
      ( \o ->
          RouterAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON RouterAggregatedList_Warning where
  toJSON RouterAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newRouterAggregatedList_Warning_DataItem' smart constructor.
data RouterAggregatedList_Warning_DataItem = RouterAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newRouterAggregatedList_Warning_DataItem ::
  RouterAggregatedList_Warning_DataItem
newRouterAggregatedList_Warning_DataItem =
  RouterAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    RouterAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "RouterAggregatedList_Warning_DataItem"
      ( \o ->
          RouterAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    RouterAggregatedList_Warning_DataItem
  where
  toJSON RouterAggregatedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newRouterBgp' smart constructor.
data RouterBgp = RouterBgp
  { -- | User-specified flag to indicate which mode to use for advertisement. The options are DEFAULT or CUSTOM.
    advertiseMode :: (Core.Maybe RouterBgp_AdvertiseMode),
    -- | User-specified list of prefix groups to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These groups will be advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
    advertisedGroups :: (Core.Maybe [RouterBgp_AdvertisedGroupsItem]),
    -- | User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and is advertised to all peers of the router. These IP ranges will be advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
    advertisedIpRanges :: (Core.Maybe [RouterAdvertisedIpRange]),
    -- | Local BGP Autonomous System Number (ASN). Must be an RFC6996 private ASN, either 16-bit or 32-bit. The value will be fixed for this router resource. All VPN tunnels that link to this router will have the same local ASN.
    asn :: (Core.Maybe Core.Word32),
    -- | The interval in seconds between BGP keepalive messages that are sent to the peer. Hold time is three times the interval at which keepalive messages are sent, and the hold time is the maximum number of seconds allowed to elapse between successive keepalive messages that BGP receives from a peer. BGP will use the smaller of either the local hold time value or the peer\'s hold time value as the hold time for the BGP connection between the two peers. If set, this value must be between 20 and 60. The default is 20.
    keepaliveInterval :: (Core.Maybe Core.Word32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterBgp' with the minimum fields required to make a request.
newRouterBgp ::
  RouterBgp
newRouterBgp =
  RouterBgp
    { advertiseMode = Core.Nothing,
      advertisedGroups = Core.Nothing,
      advertisedIpRanges = Core.Nothing,
      asn = Core.Nothing,
      keepaliveInterval = Core.Nothing
    }

instance Core.FromJSON RouterBgp where
  parseJSON =
    Core.withObject
      "RouterBgp"
      ( \o ->
          RouterBgp
            Core.<$> (o Core..:? "advertiseMode")
            Core.<*> (o Core..:? "advertisedGroups")
            Core.<*> (o Core..:? "advertisedIpRanges")
            Core.<*> (o Core..:? "asn")
            Core.<*> (o Core..:? "keepaliveInterval")
      )

instance Core.ToJSON RouterBgp where
  toJSON RouterBgp {..} =
    Core.object
      ( Core.catMaybes
          [ ("advertiseMode" Core..=) Core.<$> advertiseMode,
            ("advertisedGroups" Core..=)
              Core.<$> advertisedGroups,
            ("advertisedIpRanges" Core..=)
              Core.<$> advertisedIpRanges,
            ("asn" Core..=) Core.<$> asn,
            ("keepaliveInterval" Core..=)
              Core.<$> keepaliveInterval
          ]
      )

--
-- /See:/ 'newRouterBgpPeer' smart constructor.
data RouterBgpPeer = RouterBgpPeer
  { -- | User-specified flag to indicate which mode to use for advertisement.
    advertiseMode :: (Core.Maybe RouterBgpPeer_AdvertiseMode),
    -- | User-specified list of prefix groups to advertise in custom mode, which currently supports the following option: - ALL/SUBNETS: Advertises all of the router\'s own VPC subnets. This excludes any routes learned for subnets that use VPC Network Peering. Note that this field can only be populated if advertise/mode is CUSTOM and overrides the list defined for the router (in the \"bgp\" message). These groups are advertised in addition to any specified prefixes. Leave this field blank to advertise no custom groups.
    advertisedGroups :: (Core.Maybe [RouterBgpPeer_AdvertisedGroupsItem]),
    -- | User-specified list of individual IP ranges to advertise in custom mode. This field can only be populated if advertise_mode is CUSTOM and overrides the list defined for the router (in the \"bgp\" message). These IP ranges are advertised in addition to any specified groups. Leave this field blank to advertise no custom IP ranges.
    advertisedIpRanges :: (Core.Maybe [RouterAdvertisedIpRange]),
    -- | The priority of routes advertised to this BGP peer. Where there is more than one matching route of maximum length, the routes with the lowest priority value win.
    advertisedRoutePriority :: (Core.Maybe Core.Word32),
    -- | BFD configuration for the BGP peering.
    bfd :: (Core.Maybe RouterBgpPeerBfd),
    -- | The status of the BGP peer connection. If set to FALSE, any active session with the peer is terminated and all associated routing information is removed. If set to TRUE, the peer connection can be established with routing information. The default is TRUE.
    enable :: (Core.Maybe RouterBgpPeer_Enable),
    -- | Enable IPv6 traffic over BGP Peer. If not specified, it is disabled by default.
    enableIpv6 :: (Core.Maybe Core.Bool),
    -- | Name of the interface the BGP peer is associated with.
    interfaceName :: (Core.Maybe Core.Text),
    -- | IP address of the interface inside Google Cloud Platform. Only IPv4 is supported.
    ipAddress :: (Core.Maybe Core.Text),
    -- | IPv6 address of the interface inside Google Cloud Platform.
    ipv6NexthopAddress :: (Core.Maybe Core.Text),
    -- | [Output Only] The resource that configures and manages this BGP peer. - MANAGED/BY/USER is the default value and can be managed by you or other users - MANAGED/BY/ATTACHMENT is a BGP peer that is configured and managed by Cloud Interconnect, specifically by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of BGP peer when the PARTNER InterconnectAttachment is created, updated, or deleted.
    managementType :: (Core.Maybe RouterBgpPeer_ManagementType),
    -- | Present if MD5 authentication is enabled for the peering. Must be the name of one of the entries in the Router.md5/authentication/keys. The field must comply with RFC1035.
    md5AuthenticationKeyName :: (Core.Maybe Core.Text),
    -- | Name of this BGP peer. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | Peer BGP Autonomous System Number (ASN). Each BGP interface may use a different value.
    peerAsn :: (Core.Maybe Core.Word32),
    -- | IP address of the BGP interface outside Google Cloud Platform. Only IPv4 is supported.
    peerIpAddress :: (Core.Maybe Core.Text),
    -- | IPv6 address of the BGP interface outside Google Cloud Platform.
    peerIpv6NexthopAddress :: (Core.Maybe Core.Text),
    -- | URI of the VM instance that is used as third-party router appliances such as Next Gen Firewalls, Virtual Routers, or Router Appliances. The VM instance must be located in zones contained in the same region as this Cloud Router. The VM instance is the peer side of the BGP session.
    routerApplianceInstance :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterBgpPeer' with the minimum fields required to make a request.
newRouterBgpPeer ::
  RouterBgpPeer
newRouterBgpPeer =
  RouterBgpPeer
    { advertiseMode = Core.Nothing,
      advertisedGroups = Core.Nothing,
      advertisedIpRanges = Core.Nothing,
      advertisedRoutePriority = Core.Nothing,
      bfd = Core.Nothing,
      enable = Core.Nothing,
      enableIpv6 = Core.Nothing,
      interfaceName = Core.Nothing,
      ipAddress = Core.Nothing,
      ipv6NexthopAddress = Core.Nothing,
      managementType = Core.Nothing,
      md5AuthenticationKeyName = Core.Nothing,
      name = Core.Nothing,
      peerAsn = Core.Nothing,
      peerIpAddress = Core.Nothing,
      peerIpv6NexthopAddress = Core.Nothing,
      routerApplianceInstance = Core.Nothing
    }

instance Core.FromJSON RouterBgpPeer where
  parseJSON =
    Core.withObject
      "RouterBgpPeer"
      ( \o ->
          RouterBgpPeer
            Core.<$> (o Core..:? "advertiseMode")
            Core.<*> (o Core..:? "advertisedGroups")
            Core.<*> (o Core..:? "advertisedIpRanges")
            Core.<*> (o Core..:? "advertisedRoutePriority")
            Core.<*> (o Core..:? "bfd")
            Core.<*> (o Core..:? "enable")
            Core.<*> (o Core..:? "enableIpv6")
            Core.<*> (o Core..:? "interfaceName")
            Core.<*> (o Core..:? "ipAddress")
            Core.<*> (o Core..:? "ipv6NexthopAddress")
            Core.<*> (o Core..:? "managementType")
            Core.<*> (o Core..:? "md5AuthenticationKeyName")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "peerAsn")
            Core.<*> (o Core..:? "peerIpAddress")
            Core.<*> (o Core..:? "peerIpv6NexthopAddress")
            Core.<*> (o Core..:? "routerApplianceInstance")
      )

instance Core.ToJSON RouterBgpPeer where
  toJSON RouterBgpPeer {..} =
    Core.object
      ( Core.catMaybes
          [ ("advertiseMode" Core..=) Core.<$> advertiseMode,
            ("advertisedGroups" Core..=)
              Core.<$> advertisedGroups,
            ("advertisedIpRanges" Core..=)
              Core.<$> advertisedIpRanges,
            ("advertisedRoutePriority" Core..=)
              Core.<$> advertisedRoutePriority,
            ("bfd" Core..=) Core.<$> bfd,
            ("enable" Core..=) Core.<$> enable,
            ("enableIpv6" Core..=) Core.<$> enableIpv6,
            ("interfaceName" Core..=) Core.<$> interfaceName,
            ("ipAddress" Core..=) Core.<$> ipAddress,
            ("ipv6NexthopAddress" Core..=)
              Core.<$> ipv6NexthopAddress,
            ("managementType" Core..=) Core.<$> managementType,
            ("md5AuthenticationKeyName" Core..=)
              Core.<$> md5AuthenticationKeyName,
            ("name" Core..=) Core.<$> name,
            ("peerAsn" Core..=) Core.<$> peerAsn,
            ("peerIpAddress" Core..=) Core.<$> peerIpAddress,
            ("peerIpv6NexthopAddress" Core..=)
              Core.<$> peerIpv6NexthopAddress,
            ("routerApplianceInstance" Core..=)
              Core.<$> routerApplianceInstance
          ]
      )

--
-- /See:/ 'newRouterBgpPeerBfd' smart constructor.
data RouterBgpPeerBfd = RouterBgpPeerBfd
  { -- | The minimum interval, in milliseconds, between BFD control packets received from the peer router. The actual value is negotiated between the two routers and is equal to the greater of this value and the transmit interval of the other router. If set, this value must be between 1000 and 30000. The default is 1000.
    minReceiveInterval :: (Core.Maybe Core.Word32),
    -- | The minimum interval, in milliseconds, between BFD control packets transmitted to the peer router. The actual value is negotiated between the two routers and is equal to the greater of this value and the corresponding receive interval of the other router. If set, this value must be between 1000 and 30000. The default is 1000.
    minTransmitInterval :: (Core.Maybe Core.Word32),
    -- | The number of consecutive BFD packets that must be missed before BFD declares that a peer is unavailable. If set, the value must be a value between 5 and 16. The default is 5.
    multiplier :: (Core.Maybe Core.Word32),
    -- | The BFD session initialization mode for this BGP peer. If set to ACTIVE, the Cloud Router will initiate the BFD session for this BGP peer. If set to PASSIVE, the Cloud Router will wait for the peer router to initiate the BFD session for this BGP peer. If set to DISABLED, BFD is disabled for this BGP peer. The default is DISABLED.
    sessionInitializationMode :: (Core.Maybe RouterBgpPeerBfd_SessionInitializationMode)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterBgpPeerBfd' with the minimum fields required to make a request.
newRouterBgpPeerBfd ::
  RouterBgpPeerBfd
newRouterBgpPeerBfd =
  RouterBgpPeerBfd
    { minReceiveInterval = Core.Nothing,
      minTransmitInterval = Core.Nothing,
      multiplier = Core.Nothing,
      sessionInitializationMode = Core.Nothing
    }

instance Core.FromJSON RouterBgpPeerBfd where
  parseJSON =
    Core.withObject
      "RouterBgpPeerBfd"
      ( \o ->
          RouterBgpPeerBfd
            Core.<$> (o Core..:? "minReceiveInterval")
            Core.<*> (o Core..:? "minTransmitInterval")
            Core.<*> (o Core..:? "multiplier")
            Core.<*> (o Core..:? "sessionInitializationMode")
      )

instance Core.ToJSON RouterBgpPeerBfd where
  toJSON RouterBgpPeerBfd {..} =
    Core.object
      ( Core.catMaybes
          [ ("minReceiveInterval" Core..=)
              Core.<$> minReceiveInterval,
            ("minTransmitInterval" Core..=)
              Core.<$> minTransmitInterval,
            ("multiplier" Core..=) Core.<$> multiplier,
            ("sessionInitializationMode" Core..=)
              Core.<$> sessionInitializationMode
          ]
      )

--
-- /See:/ 'newRouterInterface' smart constructor.
data RouterInterface = RouterInterface
  { -- | IP address and range of the interface. The IP range must be in the RFC3927 link-local IP address space. The value must be a CIDR-formatted string, for example: 169.254.0.1\/30. NOTE: Do not truncate the address as it represents the IP address of the interface.
    ipRange :: (Core.Maybe Core.Text),
    -- | URI of the linked Interconnect attachment. It must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance.
    linkedInterconnectAttachment :: (Core.Maybe Core.Text),
    -- | URI of the linked VPN tunnel, which must be in the same region as the router. Each interface can have one linked resource, which can be a VPN tunnel, an Interconnect attachment, or a virtual machine instance.
    linkedVpnTunnel :: (Core.Maybe Core.Text),
    -- | [Output Only] The resource that configures and manages this interface. - MANAGED/BY/USER is the default value and can be managed directly by users. - MANAGED/BY/ATTACHMENT is an interface that is configured and managed by Cloud Interconnect, specifically, by an InterconnectAttachment of type PARTNER. Google automatically creates, updates, and deletes this type of interface when the PARTNER InterconnectAttachment is created, updated, or deleted.
    managementType :: (Core.Maybe RouterInterface_ManagementType),
    -- | Name of this interface entry. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | The regional private internal IP address that is used to establish BGP sessions to a VM instance acting as a third-party Router Appliance, such as a Next Gen Firewall, a Virtual Router, or an SD-WAN VM.
    privateIpAddress :: (Core.Maybe Core.Text),
    -- | Name of the interface that will be redundant with the current interface you are creating. The redundantInterface must belong to the same Cloud Router as the interface here. To establish the BGP session to a Router Appliance VM, you must create two BGP peers. The two BGP peers must be attached to two separate interfaces that are redundant with each other. The redundant/interface must be 1-63 characters long, and comply with RFC1035. Specifically, the redundant/interface must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    redundantInterface :: (Core.Maybe Core.Text),
    -- | The URI of the subnetwork resource that this interface belongs to, which must be in the same region as the Cloud Router. When you establish a BGP session to a VM instance using this interface, the VM instance must belong to the same subnetwork as the subnetwork specified here.
    subnetwork :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterInterface' with the minimum fields required to make a request.
newRouterInterface ::
  RouterInterface
newRouterInterface =
  RouterInterface
    { ipRange = Core.Nothing,
      linkedInterconnectAttachment = Core.Nothing,
      linkedVpnTunnel = Core.Nothing,
      managementType = Core.Nothing,
      name = Core.Nothing,
      privateIpAddress = Core.Nothing,
      redundantInterface = Core.Nothing,
      subnetwork = Core.Nothing
    }

instance Core.FromJSON RouterInterface where
  parseJSON =
    Core.withObject
      "RouterInterface"
      ( \o ->
          RouterInterface
            Core.<$> (o Core..:? "ipRange")
            Core.<*> (o Core..:? "linkedInterconnectAttachment")
            Core.<*> (o Core..:? "linkedVpnTunnel")
            Core.<*> (o Core..:? "managementType")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "privateIpAddress")
            Core.<*> (o Core..:? "redundantInterface")
            Core.<*> (o Core..:? "subnetwork")
      )

instance Core.ToJSON RouterInterface where
  toJSON RouterInterface {..} =
    Core.object
      ( Core.catMaybes
          [ ("ipRange" Core..=) Core.<$> ipRange,
            ("linkedInterconnectAttachment" Core..=)
              Core.<$> linkedInterconnectAttachment,
            ("linkedVpnTunnel" Core..=) Core.<$> linkedVpnTunnel,
            ("managementType" Core..=) Core.<$> managementType,
            ("name" Core..=) Core.<$> name,
            ("privateIpAddress" Core..=)
              Core.<$> privateIpAddress,
            ("redundantInterface" Core..=)
              Core.<$> redundantInterface,
            ("subnetwork" Core..=) Core.<$> subnetwork
          ]
      )

-- | Contains a list of Router resources.
--
-- /See:/ 'newRouterList' smart constructor.
data RouterList = RouterList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of Router resources.
    items :: (Core.Maybe [Router]),
    -- | [Output Only] Type of resource. Always compute#router for routers.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe RouterList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterList' with the minimum fields required to make a request.
newRouterList ::
  RouterList
newRouterList =
  RouterList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#routerList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON RouterList where
  parseJSON =
    Core.withObject
      "RouterList"
      ( \o ->
          RouterList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#routerList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON RouterList where
  toJSON RouterList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newRouterList_Warning' smart constructor.
data RouterList_Warning = RouterList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe RouterList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [RouterList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterList_Warning' with the minimum fields required to make a request.
newRouterList_Warning ::
  RouterList_Warning
newRouterList_Warning =
  RouterList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON RouterList_Warning where
  parseJSON =
    Core.withObject
      "RouterList_Warning"
      ( \o ->
          RouterList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON RouterList_Warning where
  toJSON RouterList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newRouterList_Warning_DataItem' smart constructor.
data RouterList_Warning_DataItem = RouterList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterList_Warning_DataItem' with the minimum fields required to make a request.
newRouterList_Warning_DataItem ::
  RouterList_Warning_DataItem
newRouterList_Warning_DataItem =
  RouterList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON RouterList_Warning_DataItem where
  parseJSON =
    Core.withObject
      "RouterList_Warning_DataItem"
      ( \o ->
          RouterList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON RouterList_Warning_DataItem where
  toJSON RouterList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newRouterMd5AuthenticationKey' smart constructor.
data RouterMd5AuthenticationKey = RouterMd5AuthenticationKey
  { -- | [Input only] Value of the key. For patch and update calls, it can be skipped to copy the value from the previous configuration. This is allowed if the key with the same name existed before the operation. Maximum length is 80 characters. Can only contain printable ASCII characters.
    key :: (Core.Maybe Core.Text),
    -- | Name used to identify the key. Must be unique within a router. Must be referenced by at least one bgpPeer. Must comply with RFC1035.
    name :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterMd5AuthenticationKey' with the minimum fields required to make a request.
newRouterMd5AuthenticationKey ::
  RouterMd5AuthenticationKey
newRouterMd5AuthenticationKey =
  RouterMd5AuthenticationKey {key = Core.Nothing, name = Core.Nothing}

instance Core.FromJSON RouterMd5AuthenticationKey where
  parseJSON =
    Core.withObject
      "RouterMd5AuthenticationKey"
      ( \o ->
          RouterMd5AuthenticationKey
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "name")
      )

instance Core.ToJSON RouterMd5AuthenticationKey where
  toJSON RouterMd5AuthenticationKey {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("name" Core..=) Core.<$> name
          ]
      )

-- | Represents a Nat resource. It enables the VMs within the specified subnetworks to access Internet without external IP addresses. It specifies a list of subnetworks (and the ranges within) that want to use NAT. Customers can also provide the external IPs that would be used for NAT. GCP would auto-allocate ephemeral IPs if no external IPs are provided.
--
-- /See:/ 'newRouterNat' smart constructor.
data RouterNat = RouterNat
  { -- | A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating\/patching a NAT only.
    drainNatIps :: (Core.Maybe [Core.Text]),
    -- | Enable Dynamic Port Allocation. If not specified, it is disabled by default. If set to true, - Dynamic Port Allocation will be enabled on this NAT config. - enableEndpointIndependentMapping cannot be set to true. - If minPorts is set, minPortsPerVm must be set to a power of two greater than or equal to 32. If minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config.
    enableDynamicPortAllocation :: (Core.Maybe Core.Bool),
    -- |
    enableEndpointIndependentMapping :: (Core.Maybe Core.Bool),
    -- | List of NAT-ted endpoint types supported by the Nat Gateway. If the list is empty, then it will be equivalent to include ENDPOINT/TYPE/VM
    endpointTypes :: (Core.Maybe [RouterNat_EndpointTypesItem]),
    -- | Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.
    icmpIdleTimeoutSec :: (Core.Maybe Core.Int32),
    -- | Configure logging on this NAT.
    logConfig :: (Core.Maybe RouterNatLogConfig),
    -- | Maximum number of ports allocated to a VM from this NAT config when Dynamic Port Allocation is enabled. If Dynamic Port Allocation is not enabled, this field has no effect. If Dynamic Port Allocation is enabled, and this field is set, it must be set to a power of two greater than minPortsPerVm, or 64 if minPortsPerVm is not set. If Dynamic Port Allocation is enabled and this field is not set, a maximum of 65536 ports will be allocated to a VM from this NAT config.
    maxPortsPerVm :: (Core.Maybe Core.Int32),
    -- | Minimum number of ports allocated to a VM from this NAT config. If not set, a default number of ports is allocated to a VM. This is rounded up to the nearest power of 2. For example, if the value of this field is 50, at least 64 ports are allocated to a VM.
    minPortsPerVm :: (Core.Maybe Core.Int32),
    -- | Unique name of this Nat service. The name must be 1-63 characters long and comply with RFC1035.
    name :: (Core.Maybe Core.Text),
    -- | Specify the NatIpAllocateOption, which can take one of the following values: - MANUAL/ONLY: Uses only Nat IP addresses provided by customers. When there are not enough specified Nat IPs, the Nat service fails for new VMs. - AUTO/ONLY: Nat IPs are allocated by Google Cloud Platform; customers can\'t specify any Nat IPs. When choosing AUTO/ONLY, then nat/ip should be empty.
    natIpAllocateOption :: (Core.Maybe RouterNat_NatIpAllocateOption),
    -- | A list of URLs of the IP resources used for this Nat service. These IP addresses must be valid static external IP addresses assigned to the project.
    natIps :: (Core.Maybe [Core.Text]),
    -- | A list of rules associated with this NAT.
    rules :: (Core.Maybe [RouterNatRule]),
    -- | Specify the Nat option, which can take one of the following values: - ALL/SUBNETWORKS/ALL/IP/RANGES: All of the IP ranges in every Subnetwork are allowed to Nat. - ALL/SUBNETWORKS/ALL/PRIMARY/IP/RANGES: All of the primary IP ranges in every Subnetwork are allowed to Nat. - LIST/OF/SUBNETWORKS: A list of Subnetworks are allowed to Nat (specified in the field subnetwork below) The default is SUBNETWORK/IP/RANGE/TO/NAT/OPTION/UNSPECIFIED. Note that if this field contains ALL/SUBNETWORKS/ALL/IP/RANGES or ALL/SUBNETWORKS/ALL/PRIMARY/IP/RANGES, then there should not be any other Router.Nat section in any Router for this network in this region.
    sourceSubnetworkIpRangesToNat :: (Core.Maybe RouterNat_SourceSubnetworkIpRangesToNat),
    -- | A list of Subnetwork resources whose traffic should be translated by NAT Gateway. It is used only when LIST/OF/SUBNETWORKS is selected for the SubnetworkIpRangeToNatOption above.
    subnetworks :: (Core.Maybe [RouterNatSubnetworkToNat]),
    -- | Timeout (in seconds) for TCP established connections. Defaults to 1200s if not set.
    tcpEstablishedIdleTimeoutSec :: (Core.Maybe Core.Int32),
    -- | Timeout (in seconds) for TCP connections that are in TIME_WAIT state. Defaults to 120s if not set.
    tcpTimeWaitTimeoutSec :: (Core.Maybe Core.Int32),
    -- | Timeout (in seconds) for TCP transitory connections. Defaults to 30s if not set.
    tcpTransitoryIdleTimeoutSec :: (Core.Maybe Core.Int32),
    -- | Timeout (in seconds) for UDP connections. Defaults to 30s if not set.
    udpIdleTimeoutSec :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterNat' with the minimum fields required to make a request.
newRouterNat ::
  RouterNat
newRouterNat =
  RouterNat
    { drainNatIps = Core.Nothing,
      enableDynamicPortAllocation = Core.Nothing,
      enableEndpointIndependentMapping = Core.Nothing,
      endpointTypes = Core.Nothing,
      icmpIdleTimeoutSec = Core.Nothing,
      logConfig = Core.Nothing,
      maxPortsPerVm = Core.Nothing,
      minPortsPerVm = Core.Nothing,
      name = Core.Nothing,
      natIpAllocateOption = Core.Nothing,
      natIps = Core.Nothing,
      rules = Core.Nothing,
      sourceSubnetworkIpRangesToNat = Core.Nothing,
      subnetworks = Core.Nothing,
      tcpEstablishedIdleTimeoutSec = Core.Nothing,
      tcpTimeWaitTimeoutSec = Core.Nothing,
      tcpTransitoryIdleTimeoutSec = Core.Nothing,
      udpIdleTimeoutSec = Core.Nothing
    }

instance Core.FromJSON RouterNat where
  parseJSON =
    Core.withObject
      "RouterNat"
      ( \o ->
          RouterNat
            Core.<$> (o Core..:? "drainNatIps")
            Core.<*> (o Core..:? "enableDynamicPortAllocation")
            Core.<*> (o Core..:? "enableEndpointIndependentMapping")
            Core.<*> (o Core..:? "endpointTypes")
            Core.<*> (o Core..:? "icmpIdleTimeoutSec")
            Core.<*> (o Core..:? "logConfig")
            Core.<*> (o Core..:? "maxPortsPerVm")
            Core.<*> (o Core..:? "minPortsPerVm")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "natIpAllocateOption")
            Core.<*> (o Core..:? "natIps")
            Core.<*> (o Core..:? "rules")
            Core.<*> (o Core..:? "sourceSubnetworkIpRangesToNat")
            Core.<*> (o Core..:? "subnetworks")
            Core.<*> (o Core..:? "tcpEstablishedIdleTimeoutSec")
            Core.<*> (o Core..:? "tcpTimeWaitTimeoutSec")
            Core.<*> (o Core..:? "tcpTransitoryIdleTimeoutSec")
            Core.<*> (o Core..:? "udpIdleTimeoutSec")
      )

instance Core.ToJSON RouterNat where
  toJSON RouterNat {..} =
    Core.object
      ( Core.catMaybes
          [ ("drainNatIps" Core..=) Core.<$> drainNatIps,
            ("enableDynamicPortAllocation" Core..=)
              Core.<$> enableDynamicPortAllocation,
            ("enableEndpointIndependentMapping" Core..=)
              Core.<$> enableEndpointIndependentMapping,
            ("endpointTypes" Core..=) Core.<$> endpointTypes,
            ("icmpIdleTimeoutSec" Core..=)
              Core.<$> icmpIdleTimeoutSec,
            ("logConfig" Core..=) Core.<$> logConfig,
            ("maxPortsPerVm" Core..=) Core.<$> maxPortsPerVm,
            ("minPortsPerVm" Core..=) Core.<$> minPortsPerVm,
            ("name" Core..=) Core.<$> name,
            ("natIpAllocateOption" Core..=)
              Core.<$> natIpAllocateOption,
            ("natIps" Core..=) Core.<$> natIps,
            ("rules" Core..=) Core.<$> rules,
            ("sourceSubnetworkIpRangesToNat" Core..=)
              Core.<$> sourceSubnetworkIpRangesToNat,
            ("subnetworks" Core..=) Core.<$> subnetworks,
            ("tcpEstablishedIdleTimeoutSec" Core..=)
              Core.<$> tcpEstablishedIdleTimeoutSec,
            ("tcpTimeWaitTimeoutSec" Core..=)
              Core.<$> tcpTimeWaitTimeoutSec,
            ("tcpTransitoryIdleTimeoutSec" Core..=)
              Core.<$> tcpTransitoryIdleTimeoutSec,
            ("udpIdleTimeoutSec" Core..=)
              Core.<$> udpIdleTimeoutSec
          ]
      )

-- | Configuration of logging on a NAT.
--
-- /See:/ 'newRouterNatLogConfig' smart constructor.
data RouterNatLogConfig = RouterNatLogConfig
  { -- | Indicates whether or not to export logs. This is false by default.
    enable :: (Core.Maybe Core.Bool),
    -- | Specify the desired filtering of logs on this NAT. If unspecified, logs are exported for all connections handled by this NAT. This option can take one of the following values: - ERRORS/ONLY: Export logs only for connection failures. - TRANSLATIONS/ONLY: Export logs only for successful connections. - ALL: Export logs for all connections, successful and unsuccessful.
    filter :: (Core.Maybe RouterNatLogConfig_Filter)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterNatLogConfig' with the minimum fields required to make a request.
newRouterNatLogConfig ::
  RouterNatLogConfig
newRouterNatLogConfig =
  RouterNatLogConfig {enable = Core.Nothing, filter = Core.Nothing}

instance Core.FromJSON RouterNatLogConfig where
  parseJSON =
    Core.withObject
      "RouterNatLogConfig"
      ( \o ->
          RouterNatLogConfig
            Core.<$> (o Core..:? "enable") Core.<*> (o Core..:? "filter")
      )

instance Core.ToJSON RouterNatLogConfig where
  toJSON RouterNatLogConfig {..} =
    Core.object
      ( Core.catMaybes
          [ ("enable" Core..=) Core.<$> enable,
            ("filter" Core..=) Core.<$> filter
          ]
      )

--
-- /See:/ 'newRouterNatRule' smart constructor.
data RouterNatRule = RouterNatRule
  { -- | The action to be enforced for traffic that matches this rule.
    action :: (Core.Maybe RouterNatRuleAction),
    -- | An optional description of this rule.
    description :: (Core.Maybe Core.Text),
    -- | CEL expression that specifies the match condition that egress traffic from a VM is evaluated against. If it evaluates to true, the corresponding @action@ is enforced. The following examples are valid match expressions for public NAT: \"inIpRange(destination.ip, \'1.1.0.0\/16\') || inIpRange(destination.ip, \'2.2.0.0\/16\')\" \"destination.ip == \'1.1.0.1\' || destination.ip == \'8.8.8.8\'\" The following example is a valid match expression for private NAT: \"nexthop.hub == \'https:\/\/networkconnectivity.googleapis.com\/v1alpha1\/projects\/my-project\/global\/hub\/hub-1\'\"
    match :: (Core.Maybe Core.Text),
    -- | An integer uniquely identifying a rule in the list. The rule number must be a positive value between 0 and 65000, and must be unique among rules within a NAT.
    ruleNumber :: (Core.Maybe Core.Word32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterNatRule' with the minimum fields required to make a request.
newRouterNatRule ::
  RouterNatRule
newRouterNatRule =
  RouterNatRule
    { action = Core.Nothing,
      description = Core.Nothing,
      match = Core.Nothing,
      ruleNumber = Core.Nothing
    }

instance Core.FromJSON RouterNatRule where
  parseJSON =
    Core.withObject
      "RouterNatRule"
      ( \o ->
          RouterNatRule
            Core.<$> (o Core..:? "action")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "match")
            Core.<*> (o Core..:? "ruleNumber")
      )

instance Core.ToJSON RouterNatRule where
  toJSON RouterNatRule {..} =
    Core.object
      ( Core.catMaybes
          [ ("action" Core..=) Core.<$> action,
            ("description" Core..=) Core.<$> description,
            ("match" Core..=) Core.<$> match,
            ("ruleNumber" Core..=) Core.<$> ruleNumber
          ]
      )

--
-- /See:/ 'newRouterNatRuleAction' smart constructor.
data RouterNatRuleAction = RouterNatRuleAction
  { -- | A list of URLs of the IP resources used for this NAT rule. These IP addresses must be valid static external IP addresses assigned to the project. This field is used for public NAT.
    sourceNatActiveIps :: (Core.Maybe [Core.Text]),
    -- | A list of URLs of the IP resources to be drained. These IPs must be valid static external IPs that have been assigned to the NAT. These IPs should be used for updating\/patching a NAT rule only. This field is used for public NAT.
    sourceNatDrainIps :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterNatRuleAction' with the minimum fields required to make a request.
newRouterNatRuleAction ::
  RouterNatRuleAction
newRouterNatRuleAction =
  RouterNatRuleAction
    { sourceNatActiveIps = Core.Nothing,
      sourceNatDrainIps = Core.Nothing
    }

instance Core.FromJSON RouterNatRuleAction where
  parseJSON =
    Core.withObject
      "RouterNatRuleAction"
      ( \o ->
          RouterNatRuleAction
            Core.<$> (o Core..:? "sourceNatActiveIps")
            Core.<*> (o Core..:? "sourceNatDrainIps")
      )

instance Core.ToJSON RouterNatRuleAction where
  toJSON RouterNatRuleAction {..} =
    Core.object
      ( Core.catMaybes
          [ ("sourceNatActiveIps" Core..=)
              Core.<$> sourceNatActiveIps,
            ("sourceNatDrainIps" Core..=)
              Core.<$> sourceNatDrainIps
          ]
      )

-- | Defines the IP ranges that want to use NAT for a subnetwork.
--
-- /See:/ 'newRouterNatSubnetworkToNat' smart constructor.
data RouterNatSubnetworkToNat = RouterNatSubnetworkToNat
  { -- | URL for the subnetwork resource that will use NAT.
    name :: (Core.Maybe Core.Text),
    -- | A list of the secondary ranges of the Subnetwork that are allowed to use NAT. This can be populated only if \"LIST/OF/SECONDARY/IP/RANGES\" is one of the values in source/ip/ranges/to/nat.
    secondaryIpRangeNames :: (Core.Maybe [Core.Text]),
    -- | Specify the options for NAT ranges in the Subnetwork. All options of a single value are valid except NAT/IP/RANGE/OPTION/UNSPECIFIED. The only valid option with multiple values is: [\"PRIMARY/IP/RANGE\", \"LIST/OF/SECONDARY/IP/RANGES\"] Default: [ALL/IP/RANGES]
    sourceIpRangesToNat :: (Core.Maybe [RouterNatSubnetworkToNat_SourceIpRangesToNatItem])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterNatSubnetworkToNat' with the minimum fields required to make a request.
newRouterNatSubnetworkToNat ::
  RouterNatSubnetworkToNat
newRouterNatSubnetworkToNat =
  RouterNatSubnetworkToNat
    { name = Core.Nothing,
      secondaryIpRangeNames = Core.Nothing,
      sourceIpRangesToNat = Core.Nothing
    }

instance Core.FromJSON RouterNatSubnetworkToNat where
  parseJSON =
    Core.withObject
      "RouterNatSubnetworkToNat"
      ( \o ->
          RouterNatSubnetworkToNat
            Core.<$> (o Core..:? "name")
            Core.<*> (o Core..:? "secondaryIpRangeNames")
            Core.<*> (o Core..:? "sourceIpRangesToNat")
      )

instance Core.ToJSON RouterNatSubnetworkToNat where
  toJSON RouterNatSubnetworkToNat {..} =
    Core.object
      ( Core.catMaybes
          [ ("name" Core..=) Core.<$> name,
            ("secondaryIpRangeNames" Core..=)
              Core.<$> secondaryIpRangeNames,
            ("sourceIpRangesToNat" Core..=)
              Core.<$> sourceIpRangesToNat
          ]
      )

--
-- /See:/ 'newRouterStatus' smart constructor.
data RouterStatus = RouterStatus
  { -- | Best routes for this router\'s network.
    bestRoutes :: (Core.Maybe [Route]),
    -- | Best routes learned by this router.
    bestRoutesForRouter :: (Core.Maybe [Route]),
    -- |
    bgpPeerStatus :: (Core.Maybe [RouterStatusBgpPeerStatus]),
    -- |
    natStatus :: (Core.Maybe [RouterStatusNatStatus]),
    -- | URI of the network to which this router belongs.
    network :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterStatus' with the minimum fields required to make a request.
newRouterStatus ::
  RouterStatus
newRouterStatus =
  RouterStatus
    { bestRoutes = Core.Nothing,
      bestRoutesForRouter = Core.Nothing,
      bgpPeerStatus = Core.Nothing,
      natStatus = Core.Nothing,
      network = Core.Nothing
    }

instance Core.FromJSON RouterStatus where
  parseJSON =
    Core.withObject
      "RouterStatus"
      ( \o ->
          RouterStatus
            Core.<$> (o Core..:? "bestRoutes")
            Core.<*> (o Core..:? "bestRoutesForRouter")
            Core.<*> (o Core..:? "bgpPeerStatus")
            Core.<*> (o Core..:? "natStatus")
            Core.<*> (o Core..:? "network")
      )

instance Core.ToJSON RouterStatus where
  toJSON RouterStatus {..} =
    Core.object
      ( Core.catMaybes
          [ ("bestRoutes" Core..=) Core.<$> bestRoutes,
            ("bestRoutesForRouter" Core..=)
              Core.<$> bestRoutesForRouter,
            ("bgpPeerStatus" Core..=) Core.<$> bgpPeerStatus,
            ("natStatus" Core..=) Core.<$> natStatus,
            ("network" Core..=) Core.<$> network
          ]
      )

--
-- /See:/ 'newRouterStatusBgpPeerStatus' smart constructor.
data RouterStatusBgpPeerStatus = RouterStatusBgpPeerStatus
  { -- | Routes that were advertised to the remote BGP peer
    advertisedRoutes :: (Core.Maybe [Route]),
    -- |
    bfdStatus :: (Core.Maybe BfdStatus),
    -- | Enable IPv6 traffic over BGP Peer. If not specified, it is disabled by default.
    enableIpv6 :: (Core.Maybe Core.Bool),
    -- | IP address of the local BGP interface.
    ipAddress :: (Core.Maybe Core.Text),
    -- | IPv6 address of the local BGP interface.
    ipv6NexthopAddress :: (Core.Maybe Core.Text),
    -- | URL of the VPN tunnel that this BGP peer controls.
    linkedVpnTunnel :: (Core.Maybe Core.Text),
    -- | Informs whether MD5 authentication is enabled on this BGP peer.
    md5AuthEnabled :: (Core.Maybe Core.Bool),
    -- | Name of this BGP peer. Unique within the Routers resource.
    name :: (Core.Maybe Core.Text),
    -- | Number of routes learned from the remote BGP Peer.
    numLearnedRoutes :: (Core.Maybe Core.Word32),
    -- | IP address of the remote BGP interface.
    peerIpAddress :: (Core.Maybe Core.Text),
    -- | IPv6 address of the remote BGP interface.
    peerIpv6NexthopAddress :: (Core.Maybe Core.Text),
    -- | [Output only] URI of the VM instance that is used as third-party router appliances such as Next Gen Firewalls, Virtual Routers, or Router Appliances. The VM instance is the peer side of the BGP session.
    routerApplianceInstance :: (Core.Maybe Core.Text),
    -- | The state of the BGP session. For a list of possible values for this field, see BGP session states.
    state :: (Core.Maybe Core.Text),
    -- | Status of the BGP peer: {UP, DOWN}
    status :: (Core.Maybe RouterStatusBgpPeerStatus_Status),
    -- | Indicates why particular status was returned.
    statusReason :: (Core.Maybe RouterStatusBgpPeerStatus_StatusReason),
    -- | Time this session has been up. Format: 14 years, 51 weeks, 6 days, 23 hours, 59 minutes, 59 seconds
    uptime :: (Core.Maybe Core.Text),
    -- | Time this session has been up, in seconds. Format: 145
    uptimeSeconds :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterStatusBgpPeerStatus' with the minimum fields required to make a request.
newRouterStatusBgpPeerStatus ::
  RouterStatusBgpPeerStatus
newRouterStatusBgpPeerStatus =
  RouterStatusBgpPeerStatus
    { advertisedRoutes = Core.Nothing,
      bfdStatus = Core.Nothing,
      enableIpv6 = Core.Nothing,
      ipAddress = Core.Nothing,
      ipv6NexthopAddress = Core.Nothing,
      linkedVpnTunnel = Core.Nothing,
      md5AuthEnabled = Core.Nothing,
      name = Core.Nothing,
      numLearnedRoutes = Core.Nothing,
      peerIpAddress = Core.Nothing,
      peerIpv6NexthopAddress = Core.Nothing,
      routerApplianceInstance = Core.Nothing,
      state = Core.Nothing,
      status = Core.Nothing,
      statusReason = Core.Nothing,
      uptime = Core.Nothing,
      uptimeSeconds = Core.Nothing
    }

instance Core.FromJSON RouterStatusBgpPeerStatus where
  parseJSON =
    Core.withObject
      "RouterStatusBgpPeerStatus"
      ( \o ->
          RouterStatusBgpPeerStatus
            Core.<$> (o Core..:? "advertisedRoutes")
            Core.<*> (o Core..:? "bfdStatus")
            Core.<*> (o Core..:? "enableIpv6")
            Core.<*> (o Core..:? "ipAddress")
            Core.<*> (o Core..:? "ipv6NexthopAddress")
            Core.<*> (o Core..:? "linkedVpnTunnel")
            Core.<*> (o Core..:? "md5AuthEnabled")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "numLearnedRoutes")
            Core.<*> (o Core..:? "peerIpAddress")
            Core.<*> (o Core..:? "peerIpv6NexthopAddress")
            Core.<*> (o Core..:? "routerApplianceInstance")
            Core.<*> (o Core..:? "state")
            Core.<*> (o Core..:? "status")
            Core.<*> (o Core..:? "statusReason")
            Core.<*> (o Core..:? "uptime")
            Core.<*> (o Core..:? "uptimeSeconds")
      )

instance Core.ToJSON RouterStatusBgpPeerStatus where
  toJSON RouterStatusBgpPeerStatus {..} =
    Core.object
      ( Core.catMaybes
          [ ("advertisedRoutes" Core..=)
              Core.<$> advertisedRoutes,
            ("bfdStatus" Core..=) Core.<$> bfdStatus,
            ("enableIpv6" Core..=) Core.<$> enableIpv6,
            ("ipAddress" Core..=) Core.<$> ipAddress,
            ("ipv6NexthopAddress" Core..=)
              Core.<$> ipv6NexthopAddress,
            ("linkedVpnTunnel" Core..=) Core.<$> linkedVpnTunnel,
            ("md5AuthEnabled" Core..=) Core.<$> md5AuthEnabled,
            ("name" Core..=) Core.<$> name,
            ("numLearnedRoutes" Core..=)
              Core.<$> numLearnedRoutes,
            ("peerIpAddress" Core..=) Core.<$> peerIpAddress,
            ("peerIpv6NexthopAddress" Core..=)
              Core.<$> peerIpv6NexthopAddress,
            ("routerApplianceInstance" Core..=)
              Core.<$> routerApplianceInstance,
            ("state" Core..=) Core.<$> state,
            ("status" Core..=) Core.<$> status,
            ("statusReason" Core..=) Core.<$> statusReason,
            ("uptime" Core..=) Core.<$> uptime,
            ("uptimeSeconds" Core..=) Core.<$> uptimeSeconds
          ]
      )

-- | Status of a NAT contained in this router.
--
-- /See:/ 'newRouterStatusNatStatus' smart constructor.
data RouterStatusNatStatus = RouterStatusNatStatus
  { -- | A list of IPs auto-allocated for NAT. Example: [\"1.1.1.1\", \"129.2.16.89\"]
    autoAllocatedNatIps :: (Core.Maybe [Core.Text]),
    -- | A list of IPs auto-allocated for NAT that are in drain mode. Example: [\"1.1.1.1\", \"179.12.26.133\"].
    drainAutoAllocatedNatIps :: (Core.Maybe [Core.Text]),
    -- | A list of IPs user-allocated for NAT that are in drain mode. Example: [\"1.1.1.1\", \"179.12.26.133\"].
    drainUserAllocatedNatIps :: (Core.Maybe [Core.Text]),
    -- | The number of extra IPs to allocate. This will be greater than 0 only if user-specified IPs are NOT enough to allow all configured VMs to use NAT. This value is meaningful only when auto-allocation of NAT IPs is /not/ used.
    minExtraNatIpsNeeded :: (Core.Maybe Core.Int32),
    -- | Unique name of this NAT.
    name :: (Core.Maybe Core.Text),
    -- | Number of VM endpoints (i.e., Nics) that can use NAT.
    numVmEndpointsWithNatMappings :: (Core.Maybe Core.Int32),
    -- | Status of rules in this NAT.
    ruleStatus :: (Core.Maybe [RouterStatusNatStatusNatRuleStatus]),
    -- | A list of fully qualified URLs of reserved IP address resources.
    userAllocatedNatIpResources :: (Core.Maybe [Core.Text]),
    -- | A list of IPs user-allocated for NAT. They will be raw IP strings like \"179.12.26.133\".
    userAllocatedNatIps :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterStatusNatStatus' with the minimum fields required to make a request.
newRouterStatusNatStatus ::
  RouterStatusNatStatus
newRouterStatusNatStatus =
  RouterStatusNatStatus
    { autoAllocatedNatIps = Core.Nothing,
      drainAutoAllocatedNatIps = Core.Nothing,
      drainUserAllocatedNatIps = Core.Nothing,
      minExtraNatIpsNeeded = Core.Nothing,
      name = Core.Nothing,
      numVmEndpointsWithNatMappings = Core.Nothing,
      ruleStatus = Core.Nothing,
      userAllocatedNatIpResources = Core.Nothing,
      userAllocatedNatIps = Core.Nothing
    }

instance Core.FromJSON RouterStatusNatStatus where
  parseJSON =
    Core.withObject
      "RouterStatusNatStatus"
      ( \o ->
          RouterStatusNatStatus
            Core.<$> (o Core..:? "autoAllocatedNatIps")
            Core.<*> (o Core..:? "drainAutoAllocatedNatIps")
            Core.<*> (o Core..:? "drainUserAllocatedNatIps")
            Core.<*> (o Core..:? "minExtraNatIpsNeeded")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "numVmEndpointsWithNatMappings")
            Core.<*> (o Core..:? "ruleStatus")
            Core.<*> (o Core..:? "userAllocatedNatIpResources")
            Core.<*> (o Core..:? "userAllocatedNatIps")
      )

instance Core.ToJSON RouterStatusNatStatus where
  toJSON RouterStatusNatStatus {..} =
    Core.object
      ( Core.catMaybes
          [ ("autoAllocatedNatIps" Core..=)
              Core.<$> autoAllocatedNatIps,
            ("drainAutoAllocatedNatIps" Core..=)
              Core.<$> drainAutoAllocatedNatIps,
            ("drainUserAllocatedNatIps" Core..=)
              Core.<$> drainUserAllocatedNatIps,
            ("minExtraNatIpsNeeded" Core..=)
              Core.<$> minExtraNatIpsNeeded,
            ("name" Core..=) Core.<$> name,
            ("numVmEndpointsWithNatMappings" Core..=)
              Core.<$> numVmEndpointsWithNatMappings,
            ("ruleStatus" Core..=) Core.<$> ruleStatus,
            ("userAllocatedNatIpResources" Core..=)
              Core.<$> userAllocatedNatIpResources,
            ("userAllocatedNatIps" Core..=)
              Core.<$> userAllocatedNatIps
          ]
      )

-- | Status of a NAT Rule contained in this NAT.
--
-- /See:/ 'newRouterStatusNatStatusNatRuleStatus' smart constructor.
data RouterStatusNatStatusNatRuleStatus = RouterStatusNatStatusNatRuleStatus
  { -- | A list of active IPs for NAT. Example: [\"1.1.1.1\", \"179.12.26.133\"].
    activeNatIps :: (Core.Maybe [Core.Text]),
    -- | A list of IPs for NAT that are in drain mode. Example: [\"1.1.1.1\", \"179.12.26.133\"].
    drainNatIps :: (Core.Maybe [Core.Text]),
    -- | The number of extra IPs to allocate. This will be greater than 0 only if the existing IPs in this NAT Rule are NOT enough to allow all configured VMs to use NAT.
    minExtraIpsNeeded :: (Core.Maybe Core.Int32),
    -- | Number of VM endpoints (i.e., NICs) that have NAT Mappings from this NAT Rule.
    numVmEndpointsWithNatMappings :: (Core.Maybe Core.Int32),
    -- | Rule number of the rule.
    ruleNumber :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterStatusNatStatusNatRuleStatus' with the minimum fields required to make a request.
newRouterStatusNatStatusNatRuleStatus ::
  RouterStatusNatStatusNatRuleStatus
newRouterStatusNatStatusNatRuleStatus =
  RouterStatusNatStatusNatRuleStatus
    { activeNatIps = Core.Nothing,
      drainNatIps = Core.Nothing,
      minExtraIpsNeeded = Core.Nothing,
      numVmEndpointsWithNatMappings = Core.Nothing,
      ruleNumber = Core.Nothing
    }

instance
  Core.FromJSON
    RouterStatusNatStatusNatRuleStatus
  where
  parseJSON =
    Core.withObject
      "RouterStatusNatStatusNatRuleStatus"
      ( \o ->
          RouterStatusNatStatusNatRuleStatus
            Core.<$> (o Core..:? "activeNatIps")
            Core.<*> (o Core..:? "drainNatIps")
            Core.<*> (o Core..:? "minExtraIpsNeeded")
            Core.<*> (o Core..:? "numVmEndpointsWithNatMappings")
            Core.<*> (o Core..:? "ruleNumber")
      )

instance
  Core.ToJSON
    RouterStatusNatStatusNatRuleStatus
  where
  toJSON RouterStatusNatStatusNatRuleStatus {..} =
    Core.object
      ( Core.catMaybes
          [ ("activeNatIps" Core..=) Core.<$> activeNatIps,
            ("drainNatIps" Core..=) Core.<$> drainNatIps,
            ("minExtraIpsNeeded" Core..=)
              Core.<$> minExtraIpsNeeded,
            ("numVmEndpointsWithNatMappings" Core..=)
              Core.<$> numVmEndpointsWithNatMappings,
            ("ruleNumber" Core..=) Core.<$> ruleNumber
          ]
      )

--
-- /See:/ 'newRouterStatusResponse' smart constructor.
data RouterStatusResponse = RouterStatusResponse
  { -- | Type of resource.
    kind :: Core.Text,
    -- |
    result :: (Core.Maybe RouterStatus)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RouterStatusResponse' with the minimum fields required to make a request.
newRouterStatusResponse ::
  RouterStatusResponse
newRouterStatusResponse =
  RouterStatusResponse
    { kind = "compute#routerStatusResponse",
      result = Core.Nothing
    }

instance Core.FromJSON RouterStatusResponse where
  parseJSON =
    Core.withObject
      "RouterStatusResponse"
      ( \o ->
          RouterStatusResponse
            Core.<$> ( o Core..:? "kind"
                         Core..!= "compute#routerStatusResponse"
                     )
            Core.<*> (o Core..:? "result")
      )

instance Core.ToJSON RouterStatusResponse where
  toJSON RouterStatusResponse {..} =
    Core.object
      ( Core.catMaybes
          [ Core.Just ("kind" Core..= kind),
            ("result" Core..=) Core.<$> result
          ]
      )

--
-- /See:/ 'newRoutersPreviewResponse' smart constructor.
newtype RoutersPreviewResponse = RoutersPreviewResponse
  { -- | Preview of given router.
    resource :: (Core.Maybe Router)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RoutersPreviewResponse' with the minimum fields required to make a request.
newRoutersPreviewResponse ::
  RoutersPreviewResponse
newRoutersPreviewResponse = RoutersPreviewResponse {resource = Core.Nothing}

instance Core.FromJSON RoutersPreviewResponse where
  parseJSON =
    Core.withObject
      "RoutersPreviewResponse"
      ( \o ->
          RoutersPreviewResponse
            Core.<$> (o Core..:? "resource")
      )

instance Core.ToJSON RoutersPreviewResponse where
  toJSON RoutersPreviewResponse {..} =
    Core.object
      ( Core.catMaybes
          [("resource" Core..=) Core.<$> resource]
      )

--
-- /See:/ 'newRoutersScopedList' smart constructor.
data RoutersScopedList = RoutersScopedList
  { -- | A list of routers contained in this scope.
    routers :: (Core.Maybe [Router]),
    -- | Informational warning which replaces the list of routers when the list is empty.
    warning :: (Core.Maybe RoutersScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RoutersScopedList' with the minimum fields required to make a request.
newRoutersScopedList ::
  RoutersScopedList
newRoutersScopedList =
  RoutersScopedList {routers = Core.Nothing, warning = Core.Nothing}

instance Core.FromJSON RoutersScopedList where
  parseJSON =
    Core.withObject
      "RoutersScopedList"
      ( \o ->
          RoutersScopedList
            Core.<$> (o Core..:? "routers")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON RoutersScopedList where
  toJSON RoutersScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("routers" Core..=) Core.<$> routers,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of routers when the list is empty.
--
-- /See:/ 'newRoutersScopedList_Warning' smart constructor.
data RoutersScopedList_Warning = RoutersScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe RoutersScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [RoutersScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RoutersScopedList_Warning' with the minimum fields required to make a request.
newRoutersScopedList_Warning ::
  RoutersScopedList_Warning
newRoutersScopedList_Warning =
  RoutersScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON RoutersScopedList_Warning where
  parseJSON =
    Core.withObject
      "RoutersScopedList_Warning"
      ( \o ->
          RoutersScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON RoutersScopedList_Warning where
  toJSON RoutersScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newRoutersScopedList_Warning_DataItem' smart constructor.
data RoutersScopedList_Warning_DataItem = RoutersScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'RoutersScopedList_Warning_DataItem' with the minimum fields required to make a request.
newRoutersScopedList_Warning_DataItem ::
  RoutersScopedList_Warning_DataItem
newRoutersScopedList_Warning_DataItem =
  RoutersScopedList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    RoutersScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "RoutersScopedList_Warning_DataItem"
      ( \o ->
          RoutersScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    RoutersScopedList_Warning_DataItem
  where
  toJSON RoutersScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | This is deprecated and has no effect. Do not use.
--
-- /See:/ 'newRule' smart constructor.
data Rule = Rule
  { -- | This is deprecated and has no effect. Do not use.
    action :: (Core.Maybe Rule_Action),
    -- | This is deprecated and has no effect. Do not use.
    conditions :: (Core.Maybe [Condition]),
    -- | This is deprecated and has no effect. Do not use.
    description :: (Core.Maybe Core.Text),
    -- | This is deprecated and has no effect. Do not use.
    ins :: (Core.Maybe [Core.Text]),
    -- | This is deprecated and has no effect. Do not use.
    logConfigs :: (Core.Maybe [LogConfig]),
    -- | This is deprecated and has no effect. Do not use.
    notIns :: (Core.Maybe [Core.Text]),
    -- | This is deprecated and has no effect. Do not use.
    permissions :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Rule' with the minimum fields required to make a request.
newRule ::
  Rule
newRule =
  Rule
    { action = Core.Nothing,
      conditions = Core.Nothing,
      description = Core.Nothing,
      ins = Core.Nothing,
      logConfigs = Core.Nothing,
      notIns = Core.Nothing,
      permissions = Core.Nothing
    }

instance Core.FromJSON Rule where
  parseJSON =
    Core.withObject
      "Rule"
      ( \o ->
          Rule
            Core.<$> (o Core..:? "action")
            Core.<*> (o Core..:? "conditions")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "ins")
            Core.<*> (o Core..:? "logConfigs")
            Core.<*> (o Core..:? "notIns")
            Core.<*> (o Core..:? "permissions")
      )

instance Core.ToJSON Rule where
  toJSON Rule {..} =
    Core.object
      ( Core.catMaybes
          [ ("action" Core..=) Core.<$> action,
            ("conditions" Core..=) Core.<$> conditions,
            ("description" Core..=) Core.<$> description,
            ("ins" Core..=) Core.<$> ins,
            ("logConfigs" Core..=) Core.<$> logConfigs,
            ("notIns" Core..=) Core.<$> notIns,
            ("permissions" Core..=) Core.<$> permissions
          ]
      )

--
-- /See:/ 'newSSLHealthCheck' smart constructor.
data SSLHealthCheck = SSLHealthCheck
  { -- | The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535.
    port :: (Core.Maybe Core.Int32),
    -- | Not supported.
    portName :: (Core.Maybe Core.Text),
    -- | Specifies how a port is selected for health checking. Can be one of the following values: USE/FIXED/PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE/VM/IP network endpoint groups, GCE/VM/IP/PORT network endpoint groups, and instance group backends. USE/NAMED/PORT: Not supported. USE/SERVING/PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE/VM/IP/PORT network endpoint groups and instance group backends. For GCE/VM/IP_PORT network
    -- endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service\'s named port in the instance group\'s list of named ports.
    portSpecification :: (Core.Maybe SSLHealthCheck_PortSpecification),
    -- | Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    proxyHeader :: (Core.Maybe SSLHealthCheck_ProxyHeader),
    -- | Instructs the health check prober to send this exact ASCII string, up to 1024 bytes in length, after establishing the TCP connection and SSL handshake.
    request' :: (Core.Maybe Core.Text),
    -- | Creates a content-based SSL health check. In addition to establishing a TCP connection and the TLS handshake, you can configure the health check to pass only when the backend sends this exact response ASCII string, up to 1024 bytes in length. For details, see: https:\/\/cloud.google.com\/load-balancing\/docs\/health-check-concepts#criteria-protocol-ssl-tcp
    response :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SSLHealthCheck' with the minimum fields required to make a request.
newSSLHealthCheck ::
  SSLHealthCheck
newSSLHealthCheck =
  SSLHealthCheck
    { port = Core.Nothing,
      portName = Core.Nothing,
      portSpecification = Core.Nothing,
      proxyHeader = Core.Nothing,
      request' = Core.Nothing,
      response = Core.Nothing
    }

instance Core.FromJSON SSLHealthCheck where
  parseJSON =
    Core.withObject
      "SSLHealthCheck"
      ( \o ->
          SSLHealthCheck
            Core.<$> (o Core..:? "port")
            Core.<*> (o Core..:? "portName")
            Core.<*> (o Core..:? "portSpecification")
            Core.<*> (o Core..:? "proxyHeader")
            Core.<*> (o Core..:? "request")
            Core.<*> (o Core..:? "response")
      )

instance Core.ToJSON SSLHealthCheck where
  toJSON SSLHealthCheck {..} =
    Core.object
      ( Core.catMaybes
          [ ("port" Core..=) Core.<$> port,
            ("portName" Core..=) Core.<$> portName,
            ("portSpecification" Core..=)
              Core.<$> portSpecification,
            ("proxyHeader" Core..=) Core.<$> proxyHeader,
            ("request" Core..=) Core.<$> request',
            ("response" Core..=) Core.<$> response
          ]
      )

-- | DEPRECATED: Please use compute#savedDisk instead. An instance-attached disk resource.
--
-- /See:/ 'newSavedAttachedDisk' smart constructor.
data SavedAttachedDisk = SavedAttachedDisk
  { -- | Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).
    autoDelete :: (Core.Maybe Core.Bool),
    -- | Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.
    boot :: (Core.Maybe Core.Bool),
    -- | Specifies the name of the disk attached to the source instance.
    deviceName :: (Core.Maybe Core.Text),
    -- | The encryption key for the disk.
    diskEncryptionKey :: (Core.Maybe CustomerEncryptionKey),
    -- | The size of the disk in base-2 GB.
    diskSizeGb :: (Core.Maybe Core.Int64),
    -- | [Output Only] URL of the disk type resource. For example: projects\/project \/zones\/zone\/diskTypes\/pd-standard or pd-ssd
    diskType :: (Core.Maybe Core.Text),
    -- | A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
    guestOsFeatures :: (Core.Maybe [GuestOsFeature]),
    -- | Specifies zero-based index of the disk that is attached to the source instance.
    index :: (Core.Maybe Core.Int32),
    -- | Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME.
    interface :: (Core.Maybe SavedAttachedDisk_Interface),
    -- | [Output Only] Type of the resource. Always compute#attachedDisk for attached disks.
    kind :: Core.Text,
    -- | [Output Only] Any valid publicly visible licenses.
    licenses :: (Core.Maybe [Core.Text]),
    -- | The mode in which this disk is attached to the source instance, either READ/WRITE or READ/ONLY.
    mode :: (Core.Maybe SavedAttachedDisk_Mode),
    -- | Specifies a URL of the disk attached to the source instance.
    source :: (Core.Maybe Core.Text),
    -- | [Output Only] A size of the storage used by the disk\'s snapshot by this machine image.
    storageBytes :: (Core.Maybe Core.Int64),
    -- | [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP/TO/DATE, meaning the size of the snapshot is up-to-date.
    storageBytesStatus :: (Core.Maybe SavedAttachedDisk_StorageBytesStatus),
    -- | Specifies the type of the attached disk, either SCRATCH or PERSISTENT.
    type' :: (Core.Maybe SavedAttachedDisk_Type)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SavedAttachedDisk' with the minimum fields required to make a request.
newSavedAttachedDisk ::
  SavedAttachedDisk
newSavedAttachedDisk =
  SavedAttachedDisk
    { autoDelete = Core.Nothing,
      boot = Core.Nothing,
      deviceName = Core.Nothing,
      diskEncryptionKey = Core.Nothing,
      diskSizeGb = Core.Nothing,
      diskType = Core.Nothing,
      guestOsFeatures = Core.Nothing,
      index = Core.Nothing,
      interface = Core.Nothing,
      kind = "compute#savedAttachedDisk",
      licenses = Core.Nothing,
      mode = Core.Nothing,
      source = Core.Nothing,
      storageBytes = Core.Nothing,
      storageBytesStatus = Core.Nothing,
      type' = Core.Nothing
    }

instance Core.FromJSON SavedAttachedDisk where
  parseJSON =
    Core.withObject
      "SavedAttachedDisk"
      ( \o ->
          SavedAttachedDisk
            Core.<$> (o Core..:? "autoDelete")
            Core.<*> (o Core..:? "boot")
            Core.<*> (o Core..:? "deviceName")
            Core.<*> (o Core..:? "diskEncryptionKey")
            Core.<*> ( o Core..:? "diskSizeGb"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "diskType")
            Core.<*> (o Core..:? "guestOsFeatures")
            Core.<*> (o Core..:? "index")
            Core.<*> (o Core..:? "interface")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#savedAttachedDisk"
                     )
            Core.<*> (o Core..:? "licenses")
            Core.<*> (o Core..:? "mode")
            Core.<*> (o Core..:? "source")
            Core.<*> ( o Core..:? "storageBytes"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "storageBytesStatus")
            Core.<*> (o Core..:? "type")
      )

instance Core.ToJSON SavedAttachedDisk where
  toJSON SavedAttachedDisk {..} =
    Core.object
      ( Core.catMaybes
          [ ("autoDelete" Core..=) Core.<$> autoDelete,
            ("boot" Core..=) Core.<$> boot,
            ("deviceName" Core..=) Core.<$> deviceName,
            ("diskEncryptionKey" Core..=)
              Core.<$> diskEncryptionKey,
            ("diskSizeGb" Core..=) Core.. Core.AsText
              Core.<$> diskSizeGb,
            ("diskType" Core..=) Core.<$> diskType,
            ("guestOsFeatures" Core..=) Core.<$> guestOsFeatures,
            ("index" Core..=) Core.<$> index,
            ("interface" Core..=) Core.<$> interface,
            Core.Just ("kind" Core..= kind),
            ("licenses" Core..=) Core.<$> licenses,
            ("mode" Core..=) Core.<$> mode,
            ("source" Core..=) Core.<$> source,
            ("storageBytes" Core..=) Core.. Core.AsText
              Core.<$> storageBytes,
            ("storageBytesStatus" Core..=)
              Core.<$> storageBytesStatus,
            ("type" Core..=) Core.<$> type'
          ]
      )

-- | An instance-attached disk resource.
--
-- /See:/ 'newSavedDisk' smart constructor.
data SavedDisk = SavedDisk
  { -- | [Output Only] The architecture of the attached disk.
    architecture :: (Core.Maybe SavedDisk_Architecture),
    -- | [Output Only] Type of the resource. Always compute#savedDisk for attached disks.
    kind :: Core.Text,
    -- | Specifies a URL of the disk attached to the source instance.
    sourceDisk :: (Core.Maybe Core.Text),
    -- | [Output Only] Size of the individual disk snapshot used by this machine image.
    storageBytes :: (Core.Maybe Core.Int64),
    -- | [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP/TO/DATE, meaning the size of the snapshot is up-to-date.
    storageBytesStatus :: (Core.Maybe SavedDisk_StorageBytesStatus)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SavedDisk' with the minimum fields required to make a request.
newSavedDisk ::
  SavedDisk
newSavedDisk =
  SavedDisk
    { architecture = Core.Nothing,
      kind = "compute#savedDisk",
      sourceDisk = Core.Nothing,
      storageBytes = Core.Nothing,
      storageBytesStatus = Core.Nothing
    }

instance Core.FromJSON SavedDisk where
  parseJSON =
    Core.withObject
      "SavedDisk"
      ( \o ->
          SavedDisk
            Core.<$> (o Core..:? "architecture")
            Core.<*> (o Core..:? "kind" Core..!= "compute#savedDisk")
            Core.<*> (o Core..:? "sourceDisk")
            Core.<*> ( o Core..:? "storageBytes"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "storageBytesStatus")
      )

instance Core.ToJSON SavedDisk where
  toJSON SavedDisk {..} =
    Core.object
      ( Core.catMaybes
          [ ("architecture" Core..=) Core.<$> architecture,
            Core.Just ("kind" Core..= kind),
            ("sourceDisk" Core..=) Core.<$> sourceDisk,
            ("storageBytes" Core..=) Core.. Core.AsText
              Core.<$> storageBytes,
            ("storageBytesStatus" Core..=)
              Core.<$> storageBytesStatus
          ]
      )

--
-- /See:/ 'newScalingScheduleStatus' smart constructor.
data ScalingScheduleStatus = ScalingScheduleStatus
  { -- | [Output Only] The last time the scaling schedule became active. Note: this is a timestamp when a schedule actually became active, not when it was planned to do so. The timestamp is in RFC3339 text format.
    lastStartTime :: (Core.Maybe Core.Text),
    -- | [Output Only] The next time the scaling schedule is to become active. Note: this is a timestamp when a schedule is planned to run, but the actual time might be slightly different. The timestamp is in RFC3339 text format.
    nextStartTime :: (Core.Maybe Core.Text),
    -- | [Output Only] The current state of a scaling schedule.
    state :: (Core.Maybe ScalingScheduleStatus_State)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ScalingScheduleStatus' with the minimum fields required to make a request.
newScalingScheduleStatus ::
  ScalingScheduleStatus
newScalingScheduleStatus =
  ScalingScheduleStatus
    { lastStartTime = Core.Nothing,
      nextStartTime = Core.Nothing,
      state = Core.Nothing
    }

instance Core.FromJSON ScalingScheduleStatus where
  parseJSON =
    Core.withObject
      "ScalingScheduleStatus"
      ( \o ->
          ScalingScheduleStatus
            Core.<$> (o Core..:? "lastStartTime")
            Core.<*> (o Core..:? "nextStartTime")
            Core.<*> (o Core..:? "state")
      )

instance Core.ToJSON ScalingScheduleStatus where
  toJSON ScalingScheduleStatus {..} =
    Core.object
      ( Core.catMaybes
          [ ("lastStartTime" Core..=) Core.<$> lastStartTime,
            ("nextStartTime" Core..=) Core.<$> nextStartTime,
            ("state" Core..=) Core.<$> state
          ]
      )

-- | Sets the scheduling options for an Instance.
--
-- /See:/ 'newScheduling' smart constructor.
data Scheduling = Scheduling
  { -- | Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). You can only set the automatic restart option for standard instances. Preemptible instances cannot be automatically restarted. By default, this is set to true so an instance is automatically restarted if it is terminated by Compute Engine.
    automaticRestart :: (Core.Maybe Core.Bool),
    -- | Specifies the termination action for the instance.
    instanceTerminationAction :: (Core.Maybe Scheduling_InstanceTerminationAction),
    -- | An opaque location hint used to place the instance close to other resources. This field is for use by internal tools that use the public API.
    locationHint :: (Core.Maybe Core.Text),
    -- | The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node.
    minNodeCpus :: (Core.Maybe Core.Int32),
    -- | A set of node affinity and anti-affinity configurations. Refer to Configuring node affinity for more information. Overrides reservationAffinity.
    nodeAffinities :: (Core.Maybe [SchedulingNodeAffinity]),
    -- | Defines the maintenance behavior for this instance. For standard instances, the default behavior is MIGRATE. For preemptible instances, the default and only possible behavior is TERMINATE. For more information, see Set VM host maintenance policy.
    onHostMaintenance :: (Core.Maybe Scheduling_OnHostMaintenance),
    -- | Defines whether the instance is preemptible. This can only be set during instance creation or while the instance is stopped and therefore, in a @TERMINATED@ state. See Instance Life Cycle for more information on the possible instance states.
    preemptible :: (Core.Maybe Core.Bool),
    -- | Specifies the provisioning model of the instance.
    provisioningModel :: (Core.Maybe Scheduling_ProvisioningModel)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Scheduling' with the minimum fields required to make a request.
newScheduling ::
  Scheduling
newScheduling =
  Scheduling
    { automaticRestart = Core.Nothing,
      instanceTerminationAction = Core.Nothing,
      locationHint = Core.Nothing,
      minNodeCpus = Core.Nothing,
      nodeAffinities = Core.Nothing,
      onHostMaintenance = Core.Nothing,
      preemptible = Core.Nothing,
      provisioningModel = Core.Nothing
    }

instance Core.FromJSON Scheduling where
  parseJSON =
    Core.withObject
      "Scheduling"
      ( \o ->
          Scheduling
            Core.<$> (o Core..:? "automaticRestart")
            Core.<*> (o Core..:? "instanceTerminationAction")
            Core.<*> (o Core..:? "locationHint")
            Core.<*> (o Core..:? "minNodeCpus")
            Core.<*> (o Core..:? "nodeAffinities")
            Core.<*> (o Core..:? "onHostMaintenance")
            Core.<*> (o Core..:? "preemptible")
            Core.<*> (o Core..:? "provisioningModel")
      )

instance Core.ToJSON Scheduling where
  toJSON Scheduling {..} =
    Core.object
      ( Core.catMaybes
          [ ("automaticRestart" Core..=)
              Core.<$> automaticRestart,
            ("instanceTerminationAction" Core..=)
              Core.<$> instanceTerminationAction,
            ("locationHint" Core..=) Core.<$> locationHint,
            ("minNodeCpus" Core..=) Core.<$> minNodeCpus,
            ("nodeAffinities" Core..=) Core.<$> nodeAffinities,
            ("onHostMaintenance" Core..=)
              Core.<$> onHostMaintenance,
            ("preemptible" Core..=) Core.<$> preemptible,
            ("provisioningModel" Core..=)
              Core.<$> provisioningModel
          ]
      )

-- | Node Affinity: the configuration of desired nodes onto which this Instance could be scheduled.
--
-- /See:/ 'newSchedulingNodeAffinity' smart constructor.
data SchedulingNodeAffinity = SchedulingNodeAffinity
  { -- | Corresponds to the label key of Node resource.
    key :: (Core.Maybe Core.Text),
    -- | Defines the operation of node selection. Valid operators are IN for affinity and NOT_IN for anti-affinity.
    operator :: (Core.Maybe SchedulingNodeAffinity_Operator),
    -- | Corresponds to the label values of Node resource.
    values :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SchedulingNodeAffinity' with the minimum fields required to make a request.
newSchedulingNodeAffinity ::
  SchedulingNodeAffinity
newSchedulingNodeAffinity =
  SchedulingNodeAffinity
    { key = Core.Nothing,
      operator = Core.Nothing,
      values = Core.Nothing
    }

instance Core.FromJSON SchedulingNodeAffinity where
  parseJSON =
    Core.withObject
      "SchedulingNodeAffinity"
      ( \o ->
          SchedulingNodeAffinity
            Core.<$> (o Core..:? "key")
            Core.<*> (o Core..:? "operator")
            Core.<*> (o Core..:? "values")
      )

instance Core.ToJSON SchedulingNodeAffinity where
  toJSON SchedulingNodeAffinity {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("operator" Core..=) Core.<$> operator,
            ("values" Core..=) Core.<$> values
          ]
      )

-- | An instance\'s screenshot.
--
-- /See:/ 'newScreenshot' smart constructor.
data Screenshot = Screenshot
  { -- | [Output Only] The Base64-encoded screenshot data.
    contents :: (Core.Maybe Core.Text),
    -- | [Output Only] Type of the resource. Always compute#screenshot for the screenshots.
    kind :: Core.Text
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Screenshot' with the minimum fields required to make a request.
newScreenshot ::
  Screenshot
newScreenshot =
  Screenshot {contents = Core.Nothing, kind = "compute#screenshot"}

instance Core.FromJSON Screenshot where
  parseJSON =
    Core.withObject
      "Screenshot"
      ( \o ->
          Screenshot
            Core.<$> (o Core..:? "contents")
            Core.<*> (o Core..:? "kind" Core..!= "compute#screenshot")
      )

instance Core.ToJSON Screenshot where
  toJSON Screenshot {..} =
    Core.object
      ( Core.catMaybes
          [ ("contents" Core..=) Core.<$> contents,
            Core.Just ("kind" Core..= kind)
          ]
      )

--
-- /See:/ 'newSecurityPoliciesAggregatedList' smart constructor.
data SecurityPoliciesAggregatedList = SecurityPoliciesAggregatedList
  { -- |
    etag :: (Core.Maybe Core.Text),
    -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of SecurityPoliciesScopedList resources.
    items :: (Core.Maybe SecurityPoliciesAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#securityPolicyAggregatedList for lists of Security Policies.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe SecurityPoliciesAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPoliciesAggregatedList' with the minimum fields required to make a request.
newSecurityPoliciesAggregatedList ::
  SecurityPoliciesAggregatedList
newSecurityPoliciesAggregatedList =
  SecurityPoliciesAggregatedList
    { etag = Core.Nothing,
      id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#securityPoliciesAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON SecurityPoliciesAggregatedList where
  parseJSON =
    Core.withObject
      "SecurityPoliciesAggregatedList"
      ( \o ->
          SecurityPoliciesAggregatedList
            Core.<$> (o Core..:? "etag")
            Core.<*> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#securityPoliciesAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON SecurityPoliciesAggregatedList where
  toJSON SecurityPoliciesAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("etag" Core..=) Core.<$> etag,
            ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of SecurityPoliciesScopedList resources.
--
-- /See:/ 'newSecurityPoliciesAggregatedList_Items' smart constructor.
newtype SecurityPoliciesAggregatedList_Items = SecurityPoliciesAggregatedList_Items
  { -- | Name of the scope containing this set of security policies.
    additional :: (Core.HashMap Core.Text SecurityPoliciesScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPoliciesAggregatedList_Items' with the minimum fields required to make a request.
newSecurityPoliciesAggregatedList_Items ::
  -- |  Name of the scope containing this set of security policies. See 'additional'.
  Core.HashMap Core.Text SecurityPoliciesScopedList ->
  SecurityPoliciesAggregatedList_Items
newSecurityPoliciesAggregatedList_Items additional =
  SecurityPoliciesAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    SecurityPoliciesAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "SecurityPoliciesAggregatedList_Items"
      ( \o ->
          SecurityPoliciesAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    SecurityPoliciesAggregatedList_Items
  where
  toJSON SecurityPoliciesAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newSecurityPoliciesAggregatedList_Warning' smart constructor.
data SecurityPoliciesAggregatedList_Warning = SecurityPoliciesAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe SecurityPoliciesAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [SecurityPoliciesAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPoliciesAggregatedList_Warning' with the minimum fields required to make a request.
newSecurityPoliciesAggregatedList_Warning ::
  SecurityPoliciesAggregatedList_Warning
newSecurityPoliciesAggregatedList_Warning =
  SecurityPoliciesAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    SecurityPoliciesAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "SecurityPoliciesAggregatedList_Warning"
      ( \o ->
          SecurityPoliciesAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    SecurityPoliciesAggregatedList_Warning
  where
  toJSON SecurityPoliciesAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newSecurityPoliciesAggregatedList_Warning_DataItem' smart constructor.
data SecurityPoliciesAggregatedList_Warning_DataItem = SecurityPoliciesAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPoliciesAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newSecurityPoliciesAggregatedList_Warning_DataItem ::
  SecurityPoliciesAggregatedList_Warning_DataItem
newSecurityPoliciesAggregatedList_Warning_DataItem =
  SecurityPoliciesAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    SecurityPoliciesAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "SecurityPoliciesAggregatedList_Warning_DataItem"
      ( \o ->
          SecurityPoliciesAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    SecurityPoliciesAggregatedList_Warning_DataItem
  where
  toJSON
    SecurityPoliciesAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

--
-- /See:/ 'newSecurityPoliciesListPreconfiguredExpressionSetsResponse' smart constructor.
newtype SecurityPoliciesListPreconfiguredExpressionSetsResponse = SecurityPoliciesListPreconfiguredExpressionSetsResponse
  { -- |
    preconfiguredExpressionSets :: (Core.Maybe SecurityPoliciesWafConfig)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPoliciesListPreconfiguredExpressionSetsResponse' with the minimum fields required to make a request.
newSecurityPoliciesListPreconfiguredExpressionSetsResponse ::
  SecurityPoliciesListPreconfiguredExpressionSetsResponse
newSecurityPoliciesListPreconfiguredExpressionSetsResponse =
  SecurityPoliciesListPreconfiguredExpressionSetsResponse
    { preconfiguredExpressionSets = Core.Nothing
    }

instance
  Core.FromJSON
    SecurityPoliciesListPreconfiguredExpressionSetsResponse
  where
  parseJSON =
    Core.withObject
      "SecurityPoliciesListPreconfiguredExpressionSetsResponse"
      ( \o ->
          SecurityPoliciesListPreconfiguredExpressionSetsResponse
            Core.<$> (o Core..:? "preconfiguredExpressionSets")
      )

instance
  Core.ToJSON
    SecurityPoliciesListPreconfiguredExpressionSetsResponse
  where
  toJSON
    SecurityPoliciesListPreconfiguredExpressionSetsResponse {..} =
      Core.object
        ( Core.catMaybes
            [ ("preconfiguredExpressionSets" Core..=)
                Core.<$> preconfiguredExpressionSets
            ]
        )

--
-- /See:/ 'newSecurityPoliciesScopedList' smart constructor.
data SecurityPoliciesScopedList = SecurityPoliciesScopedList
  { -- | A list of SecurityPolicies contained in this scope.
    securityPolicies :: (Core.Maybe [SecurityPolicy]),
    -- | Informational warning which replaces the list of security policies when the list is empty.
    warning :: (Core.Maybe SecurityPoliciesScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPoliciesScopedList' with the minimum fields required to make a request.
newSecurityPoliciesScopedList ::
  SecurityPoliciesScopedList
newSecurityPoliciesScopedList =
  SecurityPoliciesScopedList
    { securityPolicies = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON SecurityPoliciesScopedList where
  parseJSON =
    Core.withObject
      "SecurityPoliciesScopedList"
      ( \o ->
          SecurityPoliciesScopedList
            Core.<$> (o Core..:? "securityPolicies")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON SecurityPoliciesScopedList where
  toJSON SecurityPoliciesScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("securityPolicies" Core..=)
              Core.<$> securityPolicies,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of security policies when the list is empty.
--
-- /See:/ 'newSecurityPoliciesScopedList_Warning' smart constructor.
data SecurityPoliciesScopedList_Warning = SecurityPoliciesScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe SecurityPoliciesScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [SecurityPoliciesScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPoliciesScopedList_Warning' with the minimum fields required to make a request.
newSecurityPoliciesScopedList_Warning ::
  SecurityPoliciesScopedList_Warning
newSecurityPoliciesScopedList_Warning =
  SecurityPoliciesScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    SecurityPoliciesScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "SecurityPoliciesScopedList_Warning"
      ( \o ->
          SecurityPoliciesScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    SecurityPoliciesScopedList_Warning
  where
  toJSON SecurityPoliciesScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newSecurityPoliciesScopedList_Warning_DataItem' smart constructor.
data SecurityPoliciesScopedList_Warning_DataItem = SecurityPoliciesScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPoliciesScopedList_Warning_DataItem' with the minimum fields required to make a request.
newSecurityPoliciesScopedList_Warning_DataItem ::
  SecurityPoliciesScopedList_Warning_DataItem
newSecurityPoliciesScopedList_Warning_DataItem =
  SecurityPoliciesScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    SecurityPoliciesScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "SecurityPoliciesScopedList_Warning_DataItem"
      ( \o ->
          SecurityPoliciesScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    SecurityPoliciesScopedList_Warning_DataItem
  where
  toJSON
    SecurityPoliciesScopedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

--
-- /See:/ 'newSecurityPoliciesWafConfig' smart constructor.
newtype SecurityPoliciesWafConfig = SecurityPoliciesWafConfig
  { -- |
    wafRules :: (Core.Maybe PreconfiguredWafSet)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPoliciesWafConfig' with the minimum fields required to make a request.
newSecurityPoliciesWafConfig ::
  SecurityPoliciesWafConfig
newSecurityPoliciesWafConfig =
  SecurityPoliciesWafConfig {wafRules = Core.Nothing}

instance Core.FromJSON SecurityPoliciesWafConfig where
  parseJSON =
    Core.withObject
      "SecurityPoliciesWafConfig"
      ( \o ->
          SecurityPoliciesWafConfig
            Core.<$> (o Core..:? "wafRules")
      )

instance Core.ToJSON SecurityPoliciesWafConfig where
  toJSON SecurityPoliciesWafConfig {..} =
    Core.object
      ( Core.catMaybes
          [("wafRules" Core..=) Core.<$> wafRules]
      )

-- | Represents a Google Cloud Armor security policy resource. Only external backend services that use load balancers can reference a security policy. For more information, see Google Cloud Armor security policy overview.
--
-- /See:/ 'newSecurityPolicy' smart constructor.
data SecurityPolicy = SecurityPolicy
  { -- |
    adaptiveProtectionConfig :: (Core.Maybe SecurityPolicyAdaptiveProtectionConfig),
    -- |
    advancedOptionsConfig :: (Core.Maybe SecurityPolicyAdvancedOptionsConfig),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- |
    ddosProtectionConfig :: (Core.Maybe SecurityPolicyDdosProtectionConfig),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | Specifies a fingerprint for this resource, which is essentially a hash of the metadata\'s contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update metadata. You must always provide an up-to-date fingerprint hash in order to update or change metadata, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make get() request to the security policy.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output only] Type of the resource. Always compute#securityPolicyfor security policies
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- |
    recaptchaOptionsConfig :: (Core.Maybe SecurityPolicyRecaptchaOptionsConfig),
    -- | [Output Only] URL of the region where the regional security policy resides. This field is not applicable to global security policies.
    region :: (Core.Maybe Core.Text),
    -- | A list of rules that belong to this policy. There must always be a default rule which is a rule with priority 2147483647 and match all condition (for the match condition this means match \"/\" for srcIpRanges and for the networkMatch condition every field must be either match \"/\" or not set). If no rules are provided when creating a security policy, a default rule with action \"allow\" will be added.
    rules :: (Core.Maybe [SecurityPolicyRule]),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | The type indicates the intended use of the security policy. - CLOUD/ARMOR: Cloud Armor backend security policies can be configured to filter incoming HTTP requests targeting backend services. They filter requests before they hit the origin servers. - CLOUD/ARMOR/EDGE: Cloud Armor edge security policies can be configured to filter incoming HTTP requests targeting backend services (including Cloud CDN-enabled) as well as backend buckets (Cloud Storage). They filter requests before the request is served from Google\'s cache. - CLOUD/ARMOR/INTERNAL/SERVICE: Cloud Armor internal service policies can be configured to filter HTTP requests targeting services managed by Traffic Director in a service mesh. They filter requests before the request is served from the application. - CLOUD/ARMOR/NETWORK: Cloud Armor network policies can be configured to filter packets targeting network load balancing resources such as backend services, target pools, target instances, and instances with external IPs. They filter requests
    -- before the request is served from the application. This field can be set only at resource creation time.
    type' :: (Core.Maybe SecurityPolicy_Type)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicy' with the minimum fields required to make a request.
newSecurityPolicy ::
  SecurityPolicy
newSecurityPolicy =
  SecurityPolicy
    { adaptiveProtectionConfig = Core.Nothing,
      advancedOptionsConfig = Core.Nothing,
      creationTimestamp = Core.Nothing,
      ddosProtectionConfig = Core.Nothing,
      description = Core.Nothing,
      fingerprint = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#securityPolicy",
      name = Core.Nothing,
      recaptchaOptionsConfig = Core.Nothing,
      region = Core.Nothing,
      rules = Core.Nothing,
      selfLink = Core.Nothing,
      type' = Core.Nothing
    }

instance Core.FromJSON SecurityPolicy where
  parseJSON =
    Core.withObject
      "SecurityPolicy"
      ( \o ->
          SecurityPolicy
            Core.<$> (o Core..:? "adaptiveProtectionConfig")
            Core.<*> (o Core..:? "advancedOptionsConfig")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "ddosProtectionConfig")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#securityPolicy")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "recaptchaOptionsConfig")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "rules")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "type")
      )

instance Core.ToJSON SecurityPolicy where
  toJSON SecurityPolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("adaptiveProtectionConfig" Core..=)
              Core.<$> adaptiveProtectionConfig,
            ("advancedOptionsConfig" Core..=)
              Core.<$> advancedOptionsConfig,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("ddosProtectionConfig" Core..=)
              Core.<$> ddosProtectionConfig,
            ("description" Core..=) Core.<$> description,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("recaptchaOptionsConfig" Core..=)
              Core.<$> recaptchaOptionsConfig,
            ("region" Core..=) Core.<$> region,
            ("rules" Core..=) Core.<$> rules,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("type" Core..=) Core.<$> type'
          ]
      )

-- | Configuration options for Cloud Armor Adaptive Protection (CAAP).
--
-- /See:/ 'newSecurityPolicyAdaptiveProtectionConfig' smart constructor.
newtype SecurityPolicyAdaptiveProtectionConfig = SecurityPolicyAdaptiveProtectionConfig
  { -- | If set to true, enables Cloud Armor Machine Learning.
    layer7DdosDefenseConfig ::
      ( Core.Maybe
          SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig
      )
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyAdaptiveProtectionConfig' with the minimum fields required to make a request.
newSecurityPolicyAdaptiveProtectionConfig ::
  SecurityPolicyAdaptiveProtectionConfig
newSecurityPolicyAdaptiveProtectionConfig =
  SecurityPolicyAdaptiveProtectionConfig
    { layer7DdosDefenseConfig = Core.Nothing
    }

instance
  Core.FromJSON
    SecurityPolicyAdaptiveProtectionConfig
  where
  parseJSON =
    Core.withObject
      "SecurityPolicyAdaptiveProtectionConfig"
      ( \o ->
          SecurityPolicyAdaptiveProtectionConfig
            Core.<$> (o Core..:? "layer7DdosDefenseConfig")
      )

instance
  Core.ToJSON
    SecurityPolicyAdaptiveProtectionConfig
  where
  toJSON SecurityPolicyAdaptiveProtectionConfig {..} =
    Core.object
      ( Core.catMaybes
          [ ("layer7DdosDefenseConfig" Core..=)
              Core.<$> layer7DdosDefenseConfig
          ]
      )

-- | Configuration options for L7 DDoS detection.
--
-- /See:/ 'newSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig' smart constructor.
data SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig = SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig
  { -- | If set to true, enables CAAP for L7 DDoS detection.
    enable :: (Core.Maybe Core.Bool),
    -- | Rule visibility can be one of the following: STANDARD - opaque rules. (default) PREMIUM - transparent rules.
    ruleVisibility ::
      ( Core.Maybe
          SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig_RuleVisibility
      )
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig' with the minimum fields required to make a request.
newSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig ::
  SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig
newSecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig =
  SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig
    { enable = Core.Nothing,
      ruleVisibility = Core.Nothing
    }

instance
  Core.FromJSON
    SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig
  where
  parseJSON =
    Core.withObject
      "SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig"
      ( \o ->
          SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig
            Core.<$> (o Core..:? "enable")
              Core.<*> (o Core..:? "ruleVisibility")
      )

instance
  Core.ToJSON
    SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig
  where
  toJSON
    SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig {..} =
      Core.object
        ( Core.catMaybes
            [ ("enable" Core..=) Core.<$> enable,
              ("ruleVisibility" Core..=) Core.<$> ruleVisibility
            ]
        )

--
-- /See:/ 'newSecurityPolicyAdvancedOptionsConfig' smart constructor.
data SecurityPolicyAdvancedOptionsConfig = SecurityPolicyAdvancedOptionsConfig
  { -- | Custom configuration to apply the JSON parsing. Only applicable when json_parsing is set to STANDARD.
    jsonCustomConfig :: (Core.Maybe SecurityPolicyAdvancedOptionsConfigJsonCustomConfig),
    -- |
    jsonParsing :: (Core.Maybe SecurityPolicyAdvancedOptionsConfig_JsonParsing),
    -- |
    logLevel :: (Core.Maybe SecurityPolicyAdvancedOptionsConfig_LogLevel)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyAdvancedOptionsConfig' with the minimum fields required to make a request.
newSecurityPolicyAdvancedOptionsConfig ::
  SecurityPolicyAdvancedOptionsConfig
newSecurityPolicyAdvancedOptionsConfig =
  SecurityPolicyAdvancedOptionsConfig
    { jsonCustomConfig = Core.Nothing,
      jsonParsing = Core.Nothing,
      logLevel = Core.Nothing
    }

instance
  Core.FromJSON
    SecurityPolicyAdvancedOptionsConfig
  where
  parseJSON =
    Core.withObject
      "SecurityPolicyAdvancedOptionsConfig"
      ( \o ->
          SecurityPolicyAdvancedOptionsConfig
            Core.<$> (o Core..:? "jsonCustomConfig")
            Core.<*> (o Core..:? "jsonParsing")
            Core.<*> (o Core..:? "logLevel")
      )

instance
  Core.ToJSON
    SecurityPolicyAdvancedOptionsConfig
  where
  toJSON SecurityPolicyAdvancedOptionsConfig {..} =
    Core.object
      ( Core.catMaybes
          [ ("jsonCustomConfig" Core..=)
              Core.<$> jsonCustomConfig,
            ("jsonParsing" Core..=) Core.<$> jsonParsing,
            ("logLevel" Core..=) Core.<$> logLevel
          ]
      )

--
-- /See:/ 'newSecurityPolicyAdvancedOptionsConfigJsonCustomConfig' smart constructor.
newtype SecurityPolicyAdvancedOptionsConfigJsonCustomConfig = SecurityPolicyAdvancedOptionsConfigJsonCustomConfig
  { -- | A list of custom Content-Type header values to apply the JSON parsing. As per RFC 1341, a Content-Type header value has the following format: Content-Type := type \"\/\" subtype *[\";\" parameter] When configuring a custom Content-Type header value, only the type\/subtype needs to be specified, and the parameters should be excluded.
    contentTypes :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyAdvancedOptionsConfigJsonCustomConfig' with the minimum fields required to make a request.
newSecurityPolicyAdvancedOptionsConfigJsonCustomConfig ::
  SecurityPolicyAdvancedOptionsConfigJsonCustomConfig
newSecurityPolicyAdvancedOptionsConfigJsonCustomConfig =
  SecurityPolicyAdvancedOptionsConfigJsonCustomConfig
    { contentTypes = Core.Nothing
    }

instance
  Core.FromJSON
    SecurityPolicyAdvancedOptionsConfigJsonCustomConfig
  where
  parseJSON =
    Core.withObject
      "SecurityPolicyAdvancedOptionsConfigJsonCustomConfig"
      ( \o ->
          SecurityPolicyAdvancedOptionsConfigJsonCustomConfig
            Core.<$> (o Core..:? "contentTypes")
      )

instance
  Core.ToJSON
    SecurityPolicyAdvancedOptionsConfigJsonCustomConfig
  where
  toJSON
    SecurityPolicyAdvancedOptionsConfigJsonCustomConfig {..} =
      Core.object
        ( Core.catMaybes
            [("contentTypes" Core..=) Core.<$> contentTypes]
        )

--
-- /See:/ 'newSecurityPolicyDdosProtectionConfig' smart constructor.
newtype SecurityPolicyDdosProtectionConfig = SecurityPolicyDdosProtectionConfig
  { -- |
    ddosProtection :: (Core.Maybe SecurityPolicyDdosProtectionConfig_DdosProtection)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyDdosProtectionConfig' with the minimum fields required to make a request.
newSecurityPolicyDdosProtectionConfig ::
  SecurityPolicyDdosProtectionConfig
newSecurityPolicyDdosProtectionConfig =
  SecurityPolicyDdosProtectionConfig {ddosProtection = Core.Nothing}

instance
  Core.FromJSON
    SecurityPolicyDdosProtectionConfig
  where
  parseJSON =
    Core.withObject
      "SecurityPolicyDdosProtectionConfig"
      ( \o ->
          SecurityPolicyDdosProtectionConfig
            Core.<$> (o Core..:? "ddosProtection")
      )

instance
  Core.ToJSON
    SecurityPolicyDdosProtectionConfig
  where
  toJSON SecurityPolicyDdosProtectionConfig {..} =
    Core.object
      ( Core.catMaybes
          [("ddosProtection" Core..=) Core.<$> ddosProtection]
      )

--
-- /See:/ 'newSecurityPolicyList' smart constructor.
data SecurityPolicyList = SecurityPolicyList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of SecurityPolicy resources.
    items :: (Core.Maybe [SecurityPolicy]),
    -- | [Output Only] Type of resource. Always compute#securityPolicyList for listsof securityPolicies
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe SecurityPolicyList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyList' with the minimum fields required to make a request.
newSecurityPolicyList ::
  SecurityPolicyList
newSecurityPolicyList =
  SecurityPolicyList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#securityPolicyList",
      nextPageToken = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON SecurityPolicyList where
  parseJSON =
    Core.withObject
      "SecurityPolicyList"
      ( \o ->
          SecurityPolicyList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#securityPolicyList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON SecurityPolicyList where
  toJSON SecurityPolicyList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newSecurityPolicyList_Warning' smart constructor.
data SecurityPolicyList_Warning = SecurityPolicyList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe SecurityPolicyList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [SecurityPolicyList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyList_Warning' with the minimum fields required to make a request.
newSecurityPolicyList_Warning ::
  SecurityPolicyList_Warning
newSecurityPolicyList_Warning =
  SecurityPolicyList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON SecurityPolicyList_Warning where
  parseJSON =
    Core.withObject
      "SecurityPolicyList_Warning"
      ( \o ->
          SecurityPolicyList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON SecurityPolicyList_Warning where
  toJSON SecurityPolicyList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newSecurityPolicyList_Warning_DataItem' smart constructor.
data SecurityPolicyList_Warning_DataItem = SecurityPolicyList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyList_Warning_DataItem' with the minimum fields required to make a request.
newSecurityPolicyList_Warning_DataItem ::
  SecurityPolicyList_Warning_DataItem
newSecurityPolicyList_Warning_DataItem =
  SecurityPolicyList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    SecurityPolicyList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "SecurityPolicyList_Warning_DataItem"
      ( \o ->
          SecurityPolicyList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    SecurityPolicyList_Warning_DataItem
  where
  toJSON SecurityPolicyList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newSecurityPolicyRecaptchaOptionsConfig' smart constructor.
newtype SecurityPolicyRecaptchaOptionsConfig = SecurityPolicyRecaptchaOptionsConfig
  { -- | An optional field to supply a reCAPTCHA site key to be used for all the rules using the redirect action with the type of GOOGLE_RECAPTCHA under the security policy. The specified site key needs to be created from the reCAPTCHA API. The user is responsible for the validity of the specified site key. If not specified, a Google-managed site key is used.
    redirectSiteKey :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyRecaptchaOptionsConfig' with the minimum fields required to make a request.
newSecurityPolicyRecaptchaOptionsConfig ::
  SecurityPolicyRecaptchaOptionsConfig
newSecurityPolicyRecaptchaOptionsConfig =
  SecurityPolicyRecaptchaOptionsConfig {redirectSiteKey = Core.Nothing}

instance
  Core.FromJSON
    SecurityPolicyRecaptchaOptionsConfig
  where
  parseJSON =
    Core.withObject
      "SecurityPolicyRecaptchaOptionsConfig"
      ( \o ->
          SecurityPolicyRecaptchaOptionsConfig
            Core.<$> (o Core..:? "redirectSiteKey")
      )

instance
  Core.ToJSON
    SecurityPolicyRecaptchaOptionsConfig
  where
  toJSON SecurityPolicyRecaptchaOptionsConfig {..} =
    Core.object
      ( Core.catMaybes
          [ ("redirectSiteKey" Core..=)
              Core.<$> redirectSiteKey
          ]
      )

--
-- /See:/ 'newSecurityPolicyReference' smart constructor.
newtype SecurityPolicyReference = SecurityPolicyReference
  { -- |
    securityPolicy :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyReference' with the minimum fields required to make a request.
newSecurityPolicyReference ::
  SecurityPolicyReference
newSecurityPolicyReference =
  SecurityPolicyReference {securityPolicy = Core.Nothing}

instance Core.FromJSON SecurityPolicyReference where
  parseJSON =
    Core.withObject
      "SecurityPolicyReference"
      ( \o ->
          SecurityPolicyReference
            Core.<$> (o Core..:? "securityPolicy")
      )

instance Core.ToJSON SecurityPolicyReference where
  toJSON SecurityPolicyReference {..} =
    Core.object
      ( Core.catMaybes
          [("securityPolicy" Core..=) Core.<$> securityPolicy]
      )

-- | Represents a rule that describes one or more match conditions along with the action to be taken when traffic matches this condition (allow or deny).
--
-- /See:/ 'newSecurityPolicyRule' smart constructor.
data SecurityPolicyRule = SecurityPolicyRule
  { -- | The Action to perform when the rule is matched. The following are the valid actions: - allow: allow access to target. - deny(STATUS): deny access to target, returns the HTTP response code specified. Valid values for @STATUS@ are 403, 404, and 502. - rate/based/ban: limit client traffic to the configured threshold and ban the client if the traffic exceeds the threshold. Configure parameters for this action in RateLimitOptions. Requires rate/limit/options to be set. - redirect: redirect to a different target. This can either be an internal reCAPTCHA redirect, or an external URL-based redirect via a 302 response. Parameters for this action can be configured via redirectOptions. - throttle: limit client traffic to the configured threshold. Configure parameters for this action in rateLimitOptions. Requires rate/limit/options to be set for this.
    action :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | Optional, additional actions that are performed on headers.
    headerAction :: (Core.Maybe SecurityPolicyRuleHttpHeaderAction),
    -- | [Output only] Type of the resource. Always compute#securityPolicyRule for security policy rules
    kind :: Core.Text,
    -- | A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding \'action\' is enforced.
    match :: (Core.Maybe SecurityPolicyRuleMatcher),
    -- | Preconfigured WAF configuration to be applied for the rule. If the rule does not evaluate preconfigured WAF rules, i.e., if evaluatePreconfiguredWaf() is not used, this field will have no effect.
    preconfiguredWafConfig :: (Core.Maybe SecurityPolicyRulePreconfiguredWafConfig),
    -- | If set to true, the specified action is not enforced.
    preview :: (Core.Maybe Core.Bool),
    -- | An integer indicating the priority of a rule in the list. The priority must be a positive value between 0 and 2147483647. Rules are evaluated from highest to lowest priority where 0 is the highest priority and 2147483647 is the lowest priority.
    priority :: (Core.Maybe Core.Int32),
    -- | Must be specified if the action is \"rate/based/ban\" or \"throttle\". Cannot be specified for any other actions.
    rateLimitOptions :: (Core.Maybe SecurityPolicyRuleRateLimitOptions),
    -- | Parameters defining the redirect action. Cannot be specified for any other actions.
    redirectOptions :: (Core.Maybe SecurityPolicyRuleRedirectOptions)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyRule' with the minimum fields required to make a request.
newSecurityPolicyRule ::
  SecurityPolicyRule
newSecurityPolicyRule =
  SecurityPolicyRule
    { action = Core.Nothing,
      description = Core.Nothing,
      headerAction = Core.Nothing,
      kind = "compute#securityPolicyRule",
      match = Core.Nothing,
      preconfiguredWafConfig = Core.Nothing,
      preview = Core.Nothing,
      priority = Core.Nothing,
      rateLimitOptions = Core.Nothing,
      redirectOptions = Core.Nothing
    }

instance Core.FromJSON SecurityPolicyRule where
  parseJSON =
    Core.withObject
      "SecurityPolicyRule"
      ( \o ->
          SecurityPolicyRule
            Core.<$> (o Core..:? "action")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "headerAction")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#securityPolicyRule"
                     )
            Core.<*> (o Core..:? "match")
            Core.<*> (o Core..:? "preconfiguredWafConfig")
            Core.<*> (o Core..:? "preview")
            Core.<*> (o Core..:? "priority")
            Core.<*> (o Core..:? "rateLimitOptions")
            Core.<*> (o Core..:? "redirectOptions")
      )

instance Core.ToJSON SecurityPolicyRule where
  toJSON SecurityPolicyRule {..} =
    Core.object
      ( Core.catMaybes
          [ ("action" Core..=) Core.<$> action,
            ("description" Core..=) Core.<$> description,
            ("headerAction" Core..=) Core.<$> headerAction,
            Core.Just ("kind" Core..= kind),
            ("match" Core..=) Core.<$> match,
            ("preconfiguredWafConfig" Core..=)
              Core.<$> preconfiguredWafConfig,
            ("preview" Core..=) Core.<$> preview,
            ("priority" Core..=) Core.<$> priority,
            ("rateLimitOptions" Core..=)
              Core.<$> rateLimitOptions,
            ("redirectOptions" Core..=)
              Core.<$> redirectOptions
          ]
      )

--
-- /See:/ 'newSecurityPolicyRuleHttpHeaderAction' smart constructor.
newtype SecurityPolicyRuleHttpHeaderAction = SecurityPolicyRuleHttpHeaderAction
  { -- | The list of request headers to add or overwrite if they\'re already present.
    requestHeadersToAdds :: (Core.Maybe [SecurityPolicyRuleHttpHeaderActionHttpHeaderOption])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyRuleHttpHeaderAction' with the minimum fields required to make a request.
newSecurityPolicyRuleHttpHeaderAction ::
  SecurityPolicyRuleHttpHeaderAction
newSecurityPolicyRuleHttpHeaderAction =
  SecurityPolicyRuleHttpHeaderAction {requestHeadersToAdds = Core.Nothing}

instance
  Core.FromJSON
    SecurityPolicyRuleHttpHeaderAction
  where
  parseJSON =
    Core.withObject
      "SecurityPolicyRuleHttpHeaderAction"
      ( \o ->
          SecurityPolicyRuleHttpHeaderAction
            Core.<$> (o Core..:? "requestHeadersToAdds")
      )

instance
  Core.ToJSON
    SecurityPolicyRuleHttpHeaderAction
  where
  toJSON SecurityPolicyRuleHttpHeaderAction {..} =
    Core.object
      ( Core.catMaybes
          [ ("requestHeadersToAdds" Core..=)
              Core.<$> requestHeadersToAdds
          ]
      )

--
-- /See:/ 'newSecurityPolicyRuleHttpHeaderActionHttpHeaderOption' smart constructor.
data SecurityPolicyRuleHttpHeaderActionHttpHeaderOption = SecurityPolicyRuleHttpHeaderActionHttpHeaderOption
  { -- | The name of the header to set.
    headerName :: (Core.Maybe Core.Text),
    -- | The value to set the named header to.
    headerValue :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyRuleHttpHeaderActionHttpHeaderOption' with the minimum fields required to make a request.
newSecurityPolicyRuleHttpHeaderActionHttpHeaderOption ::
  SecurityPolicyRuleHttpHeaderActionHttpHeaderOption
newSecurityPolicyRuleHttpHeaderActionHttpHeaderOption =
  SecurityPolicyRuleHttpHeaderActionHttpHeaderOption
    { headerName = Core.Nothing,
      headerValue = Core.Nothing
    }

instance
  Core.FromJSON
    SecurityPolicyRuleHttpHeaderActionHttpHeaderOption
  where
  parseJSON =
    Core.withObject
      "SecurityPolicyRuleHttpHeaderActionHttpHeaderOption"
      ( \o ->
          SecurityPolicyRuleHttpHeaderActionHttpHeaderOption
            Core.<$> (o Core..:? "headerName")
              Core.<*> (o Core..:? "headerValue")
      )

instance
  Core.ToJSON
    SecurityPolicyRuleHttpHeaderActionHttpHeaderOption
  where
  toJSON
    SecurityPolicyRuleHttpHeaderActionHttpHeaderOption {..} =
      Core.object
        ( Core.catMaybes
            [ ("headerName" Core..=) Core.<$> headerName,
              ("headerValue" Core..=) Core.<$> headerValue
            ]
        )

-- | Represents a match condition that incoming traffic is evaluated against. Exactly one field must be specified.
--
-- /See:/ 'newSecurityPolicyRuleMatcher' smart constructor.
data SecurityPolicyRuleMatcher = SecurityPolicyRuleMatcher
  { -- | The configuration options available when specifying versioned/expr. This field must be specified if versioned/expr is specified and cannot be specified if versioned_expr is not specified.
    config :: (Core.Maybe SecurityPolicyRuleMatcherConfig),
    -- | User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header.
    expr :: (Core.Maybe Expr),
    -- | Preconfigured versioned expression. If this field is specified, config must also be specified. Available preconfigured expressions along with their requirements are: SRC/IPS/V1 - must specify the corresponding src/ip/range field in config.
    versionedExpr :: (Core.Maybe SecurityPolicyRuleMatcher_VersionedExpr)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyRuleMatcher' with the minimum fields required to make a request.
newSecurityPolicyRuleMatcher ::
  SecurityPolicyRuleMatcher
newSecurityPolicyRuleMatcher =
  SecurityPolicyRuleMatcher
    { config = Core.Nothing,
      expr = Core.Nothing,
      versionedExpr = Core.Nothing
    }

instance Core.FromJSON SecurityPolicyRuleMatcher where
  parseJSON =
    Core.withObject
      "SecurityPolicyRuleMatcher"
      ( \o ->
          SecurityPolicyRuleMatcher
            Core.<$> (o Core..:? "config")
            Core.<*> (o Core..:? "expr")
            Core.<*> (o Core..:? "versionedExpr")
      )

instance Core.ToJSON SecurityPolicyRuleMatcher where
  toJSON SecurityPolicyRuleMatcher {..} =
    Core.object
      ( Core.catMaybes
          [ ("config" Core..=) Core.<$> config,
            ("expr" Core..=) Core.<$> expr,
            ("versionedExpr" Core..=) Core.<$> versionedExpr
          ]
      )

--
-- /See:/ 'newSecurityPolicyRuleMatcherConfig' smart constructor.
newtype SecurityPolicyRuleMatcherConfig = SecurityPolicyRuleMatcherConfig
  { -- | CIDR IP address range. Maximum number of src/ip/ranges allowed is 10.
    srcIpRanges :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyRuleMatcherConfig' with the minimum fields required to make a request.
newSecurityPolicyRuleMatcherConfig ::
  SecurityPolicyRuleMatcherConfig
newSecurityPolicyRuleMatcherConfig =
  SecurityPolicyRuleMatcherConfig {srcIpRanges = Core.Nothing}

instance
  Core.FromJSON
    SecurityPolicyRuleMatcherConfig
  where
  parseJSON =
    Core.withObject
      "SecurityPolicyRuleMatcherConfig"
      ( \o ->
          SecurityPolicyRuleMatcherConfig
            Core.<$> (o Core..:? "srcIpRanges")
      )

instance Core.ToJSON SecurityPolicyRuleMatcherConfig where
  toJSON SecurityPolicyRuleMatcherConfig {..} =
    Core.object
      ( Core.catMaybes
          [("srcIpRanges" Core..=) Core.<$> srcIpRanges]
      )

--
-- /See:/ 'newSecurityPolicyRulePreconfiguredWafConfig' smart constructor.
newtype SecurityPolicyRulePreconfiguredWafConfig = SecurityPolicyRulePreconfiguredWafConfig
  { -- | A list of exclusions to apply during preconfigured WAF evaluation.
    exclusions :: (Core.Maybe [SecurityPolicyRulePreconfiguredWafConfigExclusion])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyRulePreconfiguredWafConfig' with the minimum fields required to make a request.
newSecurityPolicyRulePreconfiguredWafConfig ::
  SecurityPolicyRulePreconfiguredWafConfig
newSecurityPolicyRulePreconfiguredWafConfig =
  SecurityPolicyRulePreconfiguredWafConfig {exclusions = Core.Nothing}

instance
  Core.FromJSON
    SecurityPolicyRulePreconfiguredWafConfig
  where
  parseJSON =
    Core.withObject
      "SecurityPolicyRulePreconfiguredWafConfig"
      ( \o ->
          SecurityPolicyRulePreconfiguredWafConfig
            Core.<$> (o Core..:? "exclusions")
      )

instance
  Core.ToJSON
    SecurityPolicyRulePreconfiguredWafConfig
  where
  toJSON SecurityPolicyRulePreconfiguredWafConfig {..} =
    Core.object
      ( Core.catMaybes
          [("exclusions" Core..=) Core.<$> exclusions]
      )

--
-- /See:/ 'newSecurityPolicyRulePreconfiguredWafConfigExclusion' smart constructor.
data SecurityPolicyRulePreconfiguredWafConfigExclusion = SecurityPolicyRulePreconfiguredWafConfigExclusion
  { -- | A list of request cookie names whose value will be excluded from inspection during preconfigured WAF evaluation.
    requestCookiesToExclude ::
      ( Core.Maybe
          [SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams]
      ),
    -- | A list of request header names whose value will be excluded from inspection during preconfigured WAF evaluation.
    requestHeadersToExclude ::
      ( Core.Maybe
          [SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams]
      ),
    -- | A list of request query parameter names whose value will be excluded from inspection during preconfigured WAF evaluation. Note that the parameter can be in the query string or in the POST body.
    requestQueryParamsToExclude ::
      ( Core.Maybe
          [SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams]
      ),
    -- | A list of request URIs from the request line to be excluded from inspection during preconfigured WAF evaluation. When specifying this field, the query or fragment part should be excluded.
    requestUrisToExclude ::
      ( Core.Maybe
          [SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams]
      ),
    -- | A list of target rule IDs under the WAF rule set to apply the preconfigured WAF exclusion. If omitted, it refers to all the rule IDs under the WAF rule set.
    targetRuleIds :: (Core.Maybe [Core.Text]),
    -- | Target WAF rule set to apply the preconfigured WAF exclusion.
    targetRuleSet :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyRulePreconfiguredWafConfigExclusion' with the minimum fields required to make a request.
newSecurityPolicyRulePreconfiguredWafConfigExclusion ::
  SecurityPolicyRulePreconfiguredWafConfigExclusion
newSecurityPolicyRulePreconfiguredWafConfigExclusion =
  SecurityPolicyRulePreconfiguredWafConfigExclusion
    { requestCookiesToExclude = Core.Nothing,
      requestHeadersToExclude = Core.Nothing,
      requestQueryParamsToExclude = Core.Nothing,
      requestUrisToExclude = Core.Nothing,
      targetRuleIds = Core.Nothing,
      targetRuleSet = Core.Nothing
    }

instance
  Core.FromJSON
    SecurityPolicyRulePreconfiguredWafConfigExclusion
  where
  parseJSON =
    Core.withObject
      "SecurityPolicyRulePreconfiguredWafConfigExclusion"
      ( \o ->
          SecurityPolicyRulePreconfiguredWafConfigExclusion
            Core.<$> (o Core..:? "requestCookiesToExclude")
              Core.<*> (o Core..:? "requestHeadersToExclude")
              Core.<*> (o Core..:? "requestQueryParamsToExclude")
              Core.<*> (o Core..:? "requestUrisToExclude")
              Core.<*> (o Core..:? "targetRuleIds")
              Core.<*> (o Core..:? "targetRuleSet")
      )

instance
  Core.ToJSON
    SecurityPolicyRulePreconfiguredWafConfigExclusion
  where
  toJSON
    SecurityPolicyRulePreconfiguredWafConfigExclusion {..} =
      Core.object
        ( Core.catMaybes
            [ ("requestCookiesToExclude" Core..=)
                Core.<$> requestCookiesToExclude,
              ("requestHeadersToExclude" Core..=)
                Core.<$> requestHeadersToExclude,
              ("requestQueryParamsToExclude" Core..=)
                Core.<$> requestQueryParamsToExclude,
              ("requestUrisToExclude" Core..=)
                Core.<$> requestUrisToExclude,
              ("targetRuleIds" Core..=) Core.<$> targetRuleIds,
              ("targetRuleSet" Core..=) Core.<$> targetRuleSet
            ]
        )

--
-- /See:/ 'newSecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams' smart constructor.
data SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams = SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams
  { -- | The match operator for the field.
    op ::
      ( Core.Maybe
          SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams_Op
      ),
    -- | The value of the field.
    val :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams' with the minimum fields required to make a request.
newSecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams ::
  SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams
newSecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams =
  SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams
    { op = Core.Nothing,
      val = Core.Nothing
    }

instance
  Core.FromJSON
    SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams
  where
  parseJSON =
    Core.withObject
      "SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams"
      ( \o ->
          SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams
            Core.<$> (o Core..:? "op") Core.<*> (o Core..:? "val")
      )

instance
  Core.ToJSON
    SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams
  where
  toJSON
    SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams {..} =
      Core.object
        ( Core.catMaybes
            [ ("op" Core..=) Core.<$> op,
              ("val" Core..=) Core.<$> val
            ]
        )

--
-- /See:/ 'newSecurityPolicyRuleRateLimitOptions' smart constructor.
data SecurityPolicyRuleRateLimitOptions = SecurityPolicyRuleRateLimitOptions
  { -- | Can only be specified if the action for the rule is \"rate/based/ban\". If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.
    banDurationSec :: (Core.Maybe Core.Int32),
    -- | Can only be specified if the action for the rule is \"rate/based/ban\". If specified, the key will be banned for the configured \'ban/duration/sec\' when the number of requests that exceed the \'rate/limit/threshold\' also exceed this \'ban_threshold\'.
    banThreshold :: (Core.Maybe SecurityPolicyRuleRateLimitOptionsThreshold),
    -- | Action to take for requests that are under the configured rate limit threshold. Valid option is \"allow\" only.
    conformAction :: (Core.Maybe Core.Text),
    -- | Determines the key to enforce the rate/limit/threshold on. Possible values are: - ALL: A single rate limit threshold is applied to all the requests matching this rule. This is the default value if \"enforceOnKey\" is not configured. - IP: The source IP address of the request is the key. Each IP has this limit enforced separately. - HTTP/HEADER: The value of the HTTP header whose name is configured under \"enforceOnKeyName\". The key value is truncated to the first 128 bytes of the header value. If no such header is present in the request, the key type defaults to ALL. - XFF/IP: The first IP address (i.e. the originating client IP address) specified in the list of IPs under X-Forwarded-For HTTP header. If no such header is present or the value is not a valid IP, the key defaults to the source IP address of the request i.e. key type IP. - HTTP/COOKIE: The value of the HTTP cookie whose name is configured under \"enforceOnKeyName\". The key value is truncated to the first 128 bytes of the cookie value. If no
    -- such cookie is present in the request, the key type defaults to ALL. - HTTP/PATH: The URL path of the HTTP request. The key value is truncated to the first 128 bytes. - SNI: Server name indication in the TLS session of the HTTPS request. The key value is truncated to the first 128 bytes. The key type defaults to ALL on a HTTP session. - REGION_CODE: The country\/region from which the request originates.
    enforceOnKey :: (Core.Maybe SecurityPolicyRuleRateLimitOptions_EnforceOnKey),
    -- | Rate limit key name applicable only for the following key types: HTTP/HEADER -- Name of the HTTP header whose value is taken as the key value. HTTP/COOKIE -- Name of the HTTP cookie whose value is taken as the key value.
    enforceOnKeyName :: (Core.Maybe Core.Text),
    -- | Action to take for requests that are above the configured rate limit threshold, to either deny with a specified HTTP response code, or redirect to a different endpoint. Valid options are @deny(STATUS)@, where valid values for @STATUS@ are 403, 404, 429, and 502, and @redirect@, where the redirect parameters come from @exceedRedirectOptions@ below.
    exceedAction :: (Core.Maybe Core.Text),
    -- | Parameters defining the redirect action that is used as the exceed action. Cannot be specified if the exceed action is not redirect.
    exceedRedirectOptions :: (Core.Maybe SecurityPolicyRuleRedirectOptions),
    -- | Threshold at which to begin ratelimiting.
    rateLimitThreshold :: (Core.Maybe SecurityPolicyRuleRateLimitOptionsThreshold)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyRuleRateLimitOptions' with the minimum fields required to make a request.
newSecurityPolicyRuleRateLimitOptions ::
  SecurityPolicyRuleRateLimitOptions
newSecurityPolicyRuleRateLimitOptions =
  SecurityPolicyRuleRateLimitOptions
    { banDurationSec = Core.Nothing,
      banThreshold = Core.Nothing,
      conformAction = Core.Nothing,
      enforceOnKey = Core.Nothing,
      enforceOnKeyName = Core.Nothing,
      exceedAction = Core.Nothing,
      exceedRedirectOptions = Core.Nothing,
      rateLimitThreshold = Core.Nothing
    }

instance
  Core.FromJSON
    SecurityPolicyRuleRateLimitOptions
  where
  parseJSON =
    Core.withObject
      "SecurityPolicyRuleRateLimitOptions"
      ( \o ->
          SecurityPolicyRuleRateLimitOptions
            Core.<$> (o Core..:? "banDurationSec")
            Core.<*> (o Core..:? "banThreshold")
            Core.<*> (o Core..:? "conformAction")
            Core.<*> (o Core..:? "enforceOnKey")
            Core.<*> (o Core..:? "enforceOnKeyName")
            Core.<*> (o Core..:? "exceedAction")
            Core.<*> (o Core..:? "exceedRedirectOptions")
            Core.<*> (o Core..:? "rateLimitThreshold")
      )

instance
  Core.ToJSON
    SecurityPolicyRuleRateLimitOptions
  where
  toJSON SecurityPolicyRuleRateLimitOptions {..} =
    Core.object
      ( Core.catMaybes
          [ ("banDurationSec" Core..=) Core.<$> banDurationSec,
            ("banThreshold" Core..=) Core.<$> banThreshold,
            ("conformAction" Core..=) Core.<$> conformAction,
            ("enforceOnKey" Core..=) Core.<$> enforceOnKey,
            ("enforceOnKeyName" Core..=)
              Core.<$> enforceOnKeyName,
            ("exceedAction" Core..=) Core.<$> exceedAction,
            ("exceedRedirectOptions" Core..=)
              Core.<$> exceedRedirectOptions,
            ("rateLimitThreshold" Core..=)
              Core.<$> rateLimitThreshold
          ]
      )

--
-- /See:/ 'newSecurityPolicyRuleRateLimitOptionsThreshold' smart constructor.
data SecurityPolicyRuleRateLimitOptionsThreshold = SecurityPolicyRuleRateLimitOptionsThreshold
  { -- | Number of HTTP(S) requests for calculating the threshold.
    count :: (Core.Maybe Core.Int32),
    -- | Interval over which the threshold is computed.
    intervalSec :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyRuleRateLimitOptionsThreshold' with the minimum fields required to make a request.
newSecurityPolicyRuleRateLimitOptionsThreshold ::
  SecurityPolicyRuleRateLimitOptionsThreshold
newSecurityPolicyRuleRateLimitOptionsThreshold =
  SecurityPolicyRuleRateLimitOptionsThreshold
    { count = Core.Nothing,
      intervalSec = Core.Nothing
    }

instance
  Core.FromJSON
    SecurityPolicyRuleRateLimitOptionsThreshold
  where
  parseJSON =
    Core.withObject
      "SecurityPolicyRuleRateLimitOptionsThreshold"
      ( \o ->
          SecurityPolicyRuleRateLimitOptionsThreshold
            Core.<$> (o Core..:? "count")
            Core.<*> (o Core..:? "intervalSec")
      )

instance
  Core.ToJSON
    SecurityPolicyRuleRateLimitOptionsThreshold
  where
  toJSON
    SecurityPolicyRuleRateLimitOptionsThreshold {..} =
      Core.object
        ( Core.catMaybes
            [ ("count" Core..=) Core.<$> count,
              ("intervalSec" Core..=) Core.<$> intervalSec
            ]
        )

--
-- /See:/ 'newSecurityPolicyRuleRedirectOptions' smart constructor.
data SecurityPolicyRuleRedirectOptions = SecurityPolicyRuleRedirectOptions
  { -- | Target for the redirect action. This is required if the type is EXTERNAL/302 and cannot be specified for GOOGLE/RECAPTCHA.
    target :: (Core.Maybe Core.Text),
    -- | Type of the redirect action.
    type' :: (Core.Maybe SecurityPolicyRuleRedirectOptions_Type)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecurityPolicyRuleRedirectOptions' with the minimum fields required to make a request.
newSecurityPolicyRuleRedirectOptions ::
  SecurityPolicyRuleRedirectOptions
newSecurityPolicyRuleRedirectOptions =
  SecurityPolicyRuleRedirectOptions
    { target = Core.Nothing,
      type' = Core.Nothing
    }

instance
  Core.FromJSON
    SecurityPolicyRuleRedirectOptions
  where
  parseJSON =
    Core.withObject
      "SecurityPolicyRuleRedirectOptions"
      ( \o ->
          SecurityPolicyRuleRedirectOptions
            Core.<$> (o Core..:? "target") Core.<*> (o Core..:? "type")
      )

instance
  Core.ToJSON
    SecurityPolicyRuleRedirectOptions
  where
  toJSON SecurityPolicyRuleRedirectOptions {..} =
    Core.object
      ( Core.catMaybes
          [ ("target" Core..=) Core.<$> target,
            ("type" Core..=) Core.<$> type'
          ]
      )

-- | The authentication and authorization settings for a BackendService.
--
-- /See:/ 'newSecuritySettings' smart constructor.
data SecuritySettings = SecuritySettings
  { -- | Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service\'s backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL/SELF/MANAGED. If left blank, communications are not encrypted. Note: This field currently has no impact.
    clientTlsPolicy :: (Core.Maybe Core.Text),
    -- | Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server\/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate\'s subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate\'s subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL/SELF/MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode). Note: This field currently has no impact.
    subjectAltNames :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SecuritySettings' with the minimum fields required to make a request.
newSecuritySettings ::
  SecuritySettings
newSecuritySettings =
  SecuritySettings
    { clientTlsPolicy = Core.Nothing,
      subjectAltNames = Core.Nothing
    }

instance Core.FromJSON SecuritySettings where
  parseJSON =
    Core.withObject
      "SecuritySettings"
      ( \o ->
          SecuritySettings
            Core.<$> (o Core..:? "clientTlsPolicy")
            Core.<*> (o Core..:? "subjectAltNames")
      )

instance Core.ToJSON SecuritySettings where
  toJSON SecuritySettings {..} =
    Core.object
      ( Core.catMaybes
          [ ("clientTlsPolicy" Core..=)
              Core.<$> clientTlsPolicy,
            ("subjectAltNames" Core..=)
              Core.<$> subjectAltNames
          ]
      )

-- | An instance serial console output.
--
-- /See:/ 'newSerialPortOutput' smart constructor.
data SerialPortOutput = SerialPortOutput
  { -- | [Output Only] The contents of the console output.
    contents :: (Core.Maybe Core.Text),
    -- | [Output Only] Type of the resource. Always compute#serialPortOutput for serial port output.
    kind :: Core.Text,
    -- | [Output Only] The position of the next byte of content, regardless of whether the content exists, following the output returned in the @contents@ property. Use this value in the next request as the start parameter.
    next :: (Core.Maybe Core.Int64),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | The starting byte position of the output that was returned. This should match the start parameter sent with the request. If the serial console output exceeds the size of the buffer (1 MB), older output is overwritten by newer content. The output start value will indicate the byte position of the output that was returned, which might be different than the @start@ value that was specified in the request.
    start :: (Core.Maybe Core.Int64)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SerialPortOutput' with the minimum fields required to make a request.
newSerialPortOutput ::
  SerialPortOutput
newSerialPortOutput =
  SerialPortOutput
    { contents = Core.Nothing,
      kind = "compute#serialPortOutput",
      next = Core.Nothing,
      selfLink = Core.Nothing,
      start = Core.Nothing
    }

instance Core.FromJSON SerialPortOutput where
  parseJSON =
    Core.withObject
      "SerialPortOutput"
      ( \o ->
          SerialPortOutput
            Core.<$> (o Core..:? "contents")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#serialPortOutput"
                     )
            Core.<*> ( o Core..:? "next"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "selfLink")
            Core.<*> ( o Core..:? "start"
                         Core.<&> Core.fmap Core.fromAsText
                     )
      )

instance Core.ToJSON SerialPortOutput where
  toJSON SerialPortOutput {..} =
    Core.object
      ( Core.catMaybes
          [ ("contents" Core..=) Core.<$> contents,
            Core.Just ("kind" Core..= kind),
            ("next" Core..=) Core.. Core.AsText Core.<$> next,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("start" Core..=) Core.. Core.AsText Core.<$> start
          ]
      )

--
-- /See:/ 'newServerBinding' smart constructor.
newtype ServerBinding = ServerBinding
  { -- |
    type' :: (Core.Maybe ServerBinding_Type)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ServerBinding' with the minimum fields required to make a request.
newServerBinding ::
  ServerBinding
newServerBinding = ServerBinding {type' = Core.Nothing}

instance Core.FromJSON ServerBinding where
  parseJSON =
    Core.withObject
      "ServerBinding"
      (\o -> ServerBinding Core.<$> (o Core..:? "type"))

instance Core.ToJSON ServerBinding where
  toJSON ServerBinding {..} =
    Core.object
      (Core.catMaybes [("type" Core..=) Core.<$> type'])

-- | A service account.
--
-- /See:/ 'newServiceAccount' smart constructor.
data ServiceAccount = ServiceAccount
  { -- | Email address of the service account.
    email :: (Core.Maybe Core.Text),
    -- | The list of scopes to be made available for this service account.
    scopes :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ServiceAccount' with the minimum fields required to make a request.
newServiceAccount ::
  ServiceAccount
newServiceAccount = ServiceAccount {email = Core.Nothing, scopes = Core.Nothing}

instance Core.FromJSON ServiceAccount where
  parseJSON =
    Core.withObject
      "ServiceAccount"
      ( \o ->
          ServiceAccount
            Core.<$> (o Core..:? "email") Core.<*> (o Core..:? "scopes")
      )

instance Core.ToJSON ServiceAccount where
  toJSON ServiceAccount {..} =
    Core.object
      ( Core.catMaybes
          [ ("email" Core..=) Core.<$> email,
            ("scopes" Core..=) Core.<$> scopes
          ]
      )

-- | Represents a ServiceAttachment resource. A service attachment represents a service that a producer has exposed. It encapsulates the load balancer which fronts the service runs and a list of NAT IP ranges that the producers uses to represent the consumers connecting to the service.
--
-- /See:/ 'newServiceAttachment' smart constructor.
data ServiceAttachment = ServiceAttachment
  { -- | [Output Only] An array of connections for all the consumers connected to this service attachment.
    connectedEndpoints :: (Core.Maybe [ServiceAttachmentConnectedEndpoint]),
    -- | The connection preference of service attachment. The value can be set to ACCEPT/AUTOMATIC. An ACCEPT/AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules.
    connectionPreference :: (Core.Maybe ServiceAttachment_ConnectionPreference),
    -- | Projects that are allowed to connect to this service attachment.
    consumerAcceptLists :: (Core.Maybe [ServiceAttachmentConsumerProjectLimit]),
    -- | Projects that are not allowed to connect to this service attachment. The project can be specified using its id or number.
    consumerRejectLists :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | If specified, the domain name will be used during the integration between the PSC connected endpoints and the Cloud DNS. For example, this is a valid domain name: \"p.mycompany.com.\". Current max number of domain names supported is 1.
    domainNames :: (Core.Maybe [Core.Text]),
    -- | If true, enable the proxy protocol which is for supplying client TCP\/IP address data in TCP connections that traverse proxies on their way to destination servers.
    enableProxyProtocol :: (Core.Maybe Core.Bool),
    -- | Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a ServiceAttachment. An up-to-date fingerprint must be provided in order to patch\/update the ServiceAttachment; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the ServiceAttachment.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | [Output Only] The unique identifier for the resource type. The server generates this identifier.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#serviceAttachment for service attachments.
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | An array of URLs where each entry is the URL of a subnet provided by the service producer to use for NAT in this service attachment.
    natSubnets :: (Core.Maybe [Core.Text]),
    -- | The URL of a forwarding rule with loadBalancingScheme INTERNAL* that is serving the endpoint identified by this service attachment.
    producerForwardingRule :: (Core.Maybe Core.Text),
    -- | [Output Only] An 128-bit global unique ID of the PSC service attachment.
    pscServiceAttachmentId :: (Core.Maybe Uint128),
    -- | [Output Only] URL of the region where the service attachment resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | The URL of a service serving the endpoint identified by this service attachment.
    targetService :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ServiceAttachment' with the minimum fields required to make a request.
newServiceAttachment ::
  ServiceAttachment
newServiceAttachment =
  ServiceAttachment
    { connectedEndpoints = Core.Nothing,
      connectionPreference = Core.Nothing,
      consumerAcceptLists = Core.Nothing,
      consumerRejectLists = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      domainNames = Core.Nothing,
      enableProxyProtocol = Core.Nothing,
      fingerprint = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#serviceAttachment",
      name = Core.Nothing,
      natSubnets = Core.Nothing,
      producerForwardingRule = Core.Nothing,
      pscServiceAttachmentId = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      targetService = Core.Nothing
    }

instance Core.FromJSON ServiceAttachment where
  parseJSON =
    Core.withObject
      "ServiceAttachment"
      ( \o ->
          ServiceAttachment
            Core.<$> (o Core..:? "connectedEndpoints")
            Core.<*> (o Core..:? "connectionPreference")
            Core.<*> (o Core..:? "consumerAcceptLists")
            Core.<*> (o Core..:? "consumerRejectLists")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "domainNames")
            Core.<*> (o Core..:? "enableProxyProtocol")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#serviceAttachment"
                     )
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "natSubnets")
            Core.<*> (o Core..:? "producerForwardingRule")
            Core.<*> (o Core..:? "pscServiceAttachmentId")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "targetService")
      )

instance Core.ToJSON ServiceAttachment where
  toJSON ServiceAttachment {..} =
    Core.object
      ( Core.catMaybes
          [ ("connectedEndpoints" Core..=)
              Core.<$> connectedEndpoints,
            ("connectionPreference" Core..=)
              Core.<$> connectionPreference,
            ("consumerAcceptLists" Core..=)
              Core.<$> consumerAcceptLists,
            ("consumerRejectLists" Core..=)
              Core.<$> consumerRejectLists,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("domainNames" Core..=) Core.<$> domainNames,
            ("enableProxyProtocol" Core..=)
              Core.<$> enableProxyProtocol,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("natSubnets" Core..=) Core.<$> natSubnets,
            ("producerForwardingRule" Core..=)
              Core.<$> producerForwardingRule,
            ("pscServiceAttachmentId" Core..=)
              Core.<$> pscServiceAttachmentId,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("targetService" Core..=) Core.<$> targetService
          ]
      )

-- | Contains a list of ServiceAttachmentsScopedList.
--
-- /See:/ 'newServiceAttachmentAggregatedList' smart constructor.
data ServiceAttachmentAggregatedList = ServiceAttachmentAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of ServiceAttachmentsScopedList resources.
    items :: (Core.Maybe ServiceAttachmentAggregatedList_Items),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe ServiceAttachmentAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ServiceAttachmentAggregatedList' with the minimum fields required to make a request.
newServiceAttachmentAggregatedList ::
  ServiceAttachmentAggregatedList
newServiceAttachmentAggregatedList =
  ServiceAttachmentAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#serviceAttachmentAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance
  Core.FromJSON
    ServiceAttachmentAggregatedList
  where
  parseJSON =
    Core.withObject
      "ServiceAttachmentAggregatedList"
      ( \o ->
          ServiceAttachmentAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#serviceAttachmentAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON ServiceAttachmentAggregatedList where
  toJSON ServiceAttachmentAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of ServiceAttachmentsScopedList resources.
--
-- /See:/ 'newServiceAttachmentAggregatedList_Items' smart constructor.
newtype ServiceAttachmentAggregatedList_Items = ServiceAttachmentAggregatedList_Items
  { -- | Name of the scope containing this set of ServiceAttachments.
    additional :: (Core.HashMap Core.Text ServiceAttachmentsScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ServiceAttachmentAggregatedList_Items' with the minimum fields required to make a request.
newServiceAttachmentAggregatedList_Items ::
  -- |  Name of the scope containing this set of ServiceAttachments. See 'additional'.
  Core.HashMap Core.Text ServiceAttachmentsScopedList ->
  ServiceAttachmentAggregatedList_Items
newServiceAttachmentAggregatedList_Items additional =
  ServiceAttachmentAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    ServiceAttachmentAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "ServiceAttachmentAggregatedList_Items"
      ( \o ->
          ServiceAttachmentAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    ServiceAttachmentAggregatedList_Items
  where
  toJSON ServiceAttachmentAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newServiceAttachmentAggregatedList_Warning' smart constructor.
data ServiceAttachmentAggregatedList_Warning = ServiceAttachmentAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe ServiceAttachmentAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [ServiceAttachmentAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ServiceAttachmentAggregatedList_Warning' with the minimum fields required to make a request.
newServiceAttachmentAggregatedList_Warning ::
  ServiceAttachmentAggregatedList_Warning
newServiceAttachmentAggregatedList_Warning =
  ServiceAttachmentAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    ServiceAttachmentAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "ServiceAttachmentAggregatedList_Warning"
      ( \o ->
          ServiceAttachmentAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    ServiceAttachmentAggregatedList_Warning
  where
  toJSON ServiceAttachmentAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newServiceAttachmentAggregatedList_Warning_DataItem' smart constructor.
data ServiceAttachmentAggregatedList_Warning_DataItem = ServiceAttachmentAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ServiceAttachmentAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newServiceAttachmentAggregatedList_Warning_DataItem ::
  ServiceAttachmentAggregatedList_Warning_DataItem
newServiceAttachmentAggregatedList_Warning_DataItem =
  ServiceAttachmentAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    ServiceAttachmentAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "ServiceAttachmentAggregatedList_Warning_DataItem"
      ( \o ->
          ServiceAttachmentAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    ServiceAttachmentAggregatedList_Warning_DataItem
  where
  toJSON
    ServiceAttachmentAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | [Output Only] A connection connected to this service attachment.
--
-- /See:/ 'newServiceAttachmentConnectedEndpoint' smart constructor.
data ServiceAttachmentConnectedEndpoint = ServiceAttachmentConnectedEndpoint
  { -- | The url of a connected endpoint.
    endpoint :: (Core.Maybe Core.Text),
    -- | The PSC connection id of the connected endpoint.
    pscConnectionId :: (Core.Maybe Core.Word64),
    -- | The status of a connected endpoint to this service attachment.
    status :: (Core.Maybe ServiceAttachmentConnectedEndpoint_Status)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ServiceAttachmentConnectedEndpoint' with the minimum fields required to make a request.
newServiceAttachmentConnectedEndpoint ::
  ServiceAttachmentConnectedEndpoint
newServiceAttachmentConnectedEndpoint =
  ServiceAttachmentConnectedEndpoint
    { endpoint = Core.Nothing,
      pscConnectionId = Core.Nothing,
      status = Core.Nothing
    }

instance
  Core.FromJSON
    ServiceAttachmentConnectedEndpoint
  where
  parseJSON =
    Core.withObject
      "ServiceAttachmentConnectedEndpoint"
      ( \o ->
          ServiceAttachmentConnectedEndpoint
            Core.<$> (o Core..:? "endpoint")
            Core.<*> ( o Core..:? "pscConnectionId"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "status")
      )

instance
  Core.ToJSON
    ServiceAttachmentConnectedEndpoint
  where
  toJSON ServiceAttachmentConnectedEndpoint {..} =
    Core.object
      ( Core.catMaybes
          [ ("endpoint" Core..=) Core.<$> endpoint,
            ("pscConnectionId" Core..=) Core.. Core.AsText
              Core.<$> pscConnectionId,
            ("status" Core..=) Core.<$> status
          ]
      )

--
-- /See:/ 'newServiceAttachmentConsumerProjectLimit' smart constructor.
data ServiceAttachmentConsumerProjectLimit = ServiceAttachmentConsumerProjectLimit
  { -- | The value of the limit to set.
    connectionLimit :: (Core.Maybe Core.Word32),
    -- | The network URL for the network to set the limit for.
    networkUrl :: (Core.Maybe Core.Text),
    -- | The project id or number for the project to set the limit for.
    projectIdOrNum :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ServiceAttachmentConsumerProjectLimit' with the minimum fields required to make a request.
newServiceAttachmentConsumerProjectLimit ::
  ServiceAttachmentConsumerProjectLimit
newServiceAttachmentConsumerProjectLimit =
  ServiceAttachmentConsumerProjectLimit
    { connectionLimit = Core.Nothing,
      networkUrl = Core.Nothing,
      projectIdOrNum = Core.Nothing
    }

instance
  Core.FromJSON
    ServiceAttachmentConsumerProjectLimit
  where
  parseJSON =
    Core.withObject
      "ServiceAttachmentConsumerProjectLimit"
      ( \o ->
          ServiceAttachmentConsumerProjectLimit
            Core.<$> (o Core..:? "connectionLimit")
            Core.<*> (o Core..:? "networkUrl")
            Core.<*> (o Core..:? "projectIdOrNum")
      )

instance
  Core.ToJSON
    ServiceAttachmentConsumerProjectLimit
  where
  toJSON ServiceAttachmentConsumerProjectLimit {..} =
    Core.object
      ( Core.catMaybes
          [ ("connectionLimit" Core..=)
              Core.<$> connectionLimit,
            ("networkUrl" Core..=) Core.<$> networkUrl,
            ("projectIdOrNum" Core..=) Core.<$> projectIdOrNum
          ]
      )

--
-- /See:/ 'newServiceAttachmentList' smart constructor.
data ServiceAttachmentList = ServiceAttachmentList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of ServiceAttachment resources.
    items :: (Core.Maybe [ServiceAttachment]),
    -- | [Output Only] Type of the resource. Always compute#serviceAttachment for service attachments.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe ServiceAttachmentList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ServiceAttachmentList' with the minimum fields required to make a request.
newServiceAttachmentList ::
  ServiceAttachmentList
newServiceAttachmentList =
  ServiceAttachmentList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#serviceAttachmentList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON ServiceAttachmentList where
  parseJSON =
    Core.withObject
      "ServiceAttachmentList"
      ( \o ->
          ServiceAttachmentList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#serviceAttachmentList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON ServiceAttachmentList where
  toJSON ServiceAttachmentList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newServiceAttachmentList_Warning' smart constructor.
data ServiceAttachmentList_Warning = ServiceAttachmentList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe ServiceAttachmentList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [ServiceAttachmentList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ServiceAttachmentList_Warning' with the minimum fields required to make a request.
newServiceAttachmentList_Warning ::
  ServiceAttachmentList_Warning
newServiceAttachmentList_Warning =
  ServiceAttachmentList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON ServiceAttachmentList_Warning where
  parseJSON =
    Core.withObject
      "ServiceAttachmentList_Warning"
      ( \o ->
          ServiceAttachmentList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON ServiceAttachmentList_Warning where
  toJSON ServiceAttachmentList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newServiceAttachmentList_Warning_DataItem' smart constructor.
data ServiceAttachmentList_Warning_DataItem = ServiceAttachmentList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ServiceAttachmentList_Warning_DataItem' with the minimum fields required to make a request.
newServiceAttachmentList_Warning_DataItem ::
  ServiceAttachmentList_Warning_DataItem
newServiceAttachmentList_Warning_DataItem =
  ServiceAttachmentList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    ServiceAttachmentList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "ServiceAttachmentList_Warning_DataItem"
      ( \o ->
          ServiceAttachmentList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    ServiceAttachmentList_Warning_DataItem
  where
  toJSON ServiceAttachmentList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newServiceAttachmentsScopedList' smart constructor.
data ServiceAttachmentsScopedList = ServiceAttachmentsScopedList
  { -- | A list of ServiceAttachments contained in this scope.
    serviceAttachments :: (Core.Maybe [ServiceAttachment]),
    -- | Informational warning which replaces the list of service attachments when the list is empty.
    warning :: (Core.Maybe ServiceAttachmentsScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ServiceAttachmentsScopedList' with the minimum fields required to make a request.
newServiceAttachmentsScopedList ::
  ServiceAttachmentsScopedList
newServiceAttachmentsScopedList =
  ServiceAttachmentsScopedList
    { serviceAttachments = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON ServiceAttachmentsScopedList where
  parseJSON =
    Core.withObject
      "ServiceAttachmentsScopedList"
      ( \o ->
          ServiceAttachmentsScopedList
            Core.<$> (o Core..:? "serviceAttachments")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON ServiceAttachmentsScopedList where
  toJSON ServiceAttachmentsScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("serviceAttachments" Core..=)
              Core.<$> serviceAttachments,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of service attachments when the list is empty.
--
-- /See:/ 'newServiceAttachmentsScopedList_Warning' smart constructor.
data ServiceAttachmentsScopedList_Warning = ServiceAttachmentsScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe ServiceAttachmentsScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [ServiceAttachmentsScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ServiceAttachmentsScopedList_Warning' with the minimum fields required to make a request.
newServiceAttachmentsScopedList_Warning ::
  ServiceAttachmentsScopedList_Warning
newServiceAttachmentsScopedList_Warning =
  ServiceAttachmentsScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    ServiceAttachmentsScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "ServiceAttachmentsScopedList_Warning"
      ( \o ->
          ServiceAttachmentsScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    ServiceAttachmentsScopedList_Warning
  where
  toJSON ServiceAttachmentsScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newServiceAttachmentsScopedList_Warning_DataItem' smart constructor.
data ServiceAttachmentsScopedList_Warning_DataItem = ServiceAttachmentsScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ServiceAttachmentsScopedList_Warning_DataItem' with the minimum fields required to make a request.
newServiceAttachmentsScopedList_Warning_DataItem ::
  ServiceAttachmentsScopedList_Warning_DataItem
newServiceAttachmentsScopedList_Warning_DataItem =
  ServiceAttachmentsScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    ServiceAttachmentsScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "ServiceAttachmentsScopedList_Warning_DataItem"
      ( \o ->
          ServiceAttachmentsScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    ServiceAttachmentsScopedList_Warning_DataItem
  where
  toJSON
    ServiceAttachmentsScopedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | The share setting for reservations and sole tenancy node groups.
--
-- /See:/ 'newShareSettings' smart constructor.
data ShareSettings = ShareSettings
  { -- | A map of project id and project config. This is only valid when share/type\'s value is SPECIFIC/PROJECTS.
    projectMap :: (Core.Maybe ShareSettings_ProjectMap),
    -- | Type of sharing for this shared-reservation
    shareType :: (Core.Maybe ShareSettings_ShareType)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ShareSettings' with the minimum fields required to make a request.
newShareSettings ::
  ShareSettings
newShareSettings =
  ShareSettings {projectMap = Core.Nothing, shareType = Core.Nothing}

instance Core.FromJSON ShareSettings where
  parseJSON =
    Core.withObject
      "ShareSettings"
      ( \o ->
          ShareSettings
            Core.<$> (o Core..:? "projectMap")
            Core.<*> (o Core..:? "shareType")
      )

instance Core.ToJSON ShareSettings where
  toJSON ShareSettings {..} =
    Core.object
      ( Core.catMaybes
          [ ("projectMap" Core..=) Core.<$> projectMap,
            ("shareType" Core..=) Core.<$> shareType
          ]
      )

-- | A map of project id and project config. This is only valid when share/type\'s value is SPECIFIC/PROJECTS.
--
-- /See:/ 'newShareSettings_ProjectMap' smart constructor.
newtype ShareSettings_ProjectMap = ShareSettings_ProjectMap
  { -- |
    additional :: (Core.HashMap Core.Text ShareSettingsProjectConfig)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ShareSettings_ProjectMap' with the minimum fields required to make a request.
newShareSettings_ProjectMap ::
  -- |  See 'additional'.
  Core.HashMap Core.Text ShareSettingsProjectConfig ->
  ShareSettings_ProjectMap
newShareSettings_ProjectMap additional =
  ShareSettings_ProjectMap {additional = additional}

instance Core.FromJSON ShareSettings_ProjectMap where
  parseJSON =
    Core.withObject
      "ShareSettings_ProjectMap"
      ( \o ->
          ShareSettings_ProjectMap
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON ShareSettings_ProjectMap where
  toJSON ShareSettings_ProjectMap {..} =
    Core.toJSON additional

-- | Config for each project in the share settings.
--
-- /See:/ 'newShareSettingsProjectConfig' smart constructor.
newtype ShareSettingsProjectConfig = ShareSettingsProjectConfig
  { -- | The project ID, should be same as the key of this project config in the parent map.
    projectId :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ShareSettingsProjectConfig' with the minimum fields required to make a request.
newShareSettingsProjectConfig ::
  ShareSettingsProjectConfig
newShareSettingsProjectConfig =
  ShareSettingsProjectConfig {projectId = Core.Nothing}

instance Core.FromJSON ShareSettingsProjectConfig where
  parseJSON =
    Core.withObject
      "ShareSettingsProjectConfig"
      ( \o ->
          ShareSettingsProjectConfig
            Core.<$> (o Core..:? "projectId")
      )

instance Core.ToJSON ShareSettingsProjectConfig where
  toJSON ShareSettingsProjectConfig {..} =
    Core.object
      ( Core.catMaybes
          [("projectId" Core..=) Core.<$> projectId]
      )

-- | A set of Shielded Instance options.
--
-- /See:/ 'newShieldedInstanceConfig' smart constructor.
data ShieldedInstanceConfig = ShieldedInstanceConfig
  { -- | Defines whether the instance has integrity monitoring enabled. Enabled by default.
    enableIntegrityMonitoring :: (Core.Maybe Core.Bool),
    -- | Defines whether the instance has Secure Boot enabled. Disabled by default.
    enableSecureBoot :: (Core.Maybe Core.Bool),
    -- | Defines whether the instance has the vTPM enabled. Enabled by default.
    enableVtpm :: (Core.Maybe Core.Bool)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ShieldedInstanceConfig' with the minimum fields required to make a request.
newShieldedInstanceConfig ::
  ShieldedInstanceConfig
newShieldedInstanceConfig =
  ShieldedInstanceConfig
    { enableIntegrityMonitoring = Core.Nothing,
      enableSecureBoot = Core.Nothing,
      enableVtpm = Core.Nothing
    }

instance Core.FromJSON ShieldedInstanceConfig where
  parseJSON =
    Core.withObject
      "ShieldedInstanceConfig"
      ( \o ->
          ShieldedInstanceConfig
            Core.<$> (o Core..:? "enableIntegrityMonitoring")
            Core.<*> (o Core..:? "enableSecureBoot")
            Core.<*> (o Core..:? "enableVtpm")
      )

instance Core.ToJSON ShieldedInstanceConfig where
  toJSON ShieldedInstanceConfig {..} =
    Core.object
      ( Core.catMaybes
          [ ("enableIntegrityMonitoring" Core..=)
              Core.<$> enableIntegrityMonitoring,
            ("enableSecureBoot" Core..=)
              Core.<$> enableSecureBoot,
            ("enableVtpm" Core..=) Core.<$> enableVtpm
          ]
      )

-- | A Shielded Instance Identity.
--
-- /See:/ 'newShieldedInstanceIdentity' smart constructor.
data ShieldedInstanceIdentity = ShieldedInstanceIdentity
  { -- | An Endorsement Key (EK) made by the RSA 2048 algorithm issued to the Shielded Instance\'s vTPM.
    encryptionKey :: (Core.Maybe ShieldedInstanceIdentityEntry),
    -- | [Output Only] Type of the resource. Always compute#shieldedInstanceIdentity for shielded Instance identity entry.
    kind :: Core.Text,
    -- | An Attestation Key (AK) made by the RSA 2048 algorithm issued to the Shielded Instance\'s vTPM.
    signingKey :: (Core.Maybe ShieldedInstanceIdentityEntry)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ShieldedInstanceIdentity' with the minimum fields required to make a request.
newShieldedInstanceIdentity ::
  ShieldedInstanceIdentity
newShieldedInstanceIdentity =
  ShieldedInstanceIdentity
    { encryptionKey = Core.Nothing,
      kind = "compute#shieldedInstanceIdentity",
      signingKey = Core.Nothing
    }

instance Core.FromJSON ShieldedInstanceIdentity where
  parseJSON =
    Core.withObject
      "ShieldedInstanceIdentity"
      ( \o ->
          ShieldedInstanceIdentity
            Core.<$> (o Core..:? "encryptionKey")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#shieldedInstanceIdentity"
                     )
            Core.<*> (o Core..:? "signingKey")
      )

instance Core.ToJSON ShieldedInstanceIdentity where
  toJSON ShieldedInstanceIdentity {..} =
    Core.object
      ( Core.catMaybes
          [ ("encryptionKey" Core..=) Core.<$> encryptionKey,
            Core.Just ("kind" Core..= kind),
            ("signingKey" Core..=) Core.<$> signingKey
          ]
      )

-- | A Shielded Instance Identity Entry.
--
-- /See:/ 'newShieldedInstanceIdentityEntry' smart constructor.
data ShieldedInstanceIdentityEntry = ShieldedInstanceIdentityEntry
  { -- | A PEM-encoded X.509 certificate. This field can be empty.
    ekCert :: (Core.Maybe Core.Text),
    -- | A PEM-encoded public key.
    ekPub :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ShieldedInstanceIdentityEntry' with the minimum fields required to make a request.
newShieldedInstanceIdentityEntry ::
  ShieldedInstanceIdentityEntry
newShieldedInstanceIdentityEntry =
  ShieldedInstanceIdentityEntry {ekCert = Core.Nothing, ekPub = Core.Nothing}

instance Core.FromJSON ShieldedInstanceIdentityEntry where
  parseJSON =
    Core.withObject
      "ShieldedInstanceIdentityEntry"
      ( \o ->
          ShieldedInstanceIdentityEntry
            Core.<$> (o Core..:? "ekCert") Core.<*> (o Core..:? "ekPub")
      )

instance Core.ToJSON ShieldedInstanceIdentityEntry where
  toJSON ShieldedInstanceIdentityEntry {..} =
    Core.object
      ( Core.catMaybes
          [ ("ekCert" Core..=) Core.<$> ekCert,
            ("ekPub" Core..=) Core.<$> ekPub
          ]
      )

-- | The policy describes the baseline against which Instance boot integrity is measured.
--
-- /See:/ 'newShieldedInstanceIntegrityPolicy' smart constructor.
newtype ShieldedInstanceIntegrityPolicy = ShieldedInstanceIntegrityPolicy
  { -- | Updates the integrity policy baseline using the measurements from the VM instance\'s most recent boot.
    updateAutoLearnPolicy :: (Core.Maybe Core.Bool)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ShieldedInstanceIntegrityPolicy' with the minimum fields required to make a request.
newShieldedInstanceIntegrityPolicy ::
  ShieldedInstanceIntegrityPolicy
newShieldedInstanceIntegrityPolicy =
  ShieldedInstanceIntegrityPolicy {updateAutoLearnPolicy = Core.Nothing}

instance
  Core.FromJSON
    ShieldedInstanceIntegrityPolicy
  where
  parseJSON =
    Core.withObject
      "ShieldedInstanceIntegrityPolicy"
      ( \o ->
          ShieldedInstanceIntegrityPolicy
            Core.<$> (o Core..:? "updateAutoLearnPolicy")
      )

instance Core.ToJSON ShieldedInstanceIntegrityPolicy where
  toJSON ShieldedInstanceIntegrityPolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("updateAutoLearnPolicy" Core..=)
              Core.<$> updateAutoLearnPolicy
          ]
      )

-- | Represents a customer-supplied Signing Key used by Cloud CDN Signed URLs
--
-- /See:/ 'newSignedUrlKey' smart constructor.
data SignedUrlKey = SignedUrlKey
  { -- | Name of the key. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    keyName :: (Core.Maybe Core.Text),
    -- | 128-bit key value used for signing the URL. The key value must be a valid RFC 4648 Section 5 base64url encoded string.
    keyValue :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SignedUrlKey' with the minimum fields required to make a request.
newSignedUrlKey ::
  SignedUrlKey
newSignedUrlKey = SignedUrlKey {keyName = Core.Nothing, keyValue = Core.Nothing}

instance Core.FromJSON SignedUrlKey where
  parseJSON =
    Core.withObject
      "SignedUrlKey"
      ( \o ->
          SignedUrlKey
            Core.<$> (o Core..:? "keyName")
            Core.<*> (o Core..:? "keyValue")
      )

instance Core.ToJSON SignedUrlKey where
  toJSON SignedUrlKey {..} =
    Core.object
      ( Core.catMaybes
          [ ("keyName" Core..=) Core.<$> keyName,
            ("keyValue" Core..=) Core.<$> keyValue
          ]
      )

-- | Represents a Persistent Disk Snapshot resource. You can use snapshots to back up data on a regular interval. For more information, read Creating persistent disk snapshots.
--
-- /See:/ 'newSnapshot' smart constructor.
data Snapshot = Snapshot
  { -- | [Output Only] The architecture of the snapshot. Valid values are ARM64 or X86_64.
    architecture :: (Core.Maybe Snapshot_Architecture),
    -- | [Output Only] Set to true if snapshots are automatically created by applying resource policy on the target disk.
    autoCreated :: (Core.Maybe Core.Bool),
    -- | Creates the new snapshot in the snapshot chain labeled with the specified name. The chain name must be 1-63 characters long and comply with RFC1035. This is an uncommon option only for advanced service owners who needs to create separate snapshot chains, for example, for chargeback tracking. When you describe your snapshot resource, this field is visible only if it has a non-empty value.
    chainName :: (Core.Maybe Core.Text),
    -- | [Output Only] Size in bytes of the snapshot at creation time.
    creationSizeBytes :: (Core.Maybe Core.Int64),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] Size of the source disk, specified in GB.
    diskSizeGb :: (Core.Maybe Core.Int64),
    -- | [Output Only] Number of bytes downloaded to restore a snapshot to a disk.
    downloadBytes :: (Core.Maybe Core.Int64),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#snapshot for Snapshot resources.
    kind :: Core.Text,
    -- | A fingerprint for the labels being applied to this snapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a snapshot.
    labelFingerprint :: (Core.Maybe Core.Base64),
    -- | Labels to apply to this snapshot. These can be later modified by the setLabels method. Label values may be empty.
    labels :: (Core.Maybe Snapshot_Labels),
    -- | [Output Only] Integer license codes indicating which licenses are attached to this snapshot.
    licenseCodes :: (Core.Maybe [Core.Int64]),
    -- | [Output Only] A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses attached (such as a Windows image).
    licenses :: (Core.Maybe [Core.Text]),
    -- | An opaque location hint used to place the snapshot close to other resources. This field is for use by internal tools that use the public API.
    locationHint :: (Core.Maybe Core.Text),
    -- | Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] Reserved for future use.
    satisfiesPzs :: (Core.Maybe Core.Bool),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | Encrypts the snapshot using a customer-supplied encryption key. After you encrypt a snapshot using a customer-supplied key, you must provide the same key if you use the snapshot later. For example, you must provide the encryption key when you create a disk from the encrypted snapshot in a future request. Customer-supplied encryption keys do not protect access to metadata of the snapshot. If you do not provide an encryption key when creating the snapshot, then the snapshot will be encrypted using an automatically generated key and you do not need to provide a key to use the snapshot later.
    snapshotEncryptionKey :: (Core.Maybe CustomerEncryptionKey),
    -- | Indicates the type of the snapshot.
    snapshotType :: (Core.Maybe Snapshot_SnapshotType),
    -- | The source disk used to create this snapshot.
    sourceDisk :: (Core.Maybe Core.Text),
    -- | The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
    sourceDiskEncryptionKey :: (Core.Maybe CustomerEncryptionKey),
    -- | [Output Only] The ID value of the disk used to create this snapshot. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given disk name.
    sourceDiskId :: (Core.Maybe Core.Text),
    -- | [Output Only] URL of the resource policy which created this scheduled snapshot.
    sourceSnapshotSchedulePolicy :: (Core.Maybe Core.Text),
    -- | [Output Only] ID of the resource policy which created this scheduled snapshot.
    sourceSnapshotSchedulePolicyId :: (Core.Maybe Core.Text),
    -- | [Output Only] The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING.
    status :: (Core.Maybe Snapshot_Status),
    -- | [Output Only] A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot creation\/deletion.
    storageBytes :: (Core.Maybe Core.Int64),
    -- | [Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP/TO/DATE, meaning the size of the snapshot is up-to-date.
    storageBytesStatus :: (Core.Maybe Snapshot_StorageBytesStatus),
    -- | Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
    storageLocations :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Snapshot' with the minimum fields required to make a request.
newSnapshot ::
  Snapshot
newSnapshot =
  Snapshot
    { architecture = Core.Nothing,
      autoCreated = Core.Nothing,
      chainName = Core.Nothing,
      creationSizeBytes = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      diskSizeGb = Core.Nothing,
      downloadBytes = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#snapshot",
      labelFingerprint = Core.Nothing,
      labels = Core.Nothing,
      licenseCodes = Core.Nothing,
      licenses = Core.Nothing,
      locationHint = Core.Nothing,
      name = Core.Nothing,
      satisfiesPzs = Core.Nothing,
      selfLink = Core.Nothing,
      snapshotEncryptionKey = Core.Nothing,
      snapshotType = Core.Nothing,
      sourceDisk = Core.Nothing,
      sourceDiskEncryptionKey = Core.Nothing,
      sourceDiskId = Core.Nothing,
      sourceSnapshotSchedulePolicy = Core.Nothing,
      sourceSnapshotSchedulePolicyId = Core.Nothing,
      status = Core.Nothing,
      storageBytes = Core.Nothing,
      storageBytesStatus = Core.Nothing,
      storageLocations = Core.Nothing
    }

instance Core.FromJSON Snapshot where
  parseJSON =
    Core.withObject
      "Snapshot"
      ( \o ->
          Snapshot
            Core.<$> (o Core..:? "architecture")
            Core.<*> (o Core..:? "autoCreated")
            Core.<*> (o Core..:? "chainName")
            Core.<*> ( o Core..:? "creationSizeBytes"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> ( o Core..:? "diskSizeGb"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> ( o Core..:? "downloadBytes"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#snapshot")
            Core.<*> (o Core..:? "labelFingerprint")
            Core.<*> (o Core..:? "labels")
            Core.<*> ( o Core..:? "licenseCodes"
                         Core.<&> Core.fmap (Core.fmap Core.fromAsText)
                     )
            Core.<*> (o Core..:? "licenses")
            Core.<*> (o Core..:? "locationHint")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "satisfiesPzs")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "snapshotEncryptionKey")
            Core.<*> (o Core..:? "snapshotType")
            Core.<*> (o Core..:? "sourceDisk")
            Core.<*> (o Core..:? "sourceDiskEncryptionKey")
            Core.<*> (o Core..:? "sourceDiskId")
            Core.<*> (o Core..:? "sourceSnapshotSchedulePolicy")
            Core.<*> (o Core..:? "sourceSnapshotSchedulePolicyId")
            Core.<*> (o Core..:? "status")
            Core.<*> ( o Core..:? "storageBytes"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> (o Core..:? "storageBytesStatus")
            Core.<*> (o Core..:? "storageLocations")
      )

instance Core.ToJSON Snapshot where
  toJSON Snapshot {..} =
    Core.object
      ( Core.catMaybes
          [ ("architecture" Core..=) Core.<$> architecture,
            ("autoCreated" Core..=) Core.<$> autoCreated,
            ("chainName" Core..=) Core.<$> chainName,
            ("creationSizeBytes" Core..=) Core.. Core.AsText
              Core.<$> creationSizeBytes,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("diskSizeGb" Core..=) Core.. Core.AsText
              Core.<$> diskSizeGb,
            ("downloadBytes" Core..=) Core.. Core.AsText
              Core.<$> downloadBytes,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("labelFingerprint" Core..=)
              Core.<$> labelFingerprint,
            ("labels" Core..=) Core.<$> labels,
            ("licenseCodes" Core..=) Core.. Core.fmap Core.AsText
              Core.<$> licenseCodes,
            ("licenses" Core..=) Core.<$> licenses,
            ("locationHint" Core..=) Core.<$> locationHint,
            ("name" Core..=) Core.<$> name,
            ("satisfiesPzs" Core..=) Core.<$> satisfiesPzs,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("snapshotEncryptionKey" Core..=)
              Core.<$> snapshotEncryptionKey,
            ("snapshotType" Core..=) Core.<$> snapshotType,
            ("sourceDisk" Core..=) Core.<$> sourceDisk,
            ("sourceDiskEncryptionKey" Core..=)
              Core.<$> sourceDiskEncryptionKey,
            ("sourceDiskId" Core..=) Core.<$> sourceDiskId,
            ("sourceSnapshotSchedulePolicy" Core..=)
              Core.<$> sourceSnapshotSchedulePolicy,
            ("sourceSnapshotSchedulePolicyId" Core..=)
              Core.<$> sourceSnapshotSchedulePolicyId,
            ("status" Core..=) Core.<$> status,
            ("storageBytes" Core..=) Core.. Core.AsText
              Core.<$> storageBytes,
            ("storageBytesStatus" Core..=)
              Core.<$> storageBytesStatus,
            ("storageLocations" Core..=)
              Core.<$> storageLocations
          ]
      )

-- | Labels to apply to this snapshot. These can be later modified by the setLabels method. Label values may be empty.
--
-- /See:/ 'newSnapshot_Labels' smart constructor.
newtype Snapshot_Labels = Snapshot_Labels
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Snapshot_Labels' with the minimum fields required to make a request.
newSnapshot_Labels ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  Snapshot_Labels
newSnapshot_Labels additional = Snapshot_Labels {additional = additional}

instance Core.FromJSON Snapshot_Labels where
  parseJSON =
    Core.withObject
      "Snapshot_Labels"
      ( \o ->
          Snapshot_Labels Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON Snapshot_Labels where
  toJSON Snapshot_Labels {..} = Core.toJSON additional

-- | Contains a list of Snapshot resources.
--
-- /See:/ 'newSnapshotList' smart constructor.
data SnapshotList = SnapshotList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of Snapshot resources.
    items :: (Core.Maybe [Snapshot]),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe SnapshotList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SnapshotList' with the minimum fields required to make a request.
newSnapshotList ::
  SnapshotList
newSnapshotList =
  SnapshotList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#snapshotList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON SnapshotList where
  parseJSON =
    Core.withObject
      "SnapshotList"
      ( \o ->
          SnapshotList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#snapshotList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON SnapshotList where
  toJSON SnapshotList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newSnapshotList_Warning' smart constructor.
data SnapshotList_Warning = SnapshotList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe SnapshotList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [SnapshotList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SnapshotList_Warning' with the minimum fields required to make a request.
newSnapshotList_Warning ::
  SnapshotList_Warning
newSnapshotList_Warning =
  SnapshotList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON SnapshotList_Warning where
  parseJSON =
    Core.withObject
      "SnapshotList_Warning"
      ( \o ->
          SnapshotList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON SnapshotList_Warning where
  toJSON SnapshotList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newSnapshotList_Warning_DataItem' smart constructor.
data SnapshotList_Warning_DataItem = SnapshotList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SnapshotList_Warning_DataItem' with the minimum fields required to make a request.
newSnapshotList_Warning_DataItem ::
  SnapshotList_Warning_DataItem
newSnapshotList_Warning_DataItem =
  SnapshotList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON SnapshotList_Warning_DataItem where
  parseJSON =
    Core.withObject
      "SnapshotList_Warning_DataItem"
      ( \o ->
          SnapshotList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON SnapshotList_Warning_DataItem where
  toJSON SnapshotList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newSourceDiskEncryptionKey' smart constructor.
data SourceDiskEncryptionKey = SourceDiskEncryptionKey
  { -- | The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
    diskEncryptionKey :: (Core.Maybe CustomerEncryptionKey),
    -- | URL of the disk attached to the source instance. This can be a full or valid partial URL. For example, the following are valid values: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project\/zones\/zone \/disks\/disk - projects\/project\/zones\/zone\/disks\/disk - zones\/zone\/disks\/disk
    sourceDisk :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SourceDiskEncryptionKey' with the minimum fields required to make a request.
newSourceDiskEncryptionKey ::
  SourceDiskEncryptionKey
newSourceDiskEncryptionKey =
  SourceDiskEncryptionKey
    { diskEncryptionKey = Core.Nothing,
      sourceDisk = Core.Nothing
    }

instance Core.FromJSON SourceDiskEncryptionKey where
  parseJSON =
    Core.withObject
      "SourceDiskEncryptionKey"
      ( \o ->
          SourceDiskEncryptionKey
            Core.<$> (o Core..:? "diskEncryptionKey")
            Core.<*> (o Core..:? "sourceDisk")
      )

instance Core.ToJSON SourceDiskEncryptionKey where
  toJSON SourceDiskEncryptionKey {..} =
    Core.object
      ( Core.catMaybes
          [ ("diskEncryptionKey" Core..=)
              Core.<$> diskEncryptionKey,
            ("sourceDisk" Core..=) Core.<$> sourceDisk
          ]
      )

-- | A specification of the parameters to use when creating the instance template from a source instance.
--
-- /See:/ 'newSourceInstanceParams' smart constructor.
newtype SourceInstanceParams = SourceInstanceParams
  { -- | Attached disks configuration. If not provided, defaults are applied: For boot disk and any other R\/W disks, the source images for each disk will be used. For read-only disks, they will be attached in read-only mode. Local SSD disks will be created as blank volumes.
    diskConfigs :: (Core.Maybe [DiskInstantiationConfig])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SourceInstanceParams' with the minimum fields required to make a request.
newSourceInstanceParams ::
  SourceInstanceParams
newSourceInstanceParams = SourceInstanceParams {diskConfigs = Core.Nothing}

instance Core.FromJSON SourceInstanceParams where
  parseJSON =
    Core.withObject
      "SourceInstanceParams"
      ( \o ->
          SourceInstanceParams
            Core.<$> (o Core..:? "diskConfigs")
      )

instance Core.ToJSON SourceInstanceParams where
  toJSON SourceInstanceParams {..} =
    Core.object
      ( Core.catMaybes
          [("diskConfigs" Core..=) Core.<$> diskConfigs]
      )

-- | DEPRECATED: Please use compute#instanceProperties instead. New properties will not be added to this field.
--
-- /See:/ 'newSourceInstanceProperties' smart constructor.
data SourceInstanceProperties = SourceInstanceProperties
  { -- | Enables instances created based on this machine image to send packets with source IP addresses other than their own and receive packets with destination IP addresses other than their own. If these instances will be used as an IP gateway or it will be set as the next-hop in a Route resource, specify true. If unsure, leave this set to false. See the Enable IP forwarding documentation for more information.
    canIpForward :: (Core.Maybe Core.Bool),
    -- | Whether the instance created from this machine image should be protected against deletion.
    deletionProtection :: (Core.Maybe Core.Bool),
    -- | An optional text description for the instances that are created from this machine image.
    description :: (Core.Maybe Core.Text),
    -- | An array of disks that are associated with the instances that are created from this machine image.
    disks :: (Core.Maybe [SavedAttachedDisk]),
    -- | A list of guest accelerator cards\' type and count to use for instances created from this machine image.
    guestAccelerators :: (Core.Maybe [AcceleratorConfig]),
    -- | KeyRevocationActionType of the instance. Supported options are \"STOP\" and \"NONE\". The default value is \"NONE\" if it is not specified.
    keyRevocationActionType :: (Core.Maybe SourceInstanceProperties_KeyRevocationActionType),
    -- | Labels to apply to instances that are created from this machine image.
    labels :: (Core.Maybe SourceInstanceProperties_Labels),
    -- | The machine type to use for instances that are created from this machine image.
    machineType :: (Core.Maybe Core.Text),
    -- | The metadata key\/value pairs to assign to instances that are created from this machine image. These pairs can consist of custom metadata or predefined keys. See Project and instance metadata for more information.
    metadata :: (Core.Maybe Metadata),
    -- | Minimum cpu\/platform to be used by instances created from this machine image. The instance may be scheduled on the specified or newer cpu\/platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: \"Intel Haswell\" or minCpuPlatform: \"Intel Sandy Bridge\". For more information, read Specifying a Minimum CPU Platform.
    minCpuPlatform :: (Core.Maybe Core.Text),
    -- | An array of network access configurations for this interface.
    networkInterfaces :: (Core.Maybe [NetworkInterface]),
    -- | Specifies the scheduling options for the instances that are created from this machine image.
    scheduling :: (Core.Maybe Scheduling),
    -- | A list of service accounts with specified scopes. Access tokens for these service accounts are available to the instances that are created from this machine image. Use metadata queries to obtain the access tokens for these instances.
    serviceAccounts :: (Core.Maybe [ServiceAccount]),
    -- | A list of tags to apply to the instances that are created from this machine image. The tags identify valid sources or targets for network firewalls. The setTags method can modify this list of tags. Each tag within the list must comply with RFC1035.
    tags :: (Core.Maybe Tags)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SourceInstanceProperties' with the minimum fields required to make a request.
newSourceInstanceProperties ::
  SourceInstanceProperties
newSourceInstanceProperties =
  SourceInstanceProperties
    { canIpForward = Core.Nothing,
      deletionProtection = Core.Nothing,
      description = Core.Nothing,
      disks = Core.Nothing,
      guestAccelerators = Core.Nothing,
      keyRevocationActionType = Core.Nothing,
      labels = Core.Nothing,
      machineType = Core.Nothing,
      metadata = Core.Nothing,
      minCpuPlatform = Core.Nothing,
      networkInterfaces = Core.Nothing,
      scheduling = Core.Nothing,
      serviceAccounts = Core.Nothing,
      tags = Core.Nothing
    }

instance Core.FromJSON SourceInstanceProperties where
  parseJSON =
    Core.withObject
      "SourceInstanceProperties"
      ( \o ->
          SourceInstanceProperties
            Core.<$> (o Core..:? "canIpForward")
            Core.<*> (o Core..:? "deletionProtection")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "disks")
            Core.<*> (o Core..:? "guestAccelerators")
            Core.<*> (o Core..:? "keyRevocationActionType")
            Core.<*> (o Core..:? "labels")
            Core.<*> (o Core..:? "machineType")
            Core.<*> (o Core..:? "metadata")
            Core.<*> (o Core..:? "minCpuPlatform")
            Core.<*> (o Core..:? "networkInterfaces")
            Core.<*> (o Core..:? "scheduling")
            Core.<*> (o Core..:? "serviceAccounts")
            Core.<*> (o Core..:? "tags")
      )

instance Core.ToJSON SourceInstanceProperties where
  toJSON SourceInstanceProperties {..} =
    Core.object
      ( Core.catMaybes
          [ ("canIpForward" Core..=) Core.<$> canIpForward,
            ("deletionProtection" Core..=)
              Core.<$> deletionProtection,
            ("description" Core..=) Core.<$> description,
            ("disks" Core..=) Core.<$> disks,
            ("guestAccelerators" Core..=)
              Core.<$> guestAccelerators,
            ("keyRevocationActionType" Core..=)
              Core.<$> keyRevocationActionType,
            ("labels" Core..=) Core.<$> labels,
            ("machineType" Core..=) Core.<$> machineType,
            ("metadata" Core..=) Core.<$> metadata,
            ("minCpuPlatform" Core..=) Core.<$> minCpuPlatform,
            ("networkInterfaces" Core..=)
              Core.<$> networkInterfaces,
            ("scheduling" Core..=) Core.<$> scheduling,
            ("serviceAccounts" Core..=) Core.<$> serviceAccounts,
            ("tags" Core..=) Core.<$> tags
          ]
      )

-- | Labels to apply to instances that are created from this machine image.
--
-- /See:/ 'newSourceInstanceProperties_Labels' smart constructor.
newtype SourceInstanceProperties_Labels = SourceInstanceProperties_Labels
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SourceInstanceProperties_Labels' with the minimum fields required to make a request.
newSourceInstanceProperties_Labels ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  SourceInstanceProperties_Labels
newSourceInstanceProperties_Labels additional =
  SourceInstanceProperties_Labels {additional = additional}

instance
  Core.FromJSON
    SourceInstanceProperties_Labels
  where
  parseJSON =
    Core.withObject
      "SourceInstanceProperties_Labels"
      ( \o ->
          SourceInstanceProperties_Labels
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON SourceInstanceProperties_Labels where
  toJSON SourceInstanceProperties_Labels {..} =
    Core.toJSON additional

-- | Represents an SSL Certificate resource. Google Compute Engine has two SSL Certificate resources: * </compute/docs/reference/rest/v1/sslCertificates Global> * </compute/docs/reference/rest/v1/regionSslCertificates Regional> The sslCertificates are used by: - external HTTPS load balancers - SSL proxy load balancers The regionSslCertificates are used by internal HTTPS load balancers. Optionally, certificate file contents that you upload can contain a set of up to five PEM-encoded certificates. The API call creates an object (sslCertificate) that holds this data. You can use SSL keys and certificates to secure connections to a load balancer. For more information, read Creating and using SSL certificates, SSL certificates quotas and limits, and Troubleshooting SSL certificates.
--
-- /See:/ 'newSslCertificate' smart constructor.
data SslCertificate = SslCertificate
  { -- | A value read into memory from a certificate file. The certificate file must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
    certificate :: (Core.Maybe Core.Text),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] Expire time of the certificate. RFC3339
    expireTime :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#sslCertificate for SSL certificates.
    kind :: Core.Text,
    -- | Configuration and status of a managed SSL certificate.
    managed :: (Core.Maybe SslCertificateManagedSslCertificate),
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | A value read into memory from a write-only private key file. The private key file must be in PEM format. For security, only insert requests include this field.
    privateKey :: (Core.Maybe Core.Text),
    -- | [Output Only] URL of the region where the regional SSL Certificate resides. This field is not applicable to global SSL Certificate.
    region :: (Core.Maybe Core.Text),
    -- | [Output only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | Configuration and status of a self-managed SSL certificate.
    selfManaged :: (Core.Maybe SslCertificateSelfManagedSslCertificate),
    -- | [Output Only] Domains associated with the certificate via Subject Alternative Name.
    subjectAlternativeNames :: (Core.Maybe [Core.Text]),
    -- | (Optional) Specifies the type of SSL certificate, either \"SELF/MANAGED\" or \"MANAGED\". If not specified, the certificate is self-managed and the fields certificate and private/key are used.
    type' :: (Core.Maybe SslCertificate_Type)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslCertificate' with the minimum fields required to make a request.
newSslCertificate ::
  SslCertificate
newSslCertificate =
  SslCertificate
    { certificate = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      expireTime = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#sslCertificate",
      managed = Core.Nothing,
      name = Core.Nothing,
      privateKey = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      selfManaged = Core.Nothing,
      subjectAlternativeNames = Core.Nothing,
      type' = Core.Nothing
    }

instance Core.FromJSON SslCertificate where
  parseJSON =
    Core.withObject
      "SslCertificate"
      ( \o ->
          SslCertificate
            Core.<$> (o Core..:? "certificate")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "expireTime")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#sslCertificate")
            Core.<*> (o Core..:? "managed")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "privateKey")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "selfManaged")
            Core.<*> (o Core..:? "subjectAlternativeNames")
            Core.<*> (o Core..:? "type")
      )

instance Core.ToJSON SslCertificate where
  toJSON SslCertificate {..} =
    Core.object
      ( Core.catMaybes
          [ ("certificate" Core..=) Core.<$> certificate,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("expireTime" Core..=) Core.<$> expireTime,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("managed" Core..=) Core.<$> managed,
            ("name" Core..=) Core.<$> name,
            ("privateKey" Core..=) Core.<$> privateKey,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("selfManaged" Core..=) Core.<$> selfManaged,
            ("subjectAlternativeNames" Core..=)
              Core.<$> subjectAlternativeNames,
            ("type" Core..=) Core.<$> type'
          ]
      )

--
-- /See:/ 'newSslCertificateAggregatedList' smart constructor.
data SslCertificateAggregatedList = SslCertificateAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of SslCertificatesScopedList resources.
    items :: (Core.Maybe SslCertificateAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#sslCertificateAggregatedList for lists of SSL Certificates.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe SslCertificateAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslCertificateAggregatedList' with the minimum fields required to make a request.
newSslCertificateAggregatedList ::
  SslCertificateAggregatedList
newSslCertificateAggregatedList =
  SslCertificateAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#sslCertificateAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON SslCertificateAggregatedList where
  parseJSON =
    Core.withObject
      "SslCertificateAggregatedList"
      ( \o ->
          SslCertificateAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#sslCertificateAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON SslCertificateAggregatedList where
  toJSON SslCertificateAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of SslCertificatesScopedList resources.
--
-- /See:/ 'newSslCertificateAggregatedList_Items' smart constructor.
newtype SslCertificateAggregatedList_Items = SslCertificateAggregatedList_Items
  { -- | Name of the scope containing this set of SslCertificates.
    additional :: (Core.HashMap Core.Text SslCertificatesScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslCertificateAggregatedList_Items' with the minimum fields required to make a request.
newSslCertificateAggregatedList_Items ::
  -- |  Name of the scope containing this set of SslCertificates. See 'additional'.
  Core.HashMap Core.Text SslCertificatesScopedList ->
  SslCertificateAggregatedList_Items
newSslCertificateAggregatedList_Items additional =
  SslCertificateAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    SslCertificateAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "SslCertificateAggregatedList_Items"
      ( \o ->
          SslCertificateAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    SslCertificateAggregatedList_Items
  where
  toJSON SslCertificateAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newSslCertificateAggregatedList_Warning' smart constructor.
data SslCertificateAggregatedList_Warning = SslCertificateAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe SslCertificateAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [SslCertificateAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslCertificateAggregatedList_Warning' with the minimum fields required to make a request.
newSslCertificateAggregatedList_Warning ::
  SslCertificateAggregatedList_Warning
newSslCertificateAggregatedList_Warning =
  SslCertificateAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    SslCertificateAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "SslCertificateAggregatedList_Warning"
      ( \o ->
          SslCertificateAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    SslCertificateAggregatedList_Warning
  where
  toJSON SslCertificateAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newSslCertificateAggregatedList_Warning_DataItem' smart constructor.
data SslCertificateAggregatedList_Warning_DataItem = SslCertificateAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslCertificateAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newSslCertificateAggregatedList_Warning_DataItem ::
  SslCertificateAggregatedList_Warning_DataItem
newSslCertificateAggregatedList_Warning_DataItem =
  SslCertificateAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    SslCertificateAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "SslCertificateAggregatedList_Warning_DataItem"
      ( \o ->
          SslCertificateAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    SslCertificateAggregatedList_Warning_DataItem
  where
  toJSON
    SslCertificateAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | Contains a list of SslCertificate resources.
--
-- /See:/ 'newSslCertificateList' smart constructor.
data SslCertificateList = SslCertificateList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of SslCertificate resources.
    items :: (Core.Maybe [SslCertificate]),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe SslCertificateList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslCertificateList' with the minimum fields required to make a request.
newSslCertificateList ::
  SslCertificateList
newSslCertificateList =
  SslCertificateList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#sslCertificateList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON SslCertificateList where
  parseJSON =
    Core.withObject
      "SslCertificateList"
      ( \o ->
          SslCertificateList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#sslCertificateList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON SslCertificateList where
  toJSON SslCertificateList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newSslCertificateList_Warning' smart constructor.
data SslCertificateList_Warning = SslCertificateList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe SslCertificateList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [SslCertificateList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslCertificateList_Warning' with the minimum fields required to make a request.
newSslCertificateList_Warning ::
  SslCertificateList_Warning
newSslCertificateList_Warning =
  SslCertificateList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON SslCertificateList_Warning where
  parseJSON =
    Core.withObject
      "SslCertificateList_Warning"
      ( \o ->
          SslCertificateList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON SslCertificateList_Warning where
  toJSON SslCertificateList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newSslCertificateList_Warning_DataItem' smart constructor.
data SslCertificateList_Warning_DataItem = SslCertificateList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslCertificateList_Warning_DataItem' with the minimum fields required to make a request.
newSslCertificateList_Warning_DataItem ::
  SslCertificateList_Warning_DataItem
newSslCertificateList_Warning_DataItem =
  SslCertificateList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    SslCertificateList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "SslCertificateList_Warning_DataItem"
      ( \o ->
          SslCertificateList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    SslCertificateList_Warning_DataItem
  where
  toJSON SslCertificateList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Configuration and status of a managed SSL certificate.
--
-- /See:/ 'newSslCertificateManagedSslCertificate' smart constructor.
data SslCertificateManagedSslCertificate = SslCertificateManagedSslCertificate
  { -- | [Output only] Detailed statuses of the domains specified for managed certificate resource.
    domainStatus :: (Core.Maybe SslCertificateManagedSslCertificate_DomainStatus),
    -- | The domains for which a managed SSL certificate will be generated. Each Google-managed SSL certificate supports up to the </load-balancing/docs/quotas#ssl_certificates maximum number of domains per Google-managed SSL certificate>.
    domains :: (Core.Maybe [Core.Text]),
    -- | [Output only] Status of the managed certificate resource.
    status :: (Core.Maybe SslCertificateManagedSslCertificate_Status)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslCertificateManagedSslCertificate' with the minimum fields required to make a request.
newSslCertificateManagedSslCertificate ::
  SslCertificateManagedSslCertificate
newSslCertificateManagedSslCertificate =
  SslCertificateManagedSslCertificate
    { domainStatus = Core.Nothing,
      domains = Core.Nothing,
      status = Core.Nothing
    }

instance
  Core.FromJSON
    SslCertificateManagedSslCertificate
  where
  parseJSON =
    Core.withObject
      "SslCertificateManagedSslCertificate"
      ( \o ->
          SslCertificateManagedSslCertificate
            Core.<$> (o Core..:? "domainStatus")
            Core.<*> (o Core..:? "domains")
            Core.<*> (o Core..:? "status")
      )

instance
  Core.ToJSON
    SslCertificateManagedSslCertificate
  where
  toJSON SslCertificateManagedSslCertificate {..} =
    Core.object
      ( Core.catMaybes
          [ ("domainStatus" Core..=) Core.<$> domainStatus,
            ("domains" Core..=) Core.<$> domains,
            ("status" Core..=) Core.<$> status
          ]
      )

-- | [Output only] Detailed statuses of the domains specified for managed certificate resource.
--
-- /See:/ 'newSslCertificateManagedSslCertificate_DomainStatus' smart constructor.
newtype SslCertificateManagedSslCertificate_DomainStatus = SslCertificateManagedSslCertificate_DomainStatus
  { -- |
    additional ::
      ( Core.HashMap
          Core.Text
          SslCertificateManagedSslCertificate_DomainStatusAdditional
      )
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslCertificateManagedSslCertificate_DomainStatus' with the minimum fields required to make a request.
newSslCertificateManagedSslCertificate_DomainStatus ::
  -- |  See 'additional'.
  Core.HashMap Core.Text SslCertificateManagedSslCertificate_DomainStatusAdditional ->
  SslCertificateManagedSslCertificate_DomainStatus
newSslCertificateManagedSslCertificate_DomainStatus additional =
  SslCertificateManagedSslCertificate_DomainStatus {additional = additional}

instance
  Core.FromJSON
    SslCertificateManagedSslCertificate_DomainStatus
  where
  parseJSON =
    Core.withObject
      "SslCertificateManagedSslCertificate_DomainStatus"
      ( \o ->
          SslCertificateManagedSslCertificate_DomainStatus
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    SslCertificateManagedSslCertificate_DomainStatus
  where
  toJSON
    SslCertificateManagedSslCertificate_DomainStatus {..} =
      Core.toJSON additional

-- | Configuration and status of a self-managed SSL certificate.
--
-- /See:/ 'newSslCertificateSelfManagedSslCertificate' smart constructor.
data SslCertificateSelfManagedSslCertificate = SslCertificateSelfManagedSslCertificate
  { -- | A local certificate file. The certificate must be in PEM format. The certificate chain must be no greater than 5 certs long. The chain must include at least one intermediate cert.
    certificate :: (Core.Maybe Core.Text),
    -- | A write-only private key in PEM format. Only insert requests will include this field.
    privateKey :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslCertificateSelfManagedSslCertificate' with the minimum fields required to make a request.
newSslCertificateSelfManagedSslCertificate ::
  SslCertificateSelfManagedSslCertificate
newSslCertificateSelfManagedSslCertificate =
  SslCertificateSelfManagedSslCertificate
    { certificate = Core.Nothing,
      privateKey = Core.Nothing
    }

instance
  Core.FromJSON
    SslCertificateSelfManagedSslCertificate
  where
  parseJSON =
    Core.withObject
      "SslCertificateSelfManagedSslCertificate"
      ( \o ->
          SslCertificateSelfManagedSslCertificate
            Core.<$> (o Core..:? "certificate")
            Core.<*> (o Core..:? "privateKey")
      )

instance
  Core.ToJSON
    SslCertificateSelfManagedSslCertificate
  where
  toJSON SslCertificateSelfManagedSslCertificate {..} =
    Core.object
      ( Core.catMaybes
          [ ("certificate" Core..=) Core.<$> certificate,
            ("privateKey" Core..=) Core.<$> privateKey
          ]
      )

--
-- /See:/ 'newSslCertificatesScopedList' smart constructor.
data SslCertificatesScopedList = SslCertificatesScopedList
  { -- | List of SslCertificates contained in this scope.
    sslCertificates :: (Core.Maybe [SslCertificate]),
    -- | Informational warning which replaces the list of backend services when the list is empty.
    warning :: (Core.Maybe SslCertificatesScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslCertificatesScopedList' with the minimum fields required to make a request.
newSslCertificatesScopedList ::
  SslCertificatesScopedList
newSslCertificatesScopedList =
  SslCertificatesScopedList
    { sslCertificates = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON SslCertificatesScopedList where
  parseJSON =
    Core.withObject
      "SslCertificatesScopedList"
      ( \o ->
          SslCertificatesScopedList
            Core.<$> (o Core..:? "sslCertificates")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON SslCertificatesScopedList where
  toJSON SslCertificatesScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("sslCertificates" Core..=)
              Core.<$> sslCertificates,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of backend services when the list is empty.
--
-- /See:/ 'newSslCertificatesScopedList_Warning' smart constructor.
data SslCertificatesScopedList_Warning = SslCertificatesScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe SslCertificatesScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [SslCertificatesScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslCertificatesScopedList_Warning' with the minimum fields required to make a request.
newSslCertificatesScopedList_Warning ::
  SslCertificatesScopedList_Warning
newSslCertificatesScopedList_Warning =
  SslCertificatesScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    SslCertificatesScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "SslCertificatesScopedList_Warning"
      ( \o ->
          SslCertificatesScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    SslCertificatesScopedList_Warning
  where
  toJSON SslCertificatesScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newSslCertificatesScopedList_Warning_DataItem' smart constructor.
data SslCertificatesScopedList_Warning_DataItem = SslCertificatesScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslCertificatesScopedList_Warning_DataItem' with the minimum fields required to make a request.
newSslCertificatesScopedList_Warning_DataItem ::
  SslCertificatesScopedList_Warning_DataItem
newSslCertificatesScopedList_Warning_DataItem =
  SslCertificatesScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    SslCertificatesScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "SslCertificatesScopedList_Warning_DataItem"
      ( \o ->
          SslCertificatesScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    SslCertificatesScopedList_Warning_DataItem
  where
  toJSON SslCertificatesScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newSslPoliciesAggregatedList' smart constructor.
data SslPoliciesAggregatedList = SslPoliciesAggregatedList
  { -- |
    etag :: (Core.Maybe Core.Text),
    -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of SslPoliciesScopedList resources.
    items :: (Core.Maybe SslPoliciesAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#sslPolicyAggregatedList for lists of SSL Policies.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe SslPoliciesAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslPoliciesAggregatedList' with the minimum fields required to make a request.
newSslPoliciesAggregatedList ::
  SslPoliciesAggregatedList
newSslPoliciesAggregatedList =
  SslPoliciesAggregatedList
    { etag = Core.Nothing,
      id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#sslPoliciesAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON SslPoliciesAggregatedList where
  parseJSON =
    Core.withObject
      "SslPoliciesAggregatedList"
      ( \o ->
          SslPoliciesAggregatedList
            Core.<$> (o Core..:? "etag")
            Core.<*> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#sslPoliciesAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON SslPoliciesAggregatedList where
  toJSON SslPoliciesAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("etag" Core..=) Core.<$> etag,
            ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of SslPoliciesScopedList resources.
--
-- /See:/ 'newSslPoliciesAggregatedList_Items' smart constructor.
newtype SslPoliciesAggregatedList_Items = SslPoliciesAggregatedList_Items
  { -- | Name of the scope containing this set of SSL policies.
    additional :: (Core.HashMap Core.Text SslPoliciesScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslPoliciesAggregatedList_Items' with the minimum fields required to make a request.
newSslPoliciesAggregatedList_Items ::
  -- |  Name of the scope containing this set of SSL policies. See 'additional'.
  Core.HashMap Core.Text SslPoliciesScopedList ->
  SslPoliciesAggregatedList_Items
newSslPoliciesAggregatedList_Items additional =
  SslPoliciesAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    SslPoliciesAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "SslPoliciesAggregatedList_Items"
      ( \o ->
          SslPoliciesAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON SslPoliciesAggregatedList_Items where
  toJSON SslPoliciesAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newSslPoliciesAggregatedList_Warning' smart constructor.
data SslPoliciesAggregatedList_Warning = SslPoliciesAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe SslPoliciesAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [SslPoliciesAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslPoliciesAggregatedList_Warning' with the minimum fields required to make a request.
newSslPoliciesAggregatedList_Warning ::
  SslPoliciesAggregatedList_Warning
newSslPoliciesAggregatedList_Warning =
  SslPoliciesAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    SslPoliciesAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "SslPoliciesAggregatedList_Warning"
      ( \o ->
          SslPoliciesAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    SslPoliciesAggregatedList_Warning
  where
  toJSON SslPoliciesAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newSslPoliciesAggregatedList_Warning_DataItem' smart constructor.
data SslPoliciesAggregatedList_Warning_DataItem = SslPoliciesAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslPoliciesAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newSslPoliciesAggregatedList_Warning_DataItem ::
  SslPoliciesAggregatedList_Warning_DataItem
newSslPoliciesAggregatedList_Warning_DataItem =
  SslPoliciesAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    SslPoliciesAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "SslPoliciesAggregatedList_Warning_DataItem"
      ( \o ->
          SslPoliciesAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    SslPoliciesAggregatedList_Warning_DataItem
  where
  toJSON SslPoliciesAggregatedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newSslPoliciesList' smart constructor.
data SslPoliciesList = SslPoliciesList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of SslPolicy resources.
    items :: (Core.Maybe [SslPolicy]),
    -- | [Output Only] Type of the resource. Always compute#sslPoliciesList for lists of sslPolicies.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe SslPoliciesList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslPoliciesList' with the minimum fields required to make a request.
newSslPoliciesList ::
  SslPoliciesList
newSslPoliciesList =
  SslPoliciesList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#sslPoliciesList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON SslPoliciesList where
  parseJSON =
    Core.withObject
      "SslPoliciesList"
      ( \o ->
          SslPoliciesList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#sslPoliciesList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON SslPoliciesList where
  toJSON SslPoliciesList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newSslPoliciesList_Warning' smart constructor.
data SslPoliciesList_Warning = SslPoliciesList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe SslPoliciesList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [SslPoliciesList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslPoliciesList_Warning' with the minimum fields required to make a request.
newSslPoliciesList_Warning ::
  SslPoliciesList_Warning
newSslPoliciesList_Warning =
  SslPoliciesList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON SslPoliciesList_Warning where
  parseJSON =
    Core.withObject
      "SslPoliciesList_Warning"
      ( \o ->
          SslPoliciesList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON SslPoliciesList_Warning where
  toJSON SslPoliciesList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newSslPoliciesList_Warning_DataItem' smart constructor.
data SslPoliciesList_Warning_DataItem = SslPoliciesList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslPoliciesList_Warning_DataItem' with the minimum fields required to make a request.
newSslPoliciesList_Warning_DataItem ::
  SslPoliciesList_Warning_DataItem
newSslPoliciesList_Warning_DataItem =
  SslPoliciesList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    SslPoliciesList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "SslPoliciesList_Warning_DataItem"
      ( \o ->
          SslPoliciesList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON SslPoliciesList_Warning_DataItem where
  toJSON SslPoliciesList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newSslPoliciesListAvailableFeaturesResponse' smart constructor.
newtype SslPoliciesListAvailableFeaturesResponse = SslPoliciesListAvailableFeaturesResponse
  { -- |
    features :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslPoliciesListAvailableFeaturesResponse' with the minimum fields required to make a request.
newSslPoliciesListAvailableFeaturesResponse ::
  SslPoliciesListAvailableFeaturesResponse
newSslPoliciesListAvailableFeaturesResponse =
  SslPoliciesListAvailableFeaturesResponse {features = Core.Nothing}

instance
  Core.FromJSON
    SslPoliciesListAvailableFeaturesResponse
  where
  parseJSON =
    Core.withObject
      "SslPoliciesListAvailableFeaturesResponse"
      ( \o ->
          SslPoliciesListAvailableFeaturesResponse
            Core.<$> (o Core..:? "features")
      )

instance
  Core.ToJSON
    SslPoliciesListAvailableFeaturesResponse
  where
  toJSON SslPoliciesListAvailableFeaturesResponse {..} =
    Core.object
      ( Core.catMaybes
          [("features" Core..=) Core.<$> features]
      )

--
-- /See:/ 'newSslPoliciesScopedList' smart constructor.
data SslPoliciesScopedList = SslPoliciesScopedList
  { -- | A list of SslPolicies contained in this scope.
    sslPolicies :: (Core.Maybe [SslPolicy]),
    -- | Informational warning which replaces the list of SSL policies when the list is empty.
    warning :: (Core.Maybe SslPoliciesScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslPoliciesScopedList' with the minimum fields required to make a request.
newSslPoliciesScopedList ::
  SslPoliciesScopedList
newSslPoliciesScopedList =
  SslPoliciesScopedList {sslPolicies = Core.Nothing, warning = Core.Nothing}

instance Core.FromJSON SslPoliciesScopedList where
  parseJSON =
    Core.withObject
      "SslPoliciesScopedList"
      ( \o ->
          SslPoliciesScopedList
            Core.<$> (o Core..:? "sslPolicies")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON SslPoliciesScopedList where
  toJSON SslPoliciesScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("sslPolicies" Core..=) Core.<$> sslPolicies,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of SSL policies when the list is empty.
--
-- /See:/ 'newSslPoliciesScopedList_Warning' smart constructor.
data SslPoliciesScopedList_Warning = SslPoliciesScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe SslPoliciesScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [SslPoliciesScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslPoliciesScopedList_Warning' with the minimum fields required to make a request.
newSslPoliciesScopedList_Warning ::
  SslPoliciesScopedList_Warning
newSslPoliciesScopedList_Warning =
  SslPoliciesScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON SslPoliciesScopedList_Warning where
  parseJSON =
    Core.withObject
      "SslPoliciesScopedList_Warning"
      ( \o ->
          SslPoliciesScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON SslPoliciesScopedList_Warning where
  toJSON SslPoliciesScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newSslPoliciesScopedList_Warning_DataItem' smart constructor.
data SslPoliciesScopedList_Warning_DataItem = SslPoliciesScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslPoliciesScopedList_Warning_DataItem' with the minimum fields required to make a request.
newSslPoliciesScopedList_Warning_DataItem ::
  SslPoliciesScopedList_Warning_DataItem
newSslPoliciesScopedList_Warning_DataItem =
  SslPoliciesScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    SslPoliciesScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "SslPoliciesScopedList_Warning_DataItem"
      ( \o ->
          SslPoliciesScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    SslPoliciesScopedList_Warning_DataItem
  where
  toJSON SslPoliciesScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Represents an SSL Policy resource. Use SSL policies to control the SSL features, such as versions and cipher suites, offered by an HTTPS or SSL Proxy load balancer. For more information, read SSL Policy Concepts.
--
-- /See:/ 'newSslPolicy' smart constructor.
data SslPolicy = SslPolicy
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | A list of features enabled when the selected profile is CUSTOM. The method returns the set of features that can be specified in this list. This field must be empty if the profile is not CUSTOM.
    customFeatures :: (Core.Maybe [Core.Text]),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The list of features enabled in the SSL policy.
    enabledFeatures :: (Core.Maybe [Core.Text]),
    -- | Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a SslPolicy. An up-to-date fingerprint must be provided in order to update the SslPolicy, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an SslPolicy.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output only] Type of the resource. Always compute#sslPolicyfor SSL policies.
    kind :: Core.Text,
    -- | The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. This can be one of TLS/1/0, TLS/1/1, TLS/1/2.
    minTlsVersion :: (Core.Maybe SslPolicy_MinTlsVersion),
    -- | Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM, the set of SSL features to enable must be specified in the customFeatures field.
    profile :: (Core.Maybe SslPolicy_Profile),
    -- | [Output Only] URL of the region where the regional SSL policy resides. This field is not applicable to global SSL policies.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] If potential misconfigurations are detected for this SSL policy, this field will be populated with warning messages.
    warnings :: (Core.Maybe [SslPolicy_WarningsItem])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslPolicy' with the minimum fields required to make a request.
newSslPolicy ::
  SslPolicy
newSslPolicy =
  SslPolicy
    { creationTimestamp = Core.Nothing,
      customFeatures = Core.Nothing,
      description = Core.Nothing,
      enabledFeatures = Core.Nothing,
      fingerprint = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#sslPolicy",
      minTlsVersion = Core.Nothing,
      name = Core.Nothing,
      profile = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      warnings = Core.Nothing
    }

instance Core.FromJSON SslPolicy where
  parseJSON =
    Core.withObject
      "SslPolicy"
      ( \o ->
          SslPolicy
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "customFeatures")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "enabledFeatures")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#sslPolicy")
            Core.<*> (o Core..:? "minTlsVersion")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "profile")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warnings")
      )

instance Core.ToJSON SslPolicy where
  toJSON SslPolicy {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("customFeatures" Core..=) Core.<$> customFeatures,
            ("description" Core..=) Core.<$> description,
            ("enabledFeatures" Core..=) Core.<$> enabledFeatures,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("minTlsVersion" Core..=) Core.<$> minTlsVersion,
            ("name" Core..=) Core.<$> name,
            ("profile" Core..=) Core.<$> profile,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warnings" Core..=) Core.<$> warnings
          ]
      )

--
-- /See:/ 'newSslPolicy_WarningsItem' smart constructor.
data SslPolicy_WarningsItem = SslPolicy_WarningsItem
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe SslPolicy_WarningsItem_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [SslPolicy_WarningsItem_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslPolicy_WarningsItem' with the minimum fields required to make a request.
newSslPolicy_WarningsItem ::
  SslPolicy_WarningsItem
newSslPolicy_WarningsItem =
  SslPolicy_WarningsItem
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON SslPolicy_WarningsItem where
  parseJSON =
    Core.withObject
      "SslPolicy_WarningsItem"
      ( \o ->
          SslPolicy_WarningsItem
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON SslPolicy_WarningsItem where
  toJSON SslPolicy_WarningsItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newSslPolicy_WarningsItem_DataItem' smart constructor.
data SslPolicy_WarningsItem_DataItem = SslPolicy_WarningsItem_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslPolicy_WarningsItem_DataItem' with the minimum fields required to make a request.
newSslPolicy_WarningsItem_DataItem ::
  SslPolicy_WarningsItem_DataItem
newSslPolicy_WarningsItem_DataItem =
  SslPolicy_WarningsItem_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    SslPolicy_WarningsItem_DataItem
  where
  parseJSON =
    Core.withObject
      "SslPolicy_WarningsItem_DataItem"
      ( \o ->
          SslPolicy_WarningsItem_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON SslPolicy_WarningsItem_DataItem where
  toJSON SslPolicy_WarningsItem_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newSslPolicyReference' smart constructor.
newtype SslPolicyReference = SslPolicyReference
  { -- | URL of the SSL policy resource. Set this to empty string to clear any existing SSL policy associated with the target proxy resource.
    sslPolicy :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SslPolicyReference' with the minimum fields required to make a request.
newSslPolicyReference ::
  SslPolicyReference
newSslPolicyReference = SslPolicyReference {sslPolicy = Core.Nothing}

instance Core.FromJSON SslPolicyReference where
  parseJSON =
    Core.withObject
      "SslPolicyReference"
      ( \o ->
          SslPolicyReference Core.<$> (o Core..:? "sslPolicy")
      )

instance Core.ToJSON SslPolicyReference where
  toJSON SslPolicyReference {..} =
    Core.object
      ( Core.catMaybes
          [("sslPolicy" Core..=) Core.<$> sslPolicy]
      )

--
-- /See:/ 'newStatefulPolicy' smart constructor.
newtype StatefulPolicy = StatefulPolicy
  { -- |
    preservedState :: (Core.Maybe StatefulPolicyPreservedState)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'StatefulPolicy' with the minimum fields required to make a request.
newStatefulPolicy ::
  StatefulPolicy
newStatefulPolicy = StatefulPolicy {preservedState = Core.Nothing}

instance Core.FromJSON StatefulPolicy where
  parseJSON =
    Core.withObject
      "StatefulPolicy"
      ( \o ->
          StatefulPolicy
            Core.<$> (o Core..:? "preservedState")
      )

instance Core.ToJSON StatefulPolicy where
  toJSON StatefulPolicy {..} =
    Core.object
      ( Core.catMaybes
          [("preservedState" Core..=) Core.<$> preservedState]
      )

-- | Configuration of preserved resources.
--
-- /See:/ 'newStatefulPolicyPreservedState' smart constructor.
newtype StatefulPolicyPreservedState = StatefulPolicyPreservedState
  { -- | Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks.
    disks :: (Core.Maybe StatefulPolicyPreservedState_Disks)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'StatefulPolicyPreservedState' with the minimum fields required to make a request.
newStatefulPolicyPreservedState ::
  StatefulPolicyPreservedState
newStatefulPolicyPreservedState =
  StatefulPolicyPreservedState {disks = Core.Nothing}

instance Core.FromJSON StatefulPolicyPreservedState where
  parseJSON =
    Core.withObject
      "StatefulPolicyPreservedState"
      ( \o ->
          StatefulPolicyPreservedState
            Core.<$> (o Core..:? "disks")
      )

instance Core.ToJSON StatefulPolicyPreservedState where
  toJSON StatefulPolicyPreservedState {..} =
    Core.object
      (Core.catMaybes [("disks" Core..=) Core.<$> disks])

-- | Disks created on the instances that will be preserved on instance delete, update, etc. This map is keyed with the device names of the disks.
--
-- /See:/ 'newStatefulPolicyPreservedState_Disks' smart constructor.
newtype StatefulPolicyPreservedState_Disks = StatefulPolicyPreservedState_Disks
  { -- |
    additional :: (Core.HashMap Core.Text StatefulPolicyPreservedStateDiskDevice)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'StatefulPolicyPreservedState_Disks' with the minimum fields required to make a request.
newStatefulPolicyPreservedState_Disks ::
  -- |  See 'additional'.
  Core.HashMap Core.Text StatefulPolicyPreservedStateDiskDevice ->
  StatefulPolicyPreservedState_Disks
newStatefulPolicyPreservedState_Disks additional =
  StatefulPolicyPreservedState_Disks {additional = additional}

instance
  Core.FromJSON
    StatefulPolicyPreservedState_Disks
  where
  parseJSON =
    Core.withObject
      "StatefulPolicyPreservedState_Disks"
      ( \o ->
          StatefulPolicyPreservedState_Disks
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    StatefulPolicyPreservedState_Disks
  where
  toJSON StatefulPolicyPreservedState_Disks {..} =
    Core.toJSON additional

--
-- /See:/ 'newStatefulPolicyPreservedStateDiskDevice' smart constructor.
newtype StatefulPolicyPreservedStateDiskDevice = StatefulPolicyPreservedStateDiskDevice
  { -- | These stateful disks will never be deleted during autohealing, update or VM instance recreate operations. This flag is used to configure if the disk should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted. Note: disks attached in READ_ONLY mode cannot be auto-deleted.
    autoDelete :: (Core.Maybe StatefulPolicyPreservedStateDiskDevice_AutoDelete)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'StatefulPolicyPreservedStateDiskDevice' with the minimum fields required to make a request.
newStatefulPolicyPreservedStateDiskDevice ::
  StatefulPolicyPreservedStateDiskDevice
newStatefulPolicyPreservedStateDiskDevice =
  StatefulPolicyPreservedStateDiskDevice {autoDelete = Core.Nothing}

instance
  Core.FromJSON
    StatefulPolicyPreservedStateDiskDevice
  where
  parseJSON =
    Core.withObject
      "StatefulPolicyPreservedStateDiskDevice"
      ( \o ->
          StatefulPolicyPreservedStateDiskDevice
            Core.<$> (o Core..:? "autoDelete")
      )

instance
  Core.ToJSON
    StatefulPolicyPreservedStateDiskDevice
  where
  toJSON StatefulPolicyPreservedStateDiskDevice {..} =
    Core.object
      ( Core.catMaybes
          [("autoDelete" Core..=) Core.<$> autoDelete]
      )

-- | Represents a Subnetwork resource. A subnetwork (also known as a subnet) is a logical partition of a Virtual Private Cloud network with one primary IP range and zero or more secondary IP ranges. For more information, read Virtual Private Cloud (VPC) Network.
--
-- /See:/ 'newSubnetwork' smart constructor.
data Subnetwork = Subnetwork
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource. This field can be set only at resource creation time.
    description :: (Core.Maybe Core.Text),
    -- | Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org policy, if there is no org policy specified, then it will default to disabled. This field isn\'t supported with the purpose field set to INTERNAL/HTTPS/LOAD_BALANCER.
    enableFlowLogs :: (Core.Maybe Core.Bool),
    -- | The external IPv6 address range that is owned by this subnetwork.
    externalIpv6Prefix :: (Core.Maybe Core.Text),
    -- | Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a Subnetwork. An up-to-date fingerprint must be provided in order to update the Subnetwork, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a Subnetwork.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | [Output Only] The gateway address for default routes to reach destination addresses outside this subnetwork.
    gatewayAddress :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] The internal IPv6 address range that is assigned to this subnetwork.
    internalIpv6Prefix :: (Core.Maybe Core.Text),
    -- | The range of internal addresses that are owned by this subnetwork. Provide this property when you create the subnetwork. For example, 10.0.0.0\/8 or 100.64.0.0\/10. Ranges must be unique and non-overlapping within a network. Only IPv4 is supported. This field is set at resource creation time. The range can be any range listed in the Valid ranges list. The range can be expanded after creation using expandIpCidrRange.
    ipCidrRange :: (Core.Maybe Core.Text),
    -- | The access type of IPv6 address this subnet holds. It\'s immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack.
    ipv6AccessType :: (Core.Maybe Subnetwork_Ipv6AccessType),
    -- | [Output Only] This field is for internal use.
    ipv6CidrRange :: (Core.Maybe Core.Text),
    -- | [Output Only] Type of the resource. Always compute#subnetwork for Subnetwork resources.
    kind :: Core.Text,
    -- | This field denotes the VPC flow logging options for this subnetwork. If logging is enabled, logs are exported to Cloud Logging.
    logConfig :: (Core.Maybe SubnetworkLogConfig),
    -- | The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | The URL of the network to which this subnetwork belongs, provided by the client when initially creating the subnetwork. This field can be set only at resource creation time.
    network :: (Core.Maybe Core.Text),
    -- | Whether the VMs in this subnet can access Google services without assigned external IP addresses. This field can be both set at resource creation time and updated using setPrivateIpGoogleAccess.
    privateIpGoogleAccess :: (Core.Maybe Core.Bool),
    -- | This field is for internal use. This field can be both set at resource creation time and updated using patch.
    privateIpv6GoogleAccess :: (Core.Maybe Subnetwork_PrivateIpv6GoogleAccess),
    -- | The purpose of the resource. This field can be either PRIVATE/RFC/1918 or INTERNAL/HTTPS/LOAD/BALANCER. A subnetwork with purpose set to INTERNAL/HTTPS/LOAD/BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE/RFC/1918. The enableFlowLogs field isn\'t supported with the purpose field set to INTERNAL/HTTPS/LOAD_BALANCER.
    purpose :: (Core.Maybe Subnetwork_Purpose),
    -- | URL of the region where the Subnetwork resides. This field can be set only at resource creation time.
    region :: (Core.Maybe Core.Text),
    -- | The role of subnetwork. Currently, this field is only used when purpose = INTERNAL/HTTPS/LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
    role' :: (Core.Maybe Subnetwork_Role),
    -- | An array of configurations for secondary IP ranges for VM instances contained in this subnetwork. The primary IP of such VM must belong to the primary ipCidrRange of the subnetwork. The alias IPs may belong to either primary or secondary ranges. This field can be updated with a patch request.
    secondaryIpRanges :: (Core.Maybe [SubnetworkSecondaryRange]),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | The stack type for the subnet. If set to IPV4/ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4/IPV6, new VMs in the subnet can be assigned both IPv4 and IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch.
    stackType :: (Core.Maybe Subnetwork_StackType),
    -- | [Output Only] The state of the subnetwork, which can be one of the following values: READY: Subnetwork is created and ready to use DRAINING: only applicable to subnetworks that have the purpose set to INTERNAL/HTTPS/LOAD_BALANCER and indicates that connections to the load balancer are being drained. A subnetwork that is draining cannot be used or modified until it reaches a status of READY
    state :: (Core.Maybe Subnetwork_State)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Subnetwork' with the minimum fields required to make a request.
newSubnetwork ::
  Subnetwork
newSubnetwork =
  Subnetwork
    { creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      enableFlowLogs = Core.Nothing,
      externalIpv6Prefix = Core.Nothing,
      fingerprint = Core.Nothing,
      gatewayAddress = Core.Nothing,
      id = Core.Nothing,
      internalIpv6Prefix = Core.Nothing,
      ipCidrRange = Core.Nothing,
      ipv6AccessType = Core.Nothing,
      ipv6CidrRange = Core.Nothing,
      kind = "compute#subnetwork",
      logConfig = Core.Nothing,
      name = Core.Nothing,
      network = Core.Nothing,
      privateIpGoogleAccess = Core.Nothing,
      privateIpv6GoogleAccess = Core.Nothing,
      purpose = Core.Nothing,
      region = Core.Nothing,
      role' = Core.Nothing,
      secondaryIpRanges = Core.Nothing,
      selfLink = Core.Nothing,
      stackType = Core.Nothing,
      state = Core.Nothing
    }

instance Core.FromJSON Subnetwork where
  parseJSON =
    Core.withObject
      "Subnetwork"
      ( \o ->
          Subnetwork
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "enableFlowLogs")
            Core.<*> (o Core..:? "externalIpv6Prefix")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "gatewayAddress")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "internalIpv6Prefix")
            Core.<*> (o Core..:? "ipCidrRange")
            Core.<*> (o Core..:? "ipv6AccessType")
            Core.<*> (o Core..:? "ipv6CidrRange")
            Core.<*> (o Core..:? "kind" Core..!= "compute#subnetwork")
            Core.<*> (o Core..:? "logConfig")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "network")
            Core.<*> (o Core..:? "privateIpGoogleAccess")
            Core.<*> (o Core..:? "privateIpv6GoogleAccess")
            Core.<*> (o Core..:? "purpose")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "role")
            Core.<*> (o Core..:? "secondaryIpRanges")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "stackType")
            Core.<*> (o Core..:? "state")
      )

instance Core.ToJSON Subnetwork where
  toJSON Subnetwork {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("enableFlowLogs" Core..=) Core.<$> enableFlowLogs,
            ("externalIpv6Prefix" Core..=)
              Core.<$> externalIpv6Prefix,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("gatewayAddress" Core..=) Core.<$> gatewayAddress,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("internalIpv6Prefix" Core..=)
              Core.<$> internalIpv6Prefix,
            ("ipCidrRange" Core..=) Core.<$> ipCidrRange,
            ("ipv6AccessType" Core..=) Core.<$> ipv6AccessType,
            ("ipv6CidrRange" Core..=) Core.<$> ipv6CidrRange,
            Core.Just ("kind" Core..= kind),
            ("logConfig" Core..=) Core.<$> logConfig,
            ("name" Core..=) Core.<$> name,
            ("network" Core..=) Core.<$> network,
            ("privateIpGoogleAccess" Core..=)
              Core.<$> privateIpGoogleAccess,
            ("privateIpv6GoogleAccess" Core..=)
              Core.<$> privateIpv6GoogleAccess,
            ("purpose" Core..=) Core.<$> purpose,
            ("region" Core..=) Core.<$> region,
            ("role" Core..=) Core.<$> role',
            ("secondaryIpRanges" Core..=)
              Core.<$> secondaryIpRanges,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("stackType" Core..=) Core.<$> stackType,
            ("state" Core..=) Core.<$> state
          ]
      )

--
-- /See:/ 'newSubnetworkAggregatedList' smart constructor.
data SubnetworkAggregatedList = SubnetworkAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of SubnetworksScopedList resources.
    items :: (Core.Maybe SubnetworkAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#subnetworkAggregatedList for aggregated lists of subnetworks.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe SubnetworkAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SubnetworkAggregatedList' with the minimum fields required to make a request.
newSubnetworkAggregatedList ::
  SubnetworkAggregatedList
newSubnetworkAggregatedList =
  SubnetworkAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#subnetworkAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON SubnetworkAggregatedList where
  parseJSON =
    Core.withObject
      "SubnetworkAggregatedList"
      ( \o ->
          SubnetworkAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#subnetworkAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON SubnetworkAggregatedList where
  toJSON SubnetworkAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of SubnetworksScopedList resources.
--
-- /See:/ 'newSubnetworkAggregatedList_Items' smart constructor.
newtype SubnetworkAggregatedList_Items = SubnetworkAggregatedList_Items
  { -- | Name of the scope containing this set of Subnetworks.
    additional :: (Core.HashMap Core.Text SubnetworksScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SubnetworkAggregatedList_Items' with the minimum fields required to make a request.
newSubnetworkAggregatedList_Items ::
  -- |  Name of the scope containing this set of Subnetworks. See 'additional'.
  Core.HashMap Core.Text SubnetworksScopedList ->
  SubnetworkAggregatedList_Items
newSubnetworkAggregatedList_Items additional =
  SubnetworkAggregatedList_Items {additional = additional}

instance Core.FromJSON SubnetworkAggregatedList_Items where
  parseJSON =
    Core.withObject
      "SubnetworkAggregatedList_Items"
      ( \o ->
          SubnetworkAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON SubnetworkAggregatedList_Items where
  toJSON SubnetworkAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newSubnetworkAggregatedList_Warning' smart constructor.
data SubnetworkAggregatedList_Warning = SubnetworkAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe SubnetworkAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [SubnetworkAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SubnetworkAggregatedList_Warning' with the minimum fields required to make a request.
newSubnetworkAggregatedList_Warning ::
  SubnetworkAggregatedList_Warning
newSubnetworkAggregatedList_Warning =
  SubnetworkAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    SubnetworkAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "SubnetworkAggregatedList_Warning"
      ( \o ->
          SubnetworkAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON SubnetworkAggregatedList_Warning where
  toJSON SubnetworkAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newSubnetworkAggregatedList_Warning_DataItem' smart constructor.
data SubnetworkAggregatedList_Warning_DataItem = SubnetworkAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SubnetworkAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newSubnetworkAggregatedList_Warning_DataItem ::
  SubnetworkAggregatedList_Warning_DataItem
newSubnetworkAggregatedList_Warning_DataItem =
  SubnetworkAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    SubnetworkAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "SubnetworkAggregatedList_Warning_DataItem"
      ( \o ->
          SubnetworkAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    SubnetworkAggregatedList_Warning_DataItem
  where
  toJSON SubnetworkAggregatedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Contains a list of Subnetwork resources.
--
-- /See:/ 'newSubnetworkList' smart constructor.
data SubnetworkList = SubnetworkList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of Subnetwork resources.
    items :: (Core.Maybe [Subnetwork]),
    -- | [Output Only] Type of resource. Always compute#subnetworkList for lists of subnetworks.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe SubnetworkList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SubnetworkList' with the minimum fields required to make a request.
newSubnetworkList ::
  SubnetworkList
newSubnetworkList =
  SubnetworkList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#subnetworkList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON SubnetworkList where
  parseJSON =
    Core.withObject
      "SubnetworkList"
      ( \o ->
          SubnetworkList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#subnetworkList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON SubnetworkList where
  toJSON SubnetworkList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newSubnetworkList_Warning' smart constructor.
data SubnetworkList_Warning = SubnetworkList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe SubnetworkList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [SubnetworkList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SubnetworkList_Warning' with the minimum fields required to make a request.
newSubnetworkList_Warning ::
  SubnetworkList_Warning
newSubnetworkList_Warning =
  SubnetworkList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON SubnetworkList_Warning where
  parseJSON =
    Core.withObject
      "SubnetworkList_Warning"
      ( \o ->
          SubnetworkList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON SubnetworkList_Warning where
  toJSON SubnetworkList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newSubnetworkList_Warning_DataItem' smart constructor.
data SubnetworkList_Warning_DataItem = SubnetworkList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SubnetworkList_Warning_DataItem' with the minimum fields required to make a request.
newSubnetworkList_Warning_DataItem ::
  SubnetworkList_Warning_DataItem
newSubnetworkList_Warning_DataItem =
  SubnetworkList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    SubnetworkList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "SubnetworkList_Warning_DataItem"
      ( \o ->
          SubnetworkList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON SubnetworkList_Warning_DataItem where
  toJSON SubnetworkList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | The available logging options for this subnetwork.
--
-- /See:/ 'newSubnetworkLogConfig' smart constructor.
data SubnetworkLogConfig = SubnetworkLogConfig
  { -- | Can only be specified if VPC flow logging for this subnetwork is enabled. Toggles the aggregation interval for collecting flow logs. Increasing the interval time will reduce the amount of generated flow logs for long lasting connections. Default is an interval of 5 seconds per connection.
    aggregationInterval :: (Core.Maybe SubnetworkLogConfig_AggregationInterval),
    -- | Whether to enable flow logging for this subnetwork. If this field is not explicitly set, it will not appear in get listings. If not set the default behavior is determined by the org policy, if there is no org policy specified, then it will default to disabled.
    enable :: (Core.Maybe Core.Bool),
    -- | Can only be specified if VPC flow logs for this subnetwork is enabled. The filter expression is used to define which VPC flow logs should be exported to Cloud Logging.
    filterExpr :: (Core.Maybe Core.Text),
    -- | Can only be specified if VPC flow logging for this subnetwork is enabled. The value of the field must be in [0, 1]. Set the sampling rate of VPC flow logs within the subnetwork where 1.0 means all collected logs are reported and 0.0 means no logs are reported. Default is 0.5 unless otherwise specified by the org policy, which means half of all collected logs are reported.
    flowSampling :: (Core.Maybe Core.Double),
    -- | Can only be specified if VPC flow logs for this subnetwork is enabled. Configures whether all, none or a subset of metadata fields should be added to the reported VPC flow logs. Default is EXCLUDE/ALL/METADATA.
    metadata :: (Core.Maybe SubnetworkLogConfig_Metadata),
    -- | Can only be specified if VPC flow logs for this subnetwork is enabled and \"metadata\" was set to CUSTOM_METADATA.
    metadataFields :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SubnetworkLogConfig' with the minimum fields required to make a request.
newSubnetworkLogConfig ::
  SubnetworkLogConfig
newSubnetworkLogConfig =
  SubnetworkLogConfig
    { aggregationInterval = Core.Nothing,
      enable = Core.Nothing,
      filterExpr = Core.Nothing,
      flowSampling = Core.Nothing,
      metadata = Core.Nothing,
      metadataFields = Core.Nothing
    }

instance Core.FromJSON SubnetworkLogConfig where
  parseJSON =
    Core.withObject
      "SubnetworkLogConfig"
      ( \o ->
          SubnetworkLogConfig
            Core.<$> (o Core..:? "aggregationInterval")
            Core.<*> (o Core..:? "enable")
            Core.<*> (o Core..:? "filterExpr")
            Core.<*> (o Core..:? "flowSampling")
            Core.<*> (o Core..:? "metadata")
            Core.<*> (o Core..:? "metadataFields")
      )

instance Core.ToJSON SubnetworkLogConfig where
  toJSON SubnetworkLogConfig {..} =
    Core.object
      ( Core.catMaybes
          [ ("aggregationInterval" Core..=)
              Core.<$> aggregationInterval,
            ("enable" Core..=) Core.<$> enable,
            ("filterExpr" Core..=) Core.<$> filterExpr,
            ("flowSampling" Core..=) Core.<$> flowSampling,
            ("metadata" Core..=) Core.<$> metadata,
            ("metadataFields" Core..=) Core.<$> metadataFields
          ]
      )

-- | Represents a secondary IP range of a subnetwork.
--
-- /See:/ 'newSubnetworkSecondaryRange' smart constructor.
data SubnetworkSecondaryRange = SubnetworkSecondaryRange
  { -- | The range of IP addresses belonging to this subnetwork secondary range. Provide this property when you create the subnetwork. Ranges must be unique and non-overlapping with all primary and secondary IP ranges within a network. Only IPv4 is supported. The range can be any range listed in the Valid ranges list.
    ipCidrRange :: (Core.Maybe Core.Text),
    -- | The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
    rangeName :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SubnetworkSecondaryRange' with the minimum fields required to make a request.
newSubnetworkSecondaryRange ::
  SubnetworkSecondaryRange
newSubnetworkSecondaryRange =
  SubnetworkSecondaryRange
    { ipCidrRange = Core.Nothing,
      rangeName = Core.Nothing
    }

instance Core.FromJSON SubnetworkSecondaryRange where
  parseJSON =
    Core.withObject
      "SubnetworkSecondaryRange"
      ( \o ->
          SubnetworkSecondaryRange
            Core.<$> (o Core..:? "ipCidrRange")
            Core.<*> (o Core..:? "rangeName")
      )

instance Core.ToJSON SubnetworkSecondaryRange where
  toJSON SubnetworkSecondaryRange {..} =
    Core.object
      ( Core.catMaybes
          [ ("ipCidrRange" Core..=) Core.<$> ipCidrRange,
            ("rangeName" Core..=) Core.<$> rangeName
          ]
      )

--
-- /See:/ 'newSubnetworksExpandIpCidrRangeRequest' smart constructor.
newtype SubnetworksExpandIpCidrRangeRequest = SubnetworksExpandIpCidrRangeRequest
  { -- | The IP (in CIDR format or netmask) of internal addresses that are legal on this Subnetwork. This range should be disjoint from other subnetworks within this network. This range can only be larger than (i.e. a superset of) the range previously defined before the update.
    ipCidrRange :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SubnetworksExpandIpCidrRangeRequest' with the minimum fields required to make a request.
newSubnetworksExpandIpCidrRangeRequest ::
  SubnetworksExpandIpCidrRangeRequest
newSubnetworksExpandIpCidrRangeRequest =
  SubnetworksExpandIpCidrRangeRequest {ipCidrRange = Core.Nothing}

instance
  Core.FromJSON
    SubnetworksExpandIpCidrRangeRequest
  where
  parseJSON =
    Core.withObject
      "SubnetworksExpandIpCidrRangeRequest"
      ( \o ->
          SubnetworksExpandIpCidrRangeRequest
            Core.<$> (o Core..:? "ipCidrRange")
      )

instance
  Core.ToJSON
    SubnetworksExpandIpCidrRangeRequest
  where
  toJSON SubnetworksExpandIpCidrRangeRequest {..} =
    Core.object
      ( Core.catMaybes
          [("ipCidrRange" Core..=) Core.<$> ipCidrRange]
      )

--
-- /See:/ 'newSubnetworksScopedList' smart constructor.
data SubnetworksScopedList = SubnetworksScopedList
  { -- | A list of subnetworks contained in this scope.
    subnetworks :: (Core.Maybe [Subnetwork]),
    -- | An informational warning that appears when the list of addresses is empty.
    warning :: (Core.Maybe SubnetworksScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SubnetworksScopedList' with the minimum fields required to make a request.
newSubnetworksScopedList ::
  SubnetworksScopedList
newSubnetworksScopedList =
  SubnetworksScopedList {subnetworks = Core.Nothing, warning = Core.Nothing}

instance Core.FromJSON SubnetworksScopedList where
  parseJSON =
    Core.withObject
      "SubnetworksScopedList"
      ( \o ->
          SubnetworksScopedList
            Core.<$> (o Core..:? "subnetworks")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON SubnetworksScopedList where
  toJSON SubnetworksScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("subnetworks" Core..=) Core.<$> subnetworks,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | An informational warning that appears when the list of addresses is empty.
--
-- /See:/ 'newSubnetworksScopedList_Warning' smart constructor.
data SubnetworksScopedList_Warning = SubnetworksScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe SubnetworksScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [SubnetworksScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SubnetworksScopedList_Warning' with the minimum fields required to make a request.
newSubnetworksScopedList_Warning ::
  SubnetworksScopedList_Warning
newSubnetworksScopedList_Warning =
  SubnetworksScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON SubnetworksScopedList_Warning where
  parseJSON =
    Core.withObject
      "SubnetworksScopedList_Warning"
      ( \o ->
          SubnetworksScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON SubnetworksScopedList_Warning where
  toJSON SubnetworksScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newSubnetworksScopedList_Warning_DataItem' smart constructor.
data SubnetworksScopedList_Warning_DataItem = SubnetworksScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SubnetworksScopedList_Warning_DataItem' with the minimum fields required to make a request.
newSubnetworksScopedList_Warning_DataItem ::
  SubnetworksScopedList_Warning_DataItem
newSubnetworksScopedList_Warning_DataItem =
  SubnetworksScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    SubnetworksScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "SubnetworksScopedList_Warning_DataItem"
      ( \o ->
          SubnetworksScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    SubnetworksScopedList_Warning_DataItem
  where
  toJSON SubnetworksScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newSubnetworksSetPrivateIpGoogleAccessRequest' smart constructor.
newtype SubnetworksSetPrivateIpGoogleAccessRequest = SubnetworksSetPrivateIpGoogleAccessRequest
  { -- |
    privateIpGoogleAccess :: (Core.Maybe Core.Bool)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'SubnetworksSetPrivateIpGoogleAccessRequest' with the minimum fields required to make a request.
newSubnetworksSetPrivateIpGoogleAccessRequest ::
  SubnetworksSetPrivateIpGoogleAccessRequest
newSubnetworksSetPrivateIpGoogleAccessRequest =
  SubnetworksSetPrivateIpGoogleAccessRequest
    { privateIpGoogleAccess = Core.Nothing
    }

instance
  Core.FromJSON
    SubnetworksSetPrivateIpGoogleAccessRequest
  where
  parseJSON =
    Core.withObject
      "SubnetworksSetPrivateIpGoogleAccessRequest"
      ( \o ->
          SubnetworksSetPrivateIpGoogleAccessRequest
            Core.<$> (o Core..:? "privateIpGoogleAccess")
      )

instance
  Core.ToJSON
    SubnetworksSetPrivateIpGoogleAccessRequest
  where
  toJSON SubnetworksSetPrivateIpGoogleAccessRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("privateIpGoogleAccess" Core..=)
              Core.<$> privateIpGoogleAccess
          ]
      )

-- | Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP\/UDP load balancing, Internal HTTP(S) load balancing and Traffic Director.
--
-- /See:/ 'newSubsetting' smart constructor.
newtype Subsetting = Subsetting
  { -- |
    policy :: (Core.Maybe Subsetting_Policy)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Subsetting' with the minimum fields required to make a request.
newSubsetting ::
  Subsetting
newSubsetting = Subsetting {policy = Core.Nothing}

instance Core.FromJSON Subsetting where
  parseJSON =
    Core.withObject
      "Subsetting"
      (\o -> Subsetting Core.<$> (o Core..:? "policy"))

instance Core.ToJSON Subsetting where
  toJSON Subsetting {..} =
    Core.object
      (Core.catMaybes [("policy" Core..=) Core.<$> policy])

--
-- /See:/ 'newTCPHealthCheck' smart constructor.
data TCPHealthCheck = TCPHealthCheck
  { -- | The TCP port number to which the health check prober sends packets. The default value is 80. Valid values are 1 through 65535.
    port :: (Core.Maybe Core.Int32),
    -- | Not supported.
    portName :: (Core.Maybe Core.Text),
    -- | Specifies how a port is selected for health checking. Can be one of the following values: USE/FIXED/PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for pass-through load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE/VM/IP network endpoint groups, GCE/VM/IP/PORT network endpoint groups, and instance group backends. USE/NAMED/PORT: Not supported. USE/SERVING/PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE/VM/IP/PORT network endpoint groups and instance group backends. For GCE/VM/IP_PORT network
    -- endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service\'s named port in the instance group\'s list of named ports.
    portSpecification :: (Core.Maybe TCPHealthCheck_PortSpecification),
    -- | Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    proxyHeader :: (Core.Maybe TCPHealthCheck_ProxyHeader),
    -- | Instructs the health check prober to send this exact ASCII string, up to 1024 bytes in length, after establishing the TCP connection.
    request' :: (Core.Maybe Core.Text),
    -- | Creates a content-based TCP health check. In addition to establishing a TCP connection, you can configure the health check to pass only when the backend sends this exact response ASCII string, up to 1024 bytes in length. For details, see: https:\/\/cloud.google.com\/load-balancing\/docs\/health-check-concepts#criteria-protocol-ssl-tcp
    response :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TCPHealthCheck' with the minimum fields required to make a request.
newTCPHealthCheck ::
  TCPHealthCheck
newTCPHealthCheck =
  TCPHealthCheck
    { port = Core.Nothing,
      portName = Core.Nothing,
      portSpecification = Core.Nothing,
      proxyHeader = Core.Nothing,
      request' = Core.Nothing,
      response = Core.Nothing
    }

instance Core.FromJSON TCPHealthCheck where
  parseJSON =
    Core.withObject
      "TCPHealthCheck"
      ( \o ->
          TCPHealthCheck
            Core.<$> (o Core..:? "port")
            Core.<*> (o Core..:? "portName")
            Core.<*> (o Core..:? "portSpecification")
            Core.<*> (o Core..:? "proxyHeader")
            Core.<*> (o Core..:? "request")
            Core.<*> (o Core..:? "response")
      )

instance Core.ToJSON TCPHealthCheck where
  toJSON TCPHealthCheck {..} =
    Core.object
      ( Core.catMaybes
          [ ("port" Core..=) Core.<$> port,
            ("portName" Core..=) Core.<$> portName,
            ("portSpecification" Core..=)
              Core.<$> portSpecification,
            ("proxyHeader" Core..=) Core.<$> proxyHeader,
            ("request" Core..=) Core.<$> request',
            ("response" Core..=) Core.<$> response
          ]
      )

-- | A set of instance tags.
--
-- /See:/ 'newTags' smart constructor.
data Tags = Tags
  { -- | Specifies a fingerprint for this request, which is essentially a hash of the tags\' contents and used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update tags. You must always provide an up-to-date fingerprint hash in order to update or change tags. To see the latest fingerprint, make get() request to the instance.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | An array of tags. Each tag must be 1-63 characters long, and comply with RFC1035.
    items :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Tags' with the minimum fields required to make a request.
newTags ::
  Tags
newTags = Tags {fingerprint = Core.Nothing, items = Core.Nothing}

instance Core.FromJSON Tags where
  parseJSON =
    Core.withObject
      "Tags"
      ( \o ->
          Tags
            Core.<$> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "items")
      )

instance Core.ToJSON Tags where
  toJSON Tags {..} =
    Core.object
      ( Core.catMaybes
          [ ("fingerprint" Core..=) Core.<$> fingerprint,
            ("items" Core..=) Core.<$> items
          ]
      )

-- | Represents a Target gRPC Proxy resource. A target gRPC proxy is a component of load balancers intended for load balancing gRPC traffic. Only global forwarding rules with load balancing scheme INTERNAL/SELF/MANAGED can reference a target gRPC proxy. The target gRPC Proxy references a URL map that specifies how traffic is routed to gRPC backend services.
--
-- /See:/ 'newTargetGrpcProxy' smart constructor.
data TargetGrpcProxy = TargetGrpcProxy
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetGrpcProxy. An up-to-date fingerprint must be provided in order to patch\/update the TargetGrpcProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetGrpcProxy.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | [Output Only] The unique identifier for the resource type. The server generates this identifier.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#targetGrpcProxy for target grpc proxies.
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL with id for the resource.
    selfLinkWithId :: (Core.Maybe Core.Text),
    -- | URL to the UrlMap resource that defines the mapping from URL to the BackendService. The protocol field in the BackendService must be set to GRPC.
    urlMap :: (Core.Maybe Core.Text),
    -- | If true, indicates that the BackendServices referenced by the urlMap may be accessed by gRPC applications without using a sidecar proxy. This will enable configuration checks on urlMap and its referenced BackendServices to not allow unsupported features. A gRPC application must use \"xds:\/\/\/\" scheme in the target URI of the service it is connecting to. If false, indicates that the BackendServices referenced by the urlMap will be accessed by gRPC applications via a sidecar proxy. In this case, a gRPC application must not use \"xds:\/\/\/\" scheme in the target URI of the service it is connecting to
    validateForProxyless :: (Core.Maybe Core.Bool)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetGrpcProxy' with the minimum fields required to make a request.
newTargetGrpcProxy ::
  TargetGrpcProxy
newTargetGrpcProxy =
  TargetGrpcProxy
    { creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      fingerprint = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#targetGrpcProxy",
      name = Core.Nothing,
      selfLink = Core.Nothing,
      selfLinkWithId = Core.Nothing,
      urlMap = Core.Nothing,
      validateForProxyless = Core.Nothing
    }

instance Core.FromJSON TargetGrpcProxy where
  parseJSON =
    Core.withObject
      "TargetGrpcProxy"
      ( \o ->
          TargetGrpcProxy
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#targetGrpcProxy"
                     )
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "selfLinkWithId")
            Core.<*> (o Core..:? "urlMap")
            Core.<*> (o Core..:? "validateForProxyless")
      )

instance Core.ToJSON TargetGrpcProxy where
  toJSON TargetGrpcProxy {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("selfLinkWithId" Core..=) Core.<$> selfLinkWithId,
            ("urlMap" Core..=) Core.<$> urlMap,
            ("validateForProxyless" Core..=)
              Core.<$> validateForProxyless
          ]
      )

--
-- /See:/ 'newTargetGrpcProxyList' smart constructor.
data TargetGrpcProxyList = TargetGrpcProxyList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of TargetGrpcProxy resources.
    items :: (Core.Maybe [TargetGrpcProxy]),
    -- | [Output Only] Type of the resource. Always compute#targetGrpcProxy for target grpc proxies.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe TargetGrpcProxyList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetGrpcProxyList' with the minimum fields required to make a request.
newTargetGrpcProxyList ::
  TargetGrpcProxyList
newTargetGrpcProxyList =
  TargetGrpcProxyList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#targetGrpcProxyList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON TargetGrpcProxyList where
  parseJSON =
    Core.withObject
      "TargetGrpcProxyList"
      ( \o ->
          TargetGrpcProxyList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#targetGrpcProxyList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON TargetGrpcProxyList where
  toJSON TargetGrpcProxyList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newTargetGrpcProxyList_Warning' smart constructor.
data TargetGrpcProxyList_Warning = TargetGrpcProxyList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe TargetGrpcProxyList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [TargetGrpcProxyList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetGrpcProxyList_Warning' with the minimum fields required to make a request.
newTargetGrpcProxyList_Warning ::
  TargetGrpcProxyList_Warning
newTargetGrpcProxyList_Warning =
  TargetGrpcProxyList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON TargetGrpcProxyList_Warning where
  parseJSON =
    Core.withObject
      "TargetGrpcProxyList_Warning"
      ( \o ->
          TargetGrpcProxyList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON TargetGrpcProxyList_Warning where
  toJSON TargetGrpcProxyList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newTargetGrpcProxyList_Warning_DataItem' smart constructor.
data TargetGrpcProxyList_Warning_DataItem = TargetGrpcProxyList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetGrpcProxyList_Warning_DataItem' with the minimum fields required to make a request.
newTargetGrpcProxyList_Warning_DataItem ::
  TargetGrpcProxyList_Warning_DataItem
newTargetGrpcProxyList_Warning_DataItem =
  TargetGrpcProxyList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    TargetGrpcProxyList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "TargetGrpcProxyList_Warning_DataItem"
      ( \o ->
          TargetGrpcProxyList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    TargetGrpcProxyList_Warning_DataItem
  where
  toJSON TargetGrpcProxyList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newTargetHttpProxiesScopedList' smart constructor.
data TargetHttpProxiesScopedList = TargetHttpProxiesScopedList
  { -- | A list of TargetHttpProxies contained in this scope.
    targetHttpProxies :: (Core.Maybe [TargetHttpProxy]),
    -- | Informational warning which replaces the list of backend services when the list is empty.
    warning :: (Core.Maybe TargetHttpProxiesScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpProxiesScopedList' with the minimum fields required to make a request.
newTargetHttpProxiesScopedList ::
  TargetHttpProxiesScopedList
newTargetHttpProxiesScopedList =
  TargetHttpProxiesScopedList
    { targetHttpProxies = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON TargetHttpProxiesScopedList where
  parseJSON =
    Core.withObject
      "TargetHttpProxiesScopedList"
      ( \o ->
          TargetHttpProxiesScopedList
            Core.<$> (o Core..:? "targetHttpProxies")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON TargetHttpProxiesScopedList where
  toJSON TargetHttpProxiesScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("targetHttpProxies" Core..=)
              Core.<$> targetHttpProxies,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of backend services when the list is empty.
--
-- /See:/ 'newTargetHttpProxiesScopedList_Warning' smart constructor.
data TargetHttpProxiesScopedList_Warning = TargetHttpProxiesScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe TargetHttpProxiesScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [TargetHttpProxiesScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpProxiesScopedList_Warning' with the minimum fields required to make a request.
newTargetHttpProxiesScopedList_Warning ::
  TargetHttpProxiesScopedList_Warning
newTargetHttpProxiesScopedList_Warning =
  TargetHttpProxiesScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    TargetHttpProxiesScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "TargetHttpProxiesScopedList_Warning"
      ( \o ->
          TargetHttpProxiesScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    TargetHttpProxiesScopedList_Warning
  where
  toJSON TargetHttpProxiesScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newTargetHttpProxiesScopedList_Warning_DataItem' smart constructor.
data TargetHttpProxiesScopedList_Warning_DataItem = TargetHttpProxiesScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpProxiesScopedList_Warning_DataItem' with the minimum fields required to make a request.
newTargetHttpProxiesScopedList_Warning_DataItem ::
  TargetHttpProxiesScopedList_Warning_DataItem
newTargetHttpProxiesScopedList_Warning_DataItem =
  TargetHttpProxiesScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    TargetHttpProxiesScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "TargetHttpProxiesScopedList_Warning_DataItem"
      ( \o ->
          TargetHttpProxiesScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    TargetHttpProxiesScopedList_Warning_DataItem
  where
  toJSON
    TargetHttpProxiesScopedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | Represents a Target HTTP Proxy resource. Google Compute Engine has two Target HTTP Proxy resources: * </compute/docs/reference/rest/v1/targetHttpProxies Global> * </compute/docs/reference/rest/v1/regionTargetHttpProxies Regional> A target HTTP proxy is a component of GCP HTTP load balancers. * targetHttpProxies are used by external HTTP load balancers and Traffic Director. * regionTargetHttpProxies are used by internal HTTP load balancers. Forwarding rules reference a target HTTP proxy, and the target proxy then references a URL map. For more information, read Using Target Proxies and Forwarding rule concepts.
--
-- /See:/ 'newTargetHttpProxy' smart constructor.
data TargetHttpProxy = TargetHttpProxy
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetHttpProxy. An up-to-date fingerprint must be provided in order to patch\/update the TargetHttpProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetHttpProxy.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of resource. Always compute#targetHttpProxy for target HTTP proxies.
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL/SELF/MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false.
    proxyBind :: (Core.Maybe Core.Bool),
    -- | [Output Only] URL of the region where the regional Target HTTP Proxy resides. This field is not applicable to global Target HTTP Proxies.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | URL to the UrlMap resource that defines the mapping from URL to the BackendService.
    urlMap :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpProxy' with the minimum fields required to make a request.
newTargetHttpProxy ::
  TargetHttpProxy
newTargetHttpProxy =
  TargetHttpProxy
    { creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      fingerprint = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#targetHttpProxy",
      name = Core.Nothing,
      proxyBind = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      urlMap = Core.Nothing
    }

instance Core.FromJSON TargetHttpProxy where
  parseJSON =
    Core.withObject
      "TargetHttpProxy"
      ( \o ->
          TargetHttpProxy
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#targetHttpProxy"
                     )
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "proxyBind")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "urlMap")
      )

instance Core.ToJSON TargetHttpProxy where
  toJSON TargetHttpProxy {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("proxyBind" Core..=) Core.<$> proxyBind,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("urlMap" Core..=) Core.<$> urlMap
          ]
      )

--
-- /See:/ 'newTargetHttpProxyAggregatedList' smart constructor.
data TargetHttpProxyAggregatedList = TargetHttpProxyAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of TargetHttpProxiesScopedList resources.
    items :: (Core.Maybe TargetHttpProxyAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#targetHttpProxyAggregatedList for lists of Target HTTP Proxies.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpProxyAggregatedList' with the minimum fields required to make a request.
newTargetHttpProxyAggregatedList ::
  TargetHttpProxyAggregatedList
newTargetHttpProxyAggregatedList =
  TargetHttpProxyAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#targetHttpProxyAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing
    }

instance Core.FromJSON TargetHttpProxyAggregatedList where
  parseJSON =
    Core.withObject
      "TargetHttpProxyAggregatedList"
      ( \o ->
          TargetHttpProxyAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#targetHttpProxyAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
      )

instance Core.ToJSON TargetHttpProxyAggregatedList where
  toJSON TargetHttpProxyAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables
          ]
      )

-- | A list of TargetHttpProxiesScopedList resources.
--
-- /See:/ 'newTargetHttpProxyAggregatedList_Items' smart constructor.
newtype TargetHttpProxyAggregatedList_Items = TargetHttpProxyAggregatedList_Items
  { -- | Name of the scope containing this set of TargetHttpProxies.
    additional :: (Core.HashMap Core.Text TargetHttpProxiesScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpProxyAggregatedList_Items' with the minimum fields required to make a request.
newTargetHttpProxyAggregatedList_Items ::
  -- |  Name of the scope containing this set of TargetHttpProxies. See 'additional'.
  Core.HashMap Core.Text TargetHttpProxiesScopedList ->
  TargetHttpProxyAggregatedList_Items
newTargetHttpProxyAggregatedList_Items additional =
  TargetHttpProxyAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    TargetHttpProxyAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "TargetHttpProxyAggregatedList_Items"
      ( \o ->
          TargetHttpProxyAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    TargetHttpProxyAggregatedList_Items
  where
  toJSON TargetHttpProxyAggregatedList_Items {..} =
    Core.toJSON additional

-- | A list of TargetHttpProxy resources.
--
-- /See:/ 'newTargetHttpProxyList' smart constructor.
data TargetHttpProxyList = TargetHttpProxyList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of TargetHttpProxy resources.
    items :: (Core.Maybe [TargetHttpProxy]),
    -- | Type of resource. Always compute#targetHttpProxyList for lists of target HTTP proxies.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe TargetHttpProxyList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpProxyList' with the minimum fields required to make a request.
newTargetHttpProxyList ::
  TargetHttpProxyList
newTargetHttpProxyList =
  TargetHttpProxyList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#targetHttpProxyList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON TargetHttpProxyList where
  parseJSON =
    Core.withObject
      "TargetHttpProxyList"
      ( \o ->
          TargetHttpProxyList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#targetHttpProxyList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON TargetHttpProxyList where
  toJSON TargetHttpProxyList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newTargetHttpProxyList_Warning' smart constructor.
data TargetHttpProxyList_Warning = TargetHttpProxyList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe TargetHttpProxyList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [TargetHttpProxyList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpProxyList_Warning' with the minimum fields required to make a request.
newTargetHttpProxyList_Warning ::
  TargetHttpProxyList_Warning
newTargetHttpProxyList_Warning =
  TargetHttpProxyList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON TargetHttpProxyList_Warning where
  parseJSON =
    Core.withObject
      "TargetHttpProxyList_Warning"
      ( \o ->
          TargetHttpProxyList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON TargetHttpProxyList_Warning where
  toJSON TargetHttpProxyList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newTargetHttpProxyList_Warning_DataItem' smart constructor.
data TargetHttpProxyList_Warning_DataItem = TargetHttpProxyList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpProxyList_Warning_DataItem' with the minimum fields required to make a request.
newTargetHttpProxyList_Warning_DataItem ::
  TargetHttpProxyList_Warning_DataItem
newTargetHttpProxyList_Warning_DataItem =
  TargetHttpProxyList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    TargetHttpProxyList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "TargetHttpProxyList_Warning_DataItem"
      ( \o ->
          TargetHttpProxyList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    TargetHttpProxyList_Warning_DataItem
  where
  toJSON TargetHttpProxyList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newTargetHttpsProxiesScopedList' smart constructor.
data TargetHttpsProxiesScopedList = TargetHttpsProxiesScopedList
  { -- | A list of TargetHttpsProxies contained in this scope.
    targetHttpsProxies :: (Core.Maybe [TargetHttpsProxy]),
    -- | Informational warning which replaces the list of backend services when the list is empty.
    warning :: (Core.Maybe TargetHttpsProxiesScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpsProxiesScopedList' with the minimum fields required to make a request.
newTargetHttpsProxiesScopedList ::
  TargetHttpsProxiesScopedList
newTargetHttpsProxiesScopedList =
  TargetHttpsProxiesScopedList
    { targetHttpsProxies = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON TargetHttpsProxiesScopedList where
  parseJSON =
    Core.withObject
      "TargetHttpsProxiesScopedList"
      ( \o ->
          TargetHttpsProxiesScopedList
            Core.<$> (o Core..:? "targetHttpsProxies")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON TargetHttpsProxiesScopedList where
  toJSON TargetHttpsProxiesScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("targetHttpsProxies" Core..=)
              Core.<$> targetHttpsProxies,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of backend services when the list is empty.
--
-- /See:/ 'newTargetHttpsProxiesScopedList_Warning' smart constructor.
data TargetHttpsProxiesScopedList_Warning = TargetHttpsProxiesScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe TargetHttpsProxiesScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [TargetHttpsProxiesScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpsProxiesScopedList_Warning' with the minimum fields required to make a request.
newTargetHttpsProxiesScopedList_Warning ::
  TargetHttpsProxiesScopedList_Warning
newTargetHttpsProxiesScopedList_Warning =
  TargetHttpsProxiesScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    TargetHttpsProxiesScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "TargetHttpsProxiesScopedList_Warning"
      ( \o ->
          TargetHttpsProxiesScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    TargetHttpsProxiesScopedList_Warning
  where
  toJSON TargetHttpsProxiesScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newTargetHttpsProxiesScopedList_Warning_DataItem' smart constructor.
data TargetHttpsProxiesScopedList_Warning_DataItem = TargetHttpsProxiesScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpsProxiesScopedList_Warning_DataItem' with the minimum fields required to make a request.
newTargetHttpsProxiesScopedList_Warning_DataItem ::
  TargetHttpsProxiesScopedList_Warning_DataItem
newTargetHttpsProxiesScopedList_Warning_DataItem =
  TargetHttpsProxiesScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    TargetHttpsProxiesScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "TargetHttpsProxiesScopedList_Warning_DataItem"
      ( \o ->
          TargetHttpsProxiesScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    TargetHttpsProxiesScopedList_Warning_DataItem
  where
  toJSON
    TargetHttpsProxiesScopedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

--
-- /See:/ 'newTargetHttpsProxiesSetCertificateMapRequest' smart constructor.
newtype TargetHttpsProxiesSetCertificateMapRequest = TargetHttpsProxiesSetCertificateMapRequest
  { -- | URL of the Certificate Map to associate with this TargetHttpsProxy.
    certificateMap :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpsProxiesSetCertificateMapRequest' with the minimum fields required to make a request.
newTargetHttpsProxiesSetCertificateMapRequest ::
  TargetHttpsProxiesSetCertificateMapRequest
newTargetHttpsProxiesSetCertificateMapRequest =
  TargetHttpsProxiesSetCertificateMapRequest {certificateMap = Core.Nothing}

instance
  Core.FromJSON
    TargetHttpsProxiesSetCertificateMapRequest
  where
  parseJSON =
    Core.withObject
      "TargetHttpsProxiesSetCertificateMapRequest"
      ( \o ->
          TargetHttpsProxiesSetCertificateMapRequest
            Core.<$> (o Core..:? "certificateMap")
      )

instance
  Core.ToJSON
    TargetHttpsProxiesSetCertificateMapRequest
  where
  toJSON TargetHttpsProxiesSetCertificateMapRequest {..} =
    Core.object
      ( Core.catMaybes
          [("certificateMap" Core..=) Core.<$> certificateMap]
      )

--
-- /See:/ 'newTargetHttpsProxiesSetQuicOverrideRequest' smart constructor.
newtype TargetHttpsProxiesSetQuicOverrideRequest = TargetHttpsProxiesSetQuicOverrideRequest
  { -- | QUIC policy for the TargetHttpsProxy resource.
    quicOverride :: (Core.Maybe TargetHttpsProxiesSetQuicOverrideRequest_QuicOverride)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpsProxiesSetQuicOverrideRequest' with the minimum fields required to make a request.
newTargetHttpsProxiesSetQuicOverrideRequest ::
  TargetHttpsProxiesSetQuicOverrideRequest
newTargetHttpsProxiesSetQuicOverrideRequest =
  TargetHttpsProxiesSetQuicOverrideRequest {quicOverride = Core.Nothing}

instance
  Core.FromJSON
    TargetHttpsProxiesSetQuicOverrideRequest
  where
  parseJSON =
    Core.withObject
      "TargetHttpsProxiesSetQuicOverrideRequest"
      ( \o ->
          TargetHttpsProxiesSetQuicOverrideRequest
            Core.<$> (o Core..:? "quicOverride")
      )

instance
  Core.ToJSON
    TargetHttpsProxiesSetQuicOverrideRequest
  where
  toJSON TargetHttpsProxiesSetQuicOverrideRequest {..} =
    Core.object
      ( Core.catMaybes
          [("quicOverride" Core..=) Core.<$> quicOverride]
      )

--
-- /See:/ 'newTargetHttpsProxiesSetSslCertificatesRequest' smart constructor.
newtype TargetHttpsProxiesSetSslCertificatesRequest = TargetHttpsProxiesSetSslCertificatesRequest
  { -- | New set of SslCertificate resources to associate with this TargetHttpsProxy resource. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates.
    sslCertificates :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpsProxiesSetSslCertificatesRequest' with the minimum fields required to make a request.
newTargetHttpsProxiesSetSslCertificatesRequest ::
  TargetHttpsProxiesSetSslCertificatesRequest
newTargetHttpsProxiesSetSslCertificatesRequest =
  TargetHttpsProxiesSetSslCertificatesRequest {sslCertificates = Core.Nothing}

instance
  Core.FromJSON
    TargetHttpsProxiesSetSslCertificatesRequest
  where
  parseJSON =
    Core.withObject
      "TargetHttpsProxiesSetSslCertificatesRequest"
      ( \o ->
          TargetHttpsProxiesSetSslCertificatesRequest
            Core.<$> (o Core..:? "sslCertificates")
      )

instance
  Core.ToJSON
    TargetHttpsProxiesSetSslCertificatesRequest
  where
  toJSON
    TargetHttpsProxiesSetSslCertificatesRequest {..} =
      Core.object
        ( Core.catMaybes
            [ ("sslCertificates" Core..=)
                Core.<$> sslCertificates
            ]
        )

-- | Represents a Target HTTPS Proxy resource. Google Compute Engine has two Target HTTPS Proxy resources: * </compute/docs/reference/rest/v1/targetHttpsProxies Global> * </compute/docs/reference/rest/v1/regionTargetHttpsProxies Regional> A target HTTPS proxy is a component of GCP HTTPS load balancers. * targetHttpsProxies are used by external HTTPS load balancers. * regionTargetHttpsProxies are used by internal HTTPS load balancers. Forwarding rules reference a target HTTPS proxy, and the target proxy then references a URL map. For more information, read Using Target Proxies and Forwarding rule concepts.
--
-- /See:/ 'newTargetHttpsProxy' smart constructor.
data TargetHttpsProxy = TargetHttpsProxy
  { -- | Optional. A URL referring to a networksecurity.AuthorizationPolicy resource that describes how the proxy should authorize inbound traffic. If left blank, access will not be restricted by an authorization policy. Refer to the AuthorizationPolicy resource for additional details. authorizationPolicy only applies to a global TargetHttpsProxy attached to globalForwardingRules with the loadBalancingScheme set to INTERNAL/SELF/MANAGED. Note: This field currently has no impact.
    authorizationPolicy :: (Core.Maybe Core.Text),
    -- | URL of a certificate map that identifies a certificate map associated with the given target proxy. This field can only be set for global target proxies. If set, sslCertificates will be ignored.
    certificateMap :: (Core.Maybe Core.Text),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a TargetHttpsProxy. An up-to-date fingerprint must be provided in order to patch the TargetHttpsProxy; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the TargetHttpsProxy.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of resource. Always compute#targetHttpsProxy for target HTTPS proxies.
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL/SELF/MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false.
    proxyBind :: (Core.Maybe Core.Bool),
    -- | Specifies the QUIC override policy for this TargetHttpsProxy resource. This setting determines whether the load balancer attempts to negotiate QUIC with clients. You can specify NONE, ENABLE, or DISABLE. - When quic-override is set to NONE, Google manages whether QUIC is used. - When quic-override is set to ENABLE, the load balancer uses QUIC when possible. - When quic-override is set to DISABLE, the load balancer doesn\'t use QUIC. - If the quic-override flag is not specified, NONE is implied.
    quicOverride :: (Core.Maybe TargetHttpsProxy_QuicOverride),
    -- | [Output Only] URL of the region where the regional TargetHttpsProxy resides. This field is not applicable to global TargetHttpsProxies.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | Optional. A URL referring to a networksecurity.ServerTlsPolicy resource that describes how the proxy should authenticate inbound traffic. serverTlsPolicy only applies to a global TargetHttpsProxy attached to globalForwardingRules with the loadBalancingScheme set to INTERNAL/SELF/MANAGED or EXTERNAL or EXTERNAL/MANAGED. For details which ServerTlsPolicy resources are accepted with INTERNAL/SELF/MANAGED and which with EXTERNAL, EXTERNAL/MANAGED loadBalancingScheme consult ServerTlsPolicy documentation. If left blank, communications are not encrypted.
    serverTlsPolicy :: (Core.Maybe Core.Text),
    -- | URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL/SELF/MANAGED.
    sslCertificates :: (Core.Maybe [Core.Text]),
    -- | URL of SslPolicy resource that will be associated with the TargetHttpsProxy resource. If not set, the TargetHttpsProxy resource has no SSL policy configured.
    sslPolicy :: (Core.Maybe Core.Text),
    -- | A fully-qualified or valid partial URL to the UrlMap resource that defines the mapping from URL to the BackendService. For example, the following are all valid URLs for specifying a URL map: - https:\/\/www.googleapis.compute\/v1\/projects\/project\/global\/urlMaps\/ url-map - projects\/project\/global\/urlMaps\/url-map - global\/urlMaps\/url-map
    urlMap :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpsProxy' with the minimum fields required to make a request.
newTargetHttpsProxy ::
  TargetHttpsProxy
newTargetHttpsProxy =
  TargetHttpsProxy
    { authorizationPolicy = Core.Nothing,
      certificateMap = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      fingerprint = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#targetHttpsProxy",
      name = Core.Nothing,
      proxyBind = Core.Nothing,
      quicOverride = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      serverTlsPolicy = Core.Nothing,
      sslCertificates = Core.Nothing,
      sslPolicy = Core.Nothing,
      urlMap = Core.Nothing
    }

instance Core.FromJSON TargetHttpsProxy where
  parseJSON =
    Core.withObject
      "TargetHttpsProxy"
      ( \o ->
          TargetHttpsProxy
            Core.<$> (o Core..:? "authorizationPolicy")
            Core.<*> (o Core..:? "certificateMap")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#targetHttpsProxy"
                     )
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "proxyBind")
            Core.<*> (o Core..:? "quicOverride")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "serverTlsPolicy")
            Core.<*> (o Core..:? "sslCertificates")
            Core.<*> (o Core..:? "sslPolicy")
            Core.<*> (o Core..:? "urlMap")
      )

instance Core.ToJSON TargetHttpsProxy where
  toJSON TargetHttpsProxy {..} =
    Core.object
      ( Core.catMaybes
          [ ("authorizationPolicy" Core..=)
              Core.<$> authorizationPolicy,
            ("certificateMap" Core..=) Core.<$> certificateMap,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("proxyBind" Core..=) Core.<$> proxyBind,
            ("quicOverride" Core..=) Core.<$> quicOverride,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("serverTlsPolicy" Core..=) Core.<$> serverTlsPolicy,
            ("sslCertificates" Core..=) Core.<$> sslCertificates,
            ("sslPolicy" Core..=) Core.<$> sslPolicy,
            ("urlMap" Core..=) Core.<$> urlMap
          ]
      )

--
-- /See:/ 'newTargetHttpsProxyAggregatedList' smart constructor.
data TargetHttpsProxyAggregatedList = TargetHttpsProxyAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of TargetHttpsProxiesScopedList resources.
    items :: (Core.Maybe TargetHttpsProxyAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#targetHttpsProxyAggregatedList for lists of Target HTTP Proxies.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe TargetHttpsProxyAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpsProxyAggregatedList' with the minimum fields required to make a request.
newTargetHttpsProxyAggregatedList ::
  TargetHttpsProxyAggregatedList
newTargetHttpsProxyAggregatedList =
  TargetHttpsProxyAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#targetHttpsProxyAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON TargetHttpsProxyAggregatedList where
  parseJSON =
    Core.withObject
      "TargetHttpsProxyAggregatedList"
      ( \o ->
          TargetHttpsProxyAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#targetHttpsProxyAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON TargetHttpsProxyAggregatedList where
  toJSON TargetHttpsProxyAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of TargetHttpsProxiesScopedList resources.
--
-- /See:/ 'newTargetHttpsProxyAggregatedList_Items' smart constructor.
newtype TargetHttpsProxyAggregatedList_Items = TargetHttpsProxyAggregatedList_Items
  { -- | Name of the scope containing this set of TargetHttpsProxies.
    additional :: (Core.HashMap Core.Text TargetHttpsProxiesScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpsProxyAggregatedList_Items' with the minimum fields required to make a request.
newTargetHttpsProxyAggregatedList_Items ::
  -- |  Name of the scope containing this set of TargetHttpsProxies. See 'additional'.
  Core.HashMap Core.Text TargetHttpsProxiesScopedList ->
  TargetHttpsProxyAggregatedList_Items
newTargetHttpsProxyAggregatedList_Items additional =
  TargetHttpsProxyAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    TargetHttpsProxyAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "TargetHttpsProxyAggregatedList_Items"
      ( \o ->
          TargetHttpsProxyAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    TargetHttpsProxyAggregatedList_Items
  where
  toJSON TargetHttpsProxyAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newTargetHttpsProxyAggregatedList_Warning' smart constructor.
data TargetHttpsProxyAggregatedList_Warning = TargetHttpsProxyAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe TargetHttpsProxyAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [TargetHttpsProxyAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpsProxyAggregatedList_Warning' with the minimum fields required to make a request.
newTargetHttpsProxyAggregatedList_Warning ::
  TargetHttpsProxyAggregatedList_Warning
newTargetHttpsProxyAggregatedList_Warning =
  TargetHttpsProxyAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    TargetHttpsProxyAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "TargetHttpsProxyAggregatedList_Warning"
      ( \o ->
          TargetHttpsProxyAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    TargetHttpsProxyAggregatedList_Warning
  where
  toJSON TargetHttpsProxyAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newTargetHttpsProxyAggregatedList_Warning_DataItem' smart constructor.
data TargetHttpsProxyAggregatedList_Warning_DataItem = TargetHttpsProxyAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpsProxyAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newTargetHttpsProxyAggregatedList_Warning_DataItem ::
  TargetHttpsProxyAggregatedList_Warning_DataItem
newTargetHttpsProxyAggregatedList_Warning_DataItem =
  TargetHttpsProxyAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    TargetHttpsProxyAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "TargetHttpsProxyAggregatedList_Warning_DataItem"
      ( \o ->
          TargetHttpsProxyAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    TargetHttpsProxyAggregatedList_Warning_DataItem
  where
  toJSON
    TargetHttpsProxyAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | Contains a list of TargetHttpsProxy resources.
--
-- /See:/ 'newTargetHttpsProxyList' smart constructor.
data TargetHttpsProxyList = TargetHttpsProxyList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of TargetHttpsProxy resources.
    items :: (Core.Maybe [TargetHttpsProxy]),
    -- | Type of resource. Always compute#targetHttpsProxyList for lists of target HTTPS proxies.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe TargetHttpsProxyList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpsProxyList' with the minimum fields required to make a request.
newTargetHttpsProxyList ::
  TargetHttpsProxyList
newTargetHttpsProxyList =
  TargetHttpsProxyList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#targetHttpsProxyList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON TargetHttpsProxyList where
  parseJSON =
    Core.withObject
      "TargetHttpsProxyList"
      ( \o ->
          TargetHttpsProxyList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#targetHttpsProxyList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON TargetHttpsProxyList where
  toJSON TargetHttpsProxyList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newTargetHttpsProxyList_Warning' smart constructor.
data TargetHttpsProxyList_Warning = TargetHttpsProxyList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe TargetHttpsProxyList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [TargetHttpsProxyList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpsProxyList_Warning' with the minimum fields required to make a request.
newTargetHttpsProxyList_Warning ::
  TargetHttpsProxyList_Warning
newTargetHttpsProxyList_Warning =
  TargetHttpsProxyList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON TargetHttpsProxyList_Warning where
  parseJSON =
    Core.withObject
      "TargetHttpsProxyList_Warning"
      ( \o ->
          TargetHttpsProxyList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON TargetHttpsProxyList_Warning where
  toJSON TargetHttpsProxyList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newTargetHttpsProxyList_Warning_DataItem' smart constructor.
data TargetHttpsProxyList_Warning_DataItem = TargetHttpsProxyList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetHttpsProxyList_Warning_DataItem' with the minimum fields required to make a request.
newTargetHttpsProxyList_Warning_DataItem ::
  TargetHttpsProxyList_Warning_DataItem
newTargetHttpsProxyList_Warning_DataItem =
  TargetHttpsProxyList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    TargetHttpsProxyList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "TargetHttpsProxyList_Warning_DataItem"
      ( \o ->
          TargetHttpsProxyList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    TargetHttpsProxyList_Warning_DataItem
  where
  toJSON TargetHttpsProxyList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Represents a Target Instance resource. You can use a target instance to handle traffic for one or more forwarding rules, which is ideal for forwarding protocol traffic that is managed by a single source. For example, ESP, AH, TCP, or UDP. For more information, read Target instances.
--
-- /See:/ 'newTargetInstance' smart constructor.
data TargetInstance = TargetInstance
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | A URL to the virtual machine instance that handles traffic for this target instance. When creating a target instance, you can provide the fully-qualified URL or a valid partial URL to the desired virtual machine. For example, the following are all valid URLs: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project\/zones\/zone \/instances\/instance - projects\/project\/zones\/zone\/instances\/instance - zones\/zone\/instances\/instance
    instance' :: (Core.Maybe Core.Text),
    -- | [Output Only] The type of the resource. Always compute#targetInstance for target instances.
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | Must have a value of NO_NAT. Protocol forwarding delivers packets while preserving the destination IP address of the forwarding rule referencing the target instance.
    natPolicy :: (Core.Maybe TargetInstance_NatPolicy),
    -- | The URL of the network this target instance uses to forward traffic. If not specified, the traffic will be forwarded to the network that the default network interface belongs to.
    network :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] URL of the zone where the target instance resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    zone :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetInstance' with the minimum fields required to make a request.
newTargetInstance ::
  TargetInstance
newTargetInstance =
  TargetInstance
    { creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      id = Core.Nothing,
      instance' = Core.Nothing,
      kind = "compute#targetInstance",
      name = Core.Nothing,
      natPolicy = Core.Nothing,
      network = Core.Nothing,
      selfLink = Core.Nothing,
      zone = Core.Nothing
    }

instance Core.FromJSON TargetInstance where
  parseJSON =
    Core.withObject
      "TargetInstance"
      ( \o ->
          TargetInstance
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "instance")
            Core.<*> (o Core..:? "kind" Core..!= "compute#targetInstance")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "natPolicy")
            Core.<*> (o Core..:? "network")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "zone")
      )

instance Core.ToJSON TargetInstance where
  toJSON TargetInstance {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("instance" Core..=) Core.<$> instance',
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("natPolicy" Core..=) Core.<$> natPolicy,
            ("network" Core..=) Core.<$> network,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("zone" Core..=) Core.<$> zone
          ]
      )

--
-- /See:/ 'newTargetInstanceAggregatedList' smart constructor.
data TargetInstanceAggregatedList = TargetInstanceAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of TargetInstance resources.
    items :: (Core.Maybe TargetInstanceAggregatedList_Items),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe TargetInstanceAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetInstanceAggregatedList' with the minimum fields required to make a request.
newTargetInstanceAggregatedList ::
  TargetInstanceAggregatedList
newTargetInstanceAggregatedList =
  TargetInstanceAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#targetInstanceAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON TargetInstanceAggregatedList where
  parseJSON =
    Core.withObject
      "TargetInstanceAggregatedList"
      ( \o ->
          TargetInstanceAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#targetInstanceAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON TargetInstanceAggregatedList where
  toJSON TargetInstanceAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of TargetInstance resources.
--
-- /See:/ 'newTargetInstanceAggregatedList_Items' smart constructor.
newtype TargetInstanceAggregatedList_Items = TargetInstanceAggregatedList_Items
  { -- | Name of the scope containing this set of target instances.
    additional :: (Core.HashMap Core.Text TargetInstancesScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetInstanceAggregatedList_Items' with the minimum fields required to make a request.
newTargetInstanceAggregatedList_Items ::
  -- |  Name of the scope containing this set of target instances. See 'additional'.
  Core.HashMap Core.Text TargetInstancesScopedList ->
  TargetInstanceAggregatedList_Items
newTargetInstanceAggregatedList_Items additional =
  TargetInstanceAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    TargetInstanceAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "TargetInstanceAggregatedList_Items"
      ( \o ->
          TargetInstanceAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    TargetInstanceAggregatedList_Items
  where
  toJSON TargetInstanceAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newTargetInstanceAggregatedList_Warning' smart constructor.
data TargetInstanceAggregatedList_Warning = TargetInstanceAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe TargetInstanceAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [TargetInstanceAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetInstanceAggregatedList_Warning' with the minimum fields required to make a request.
newTargetInstanceAggregatedList_Warning ::
  TargetInstanceAggregatedList_Warning
newTargetInstanceAggregatedList_Warning =
  TargetInstanceAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    TargetInstanceAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "TargetInstanceAggregatedList_Warning"
      ( \o ->
          TargetInstanceAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    TargetInstanceAggregatedList_Warning
  where
  toJSON TargetInstanceAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newTargetInstanceAggregatedList_Warning_DataItem' smart constructor.
data TargetInstanceAggregatedList_Warning_DataItem = TargetInstanceAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetInstanceAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newTargetInstanceAggregatedList_Warning_DataItem ::
  TargetInstanceAggregatedList_Warning_DataItem
newTargetInstanceAggregatedList_Warning_DataItem =
  TargetInstanceAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    TargetInstanceAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "TargetInstanceAggregatedList_Warning_DataItem"
      ( \o ->
          TargetInstanceAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    TargetInstanceAggregatedList_Warning_DataItem
  where
  toJSON
    TargetInstanceAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | Contains a list of TargetInstance resources.
--
-- /See:/ 'newTargetInstanceList' smart constructor.
data TargetInstanceList = TargetInstanceList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of TargetInstance resources.
    items :: (Core.Maybe [TargetInstance]),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe TargetInstanceList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetInstanceList' with the minimum fields required to make a request.
newTargetInstanceList ::
  TargetInstanceList
newTargetInstanceList =
  TargetInstanceList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#targetInstanceList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON TargetInstanceList where
  parseJSON =
    Core.withObject
      "TargetInstanceList"
      ( \o ->
          TargetInstanceList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#targetInstanceList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON TargetInstanceList where
  toJSON TargetInstanceList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newTargetInstanceList_Warning' smart constructor.
data TargetInstanceList_Warning = TargetInstanceList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe TargetInstanceList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [TargetInstanceList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetInstanceList_Warning' with the minimum fields required to make a request.
newTargetInstanceList_Warning ::
  TargetInstanceList_Warning
newTargetInstanceList_Warning =
  TargetInstanceList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON TargetInstanceList_Warning where
  parseJSON =
    Core.withObject
      "TargetInstanceList_Warning"
      ( \o ->
          TargetInstanceList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON TargetInstanceList_Warning where
  toJSON TargetInstanceList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newTargetInstanceList_Warning_DataItem' smart constructor.
data TargetInstanceList_Warning_DataItem = TargetInstanceList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetInstanceList_Warning_DataItem' with the minimum fields required to make a request.
newTargetInstanceList_Warning_DataItem ::
  TargetInstanceList_Warning_DataItem
newTargetInstanceList_Warning_DataItem =
  TargetInstanceList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    TargetInstanceList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "TargetInstanceList_Warning_DataItem"
      ( \o ->
          TargetInstanceList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    TargetInstanceList_Warning_DataItem
  where
  toJSON TargetInstanceList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newTargetInstancesScopedList' smart constructor.
data TargetInstancesScopedList = TargetInstancesScopedList
  { -- | A list of target instances contained in this scope.
    targetInstances :: (Core.Maybe [TargetInstance]),
    -- | Informational warning which replaces the list of addresses when the list is empty.
    warning :: (Core.Maybe TargetInstancesScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetInstancesScopedList' with the minimum fields required to make a request.
newTargetInstancesScopedList ::
  TargetInstancesScopedList
newTargetInstancesScopedList =
  TargetInstancesScopedList
    { targetInstances = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON TargetInstancesScopedList where
  parseJSON =
    Core.withObject
      "TargetInstancesScopedList"
      ( \o ->
          TargetInstancesScopedList
            Core.<$> (o Core..:? "targetInstances")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON TargetInstancesScopedList where
  toJSON TargetInstancesScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("targetInstances" Core..=)
              Core.<$> targetInstances,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of addresses when the list is empty.
--
-- /See:/ 'newTargetInstancesScopedList_Warning' smart constructor.
data TargetInstancesScopedList_Warning = TargetInstancesScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe TargetInstancesScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [TargetInstancesScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetInstancesScopedList_Warning' with the minimum fields required to make a request.
newTargetInstancesScopedList_Warning ::
  TargetInstancesScopedList_Warning
newTargetInstancesScopedList_Warning =
  TargetInstancesScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    TargetInstancesScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "TargetInstancesScopedList_Warning"
      ( \o ->
          TargetInstancesScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    TargetInstancesScopedList_Warning
  where
  toJSON TargetInstancesScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newTargetInstancesScopedList_Warning_DataItem' smart constructor.
data TargetInstancesScopedList_Warning_DataItem = TargetInstancesScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetInstancesScopedList_Warning_DataItem' with the minimum fields required to make a request.
newTargetInstancesScopedList_Warning_DataItem ::
  TargetInstancesScopedList_Warning_DataItem
newTargetInstancesScopedList_Warning_DataItem =
  TargetInstancesScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    TargetInstancesScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "TargetInstancesScopedList_Warning_DataItem"
      ( \o ->
          TargetInstancesScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    TargetInstancesScopedList_Warning_DataItem
  where
  toJSON TargetInstancesScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Represents a Target Pool resource. Target pools are used for network TCP\/UDP load balancing. A target pool references member instances, an associated legacy HttpHealthCheck resource, and, optionally, a backup target pool. For more information, read Using target pools.
--
-- /See:/ 'newTargetPool' smart constructor.
data TargetPool = TargetPool
  { -- | The server-defined URL for the resource. This field is applicable only when the containing target pool is serving a forwarding rule as the primary pool, and its failoverRatio field is properly set to a value between [0, 1]. backupPool and failoverRatio together define the fallback behavior of the primary target pool: if the ratio of the healthy instances in the primary pool is at or below failoverRatio, traffic arriving at the load-balanced IP will be directed to the backup pool. In case where failoverRatio and backupPool are not set, or all the instances in the backup pool are unhealthy, the traffic will be directed back to the primary pool in the \"force\" mode, where traffic will be spread to the healthy instances with the best effort, or to all instances when no instance is healthy.
    backupPool :: (Core.Maybe Core.Text),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | This field is applicable only when the containing target pool is serving a forwarding rule as the primary pool (i.e., not as a backup pool to some other target pool). The value of the field must be in [0, 1]. If set, backupPool must also be set. They together define the fallback behavior of the primary target pool: if the ratio of the healthy instances in the primary pool is at or below this number, traffic arriving at the load-balanced IP will be directed to the backup pool. In case where failoverRatio is not set or all the instances in the backup pool are unhealthy, the traffic will be directed back to the primary pool in the \"force\" mode, where traffic will be spread to the healthy instances with the best effort, or to all instances when no instance is healthy.
    failoverRatio :: (Core.Maybe Core.Double),
    -- | The URL of the HttpHealthCheck resource. A member instance in this pool is considered healthy if and only if the health checks pass. Only legacy HttpHealthChecks are supported. Only one health check may be specified.
    healthChecks :: (Core.Maybe [Core.Text]),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | A list of resource URLs to the virtual machine instances serving this pool. They must live in zones contained in the same region as this pool.
    instances :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Type of the resource. Always compute#targetPool for target pools.
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] URL of the region where the target pool resides.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | Session affinity option, must be one of the following values: NONE: Connections from the same client IP may go to any instance in the pool. CLIENT/IP: Connections from the same client IP will go to the same instance in the pool while that instance remains healthy. CLIENT/IP_PROTO: Connections from the same client IP with the same IP protocol will go to the same instance in the pool while that instance remains healthy.
    sessionAffinity :: (Core.Maybe TargetPool_SessionAffinity)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetPool' with the minimum fields required to make a request.
newTargetPool ::
  TargetPool
newTargetPool =
  TargetPool
    { backupPool = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      failoverRatio = Core.Nothing,
      healthChecks = Core.Nothing,
      id = Core.Nothing,
      instances = Core.Nothing,
      kind = "compute#targetPool",
      name = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      sessionAffinity = Core.Nothing
    }

instance Core.FromJSON TargetPool where
  parseJSON =
    Core.withObject
      "TargetPool"
      ( \o ->
          TargetPool
            Core.<$> (o Core..:? "backupPool")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "failoverRatio")
            Core.<*> (o Core..:? "healthChecks")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "instances")
            Core.<*> (o Core..:? "kind" Core..!= "compute#targetPool")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "sessionAffinity")
      )

instance Core.ToJSON TargetPool where
  toJSON TargetPool {..} =
    Core.object
      ( Core.catMaybes
          [ ("backupPool" Core..=) Core.<$> backupPool,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("failoverRatio" Core..=) Core.<$> failoverRatio,
            ("healthChecks" Core..=) Core.<$> healthChecks,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("instances" Core..=) Core.<$> instances,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("sessionAffinity" Core..=)
              Core.<$> sessionAffinity
          ]
      )

--
-- /See:/ 'newTargetPoolAggregatedList' smart constructor.
data TargetPoolAggregatedList = TargetPoolAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of TargetPool resources.
    items :: (Core.Maybe TargetPoolAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#targetPoolAggregatedList for aggregated lists of target pools.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe TargetPoolAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetPoolAggregatedList' with the minimum fields required to make a request.
newTargetPoolAggregatedList ::
  TargetPoolAggregatedList
newTargetPoolAggregatedList =
  TargetPoolAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#targetPoolAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON TargetPoolAggregatedList where
  parseJSON =
    Core.withObject
      "TargetPoolAggregatedList"
      ( \o ->
          TargetPoolAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#targetPoolAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON TargetPoolAggregatedList where
  toJSON TargetPoolAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of TargetPool resources.
--
-- /See:/ 'newTargetPoolAggregatedList_Items' smart constructor.
newtype TargetPoolAggregatedList_Items = TargetPoolAggregatedList_Items
  { -- | Name of the scope containing this set of target pools.
    additional :: (Core.HashMap Core.Text TargetPoolsScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetPoolAggregatedList_Items' with the minimum fields required to make a request.
newTargetPoolAggregatedList_Items ::
  -- |  Name of the scope containing this set of target pools. See 'additional'.
  Core.HashMap Core.Text TargetPoolsScopedList ->
  TargetPoolAggregatedList_Items
newTargetPoolAggregatedList_Items additional =
  TargetPoolAggregatedList_Items {additional = additional}

instance Core.FromJSON TargetPoolAggregatedList_Items where
  parseJSON =
    Core.withObject
      "TargetPoolAggregatedList_Items"
      ( \o ->
          TargetPoolAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON TargetPoolAggregatedList_Items where
  toJSON TargetPoolAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newTargetPoolAggregatedList_Warning' smart constructor.
data TargetPoolAggregatedList_Warning = TargetPoolAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe TargetPoolAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [TargetPoolAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetPoolAggregatedList_Warning' with the minimum fields required to make a request.
newTargetPoolAggregatedList_Warning ::
  TargetPoolAggregatedList_Warning
newTargetPoolAggregatedList_Warning =
  TargetPoolAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    TargetPoolAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "TargetPoolAggregatedList_Warning"
      ( \o ->
          TargetPoolAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON TargetPoolAggregatedList_Warning where
  toJSON TargetPoolAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newTargetPoolAggregatedList_Warning_DataItem' smart constructor.
data TargetPoolAggregatedList_Warning_DataItem = TargetPoolAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetPoolAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newTargetPoolAggregatedList_Warning_DataItem ::
  TargetPoolAggregatedList_Warning_DataItem
newTargetPoolAggregatedList_Warning_DataItem =
  TargetPoolAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    TargetPoolAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "TargetPoolAggregatedList_Warning_DataItem"
      ( \o ->
          TargetPoolAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    TargetPoolAggregatedList_Warning_DataItem
  where
  toJSON TargetPoolAggregatedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newTargetPoolInstanceHealth' smart constructor.
data TargetPoolInstanceHealth = TargetPoolInstanceHealth
  { -- |
    healthStatus :: (Core.Maybe [HealthStatus]),
    -- | [Output Only] Type of resource. Always compute#targetPoolInstanceHealth when checking the health of an instance.
    kind :: Core.Text
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetPoolInstanceHealth' with the minimum fields required to make a request.
newTargetPoolInstanceHealth ::
  TargetPoolInstanceHealth
newTargetPoolInstanceHealth =
  TargetPoolInstanceHealth
    { healthStatus = Core.Nothing,
      kind = "compute#targetPoolInstanceHealth"
    }

instance Core.FromJSON TargetPoolInstanceHealth where
  parseJSON =
    Core.withObject
      "TargetPoolInstanceHealth"
      ( \o ->
          TargetPoolInstanceHealth
            Core.<$> (o Core..:? "healthStatus")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#targetPoolInstanceHealth"
                     )
      )

instance Core.ToJSON TargetPoolInstanceHealth where
  toJSON TargetPoolInstanceHealth {..} =
    Core.object
      ( Core.catMaybes
          [ ("healthStatus" Core..=) Core.<$> healthStatus,
            Core.Just ("kind" Core..= kind)
          ]
      )

-- | Contains a list of TargetPool resources.
--
-- /See:/ 'newTargetPoolList' smart constructor.
data TargetPoolList = TargetPoolList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of TargetPool resources.
    items :: (Core.Maybe [TargetPool]),
    -- | [Output Only] Type of resource. Always compute#targetPoolList for lists of target pools.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe TargetPoolList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetPoolList' with the minimum fields required to make a request.
newTargetPoolList ::
  TargetPoolList
newTargetPoolList =
  TargetPoolList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#targetPoolList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON TargetPoolList where
  parseJSON =
    Core.withObject
      "TargetPoolList"
      ( \o ->
          TargetPoolList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#targetPoolList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON TargetPoolList where
  toJSON TargetPoolList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newTargetPoolList_Warning' smart constructor.
data TargetPoolList_Warning = TargetPoolList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe TargetPoolList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [TargetPoolList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetPoolList_Warning' with the minimum fields required to make a request.
newTargetPoolList_Warning ::
  TargetPoolList_Warning
newTargetPoolList_Warning =
  TargetPoolList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON TargetPoolList_Warning where
  parseJSON =
    Core.withObject
      "TargetPoolList_Warning"
      ( \o ->
          TargetPoolList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON TargetPoolList_Warning where
  toJSON TargetPoolList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newTargetPoolList_Warning_DataItem' smart constructor.
data TargetPoolList_Warning_DataItem = TargetPoolList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetPoolList_Warning_DataItem' with the minimum fields required to make a request.
newTargetPoolList_Warning_DataItem ::
  TargetPoolList_Warning_DataItem
newTargetPoolList_Warning_DataItem =
  TargetPoolList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    TargetPoolList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "TargetPoolList_Warning_DataItem"
      ( \o ->
          TargetPoolList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON TargetPoolList_Warning_DataItem where
  toJSON TargetPoolList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newTargetPoolsAddHealthCheckRequest' smart constructor.
newtype TargetPoolsAddHealthCheckRequest = TargetPoolsAddHealthCheckRequest
  { -- | The HttpHealthCheck to add to the target pool.
    healthChecks :: (Core.Maybe [HealthCheckReference])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetPoolsAddHealthCheckRequest' with the minimum fields required to make a request.
newTargetPoolsAddHealthCheckRequest ::
  TargetPoolsAddHealthCheckRequest
newTargetPoolsAddHealthCheckRequest =
  TargetPoolsAddHealthCheckRequest {healthChecks = Core.Nothing}

instance
  Core.FromJSON
    TargetPoolsAddHealthCheckRequest
  where
  parseJSON =
    Core.withObject
      "TargetPoolsAddHealthCheckRequest"
      ( \o ->
          TargetPoolsAddHealthCheckRequest
            Core.<$> (o Core..:? "healthChecks")
      )

instance Core.ToJSON TargetPoolsAddHealthCheckRequest where
  toJSON TargetPoolsAddHealthCheckRequest {..} =
    Core.object
      ( Core.catMaybes
          [("healthChecks" Core..=) Core.<$> healthChecks]
      )

--
-- /See:/ 'newTargetPoolsAddInstanceRequest' smart constructor.
newtype TargetPoolsAddInstanceRequest = TargetPoolsAddInstanceRequest
  { -- | A full or partial URL to an instance to add to this target pool. This can be a full or partial URL. For example, the following are valid URLs: - https:\/\/www.googleapis.com\/compute\/v1\/projects\/project-id\/zones\/zone \/instances\/instance-name - projects\/project-id\/zones\/zone\/instances\/instance-name - zones\/zone\/instances\/instance-name
    instances :: (Core.Maybe [InstanceReference])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetPoolsAddInstanceRequest' with the minimum fields required to make a request.
newTargetPoolsAddInstanceRequest ::
  TargetPoolsAddInstanceRequest
newTargetPoolsAddInstanceRequest =
  TargetPoolsAddInstanceRequest {instances = Core.Nothing}

instance Core.FromJSON TargetPoolsAddInstanceRequest where
  parseJSON =
    Core.withObject
      "TargetPoolsAddInstanceRequest"
      ( \o ->
          TargetPoolsAddInstanceRequest
            Core.<$> (o Core..:? "instances")
      )

instance Core.ToJSON TargetPoolsAddInstanceRequest where
  toJSON TargetPoolsAddInstanceRequest {..} =
    Core.object
      ( Core.catMaybes
          [("instances" Core..=) Core.<$> instances]
      )

--
-- /See:/ 'newTargetPoolsRemoveHealthCheckRequest' smart constructor.
newtype TargetPoolsRemoveHealthCheckRequest = TargetPoolsRemoveHealthCheckRequest
  { -- | Health check URL to be removed. This can be a full or valid partial URL. For example, the following are valid URLs: - https:\/\/www.googleapis.com\/compute\/beta\/projects\/project \/global\/httpHealthChecks\/health-check - projects\/project\/global\/httpHealthChecks\/health-check - global\/httpHealthChecks\/health-check
    healthChecks :: (Core.Maybe [HealthCheckReference])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetPoolsRemoveHealthCheckRequest' with the minimum fields required to make a request.
newTargetPoolsRemoveHealthCheckRequest ::
  TargetPoolsRemoveHealthCheckRequest
newTargetPoolsRemoveHealthCheckRequest =
  TargetPoolsRemoveHealthCheckRequest {healthChecks = Core.Nothing}

instance
  Core.FromJSON
    TargetPoolsRemoveHealthCheckRequest
  where
  parseJSON =
    Core.withObject
      "TargetPoolsRemoveHealthCheckRequest"
      ( \o ->
          TargetPoolsRemoveHealthCheckRequest
            Core.<$> (o Core..:? "healthChecks")
      )

instance
  Core.ToJSON
    TargetPoolsRemoveHealthCheckRequest
  where
  toJSON TargetPoolsRemoveHealthCheckRequest {..} =
    Core.object
      ( Core.catMaybes
          [("healthChecks" Core..=) Core.<$> healthChecks]
      )

--
-- /See:/ 'newTargetPoolsRemoveInstanceRequest' smart constructor.
newtype TargetPoolsRemoveInstanceRequest = TargetPoolsRemoveInstanceRequest
  { -- | URLs of the instances to be removed from target pool.
    instances :: (Core.Maybe [InstanceReference])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetPoolsRemoveInstanceRequest' with the minimum fields required to make a request.
newTargetPoolsRemoveInstanceRequest ::
  TargetPoolsRemoveInstanceRequest
newTargetPoolsRemoveInstanceRequest =
  TargetPoolsRemoveInstanceRequest {instances = Core.Nothing}

instance
  Core.FromJSON
    TargetPoolsRemoveInstanceRequest
  where
  parseJSON =
    Core.withObject
      "TargetPoolsRemoveInstanceRequest"
      ( \o ->
          TargetPoolsRemoveInstanceRequest
            Core.<$> (o Core..:? "instances")
      )

instance Core.ToJSON TargetPoolsRemoveInstanceRequest where
  toJSON TargetPoolsRemoveInstanceRequest {..} =
    Core.object
      ( Core.catMaybes
          [("instances" Core..=) Core.<$> instances]
      )

--
-- /See:/ 'newTargetPoolsScopedList' smart constructor.
data TargetPoolsScopedList = TargetPoolsScopedList
  { -- | A list of target pools contained in this scope.
    targetPools :: (Core.Maybe [TargetPool]),
    -- | Informational warning which replaces the list of addresses when the list is empty.
    warning :: (Core.Maybe TargetPoolsScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetPoolsScopedList' with the minimum fields required to make a request.
newTargetPoolsScopedList ::
  TargetPoolsScopedList
newTargetPoolsScopedList =
  TargetPoolsScopedList {targetPools = Core.Nothing, warning = Core.Nothing}

instance Core.FromJSON TargetPoolsScopedList where
  parseJSON =
    Core.withObject
      "TargetPoolsScopedList"
      ( \o ->
          TargetPoolsScopedList
            Core.<$> (o Core..:? "targetPools")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON TargetPoolsScopedList where
  toJSON TargetPoolsScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("targetPools" Core..=) Core.<$> targetPools,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of addresses when the list is empty.
--
-- /See:/ 'newTargetPoolsScopedList_Warning' smart constructor.
data TargetPoolsScopedList_Warning = TargetPoolsScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe TargetPoolsScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [TargetPoolsScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetPoolsScopedList_Warning' with the minimum fields required to make a request.
newTargetPoolsScopedList_Warning ::
  TargetPoolsScopedList_Warning
newTargetPoolsScopedList_Warning =
  TargetPoolsScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON TargetPoolsScopedList_Warning where
  parseJSON =
    Core.withObject
      "TargetPoolsScopedList_Warning"
      ( \o ->
          TargetPoolsScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON TargetPoolsScopedList_Warning where
  toJSON TargetPoolsScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newTargetPoolsScopedList_Warning_DataItem' smart constructor.
data TargetPoolsScopedList_Warning_DataItem = TargetPoolsScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetPoolsScopedList_Warning_DataItem' with the minimum fields required to make a request.
newTargetPoolsScopedList_Warning_DataItem ::
  TargetPoolsScopedList_Warning_DataItem
newTargetPoolsScopedList_Warning_DataItem =
  TargetPoolsScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    TargetPoolsScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "TargetPoolsScopedList_Warning_DataItem"
      ( \o ->
          TargetPoolsScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    TargetPoolsScopedList_Warning_DataItem
  where
  toJSON TargetPoolsScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newTargetReference' smart constructor.
newtype TargetReference = TargetReference
  { -- |
    target :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetReference' with the minimum fields required to make a request.
newTargetReference ::
  TargetReference
newTargetReference = TargetReference {target = Core.Nothing}

instance Core.FromJSON TargetReference where
  parseJSON =
    Core.withObject
      "TargetReference"
      ( \o ->
          TargetReference Core.<$> (o Core..:? "target")
      )

instance Core.ToJSON TargetReference where
  toJSON TargetReference {..} =
    Core.object
      (Core.catMaybes [("target" Core..=) Core.<$> target])

--
-- /See:/ 'newTargetSslProxiesSetBackendServiceRequest' smart constructor.
newtype TargetSslProxiesSetBackendServiceRequest = TargetSslProxiesSetBackendServiceRequest
  { -- | The URL of the new BackendService resource for the targetSslProxy.
    service :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetSslProxiesSetBackendServiceRequest' with the minimum fields required to make a request.
newTargetSslProxiesSetBackendServiceRequest ::
  TargetSslProxiesSetBackendServiceRequest
newTargetSslProxiesSetBackendServiceRequest =
  TargetSslProxiesSetBackendServiceRequest {service = Core.Nothing}

instance
  Core.FromJSON
    TargetSslProxiesSetBackendServiceRequest
  where
  parseJSON =
    Core.withObject
      "TargetSslProxiesSetBackendServiceRequest"
      ( \o ->
          TargetSslProxiesSetBackendServiceRequest
            Core.<$> (o Core..:? "service")
      )

instance
  Core.ToJSON
    TargetSslProxiesSetBackendServiceRequest
  where
  toJSON TargetSslProxiesSetBackendServiceRequest {..} =
    Core.object
      ( Core.catMaybes
          [("service" Core..=) Core.<$> service]
      )

--
-- /See:/ 'newTargetSslProxiesSetCertificateMapRequest' smart constructor.
newtype TargetSslProxiesSetCertificateMapRequest = TargetSslProxiesSetCertificateMapRequest
  { -- | URL of the Certificate Map to associate with this TargetSslProxy.
    certificateMap :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetSslProxiesSetCertificateMapRequest' with the minimum fields required to make a request.
newTargetSslProxiesSetCertificateMapRequest ::
  TargetSslProxiesSetCertificateMapRequest
newTargetSslProxiesSetCertificateMapRequest =
  TargetSslProxiesSetCertificateMapRequest {certificateMap = Core.Nothing}

instance
  Core.FromJSON
    TargetSslProxiesSetCertificateMapRequest
  where
  parseJSON =
    Core.withObject
      "TargetSslProxiesSetCertificateMapRequest"
      ( \o ->
          TargetSslProxiesSetCertificateMapRequest
            Core.<$> (o Core..:? "certificateMap")
      )

instance
  Core.ToJSON
    TargetSslProxiesSetCertificateMapRequest
  where
  toJSON TargetSslProxiesSetCertificateMapRequest {..} =
    Core.object
      ( Core.catMaybes
          [("certificateMap" Core..=) Core.<$> certificateMap]
      )

--
-- /See:/ 'newTargetSslProxiesSetProxyHeaderRequest' smart constructor.
newtype TargetSslProxiesSetProxyHeaderRequest = TargetSslProxiesSetProxyHeaderRequest
  { -- | The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed.
    proxyHeader :: (Core.Maybe TargetSslProxiesSetProxyHeaderRequest_ProxyHeader)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetSslProxiesSetProxyHeaderRequest' with the minimum fields required to make a request.
newTargetSslProxiesSetProxyHeaderRequest ::
  TargetSslProxiesSetProxyHeaderRequest
newTargetSslProxiesSetProxyHeaderRequest =
  TargetSslProxiesSetProxyHeaderRequest {proxyHeader = Core.Nothing}

instance
  Core.FromJSON
    TargetSslProxiesSetProxyHeaderRequest
  where
  parseJSON =
    Core.withObject
      "TargetSslProxiesSetProxyHeaderRequest"
      ( \o ->
          TargetSslProxiesSetProxyHeaderRequest
            Core.<$> (o Core..:? "proxyHeader")
      )

instance
  Core.ToJSON
    TargetSslProxiesSetProxyHeaderRequest
  where
  toJSON TargetSslProxiesSetProxyHeaderRequest {..} =
    Core.object
      ( Core.catMaybes
          [("proxyHeader" Core..=) Core.<$> proxyHeader]
      )

--
-- /See:/ 'newTargetSslProxiesSetSslCertificatesRequest' smart constructor.
newtype TargetSslProxiesSetSslCertificatesRequest = TargetSslProxiesSetSslCertificatesRequest
  { -- | New set of URLs to SslCertificate resources to associate with this TargetSslProxy. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates.
    sslCertificates :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetSslProxiesSetSslCertificatesRequest' with the minimum fields required to make a request.
newTargetSslProxiesSetSslCertificatesRequest ::
  TargetSslProxiesSetSslCertificatesRequest
newTargetSslProxiesSetSslCertificatesRequest =
  TargetSslProxiesSetSslCertificatesRequest {sslCertificates = Core.Nothing}

instance
  Core.FromJSON
    TargetSslProxiesSetSslCertificatesRequest
  where
  parseJSON =
    Core.withObject
      "TargetSslProxiesSetSslCertificatesRequest"
      ( \o ->
          TargetSslProxiesSetSslCertificatesRequest
            Core.<$> (o Core..:? "sslCertificates")
      )

instance
  Core.ToJSON
    TargetSslProxiesSetSslCertificatesRequest
  where
  toJSON TargetSslProxiesSetSslCertificatesRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("sslCertificates" Core..=)
              Core.<$> sslCertificates
          ]
      )

-- | Represents a Target SSL Proxy resource. A target SSL proxy is a component of a SSL Proxy load balancer. Global forwarding rules reference a target SSL proxy, and the target proxy then references an external backend service. For more information, read Using Target Proxies.
--
-- /See:/ 'newTargetSslProxy' smart constructor.
data TargetSslProxy = TargetSslProxy
  { -- | URL of a certificate map that identifies a certificate map associated with the given target proxy. This field can only be set for global target proxies. If set, sslCertificates will be ignored.
    certificateMap :: (Core.Maybe Core.Text),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#targetSslProxy for target SSL proxies.
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    proxyHeader :: (Core.Maybe TargetSslProxy_ProxyHeader),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | URL to the BackendService resource.
    service :: (Core.Maybe Core.Text),
    -- | URLs to SslCertificate resources that are used to authenticate connections to Backends. At least one SSL certificate must be specified. Currently, you may specify up to 15 SSL certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL/SELF/MANAGED.
    sslCertificates :: (Core.Maybe [Core.Text]),
    -- | URL of SslPolicy resource that will be associated with the TargetSslProxy resource. If not set, the TargetSslProxy resource will not have any SSL policy configured.
    sslPolicy :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetSslProxy' with the minimum fields required to make a request.
newTargetSslProxy ::
  TargetSslProxy
newTargetSslProxy =
  TargetSslProxy
    { certificateMap = Core.Nothing,
      creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#targetSslProxy",
      name = Core.Nothing,
      proxyHeader = Core.Nothing,
      selfLink = Core.Nothing,
      service = Core.Nothing,
      sslCertificates = Core.Nothing,
      sslPolicy = Core.Nothing
    }

instance Core.FromJSON TargetSslProxy where
  parseJSON =
    Core.withObject
      "TargetSslProxy"
      ( \o ->
          TargetSslProxy
            Core.<$> (o Core..:? "certificateMap")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#targetSslProxy")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "proxyHeader")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "service")
            Core.<*> (o Core..:? "sslCertificates")
            Core.<*> (o Core..:? "sslPolicy")
      )

instance Core.ToJSON TargetSslProxy where
  toJSON TargetSslProxy {..} =
    Core.object
      ( Core.catMaybes
          [ ("certificateMap" Core..=) Core.<$> certificateMap,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("proxyHeader" Core..=) Core.<$> proxyHeader,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("service" Core..=) Core.<$> service,
            ("sslCertificates" Core..=) Core.<$> sslCertificates,
            ("sslPolicy" Core..=) Core.<$> sslPolicy
          ]
      )

-- | Contains a list of TargetSslProxy resources.
--
-- /See:/ 'newTargetSslProxyList' smart constructor.
data TargetSslProxyList = TargetSslProxyList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of TargetSslProxy resources.
    items :: (Core.Maybe [TargetSslProxy]),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe TargetSslProxyList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetSslProxyList' with the minimum fields required to make a request.
newTargetSslProxyList ::
  TargetSslProxyList
newTargetSslProxyList =
  TargetSslProxyList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#targetSslProxyList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON TargetSslProxyList where
  parseJSON =
    Core.withObject
      "TargetSslProxyList"
      ( \o ->
          TargetSslProxyList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#targetSslProxyList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON TargetSslProxyList where
  toJSON TargetSslProxyList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newTargetSslProxyList_Warning' smart constructor.
data TargetSslProxyList_Warning = TargetSslProxyList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe TargetSslProxyList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [TargetSslProxyList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetSslProxyList_Warning' with the minimum fields required to make a request.
newTargetSslProxyList_Warning ::
  TargetSslProxyList_Warning
newTargetSslProxyList_Warning =
  TargetSslProxyList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON TargetSslProxyList_Warning where
  parseJSON =
    Core.withObject
      "TargetSslProxyList_Warning"
      ( \o ->
          TargetSslProxyList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON TargetSslProxyList_Warning where
  toJSON TargetSslProxyList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newTargetSslProxyList_Warning_DataItem' smart constructor.
data TargetSslProxyList_Warning_DataItem = TargetSslProxyList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetSslProxyList_Warning_DataItem' with the minimum fields required to make a request.
newTargetSslProxyList_Warning_DataItem ::
  TargetSslProxyList_Warning_DataItem
newTargetSslProxyList_Warning_DataItem =
  TargetSslProxyList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    TargetSslProxyList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "TargetSslProxyList_Warning_DataItem"
      ( \o ->
          TargetSslProxyList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    TargetSslProxyList_Warning_DataItem
  where
  toJSON TargetSslProxyList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newTargetTcpProxiesScopedList' smart constructor.
data TargetTcpProxiesScopedList = TargetTcpProxiesScopedList
  { -- | A list of TargetTcpProxies contained in this scope.
    targetTcpProxies :: (Core.Maybe [TargetTcpProxy]),
    -- | Informational warning which replaces the list of backend services when the list is empty.
    warning :: (Core.Maybe TargetTcpProxiesScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetTcpProxiesScopedList' with the minimum fields required to make a request.
newTargetTcpProxiesScopedList ::
  TargetTcpProxiesScopedList
newTargetTcpProxiesScopedList =
  TargetTcpProxiesScopedList
    { targetTcpProxies = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON TargetTcpProxiesScopedList where
  parseJSON =
    Core.withObject
      "TargetTcpProxiesScopedList"
      ( \o ->
          TargetTcpProxiesScopedList
            Core.<$> (o Core..:? "targetTcpProxies")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON TargetTcpProxiesScopedList where
  toJSON TargetTcpProxiesScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("targetTcpProxies" Core..=)
              Core.<$> targetTcpProxies,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of backend services when the list is empty.
--
-- /See:/ 'newTargetTcpProxiesScopedList_Warning' smart constructor.
data TargetTcpProxiesScopedList_Warning = TargetTcpProxiesScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe TargetTcpProxiesScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [TargetTcpProxiesScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetTcpProxiesScopedList_Warning' with the minimum fields required to make a request.
newTargetTcpProxiesScopedList_Warning ::
  TargetTcpProxiesScopedList_Warning
newTargetTcpProxiesScopedList_Warning =
  TargetTcpProxiesScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    TargetTcpProxiesScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "TargetTcpProxiesScopedList_Warning"
      ( \o ->
          TargetTcpProxiesScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    TargetTcpProxiesScopedList_Warning
  where
  toJSON TargetTcpProxiesScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newTargetTcpProxiesScopedList_Warning_DataItem' smart constructor.
data TargetTcpProxiesScopedList_Warning_DataItem = TargetTcpProxiesScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetTcpProxiesScopedList_Warning_DataItem' with the minimum fields required to make a request.
newTargetTcpProxiesScopedList_Warning_DataItem ::
  TargetTcpProxiesScopedList_Warning_DataItem
newTargetTcpProxiesScopedList_Warning_DataItem =
  TargetTcpProxiesScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    TargetTcpProxiesScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "TargetTcpProxiesScopedList_Warning_DataItem"
      ( \o ->
          TargetTcpProxiesScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    TargetTcpProxiesScopedList_Warning_DataItem
  where
  toJSON
    TargetTcpProxiesScopedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

--
-- /See:/ 'newTargetTcpProxiesSetBackendServiceRequest' smart constructor.
newtype TargetTcpProxiesSetBackendServiceRequest = TargetTcpProxiesSetBackendServiceRequest
  { -- | The URL of the new BackendService resource for the targetTcpProxy.
    service :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetTcpProxiesSetBackendServiceRequest' with the minimum fields required to make a request.
newTargetTcpProxiesSetBackendServiceRequest ::
  TargetTcpProxiesSetBackendServiceRequest
newTargetTcpProxiesSetBackendServiceRequest =
  TargetTcpProxiesSetBackendServiceRequest {service = Core.Nothing}

instance
  Core.FromJSON
    TargetTcpProxiesSetBackendServiceRequest
  where
  parseJSON =
    Core.withObject
      "TargetTcpProxiesSetBackendServiceRequest"
      ( \o ->
          TargetTcpProxiesSetBackendServiceRequest
            Core.<$> (o Core..:? "service")
      )

instance
  Core.ToJSON
    TargetTcpProxiesSetBackendServiceRequest
  where
  toJSON TargetTcpProxiesSetBackendServiceRequest {..} =
    Core.object
      ( Core.catMaybes
          [("service" Core..=) Core.<$> service]
      )

--
-- /See:/ 'newTargetTcpProxiesSetProxyHeaderRequest' smart constructor.
newtype TargetTcpProxiesSetProxyHeaderRequest = TargetTcpProxiesSetProxyHeaderRequest
  { -- | The new type of proxy header to append before sending data to the backend. NONE or PROXY_V1 are allowed.
    proxyHeader :: (Core.Maybe TargetTcpProxiesSetProxyHeaderRequest_ProxyHeader)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetTcpProxiesSetProxyHeaderRequest' with the minimum fields required to make a request.
newTargetTcpProxiesSetProxyHeaderRequest ::
  TargetTcpProxiesSetProxyHeaderRequest
newTargetTcpProxiesSetProxyHeaderRequest =
  TargetTcpProxiesSetProxyHeaderRequest {proxyHeader = Core.Nothing}

instance
  Core.FromJSON
    TargetTcpProxiesSetProxyHeaderRequest
  where
  parseJSON =
    Core.withObject
      "TargetTcpProxiesSetProxyHeaderRequest"
      ( \o ->
          TargetTcpProxiesSetProxyHeaderRequest
            Core.<$> (o Core..:? "proxyHeader")
      )

instance
  Core.ToJSON
    TargetTcpProxiesSetProxyHeaderRequest
  where
  toJSON TargetTcpProxiesSetProxyHeaderRequest {..} =
    Core.object
      ( Core.catMaybes
          [("proxyHeader" Core..=) Core.<$> proxyHeader]
      )

-- | Represents a Target TCP Proxy resource. A target TCP proxy is a component of a TCP Proxy load balancer. Global forwarding rules reference target TCP proxy, and the target proxy then references an external backend service. For more information, read TCP Proxy Load Balancing overview.
--
-- /See:/ 'newTargetTcpProxy' smart constructor.
data TargetTcpProxy = TargetTcpProxy
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#targetTcpProxy for target TCP proxies.
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | This field only applies when the forwarding rule that references this target proxy has a loadBalancingScheme set to INTERNAL/SELF/MANAGED. When this field is set to true, Envoy proxies set up inbound traffic interception and bind to the IP address and port specified in the forwarding rule. This is generally useful when using Traffic Director to configure Envoy as a gateway or middle proxy (in other words, not a sidecar proxy). The Envoy proxy listens for inbound requests and handles requests when it receives them. The default is false.
    proxyBind :: (Core.Maybe Core.Bool),
    -- | Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.
    proxyHeader :: (Core.Maybe TargetTcpProxy_ProxyHeader),
    -- | [Output Only] URL of the region where the regional TCP proxy resides. This field is not applicable to global TCP proxy.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | URL to the BackendService resource.
    service :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetTcpProxy' with the minimum fields required to make a request.
newTargetTcpProxy ::
  TargetTcpProxy
newTargetTcpProxy =
  TargetTcpProxy
    { creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#targetTcpProxy",
      name = Core.Nothing,
      proxyBind = Core.Nothing,
      proxyHeader = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      service = Core.Nothing
    }

instance Core.FromJSON TargetTcpProxy where
  parseJSON =
    Core.withObject
      "TargetTcpProxy"
      ( \o ->
          TargetTcpProxy
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#targetTcpProxy")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "proxyBind")
            Core.<*> (o Core..:? "proxyHeader")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "service")
      )

instance Core.ToJSON TargetTcpProxy where
  toJSON TargetTcpProxy {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("proxyBind" Core..=) Core.<$> proxyBind,
            ("proxyHeader" Core..=) Core.<$> proxyHeader,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("service" Core..=) Core.<$> service
          ]
      )

--
-- /See:/ 'newTargetTcpProxyAggregatedList' smart constructor.
data TargetTcpProxyAggregatedList = TargetTcpProxyAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of TargetTcpProxiesScopedList resources.
    items :: (Core.Maybe TargetTcpProxyAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#targetTcpProxyAggregatedList for lists of Target TCP Proxies.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe TargetTcpProxyAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetTcpProxyAggregatedList' with the minimum fields required to make a request.
newTargetTcpProxyAggregatedList ::
  TargetTcpProxyAggregatedList
newTargetTcpProxyAggregatedList =
  TargetTcpProxyAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#targetTcpProxyAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON TargetTcpProxyAggregatedList where
  parseJSON =
    Core.withObject
      "TargetTcpProxyAggregatedList"
      ( \o ->
          TargetTcpProxyAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#targetTcpProxyAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON TargetTcpProxyAggregatedList where
  toJSON TargetTcpProxyAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of TargetTcpProxiesScopedList resources.
--
-- /See:/ 'newTargetTcpProxyAggregatedList_Items' smart constructor.
newtype TargetTcpProxyAggregatedList_Items = TargetTcpProxyAggregatedList_Items
  { -- | Name of the scope containing this set of TargetTcpProxies.
    additional :: (Core.HashMap Core.Text TargetTcpProxiesScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetTcpProxyAggregatedList_Items' with the minimum fields required to make a request.
newTargetTcpProxyAggregatedList_Items ::
  -- |  Name of the scope containing this set of TargetTcpProxies. See 'additional'.
  Core.HashMap Core.Text TargetTcpProxiesScopedList ->
  TargetTcpProxyAggregatedList_Items
newTargetTcpProxyAggregatedList_Items additional =
  TargetTcpProxyAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    TargetTcpProxyAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "TargetTcpProxyAggregatedList_Items"
      ( \o ->
          TargetTcpProxyAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    TargetTcpProxyAggregatedList_Items
  where
  toJSON TargetTcpProxyAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newTargetTcpProxyAggregatedList_Warning' smart constructor.
data TargetTcpProxyAggregatedList_Warning = TargetTcpProxyAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe TargetTcpProxyAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [TargetTcpProxyAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetTcpProxyAggregatedList_Warning' with the minimum fields required to make a request.
newTargetTcpProxyAggregatedList_Warning ::
  TargetTcpProxyAggregatedList_Warning
newTargetTcpProxyAggregatedList_Warning =
  TargetTcpProxyAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    TargetTcpProxyAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "TargetTcpProxyAggregatedList_Warning"
      ( \o ->
          TargetTcpProxyAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    TargetTcpProxyAggregatedList_Warning
  where
  toJSON TargetTcpProxyAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newTargetTcpProxyAggregatedList_Warning_DataItem' smart constructor.
data TargetTcpProxyAggregatedList_Warning_DataItem = TargetTcpProxyAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetTcpProxyAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newTargetTcpProxyAggregatedList_Warning_DataItem ::
  TargetTcpProxyAggregatedList_Warning_DataItem
newTargetTcpProxyAggregatedList_Warning_DataItem =
  TargetTcpProxyAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    TargetTcpProxyAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "TargetTcpProxyAggregatedList_Warning_DataItem"
      ( \o ->
          TargetTcpProxyAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    TargetTcpProxyAggregatedList_Warning_DataItem
  where
  toJSON
    TargetTcpProxyAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | Contains a list of TargetTcpProxy resources.
--
-- /See:/ 'newTargetTcpProxyList' smart constructor.
data TargetTcpProxyList = TargetTcpProxyList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of TargetTcpProxy resources.
    items :: (Core.Maybe [TargetTcpProxy]),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe TargetTcpProxyList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetTcpProxyList' with the minimum fields required to make a request.
newTargetTcpProxyList ::
  TargetTcpProxyList
newTargetTcpProxyList =
  TargetTcpProxyList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#targetTcpProxyList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON TargetTcpProxyList where
  parseJSON =
    Core.withObject
      "TargetTcpProxyList"
      ( \o ->
          TargetTcpProxyList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#targetTcpProxyList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON TargetTcpProxyList where
  toJSON TargetTcpProxyList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newTargetTcpProxyList_Warning' smart constructor.
data TargetTcpProxyList_Warning = TargetTcpProxyList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe TargetTcpProxyList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [TargetTcpProxyList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetTcpProxyList_Warning' with the minimum fields required to make a request.
newTargetTcpProxyList_Warning ::
  TargetTcpProxyList_Warning
newTargetTcpProxyList_Warning =
  TargetTcpProxyList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON TargetTcpProxyList_Warning where
  parseJSON =
    Core.withObject
      "TargetTcpProxyList_Warning"
      ( \o ->
          TargetTcpProxyList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON TargetTcpProxyList_Warning where
  toJSON TargetTcpProxyList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newTargetTcpProxyList_Warning_DataItem' smart constructor.
data TargetTcpProxyList_Warning_DataItem = TargetTcpProxyList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetTcpProxyList_Warning_DataItem' with the minimum fields required to make a request.
newTargetTcpProxyList_Warning_DataItem ::
  TargetTcpProxyList_Warning_DataItem
newTargetTcpProxyList_Warning_DataItem =
  TargetTcpProxyList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    TargetTcpProxyList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "TargetTcpProxyList_Warning_DataItem"
      ( \o ->
          TargetTcpProxyList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    TargetTcpProxyList_Warning_DataItem
  where
  toJSON TargetTcpProxyList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Represents a Target VPN Gateway resource. The target VPN gateway resource represents a Classic Cloud VPN gateway. For more information, read the the Cloud VPN Overview.
--
-- /See:/ 'newTargetVpnGateway' smart constructor.
data TargetVpnGateway = TargetVpnGateway
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] A list of URLs to the ForwardingRule resources. ForwardingRules are created using compute.forwardingRules.insert and associated with a VPN gateway.
    forwardingRules :: (Core.Maybe [Core.Text]),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways.
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | URL of the network to which this VPN gateway is attached. Provided by the client when the VPN gateway is created.
    network :: (Core.Maybe Core.Text),
    -- | [Output Only] URL of the region where the target VPN gateway resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] The status of the VPN gateway, which can be one of the following: CREATING, READY, FAILED, or DELETING.
    status :: (Core.Maybe TargetVpnGateway_Status),
    -- | [Output Only] A list of URLs to VpnTunnel resources. VpnTunnels are created using the compute.vpntunnels.insert method and associated with a VPN gateway.
    tunnels :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetVpnGateway' with the minimum fields required to make a request.
newTargetVpnGateway ::
  TargetVpnGateway
newTargetVpnGateway =
  TargetVpnGateway
    { creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      forwardingRules = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#targetVpnGateway",
      name = Core.Nothing,
      network = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      status = Core.Nothing,
      tunnels = Core.Nothing
    }

instance Core.FromJSON TargetVpnGateway where
  parseJSON =
    Core.withObject
      "TargetVpnGateway"
      ( \o ->
          TargetVpnGateway
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "forwardingRules")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#targetVpnGateway"
                     )
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "network")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "status")
            Core.<*> (o Core..:? "tunnels")
      )

instance Core.ToJSON TargetVpnGateway where
  toJSON TargetVpnGateway {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("forwardingRules" Core..=) Core.<$> forwardingRules,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("network" Core..=) Core.<$> network,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("status" Core..=) Core.<$> status,
            ("tunnels" Core..=) Core.<$> tunnels
          ]
      )

--
-- /See:/ 'newTargetVpnGatewayAggregatedList' smart constructor.
data TargetVpnGatewayAggregatedList = TargetVpnGatewayAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of TargetVpnGateway resources.
    items :: (Core.Maybe TargetVpnGatewayAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe TargetVpnGatewayAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetVpnGatewayAggregatedList' with the minimum fields required to make a request.
newTargetVpnGatewayAggregatedList ::
  TargetVpnGatewayAggregatedList
newTargetVpnGatewayAggregatedList =
  TargetVpnGatewayAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#targetVpnGatewayAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON TargetVpnGatewayAggregatedList where
  parseJSON =
    Core.withObject
      "TargetVpnGatewayAggregatedList"
      ( \o ->
          TargetVpnGatewayAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#targetVpnGatewayAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON TargetVpnGatewayAggregatedList where
  toJSON TargetVpnGatewayAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of TargetVpnGateway resources.
--
-- /See:/ 'newTargetVpnGatewayAggregatedList_Items' smart constructor.
newtype TargetVpnGatewayAggregatedList_Items = TargetVpnGatewayAggregatedList_Items
  { -- | [Output Only] Name of the scope containing this set of target VPN gateways.
    additional :: (Core.HashMap Core.Text TargetVpnGatewaysScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetVpnGatewayAggregatedList_Items' with the minimum fields required to make a request.
newTargetVpnGatewayAggregatedList_Items ::
  -- |  [Output Only] Name of the scope containing this set of target VPN gateways. See 'additional'.
  Core.HashMap Core.Text TargetVpnGatewaysScopedList ->
  TargetVpnGatewayAggregatedList_Items
newTargetVpnGatewayAggregatedList_Items additional =
  TargetVpnGatewayAggregatedList_Items {additional = additional}

instance
  Core.FromJSON
    TargetVpnGatewayAggregatedList_Items
  where
  parseJSON =
    Core.withObject
      "TargetVpnGatewayAggregatedList_Items"
      ( \o ->
          TargetVpnGatewayAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance
  Core.ToJSON
    TargetVpnGatewayAggregatedList_Items
  where
  toJSON TargetVpnGatewayAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newTargetVpnGatewayAggregatedList_Warning' smart constructor.
data TargetVpnGatewayAggregatedList_Warning = TargetVpnGatewayAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe TargetVpnGatewayAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [TargetVpnGatewayAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetVpnGatewayAggregatedList_Warning' with the minimum fields required to make a request.
newTargetVpnGatewayAggregatedList_Warning ::
  TargetVpnGatewayAggregatedList_Warning
newTargetVpnGatewayAggregatedList_Warning =
  TargetVpnGatewayAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    TargetVpnGatewayAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "TargetVpnGatewayAggregatedList_Warning"
      ( \o ->
          TargetVpnGatewayAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    TargetVpnGatewayAggregatedList_Warning
  where
  toJSON TargetVpnGatewayAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newTargetVpnGatewayAggregatedList_Warning_DataItem' smart constructor.
data TargetVpnGatewayAggregatedList_Warning_DataItem = TargetVpnGatewayAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetVpnGatewayAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newTargetVpnGatewayAggregatedList_Warning_DataItem ::
  TargetVpnGatewayAggregatedList_Warning_DataItem
newTargetVpnGatewayAggregatedList_Warning_DataItem =
  TargetVpnGatewayAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    TargetVpnGatewayAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "TargetVpnGatewayAggregatedList_Warning_DataItem"
      ( \o ->
          TargetVpnGatewayAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    TargetVpnGatewayAggregatedList_Warning_DataItem
  where
  toJSON
    TargetVpnGatewayAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | Contains a list of TargetVpnGateway resources.
--
-- /See:/ 'newTargetVpnGatewayList' smart constructor.
data TargetVpnGatewayList = TargetVpnGatewayList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of TargetVpnGateway resources.
    items :: (Core.Maybe [TargetVpnGateway]),
    -- | [Output Only] Type of resource. Always compute#targetVpnGateway for target VPN gateways.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe TargetVpnGatewayList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetVpnGatewayList' with the minimum fields required to make a request.
newTargetVpnGatewayList ::
  TargetVpnGatewayList
newTargetVpnGatewayList =
  TargetVpnGatewayList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#targetVpnGatewayList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON TargetVpnGatewayList where
  parseJSON =
    Core.withObject
      "TargetVpnGatewayList"
      ( \o ->
          TargetVpnGatewayList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#targetVpnGatewayList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON TargetVpnGatewayList where
  toJSON TargetVpnGatewayList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newTargetVpnGatewayList_Warning' smart constructor.
data TargetVpnGatewayList_Warning = TargetVpnGatewayList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe TargetVpnGatewayList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [TargetVpnGatewayList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetVpnGatewayList_Warning' with the minimum fields required to make a request.
newTargetVpnGatewayList_Warning ::
  TargetVpnGatewayList_Warning
newTargetVpnGatewayList_Warning =
  TargetVpnGatewayList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON TargetVpnGatewayList_Warning where
  parseJSON =
    Core.withObject
      "TargetVpnGatewayList_Warning"
      ( \o ->
          TargetVpnGatewayList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON TargetVpnGatewayList_Warning where
  toJSON TargetVpnGatewayList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newTargetVpnGatewayList_Warning_DataItem' smart constructor.
data TargetVpnGatewayList_Warning_DataItem = TargetVpnGatewayList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetVpnGatewayList_Warning_DataItem' with the minimum fields required to make a request.
newTargetVpnGatewayList_Warning_DataItem ::
  TargetVpnGatewayList_Warning_DataItem
newTargetVpnGatewayList_Warning_DataItem =
  TargetVpnGatewayList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    TargetVpnGatewayList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "TargetVpnGatewayList_Warning_DataItem"
      ( \o ->
          TargetVpnGatewayList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    TargetVpnGatewayList_Warning_DataItem
  where
  toJSON TargetVpnGatewayList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newTargetVpnGatewaysScopedList' smart constructor.
data TargetVpnGatewaysScopedList = TargetVpnGatewaysScopedList
  { -- | [Output Only] A list of target VPN gateways contained in this scope.
    targetVpnGateways :: (Core.Maybe [TargetVpnGateway]),
    -- | [Output Only] Informational warning which replaces the list of addresses when the list is empty.
    warning :: (Core.Maybe TargetVpnGatewaysScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetVpnGatewaysScopedList' with the minimum fields required to make a request.
newTargetVpnGatewaysScopedList ::
  TargetVpnGatewaysScopedList
newTargetVpnGatewaysScopedList =
  TargetVpnGatewaysScopedList
    { targetVpnGateways = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON TargetVpnGatewaysScopedList where
  parseJSON =
    Core.withObject
      "TargetVpnGatewaysScopedList"
      ( \o ->
          TargetVpnGatewaysScopedList
            Core.<$> (o Core..:? "targetVpnGateways")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON TargetVpnGatewaysScopedList where
  toJSON TargetVpnGatewaysScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("targetVpnGateways" Core..=)
              Core.<$> targetVpnGateways,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning which replaces the list of addresses when the list is empty.
--
-- /See:/ 'newTargetVpnGatewaysScopedList_Warning' smart constructor.
data TargetVpnGatewaysScopedList_Warning = TargetVpnGatewaysScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe TargetVpnGatewaysScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [TargetVpnGatewaysScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetVpnGatewaysScopedList_Warning' with the minimum fields required to make a request.
newTargetVpnGatewaysScopedList_Warning ::
  TargetVpnGatewaysScopedList_Warning
newTargetVpnGatewaysScopedList_Warning =
  TargetVpnGatewaysScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    TargetVpnGatewaysScopedList_Warning
  where
  parseJSON =
    Core.withObject
      "TargetVpnGatewaysScopedList_Warning"
      ( \o ->
          TargetVpnGatewaysScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    TargetVpnGatewaysScopedList_Warning
  where
  toJSON TargetVpnGatewaysScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newTargetVpnGatewaysScopedList_Warning_DataItem' smart constructor.
data TargetVpnGatewaysScopedList_Warning_DataItem = TargetVpnGatewaysScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TargetVpnGatewaysScopedList_Warning_DataItem' with the minimum fields required to make a request.
newTargetVpnGatewaysScopedList_Warning_DataItem ::
  TargetVpnGatewaysScopedList_Warning_DataItem
newTargetVpnGatewaysScopedList_Warning_DataItem =
  TargetVpnGatewaysScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    TargetVpnGatewaysScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "TargetVpnGatewaysScopedList_Warning_DataItem"
      ( \o ->
          TargetVpnGatewaysScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    TargetVpnGatewaysScopedList_Warning_DataItem
  where
  toJSON
    TargetVpnGatewaysScopedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

--
-- /See:/ 'newTestFailure' smart constructor.
data TestFailure = TestFailure
  { -- | The actual output URL evaluated by a load balancer containing the scheme, host, path and query parameters.
    actualOutputUrl :: (Core.Maybe Core.Text),
    -- | Actual HTTP status code for rule with @urlRedirect@ calculated by load balancer
    actualRedirectResponseCode :: (Core.Maybe Core.Int32),
    -- | BackendService or BackendBucket returned by load balancer.
    actualService :: (Core.Maybe Core.Text),
    -- | The expected output URL evaluated by a load balancer containing the scheme, host, path and query parameters.
    expectedOutputUrl :: (Core.Maybe Core.Text),
    -- | Expected HTTP status code for rule with @urlRedirect@ calculated by load balancer
    expectedRedirectResponseCode :: (Core.Maybe Core.Int32),
    -- | Expected BackendService or BackendBucket resource the given URL should be mapped to.
    expectedService :: (Core.Maybe Core.Text),
    -- | HTTP headers of the request.
    headers :: (Core.Maybe [UrlMapTestHeader]),
    -- | Host portion of the URL.
    host :: (Core.Maybe Core.Text),
    -- | Path portion including query parameters in the URL.
    path :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TestFailure' with the minimum fields required to make a request.
newTestFailure ::
  TestFailure
newTestFailure =
  TestFailure
    { actualOutputUrl = Core.Nothing,
      actualRedirectResponseCode = Core.Nothing,
      actualService = Core.Nothing,
      expectedOutputUrl = Core.Nothing,
      expectedRedirectResponseCode = Core.Nothing,
      expectedService = Core.Nothing,
      headers = Core.Nothing,
      host = Core.Nothing,
      path = Core.Nothing
    }

instance Core.FromJSON TestFailure where
  parseJSON =
    Core.withObject
      "TestFailure"
      ( \o ->
          TestFailure
            Core.<$> (o Core..:? "actualOutputUrl")
            Core.<*> (o Core..:? "actualRedirectResponseCode")
            Core.<*> (o Core..:? "actualService")
            Core.<*> (o Core..:? "expectedOutputUrl")
            Core.<*> (o Core..:? "expectedRedirectResponseCode")
            Core.<*> (o Core..:? "expectedService")
            Core.<*> (o Core..:? "headers")
            Core.<*> (o Core..:? "host")
            Core.<*> (o Core..:? "path")
      )

instance Core.ToJSON TestFailure where
  toJSON TestFailure {..} =
    Core.object
      ( Core.catMaybes
          [ ("actualOutputUrl" Core..=)
              Core.<$> actualOutputUrl,
            ("actualRedirectResponseCode" Core..=)
              Core.<$> actualRedirectResponseCode,
            ("actualService" Core..=) Core.<$> actualService,
            ("expectedOutputUrl" Core..=)
              Core.<$> expectedOutputUrl,
            ("expectedRedirectResponseCode" Core..=)
              Core.<$> expectedRedirectResponseCode,
            ("expectedService" Core..=) Core.<$> expectedService,
            ("headers" Core..=) Core.<$> headers,
            ("host" Core..=) Core.<$> host,
            ("path" Core..=) Core.<$> path
          ]
      )

--
-- /See:/ 'newTestPermissionsRequest' smart constructor.
newtype TestPermissionsRequest = TestPermissionsRequest
  { -- | The set of permissions to check for the \'resource\'. Permissions with wildcards (such as \'/\' or \'storage./\') are not allowed.
    permissions :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TestPermissionsRequest' with the minimum fields required to make a request.
newTestPermissionsRequest ::
  TestPermissionsRequest
newTestPermissionsRequest = TestPermissionsRequest {permissions = Core.Nothing}

instance Core.FromJSON TestPermissionsRequest where
  parseJSON =
    Core.withObject
      "TestPermissionsRequest"
      ( \o ->
          TestPermissionsRequest
            Core.<$> (o Core..:? "permissions")
      )

instance Core.ToJSON TestPermissionsRequest where
  toJSON TestPermissionsRequest {..} =
    Core.object
      ( Core.catMaybes
          [("permissions" Core..=) Core.<$> permissions]
      )

--
-- /See:/ 'newTestPermissionsResponse' smart constructor.
newtype TestPermissionsResponse = TestPermissionsResponse
  { -- | A subset of @TestPermissionsRequest.permissions@ that the caller is allowed.
    permissions :: (Core.Maybe [Core.Text])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'TestPermissionsResponse' with the minimum fields required to make a request.
newTestPermissionsResponse ::
  TestPermissionsResponse
newTestPermissionsResponse =
  TestPermissionsResponse {permissions = Core.Nothing}

instance Core.FromJSON TestPermissionsResponse where
  parseJSON =
    Core.withObject
      "TestPermissionsResponse"
      ( \o ->
          TestPermissionsResponse
            Core.<$> (o Core..:? "permissions")
      )

instance Core.ToJSON TestPermissionsResponse where
  toJSON TestPermissionsResponse {..} =
    Core.object
      ( Core.catMaybes
          [("permissions" Core..=) Core.<$> permissions]
      )

--
-- /See:/ 'newUint128' smart constructor.
data Uint128 = Uint128
  { -- |
    high :: (Core.Maybe Core.Word64),
    -- |
    low :: (Core.Maybe Core.Word64)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Uint128' with the minimum fields required to make a request.
newUint128 ::
  Uint128
newUint128 = Uint128 {high = Core.Nothing, low = Core.Nothing}

instance Core.FromJSON Uint128 where
  parseJSON =
    Core.withObject
      "Uint128"
      ( \o ->
          Uint128
            Core.<$> ( o Core..:? "high"
                         Core.<&> Core.fmap Core.fromAsText
                     )
            Core.<*> ( o Core..:? "low"
                         Core.<&> Core.fmap Core.fromAsText
                     )
      )

instance Core.ToJSON Uint128 where
  toJSON Uint128 {..} =
    Core.object
      ( Core.catMaybes
          [ ("high" Core..=) Core.. Core.AsText Core.<$> high,
            ("low" Core..=) Core.. Core.AsText Core.<$> low
          ]
      )

-- | Represents a URL Map resource. Compute Engine has two URL Map resources: * </compute/docs/reference/rest/v1/urlMaps Global> * </compute/docs/reference/rest/v1/regionUrlMaps Regional> A URL map resource is a component of certain types of cloud load balancers and Traffic Director: * urlMaps are used by external HTTP(S) load balancers and Traffic Director. * regionUrlMaps are used by internal HTTP(S) load balancers. For a list of supported URL map features by the load balancer type, see the Load balancing features: Routing and traffic management table. For a list of supported URL map features for Traffic Director, see the Traffic Director features: Routing and traffic management table. This resource defines mappings from hostnames and URL paths to either a backend service or a backend bucket. To use the global urlMaps resource, the backend service must have a loadBalancingScheme of either EXTERNAL or INTERNAL/SELF/MANAGED. To use the regionUrlMaps resource, the backend service must have a loadBalancingScheme of
-- INTERNAL_MANAGED. For more information, read URL Map Concepts.
--
-- /See:/ 'newUrlMap' smart constructor.
data UrlMap = UrlMap
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | defaultRouteAction takes effect when none of the hostRules match. The load balancer performs advanced routing actions, such as URL rewrites and header transformations, before forwarding the request to the selected backend. If defaultRouteAction specifies any weightedBackendServices, defaultService must not be set. Conversely if defaultService is set, defaultRouteAction cannot contain any weightedBackendServices. Only one of defaultRouteAction or defaultUrlRedirect must be set. URL maps for Classic external HTTP(S) load balancers only support the urlRewrite action within defaultRouteAction. defaultRouteAction has no effect when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
    defaultRouteAction :: (Core.Maybe HttpRouteAction),
    -- | The full or partial URL of the defaultService resource to which traffic is directed if none of the hostRules match. If defaultRouteAction is also specified, advanced routing actions, such as URL rewrites, take effect before sending the request to the backend. However, if defaultService is specified, defaultRouteAction cannot contain any weightedBackendServices. Conversely, if routeAction specifies any weightedBackendServices, service must not be specified. Only one of defaultService, defaultUrlRedirect , or defaultRouteAction.weightedBackendService must be set. defaultService has no effect when the URL map is bound to a target gRPC proxy that has the validateForProxyless field set to true.
    defaultService :: (Core.Maybe Core.Text),
    -- | When none of the specified hostRules match, the request is redirected to a URL specified by defaultUrlRedirect. If defaultUrlRedirect is specified, defaultService or defaultRouteAction must not be set. Not supported when the URL map is bound to a target gRPC proxy.
    defaultUrlRedirect :: (Core.Maybe HttpRedirectAction),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field is ignored when inserting a UrlMap. An up-to-date fingerprint must be provided in order to update the UrlMap, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a UrlMap.
    fingerprint :: (Core.Maybe Core.Base64),
    -- | Specifies changes to request and response headers that need to take effect for the selected backendService. The headerAction specified here take effect after headerAction specified under pathMatcher. headerAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
    headerAction :: (Core.Maybe HttpHeaderAction),
    -- | The list of host rules to use against the URL.
    hostRules :: (Core.Maybe [HostRule]),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#urlMaps for url maps.
    kind :: Core.Text,
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | The list of named PathMatchers to use against the URL.
    pathMatchers :: (Core.Maybe [PathMatcher]),
    -- | [Output Only] URL of the region where the regional URL map resides. This field is not applicable to global URL maps. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | The list of expected URL mapping tests. Request to update the UrlMap succeeds only if all test cases pass. You can specify a maximum of 100 tests per UrlMap. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
    tests :: (Core.Maybe [UrlMapTest])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UrlMap' with the minimum fields required to make a request.
newUrlMap ::
  UrlMap
newUrlMap =
  UrlMap
    { creationTimestamp = Core.Nothing,
      defaultRouteAction = Core.Nothing,
      defaultService = Core.Nothing,
      defaultUrlRedirect = Core.Nothing,
      description = Core.Nothing,
      fingerprint = Core.Nothing,
      headerAction = Core.Nothing,
      hostRules = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#urlMap",
      name = Core.Nothing,
      pathMatchers = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      tests = Core.Nothing
    }

instance Core.FromJSON UrlMap where
  parseJSON =
    Core.withObject
      "UrlMap"
      ( \o ->
          UrlMap
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "defaultRouteAction")
            Core.<*> (o Core..:? "defaultService")
            Core.<*> (o Core..:? "defaultUrlRedirect")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "fingerprint")
            Core.<*> (o Core..:? "headerAction")
            Core.<*> (o Core..:? "hostRules")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#urlMap")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "pathMatchers")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "tests")
      )

instance Core.ToJSON UrlMap where
  toJSON UrlMap {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("defaultRouteAction" Core..=)
              Core.<$> defaultRouteAction,
            ("defaultService" Core..=) Core.<$> defaultService,
            ("defaultUrlRedirect" Core..=)
              Core.<$> defaultUrlRedirect,
            ("description" Core..=) Core.<$> description,
            ("fingerprint" Core..=) Core.<$> fingerprint,
            ("headerAction" Core..=) Core.<$> headerAction,
            ("hostRules" Core..=) Core.<$> hostRules,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("pathMatchers" Core..=) Core.<$> pathMatchers,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("tests" Core..=) Core.<$> tests
          ]
      )

-- | Contains a list of UrlMap resources.
--
-- /See:/ 'newUrlMapList' smart constructor.
data UrlMapList = UrlMapList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of UrlMap resources.
    items :: (Core.Maybe [UrlMap]),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe UrlMapList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UrlMapList' with the minimum fields required to make a request.
newUrlMapList ::
  UrlMapList
newUrlMapList =
  UrlMapList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#urlMapList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON UrlMapList where
  parseJSON =
    Core.withObject
      "UrlMapList"
      ( \o ->
          UrlMapList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#urlMapList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON UrlMapList where
  toJSON UrlMapList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newUrlMapList_Warning' smart constructor.
data UrlMapList_Warning = UrlMapList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe UrlMapList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [UrlMapList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UrlMapList_Warning' with the minimum fields required to make a request.
newUrlMapList_Warning ::
  UrlMapList_Warning
newUrlMapList_Warning =
  UrlMapList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON UrlMapList_Warning where
  parseJSON =
    Core.withObject
      "UrlMapList_Warning"
      ( \o ->
          UrlMapList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON UrlMapList_Warning where
  toJSON UrlMapList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newUrlMapList_Warning_DataItem' smart constructor.
data UrlMapList_Warning_DataItem = UrlMapList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UrlMapList_Warning_DataItem' with the minimum fields required to make a request.
newUrlMapList_Warning_DataItem ::
  UrlMapList_Warning_DataItem
newUrlMapList_Warning_DataItem =
  UrlMapList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON UrlMapList_Warning_DataItem where
  parseJSON =
    Core.withObject
      "UrlMapList_Warning_DataItem"
      ( \o ->
          UrlMapList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON UrlMapList_Warning_DataItem where
  toJSON UrlMapList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newUrlMapReference' smart constructor.
newtype UrlMapReference = UrlMapReference
  { -- |
    urlMap :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UrlMapReference' with the minimum fields required to make a request.
newUrlMapReference ::
  UrlMapReference
newUrlMapReference = UrlMapReference {urlMap = Core.Nothing}

instance Core.FromJSON UrlMapReference where
  parseJSON =
    Core.withObject
      "UrlMapReference"
      ( \o ->
          UrlMapReference Core.<$> (o Core..:? "urlMap")
      )

instance Core.ToJSON UrlMapReference where
  toJSON UrlMapReference {..} =
    Core.object
      (Core.catMaybes [("urlMap" Core..=) Core.<$> urlMap])

-- | Message for the expected URL mappings.
--
-- /See:/ 'newUrlMapTest' smart constructor.
data UrlMapTest = UrlMapTest
  { -- | Description of this test case.
    description :: (Core.Maybe Core.Text),
    -- | The expected output URL evaluated by the load balancer containing the scheme, host, path and query parameters. For rules that forward requests to backends, the test passes only when expectedOutputUrl matches the request forwarded by the load balancer to backends. For rules with urlRewrite, the test verifies that the forwarded request matches hostRewrite and pathPrefixRewrite in the urlRewrite action. When service is specified, expectedOutputUrl\`s scheme is ignored. For rules with urlRedirect, the test passes only if expectedOutputUrl matches the URL in the load balancer\'s redirect response. If urlRedirect specifies https/redirect, the test passes only if the scheme in expectedOutputUrl is also set to HTTPS. If urlRedirect specifies strip/query, the test passes only if expectedOutputUrl does not contain any query parameters. expectedOutputUrl is optional when service is specified.
    expectedOutputUrl :: (Core.Maybe Core.Text),
    -- | For rules with urlRedirect, the test passes only if expectedRedirectResponseCode matches the HTTP status code in load balancer\'s redirect response. expectedRedirectResponseCode cannot be set when service is set.
    expectedRedirectResponseCode :: (Core.Maybe Core.Int32),
    -- | HTTP headers for this request. If headers contains a host header, then host must also match the header value.
    headers :: (Core.Maybe [UrlMapTestHeader]),
    -- | Host portion of the URL. If headers contains a host header, then host must also match the header value.
    host :: (Core.Maybe Core.Text),
    -- | Path portion of the URL.
    path :: (Core.Maybe Core.Text),
    -- | Expected BackendService or BackendBucket resource the given URL should be mapped to. The service field cannot be set if expectedRedirectResponseCode is set.
    service :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UrlMapTest' with the minimum fields required to make a request.
newUrlMapTest ::
  UrlMapTest
newUrlMapTest =
  UrlMapTest
    { description = Core.Nothing,
      expectedOutputUrl = Core.Nothing,
      expectedRedirectResponseCode = Core.Nothing,
      headers = Core.Nothing,
      host = Core.Nothing,
      path = Core.Nothing,
      service = Core.Nothing
    }

instance Core.FromJSON UrlMapTest where
  parseJSON =
    Core.withObject
      "UrlMapTest"
      ( \o ->
          UrlMapTest
            Core.<$> (o Core..:? "description")
            Core.<*> (o Core..:? "expectedOutputUrl")
            Core.<*> (o Core..:? "expectedRedirectResponseCode")
            Core.<*> (o Core..:? "headers")
            Core.<*> (o Core..:? "host")
            Core.<*> (o Core..:? "path")
            Core.<*> (o Core..:? "service")
      )

instance Core.ToJSON UrlMapTest where
  toJSON UrlMapTest {..} =
    Core.object
      ( Core.catMaybes
          [ ("description" Core..=) Core.<$> description,
            ("expectedOutputUrl" Core..=)
              Core.<$> expectedOutputUrl,
            ("expectedRedirectResponseCode" Core..=)
              Core.<$> expectedRedirectResponseCode,
            ("headers" Core..=) Core.<$> headers,
            ("host" Core..=) Core.<$> host,
            ("path" Core..=) Core.<$> path,
            ("service" Core..=) Core.<$> service
          ]
      )

-- | HTTP headers used in UrlMapTests.
--
-- /See:/ 'newUrlMapTestHeader' smart constructor.
data UrlMapTestHeader = UrlMapTestHeader
  { -- | Header name.
    name :: (Core.Maybe Core.Text),
    -- | Header value.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UrlMapTestHeader' with the minimum fields required to make a request.
newUrlMapTestHeader ::
  UrlMapTestHeader
newUrlMapTestHeader =
  UrlMapTestHeader {name = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON UrlMapTestHeader where
  parseJSON =
    Core.withObject
      "UrlMapTestHeader"
      ( \o ->
          UrlMapTestHeader
            Core.<$> (o Core..:? "name") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON UrlMapTestHeader where
  toJSON UrlMapTestHeader {..} =
    Core.object
      ( Core.catMaybes
          [ ("name" Core..=) Core.<$> name,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Message representing the validation result for a UrlMap.
--
-- /See:/ 'newUrlMapValidationResult' smart constructor.
data UrlMapValidationResult = UrlMapValidationResult
  { -- |
    loadErrors :: (Core.Maybe [Core.Text]),
    -- | Whether the given UrlMap can be successfully loaded. If false, \'loadErrors\' indicates the reasons.
    loadSucceeded :: (Core.Maybe Core.Bool),
    -- |
    testFailures :: (Core.Maybe [TestFailure]),
    -- | If successfully loaded, this field indicates whether the test passed. If false, \'testFailures\'s indicate the reason of failure.
    testPassed :: (Core.Maybe Core.Bool)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UrlMapValidationResult' with the minimum fields required to make a request.
newUrlMapValidationResult ::
  UrlMapValidationResult
newUrlMapValidationResult =
  UrlMapValidationResult
    { loadErrors = Core.Nothing,
      loadSucceeded = Core.Nothing,
      testFailures = Core.Nothing,
      testPassed = Core.Nothing
    }

instance Core.FromJSON UrlMapValidationResult where
  parseJSON =
    Core.withObject
      "UrlMapValidationResult"
      ( \o ->
          UrlMapValidationResult
            Core.<$> (o Core..:? "loadErrors")
            Core.<*> (o Core..:? "loadSucceeded")
            Core.<*> (o Core..:? "testFailures")
            Core.<*> (o Core..:? "testPassed")
      )

instance Core.ToJSON UrlMapValidationResult where
  toJSON UrlMapValidationResult {..} =
    Core.object
      ( Core.catMaybes
          [ ("loadErrors" Core..=) Core.<$> loadErrors,
            ("loadSucceeded" Core..=) Core.<$> loadSucceeded,
            ("testFailures" Core..=) Core.<$> testFailures,
            ("testPassed" Core..=) Core.<$> testPassed
          ]
      )

--
-- /See:/ 'newUrlMapsAggregatedList' smart constructor.
data UrlMapsAggregatedList = UrlMapsAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of UrlMapsScopedList resources.
    items :: (Core.Maybe UrlMapsAggregatedList_Items),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe UrlMapsAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UrlMapsAggregatedList' with the minimum fields required to make a request.
newUrlMapsAggregatedList ::
  UrlMapsAggregatedList
newUrlMapsAggregatedList =
  UrlMapsAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#urlMapsAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON UrlMapsAggregatedList where
  parseJSON =
    Core.withObject
      "UrlMapsAggregatedList"
      ( \o ->
          UrlMapsAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#urlMapsAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON UrlMapsAggregatedList where
  toJSON UrlMapsAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of UrlMapsScopedList resources.
--
-- /See:/ 'newUrlMapsAggregatedList_Items' smart constructor.
newtype UrlMapsAggregatedList_Items = UrlMapsAggregatedList_Items
  { -- | Name of the scope containing this set of UrlMaps.
    additional :: (Core.HashMap Core.Text UrlMapsScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UrlMapsAggregatedList_Items' with the minimum fields required to make a request.
newUrlMapsAggregatedList_Items ::
  -- |  Name of the scope containing this set of UrlMaps. See 'additional'.
  Core.HashMap Core.Text UrlMapsScopedList ->
  UrlMapsAggregatedList_Items
newUrlMapsAggregatedList_Items additional =
  UrlMapsAggregatedList_Items {additional = additional}

instance Core.FromJSON UrlMapsAggregatedList_Items where
  parseJSON =
    Core.withObject
      "UrlMapsAggregatedList_Items"
      ( \o ->
          UrlMapsAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON UrlMapsAggregatedList_Items where
  toJSON UrlMapsAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newUrlMapsAggregatedList_Warning' smart constructor.
data UrlMapsAggregatedList_Warning = UrlMapsAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe UrlMapsAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [UrlMapsAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UrlMapsAggregatedList_Warning' with the minimum fields required to make a request.
newUrlMapsAggregatedList_Warning ::
  UrlMapsAggregatedList_Warning
newUrlMapsAggregatedList_Warning =
  UrlMapsAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON UrlMapsAggregatedList_Warning where
  parseJSON =
    Core.withObject
      "UrlMapsAggregatedList_Warning"
      ( \o ->
          UrlMapsAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON UrlMapsAggregatedList_Warning where
  toJSON UrlMapsAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newUrlMapsAggregatedList_Warning_DataItem' smart constructor.
data UrlMapsAggregatedList_Warning_DataItem = UrlMapsAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UrlMapsAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newUrlMapsAggregatedList_Warning_DataItem ::
  UrlMapsAggregatedList_Warning_DataItem
newUrlMapsAggregatedList_Warning_DataItem =
  UrlMapsAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    UrlMapsAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "UrlMapsAggregatedList_Warning_DataItem"
      ( \o ->
          UrlMapsAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    UrlMapsAggregatedList_Warning_DataItem
  where
  toJSON UrlMapsAggregatedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newUrlMapsScopedList' smart constructor.
data UrlMapsScopedList = UrlMapsScopedList
  { -- | A list of UrlMaps contained in this scope.
    urlMaps :: (Core.Maybe [UrlMap]),
    -- | Informational warning which replaces the list of backend services when the list is empty.
    warning :: (Core.Maybe UrlMapsScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UrlMapsScopedList' with the minimum fields required to make a request.
newUrlMapsScopedList ::
  UrlMapsScopedList
newUrlMapsScopedList =
  UrlMapsScopedList {urlMaps = Core.Nothing, warning = Core.Nothing}

instance Core.FromJSON UrlMapsScopedList where
  parseJSON =
    Core.withObject
      "UrlMapsScopedList"
      ( \o ->
          UrlMapsScopedList
            Core.<$> (o Core..:? "urlMaps")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON UrlMapsScopedList where
  toJSON UrlMapsScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("urlMaps" Core..=) Core.<$> urlMaps,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of backend services when the list is empty.
--
-- /See:/ 'newUrlMapsScopedList_Warning' smart constructor.
data UrlMapsScopedList_Warning = UrlMapsScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe UrlMapsScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [UrlMapsScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UrlMapsScopedList_Warning' with the minimum fields required to make a request.
newUrlMapsScopedList_Warning ::
  UrlMapsScopedList_Warning
newUrlMapsScopedList_Warning =
  UrlMapsScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON UrlMapsScopedList_Warning where
  parseJSON =
    Core.withObject
      "UrlMapsScopedList_Warning"
      ( \o ->
          UrlMapsScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON UrlMapsScopedList_Warning where
  toJSON UrlMapsScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newUrlMapsScopedList_Warning_DataItem' smart constructor.
data UrlMapsScopedList_Warning_DataItem = UrlMapsScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UrlMapsScopedList_Warning_DataItem' with the minimum fields required to make a request.
newUrlMapsScopedList_Warning_DataItem ::
  UrlMapsScopedList_Warning_DataItem
newUrlMapsScopedList_Warning_DataItem =
  UrlMapsScopedList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    UrlMapsScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "UrlMapsScopedList_Warning_DataItem"
      ( \o ->
          UrlMapsScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    UrlMapsScopedList_Warning_DataItem
  where
  toJSON UrlMapsScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newUrlMapsValidateRequest' smart constructor.
data UrlMapsValidateRequest = UrlMapsValidateRequest
  { -- | Specifies the load balancer type(s) this validation request is for. Use EXTERNAL_MANAGED for HTTP\/HTTPS External Global Load Balancer with Advanced Traffic Management. Use EXTERNAL for Classic HTTP\/HTTPS External Global Load Balancer. Other load balancer types are not supported. For more information, refer to Choosing a load balancer. If unspecified, the load balancing scheme will be inferred from the backend service resources this URL map references. If that can not be inferred (for example, this URL map only references backend buckets, or this Url map is for rewrites and redirects only and doesn\'t reference any backends), EXTERNAL will be used as the default type. If specified, the scheme(s) must not conflict with the load balancing scheme of the backend service resources this Url map references.
    loadBalancingSchemes :: (Core.Maybe [UrlMapsValidateRequest_LoadBalancingSchemesItem]),
    -- | Content of the UrlMap to be validated.
    resource :: (Core.Maybe UrlMap)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UrlMapsValidateRequest' with the minimum fields required to make a request.
newUrlMapsValidateRequest ::
  UrlMapsValidateRequest
newUrlMapsValidateRequest =
  UrlMapsValidateRequest
    { loadBalancingSchemes = Core.Nothing,
      resource = Core.Nothing
    }

instance Core.FromJSON UrlMapsValidateRequest where
  parseJSON =
    Core.withObject
      "UrlMapsValidateRequest"
      ( \o ->
          UrlMapsValidateRequest
            Core.<$> (o Core..:? "loadBalancingSchemes")
            Core.<*> (o Core..:? "resource")
      )

instance Core.ToJSON UrlMapsValidateRequest where
  toJSON UrlMapsValidateRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("loadBalancingSchemes" Core..=)
              Core.<$> loadBalancingSchemes,
            ("resource" Core..=) Core.<$> resource
          ]
      )

--
-- /See:/ 'newUrlMapsValidateResponse' smart constructor.
newtype UrlMapsValidateResponse = UrlMapsValidateResponse
  { -- |
    result :: (Core.Maybe UrlMapValidationResult)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UrlMapsValidateResponse' with the minimum fields required to make a request.
newUrlMapsValidateResponse ::
  UrlMapsValidateResponse
newUrlMapsValidateResponse = UrlMapsValidateResponse {result = Core.Nothing}

instance Core.FromJSON UrlMapsValidateResponse where
  parseJSON =
    Core.withObject
      "UrlMapsValidateResponse"
      ( \o ->
          UrlMapsValidateResponse
            Core.<$> (o Core..:? "result")
      )

instance Core.ToJSON UrlMapsValidateResponse where
  toJSON UrlMapsValidateResponse {..} =
    Core.object
      (Core.catMaybes [("result" Core..=) Core.<$> result])

-- | The spec for modifying the path before sending the request to the matched backend service.
--
-- /See:/ 'newUrlRewrite' smart constructor.
data UrlRewrite = UrlRewrite
  { -- | Before forwarding the request to the selected service, the request\'s host header is replaced with contents of hostRewrite. The value must be from 1 to 255 characters.
    hostRewrite :: (Core.Maybe Core.Text),
    -- | Before forwarding the request to the selected backend service, the matching portion of the request\'s path is replaced by pathPrefixRewrite. The value must be from 1 to 1024 characters.
    pathPrefixRewrite :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UrlRewrite' with the minimum fields required to make a request.
newUrlRewrite ::
  UrlRewrite
newUrlRewrite =
  UrlRewrite {hostRewrite = Core.Nothing, pathPrefixRewrite = Core.Nothing}

instance Core.FromJSON UrlRewrite where
  parseJSON =
    Core.withObject
      "UrlRewrite"
      ( \o ->
          UrlRewrite
            Core.<$> (o Core..:? "hostRewrite")
            Core.<*> (o Core..:? "pathPrefixRewrite")
      )

instance Core.ToJSON UrlRewrite where
  toJSON UrlRewrite {..} =
    Core.object
      ( Core.catMaybes
          [ ("hostRewrite" Core..=) Core.<$> hostRewrite,
            ("pathPrefixRewrite" Core..=)
              Core.<$> pathPrefixRewrite
          ]
      )

-- | Subnetwork which the current user has compute.subnetworks.use permission on.
--
-- /See:/ 'newUsableSubnetwork' smart constructor.
data UsableSubnetwork = UsableSubnetwork
  { -- | [Output Only] The external IPv6 address range that is assigned to this subnetwork.
    externalIpv6Prefix :: (Core.Maybe Core.Text),
    -- | [Output Only] The internal IPv6 address range that is assigned to this subnetwork.
    internalIpv6Prefix :: (Core.Maybe Core.Text),
    -- | The range of internal addresses that are owned by this subnetwork.
    ipCidrRange :: (Core.Maybe Core.Text),
    -- | The access type of IPv6 address this subnet holds. It\'s immutable and can only be specified during creation or the first time the subnet is updated into IPV4_IPV6 dual stack.
    ipv6AccessType :: (Core.Maybe UsableSubnetwork_Ipv6AccessType),
    -- | Network URL.
    network :: (Core.Maybe Core.Text),
    -- | The purpose of the resource. This field can be either PRIVATE/RFC/1918 or INTERNAL/HTTPS/LOAD/BALANCER. A subnetwork with purpose set to INTERNAL/HTTPS/LOAD/BALANCER is a user-created subnetwork that is reserved for Internal HTTP(S) Load Balancing. If unspecified, the purpose defaults to PRIVATE/RFC/1918. The enableFlowLogs field isn\'t supported with the purpose field set to INTERNAL/HTTPS/LOAD_BALANCER.
    purpose :: (Core.Maybe UsableSubnetwork_Purpose),
    -- | The role of subnetwork. Currently, this field is only used when purpose = INTERNAL/HTTPS/LOAD_BALANCER. The value can be set to ACTIVE or BACKUP. An ACTIVE subnetwork is one that is currently being used for Internal HTTP(S) Load Balancing. A BACKUP subnetwork is one that is ready to be promoted to ACTIVE or is currently draining. This field can be updated with a patch request.
    role' :: (Core.Maybe UsableSubnetwork_Role),
    -- | Secondary IP ranges.
    secondaryIpRanges :: (Core.Maybe [UsableSubnetworkSecondaryRange]),
    -- | The stack type for the subnet. If set to IPV4/ONLY, new VMs in the subnet are assigned IPv4 addresses only. If set to IPV4/IPV6, new VMs in the subnet can be assigned both IPv4 and IPv6 addresses. If not specified, IPV4_ONLY is used. This field can be both set at resource creation time and updated using patch.
    stackType :: (Core.Maybe UsableSubnetwork_StackType),
    -- | Subnetwork URL.
    subnetwork :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UsableSubnetwork' with the minimum fields required to make a request.
newUsableSubnetwork ::
  UsableSubnetwork
newUsableSubnetwork =
  UsableSubnetwork
    { externalIpv6Prefix = Core.Nothing,
      internalIpv6Prefix = Core.Nothing,
      ipCidrRange = Core.Nothing,
      ipv6AccessType = Core.Nothing,
      network = Core.Nothing,
      purpose = Core.Nothing,
      role' = Core.Nothing,
      secondaryIpRanges = Core.Nothing,
      stackType = Core.Nothing,
      subnetwork = Core.Nothing
    }

instance Core.FromJSON UsableSubnetwork where
  parseJSON =
    Core.withObject
      "UsableSubnetwork"
      ( \o ->
          UsableSubnetwork
            Core.<$> (o Core..:? "externalIpv6Prefix")
            Core.<*> (o Core..:? "internalIpv6Prefix")
            Core.<*> (o Core..:? "ipCidrRange")
            Core.<*> (o Core..:? "ipv6AccessType")
            Core.<*> (o Core..:? "network")
            Core.<*> (o Core..:? "purpose")
            Core.<*> (o Core..:? "role")
            Core.<*> (o Core..:? "secondaryIpRanges")
            Core.<*> (o Core..:? "stackType")
            Core.<*> (o Core..:? "subnetwork")
      )

instance Core.ToJSON UsableSubnetwork where
  toJSON UsableSubnetwork {..} =
    Core.object
      ( Core.catMaybes
          [ ("externalIpv6Prefix" Core..=)
              Core.<$> externalIpv6Prefix,
            ("internalIpv6Prefix" Core..=)
              Core.<$> internalIpv6Prefix,
            ("ipCidrRange" Core..=) Core.<$> ipCidrRange,
            ("ipv6AccessType" Core..=) Core.<$> ipv6AccessType,
            ("network" Core..=) Core.<$> network,
            ("purpose" Core..=) Core.<$> purpose,
            ("role" Core..=) Core.<$> role',
            ("secondaryIpRanges" Core..=)
              Core.<$> secondaryIpRanges,
            ("stackType" Core..=) Core.<$> stackType,
            ("subnetwork" Core..=) Core.<$> subnetwork
          ]
      )

-- | Secondary IP range of a usable subnetwork.
--
-- /See:/ 'newUsableSubnetworkSecondaryRange' smart constructor.
data UsableSubnetworkSecondaryRange = UsableSubnetworkSecondaryRange
  { -- | The range of IP addresses belonging to this subnetwork secondary range.
    ipCidrRange :: (Core.Maybe Core.Text),
    -- | The name associated with this subnetwork secondary range, used when adding an alias IP range to a VM instance. The name must be 1-63 characters long, and comply with RFC1035. The name must be unique within the subnetwork.
    rangeName :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UsableSubnetworkSecondaryRange' with the minimum fields required to make a request.
newUsableSubnetworkSecondaryRange ::
  UsableSubnetworkSecondaryRange
newUsableSubnetworkSecondaryRange =
  UsableSubnetworkSecondaryRange
    { ipCidrRange = Core.Nothing,
      rangeName = Core.Nothing
    }

instance Core.FromJSON UsableSubnetworkSecondaryRange where
  parseJSON =
    Core.withObject
      "UsableSubnetworkSecondaryRange"
      ( \o ->
          UsableSubnetworkSecondaryRange
            Core.<$> (o Core..:? "ipCidrRange")
            Core.<*> (o Core..:? "rangeName")
      )

instance Core.ToJSON UsableSubnetworkSecondaryRange where
  toJSON UsableSubnetworkSecondaryRange {..} =
    Core.object
      ( Core.catMaybes
          [ ("ipCidrRange" Core..=) Core.<$> ipCidrRange,
            ("rangeName" Core..=) Core.<$> rangeName
          ]
      )

--
-- /See:/ 'newUsableSubnetworksAggregatedList' smart constructor.
data UsableSubnetworksAggregatedList = UsableSubnetworksAggregatedList
  { -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | [Output] A list of usable subnetwork URLs.
    items :: (Core.Maybe [UsableSubnetwork]),
    -- | [Output Only] Type of resource. Always compute#usableSubnetworksAggregatedList for aggregated lists of usable subnetworks.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results. In special cases listUsable may return 0 subnetworks and nextPageToken which still should be used to get the next page of results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe UsableSubnetworksAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UsableSubnetworksAggregatedList' with the minimum fields required to make a request.
newUsableSubnetworksAggregatedList ::
  UsableSubnetworksAggregatedList
newUsableSubnetworksAggregatedList =
  UsableSubnetworksAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#usableSubnetworksAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance
  Core.FromJSON
    UsableSubnetworksAggregatedList
  where
  parseJSON =
    Core.withObject
      "UsableSubnetworksAggregatedList"
      ( \o ->
          UsableSubnetworksAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#usableSubnetworksAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON UsableSubnetworksAggregatedList where
  toJSON UsableSubnetworksAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newUsableSubnetworksAggregatedList_Warning' smart constructor.
data UsableSubnetworksAggregatedList_Warning = UsableSubnetworksAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe UsableSubnetworksAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [UsableSubnetworksAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UsableSubnetworksAggregatedList_Warning' with the minimum fields required to make a request.
newUsableSubnetworksAggregatedList_Warning ::
  UsableSubnetworksAggregatedList_Warning
newUsableSubnetworksAggregatedList_Warning =
  UsableSubnetworksAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    UsableSubnetworksAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "UsableSubnetworksAggregatedList_Warning"
      ( \o ->
          UsableSubnetworksAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    UsableSubnetworksAggregatedList_Warning
  where
  toJSON UsableSubnetworksAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newUsableSubnetworksAggregatedList_Warning_DataItem' smart constructor.
data UsableSubnetworksAggregatedList_Warning_DataItem = UsableSubnetworksAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UsableSubnetworksAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newUsableSubnetworksAggregatedList_Warning_DataItem ::
  UsableSubnetworksAggregatedList_Warning_DataItem
newUsableSubnetworksAggregatedList_Warning_DataItem =
  UsableSubnetworksAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    UsableSubnetworksAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "UsableSubnetworksAggregatedList_Warning_DataItem"
      ( \o ->
          UsableSubnetworksAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    UsableSubnetworksAggregatedList_Warning_DataItem
  where
  toJSON
    UsableSubnetworksAggregatedList_Warning_DataItem {..} =
      Core.object
        ( Core.catMaybes
            [ ("key" Core..=) Core.<$> key,
              ("value" Core..=) Core.<$> value
            ]
        )

-- | The location in Cloud Storage and naming method of the daily usage report. Contains bucket/name and report/name prefix.
--
-- /See:/ 'newUsageExportLocation' smart constructor.
data UsageExportLocation = UsageExportLocation
  { -- | The name of an existing bucket in Cloud Storage where the usage report object is stored. The Google Service Account is granted write access to this bucket. This can either be the bucket name by itself, such as example-bucket, or the bucket name with gs:\/\/ or https:\/\/storage.googleapis.com\/ in front of it, such as gs:\/\/example-bucket.
    bucketName :: (Core.Maybe Core.Text),
    -- | An optional prefix for the name of the usage report object stored in bucketName. If not supplied, defaults to usage/gce. The report is stored as a CSV file named report/name/prefix/gce_YYYYMMDD.csv where YYYYMMDD is the day of the usage according to Pacific Time. If you supply a prefix, it should conform to Cloud Storage object naming conventions.
    reportNamePrefix :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'UsageExportLocation' with the minimum fields required to make a request.
newUsageExportLocation ::
  UsageExportLocation
newUsageExportLocation =
  UsageExportLocation
    { bucketName = Core.Nothing,
      reportNamePrefix = Core.Nothing
    }

instance Core.FromJSON UsageExportLocation where
  parseJSON =
    Core.withObject
      "UsageExportLocation"
      ( \o ->
          UsageExportLocation
            Core.<$> (o Core..:? "bucketName")
            Core.<*> (o Core..:? "reportNamePrefix")
      )

instance Core.ToJSON UsageExportLocation where
  toJSON UsageExportLocation {..} =
    Core.object
      ( Core.catMaybes
          [ ("bucketName" Core..=) Core.<$> bucketName,
            ("reportNamePrefix" Core..=)
              Core.<$> reportNamePrefix
          ]
      )

-- | Contain information of Nat mapping for a VM endpoint (i.e., NIC).
--
-- /See:/ 'newVmEndpointNatMappings' smart constructor.
data VmEndpointNatMappings = VmEndpointNatMappings
  { -- | Name of the VM instance which the endpoint belongs to
    instanceName :: (Core.Maybe Core.Text),
    -- |
    interfaceNatMappings :: (Core.Maybe [VmEndpointNatMappingsInterfaceNatMappings])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VmEndpointNatMappings' with the minimum fields required to make a request.
newVmEndpointNatMappings ::
  VmEndpointNatMappings
newVmEndpointNatMappings =
  VmEndpointNatMappings
    { instanceName = Core.Nothing,
      interfaceNatMappings = Core.Nothing
    }

instance Core.FromJSON VmEndpointNatMappings where
  parseJSON =
    Core.withObject
      "VmEndpointNatMappings"
      ( \o ->
          VmEndpointNatMappings
            Core.<$> (o Core..:? "instanceName")
            Core.<*> (o Core..:? "interfaceNatMappings")
      )

instance Core.ToJSON VmEndpointNatMappings where
  toJSON VmEndpointNatMappings {..} =
    Core.object
      ( Core.catMaybes
          [ ("instanceName" Core..=) Core.<$> instanceName,
            ("interfaceNatMappings" Core..=)
              Core.<$> interfaceNatMappings
          ]
      )

-- | Contain information of Nat mapping for an interface of this endpoint.
--
-- /See:/ 'newVmEndpointNatMappingsInterfaceNatMappings' smart constructor.
data VmEndpointNatMappingsInterfaceNatMappings = VmEndpointNatMappingsInterfaceNatMappings
  { -- | List of all drain IP:port-range mappings assigned to this interface. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: [\"2.2.2.2:12345-12355\", \"1.1.1.1:2234-2234\"].
    drainNatIpPortRanges :: (Core.Maybe [Core.Text]),
    -- | A list of all IP:port-range mappings assigned to this interface. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: [\"2.2.2.2:12345-12355\", \"1.1.1.1:2234-2234\"].
    natIpPortRanges :: (Core.Maybe [Core.Text]),
    -- | Total number of drain ports across all NAT IPs allocated to this interface. It equals to the aggregated port number in the field drain/nat/ip/port/ranges.
    numTotalDrainNatPorts :: (Core.Maybe Core.Int32),
    -- | Total number of ports across all NAT IPs allocated to this interface. It equals to the aggregated port number in the field nat/ip/port_ranges.
    numTotalNatPorts :: (Core.Maybe Core.Int32),
    -- | Information about mappings provided by rules in this NAT.
    ruleMappings ::
      ( Core.Maybe
          [VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings]
      ),
    -- | Alias IP range for this interface endpoint. It will be a private (RFC 1918) IP range. Examples: \"10.33.4.55\/32\", or \"192.168.5.0\/24\".
    sourceAliasIpRange :: (Core.Maybe Core.Text),
    -- | Primary IP of the VM for this NIC.
    sourceVirtualIp :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VmEndpointNatMappingsInterfaceNatMappings' with the minimum fields required to make a request.
newVmEndpointNatMappingsInterfaceNatMappings ::
  VmEndpointNatMappingsInterfaceNatMappings
newVmEndpointNatMappingsInterfaceNatMappings =
  VmEndpointNatMappingsInterfaceNatMappings
    { drainNatIpPortRanges = Core.Nothing,
      natIpPortRanges = Core.Nothing,
      numTotalDrainNatPorts = Core.Nothing,
      numTotalNatPorts = Core.Nothing,
      ruleMappings = Core.Nothing,
      sourceAliasIpRange = Core.Nothing,
      sourceVirtualIp = Core.Nothing
    }

instance
  Core.FromJSON
    VmEndpointNatMappingsInterfaceNatMappings
  where
  parseJSON =
    Core.withObject
      "VmEndpointNatMappingsInterfaceNatMappings"
      ( \o ->
          VmEndpointNatMappingsInterfaceNatMappings
            Core.<$> (o Core..:? "drainNatIpPortRanges")
            Core.<*> (o Core..:? "natIpPortRanges")
            Core.<*> (o Core..:? "numTotalDrainNatPorts")
            Core.<*> (o Core..:? "numTotalNatPorts")
            Core.<*> (o Core..:? "ruleMappings")
            Core.<*> (o Core..:? "sourceAliasIpRange")
            Core.<*> (o Core..:? "sourceVirtualIp")
      )

instance
  Core.ToJSON
    VmEndpointNatMappingsInterfaceNatMappings
  where
  toJSON VmEndpointNatMappingsInterfaceNatMappings {..} =
    Core.object
      ( Core.catMaybes
          [ ("drainNatIpPortRanges" Core..=)
              Core.<$> drainNatIpPortRanges,
            ("natIpPortRanges" Core..=) Core.<$> natIpPortRanges,
            ("numTotalDrainNatPorts" Core..=)
              Core.<$> numTotalDrainNatPorts,
            ("numTotalNatPorts" Core..=)
              Core.<$> numTotalNatPorts,
            ("ruleMappings" Core..=) Core.<$> ruleMappings,
            ("sourceAliasIpRange" Core..=)
              Core.<$> sourceAliasIpRange,
            ("sourceVirtualIp" Core..=)
              Core.<$> sourceVirtualIp
          ]
      )

-- | Contains information of NAT Mappings provided by a NAT Rule.
--
-- /See:/ 'newVmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings' smart constructor.
data VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings = VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings
  { -- | List of all drain IP:port-range mappings assigned to this interface by this rule. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: [\"2.2.2.2:12345-12355\", \"1.1.1.1:2234-2234\"].
    drainNatIpPortRanges :: (Core.Maybe [Core.Text]),
    -- | A list of all IP:port-range mappings assigned to this interface by this rule. These ranges are inclusive, that is, both the first and the last ports can be used for NAT. Example: [\"2.2.2.2:12345-12355\", \"1.1.1.1:2234-2234\"].
    natIpPortRanges :: (Core.Maybe [Core.Text]),
    -- | Total number of drain ports across all NAT IPs allocated to this interface by this rule. It equals the aggregated port number in the field drain/nat/ip/port/ranges.
    numTotalDrainNatPorts :: (Core.Maybe Core.Int32),
    -- | Total number of ports across all NAT IPs allocated to this interface by this rule. It equals the aggregated port number in the field nat/ip/port_ranges.
    numTotalNatPorts :: (Core.Maybe Core.Int32),
    -- | Rule number of the NAT Rule.
    ruleNumber :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings' with the minimum fields required to make a request.
newVmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings ::
  VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings
newVmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings =
  VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings
    { drainNatIpPortRanges = Core.Nothing,
      natIpPortRanges = Core.Nothing,
      numTotalDrainNatPorts = Core.Nothing,
      numTotalNatPorts = Core.Nothing,
      ruleNumber = Core.Nothing
    }

instance
  Core.FromJSON
    VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings
  where
  parseJSON =
    Core.withObject
      "VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings"
      ( \o ->
          VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings
            Core.<$> (o Core..:? "drainNatIpPortRanges")
              Core.<*> (o Core..:? "natIpPortRanges")
              Core.<*> (o Core..:? "numTotalDrainNatPorts")
              Core.<*> (o Core..:? "numTotalNatPorts")
              Core.<*> (o Core..:? "ruleNumber")
      )

instance
  Core.ToJSON
    VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings
  where
  toJSON
    VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings {..} =
      Core.object
        ( Core.catMaybes
            [ ("drainNatIpPortRanges" Core..=)
                Core.<$> drainNatIpPortRanges,
              ("natIpPortRanges" Core..=) Core.<$> natIpPortRanges,
              ("numTotalDrainNatPorts" Core..=)
                Core.<$> numTotalDrainNatPorts,
              ("numTotalNatPorts" Core..=)
                Core.<$> numTotalNatPorts,
              ("ruleNumber" Core..=) Core.<$> ruleNumber
            ]
        )

-- | Contains a list of VmEndpointNatMappings.
--
-- /See:/ 'newVmEndpointNatMappingsList' smart constructor.
data VmEndpointNatMappingsList = VmEndpointNatMappingsList
  { -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | [Output Only] Type of resource. Always compute#vmEndpointNatMappingsList for lists of Nat mappings of VM endpoints.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] A list of Nat mapping information of VM endpoints.
    result :: (Core.Maybe [VmEndpointNatMappings]),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe VmEndpointNatMappingsList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VmEndpointNatMappingsList' with the minimum fields required to make a request.
newVmEndpointNatMappingsList ::
  VmEndpointNatMappingsList
newVmEndpointNatMappingsList =
  VmEndpointNatMappingsList
    { id = Core.Nothing,
      kind = "compute#vmEndpointNatMappingsList",
      nextPageToken = Core.Nothing,
      result = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON VmEndpointNatMappingsList where
  parseJSON =
    Core.withObject
      "VmEndpointNatMappingsList"
      ( \o ->
          VmEndpointNatMappingsList
            Core.<$> (o Core..:? "id")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#vmEndpointNatMappingsList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "result")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON VmEndpointNatMappingsList where
  toJSON VmEndpointNatMappingsList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("result" Core..=) Core.<$> result,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newVmEndpointNatMappingsList_Warning' smart constructor.
data VmEndpointNatMappingsList_Warning = VmEndpointNatMappingsList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe VmEndpointNatMappingsList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [VmEndpointNatMappingsList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VmEndpointNatMappingsList_Warning' with the minimum fields required to make a request.
newVmEndpointNatMappingsList_Warning ::
  VmEndpointNatMappingsList_Warning
newVmEndpointNatMappingsList_Warning =
  VmEndpointNatMappingsList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    VmEndpointNatMappingsList_Warning
  where
  parseJSON =
    Core.withObject
      "VmEndpointNatMappingsList_Warning"
      ( \o ->
          VmEndpointNatMappingsList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance
  Core.ToJSON
    VmEndpointNatMappingsList_Warning
  where
  toJSON VmEndpointNatMappingsList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newVmEndpointNatMappingsList_Warning_DataItem' smart constructor.
data VmEndpointNatMappingsList_Warning_DataItem = VmEndpointNatMappingsList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VmEndpointNatMappingsList_Warning_DataItem' with the minimum fields required to make a request.
newVmEndpointNatMappingsList_Warning_DataItem ::
  VmEndpointNatMappingsList_Warning_DataItem
newVmEndpointNatMappingsList_Warning_DataItem =
  VmEndpointNatMappingsList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    VmEndpointNatMappingsList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "VmEndpointNatMappingsList_Warning_DataItem"
      ( \o ->
          VmEndpointNatMappingsList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    VmEndpointNatMappingsList_Warning_DataItem
  where
  toJSON VmEndpointNatMappingsList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Represents a HA VPN gateway. HA VPN is a high-availability (HA) Cloud VPN solution that lets you securely connect your on-premises network to your Google Cloud Virtual Private Cloud network through an IPsec VPN connection in a single region. For more information about Cloud HA VPN solutions, see Cloud VPN topologies .
--
-- /See:/ 'newVpnGateway' smart constructor.
data VpnGateway = VpnGateway
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways.
    kind :: Core.Text,
    -- | A fingerprint for the labels being applied to this VpnGateway, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a VpnGateway.
    labelFingerprint :: (Core.Maybe Core.Base64),
    -- | Labels for this resource. These can only be added or modified by the setLabels method. Each label key\/value pair must comply with RFC1035. Label values may be empty.
    labels :: (Core.Maybe VpnGateway_Labels),
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | URL of the network to which this VPN gateway is attached. Provided by the client when the VPN gateway is created.
    network :: (Core.Maybe Core.Text),
    -- | [Output Only] URL of the region where the VPN gateway resides.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | The stack type for this VPN gateway to identify the IP protocols that are enabled. Possible values are: IPV4/ONLY, IPV4/IPV6. If not specified, IPV4_ONLY will be used.
    stackType :: (Core.Maybe VpnGateway_StackType),
    -- | The list of VPN interfaces associated with this VPN gateway.
    vpnInterfaces :: (Core.Maybe [VpnGatewayVpnGatewayInterface])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnGateway' with the minimum fields required to make a request.
newVpnGateway ::
  VpnGateway
newVpnGateway =
  VpnGateway
    { creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#vpnGateway",
      labelFingerprint = Core.Nothing,
      labels = Core.Nothing,
      name = Core.Nothing,
      network = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      stackType = Core.Nothing,
      vpnInterfaces = Core.Nothing
    }

instance Core.FromJSON VpnGateway where
  parseJSON =
    Core.withObject
      "VpnGateway"
      ( \o ->
          VpnGateway
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#vpnGateway")
            Core.<*> (o Core..:? "labelFingerprint")
            Core.<*> (o Core..:? "labels")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "network")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "stackType")
            Core.<*> (o Core..:? "vpnInterfaces")
      )

instance Core.ToJSON VpnGateway where
  toJSON VpnGateway {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("labelFingerprint" Core..=)
              Core.<$> labelFingerprint,
            ("labels" Core..=) Core.<$> labels,
            ("name" Core..=) Core.<$> name,
            ("network" Core..=) Core.<$> network,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("stackType" Core..=) Core.<$> stackType,
            ("vpnInterfaces" Core..=) Core.<$> vpnInterfaces
          ]
      )

-- | Labels for this resource. These can only be added or modified by the setLabels method. Each label key\/value pair must comply with RFC1035. Label values may be empty.
--
-- /See:/ 'newVpnGateway_Labels' smart constructor.
newtype VpnGateway_Labels = VpnGateway_Labels
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnGateway_Labels' with the minimum fields required to make a request.
newVpnGateway_Labels ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  VpnGateway_Labels
newVpnGateway_Labels additional = VpnGateway_Labels {additional = additional}

instance Core.FromJSON VpnGateway_Labels where
  parseJSON =
    Core.withObject
      "VpnGateway_Labels"
      ( \o ->
          VpnGateway_Labels Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON VpnGateway_Labels where
  toJSON VpnGateway_Labels {..} = Core.toJSON additional

--
-- /See:/ 'newVpnGatewayAggregatedList' smart constructor.
data VpnGatewayAggregatedList = VpnGatewayAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of VpnGateway resources.
    items :: (Core.Maybe VpnGatewayAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe VpnGatewayAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnGatewayAggregatedList' with the minimum fields required to make a request.
newVpnGatewayAggregatedList ::
  VpnGatewayAggregatedList
newVpnGatewayAggregatedList =
  VpnGatewayAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#vpnGatewayAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON VpnGatewayAggregatedList where
  parseJSON =
    Core.withObject
      "VpnGatewayAggregatedList"
      ( \o ->
          VpnGatewayAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#vpnGatewayAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON VpnGatewayAggregatedList where
  toJSON VpnGatewayAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of VpnGateway resources.
--
-- /See:/ 'newVpnGatewayAggregatedList_Items' smart constructor.
newtype VpnGatewayAggregatedList_Items = VpnGatewayAggregatedList_Items
  { -- | [Output Only] Name of the scope containing this set of VPN gateways.
    additional :: (Core.HashMap Core.Text VpnGatewaysScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnGatewayAggregatedList_Items' with the minimum fields required to make a request.
newVpnGatewayAggregatedList_Items ::
  -- |  [Output Only] Name of the scope containing this set of VPN gateways. See 'additional'.
  Core.HashMap Core.Text VpnGatewaysScopedList ->
  VpnGatewayAggregatedList_Items
newVpnGatewayAggregatedList_Items additional =
  VpnGatewayAggregatedList_Items {additional = additional}

instance Core.FromJSON VpnGatewayAggregatedList_Items where
  parseJSON =
    Core.withObject
      "VpnGatewayAggregatedList_Items"
      ( \o ->
          VpnGatewayAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON VpnGatewayAggregatedList_Items where
  toJSON VpnGatewayAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newVpnGatewayAggregatedList_Warning' smart constructor.
data VpnGatewayAggregatedList_Warning = VpnGatewayAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe VpnGatewayAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [VpnGatewayAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnGatewayAggregatedList_Warning' with the minimum fields required to make a request.
newVpnGatewayAggregatedList_Warning ::
  VpnGatewayAggregatedList_Warning
newVpnGatewayAggregatedList_Warning =
  VpnGatewayAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    VpnGatewayAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "VpnGatewayAggregatedList_Warning"
      ( \o ->
          VpnGatewayAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON VpnGatewayAggregatedList_Warning where
  toJSON VpnGatewayAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newVpnGatewayAggregatedList_Warning_DataItem' smart constructor.
data VpnGatewayAggregatedList_Warning_DataItem = VpnGatewayAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnGatewayAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newVpnGatewayAggregatedList_Warning_DataItem ::
  VpnGatewayAggregatedList_Warning_DataItem
newVpnGatewayAggregatedList_Warning_DataItem =
  VpnGatewayAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    VpnGatewayAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "VpnGatewayAggregatedList_Warning_DataItem"
      ( \o ->
          VpnGatewayAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    VpnGatewayAggregatedList_Warning_DataItem
  where
  toJSON VpnGatewayAggregatedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Contains a list of VpnGateway resources.
--
-- /See:/ 'newVpnGatewayList' smart constructor.
data VpnGatewayList = VpnGatewayList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of VpnGateway resources.
    items :: (Core.Maybe [VpnGateway]),
    -- | [Output Only] Type of resource. Always compute#vpnGateway for VPN gateways.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe VpnGatewayList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnGatewayList' with the minimum fields required to make a request.
newVpnGatewayList ::
  VpnGatewayList
newVpnGatewayList =
  VpnGatewayList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#vpnGatewayList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON VpnGatewayList where
  parseJSON =
    Core.withObject
      "VpnGatewayList"
      ( \o ->
          VpnGatewayList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#vpnGatewayList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON VpnGatewayList where
  toJSON VpnGatewayList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newVpnGatewayList_Warning' smart constructor.
data VpnGatewayList_Warning = VpnGatewayList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe VpnGatewayList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [VpnGatewayList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnGatewayList_Warning' with the minimum fields required to make a request.
newVpnGatewayList_Warning ::
  VpnGatewayList_Warning
newVpnGatewayList_Warning =
  VpnGatewayList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON VpnGatewayList_Warning where
  parseJSON =
    Core.withObject
      "VpnGatewayList_Warning"
      ( \o ->
          VpnGatewayList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON VpnGatewayList_Warning where
  toJSON VpnGatewayList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newVpnGatewayList_Warning_DataItem' smart constructor.
data VpnGatewayList_Warning_DataItem = VpnGatewayList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnGatewayList_Warning_DataItem' with the minimum fields required to make a request.
newVpnGatewayList_Warning_DataItem ::
  VpnGatewayList_Warning_DataItem
newVpnGatewayList_Warning_DataItem =
  VpnGatewayList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance
  Core.FromJSON
    VpnGatewayList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "VpnGatewayList_Warning_DataItem"
      ( \o ->
          VpnGatewayList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON VpnGatewayList_Warning_DataItem where
  toJSON VpnGatewayList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newVpnGatewayStatus' smart constructor.
newtype VpnGatewayStatus = VpnGatewayStatus
  { -- | List of VPN connection for this VpnGateway.
    vpnConnections :: (Core.Maybe [VpnGatewayStatusVpnConnection])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnGatewayStatus' with the minimum fields required to make a request.
newVpnGatewayStatus ::
  VpnGatewayStatus
newVpnGatewayStatus = VpnGatewayStatus {vpnConnections = Core.Nothing}

instance Core.FromJSON VpnGatewayStatus where
  parseJSON =
    Core.withObject
      "VpnGatewayStatus"
      ( \o ->
          VpnGatewayStatus
            Core.<$> (o Core..:? "vpnConnections")
      )

instance Core.ToJSON VpnGatewayStatus where
  toJSON VpnGatewayStatus {..} =
    Core.object
      ( Core.catMaybes
          [("vpnConnections" Core..=) Core.<$> vpnConnections]
      )

-- | Describes the high availability requirement state for the VPN connection between this Cloud VPN gateway and a peer gateway.
--
-- /See:/ 'newVpnGatewayStatusHighAvailabilityRequirementState' smart constructor.
data VpnGatewayStatusHighAvailabilityRequirementState = VpnGatewayStatusHighAvailabilityRequirementState
  { -- | Indicates the high availability requirement state for the VPN connection. Valid values are CONNECTION/REDUNDANCY/MET, CONNECTION/REDUNDANCY/NOT_MET.
    state :: (Core.Maybe VpnGatewayStatusHighAvailabilityRequirementState_State),
    -- | Indicates the reason why the VPN connection does not meet the high availability redundancy criteria\/requirement. Valid values is INCOMPLETE/TUNNELS/COVERAGE.
    unsatisfiedReason ::
      ( Core.Maybe
          VpnGatewayStatusHighAvailabilityRequirementState_UnsatisfiedReason
      )
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnGatewayStatusHighAvailabilityRequirementState' with the minimum fields required to make a request.
newVpnGatewayStatusHighAvailabilityRequirementState ::
  VpnGatewayStatusHighAvailabilityRequirementState
newVpnGatewayStatusHighAvailabilityRequirementState =
  VpnGatewayStatusHighAvailabilityRequirementState
    { state = Core.Nothing,
      unsatisfiedReason = Core.Nothing
    }

instance
  Core.FromJSON
    VpnGatewayStatusHighAvailabilityRequirementState
  where
  parseJSON =
    Core.withObject
      "VpnGatewayStatusHighAvailabilityRequirementState"
      ( \o ->
          VpnGatewayStatusHighAvailabilityRequirementState
            Core.<$> (o Core..:? "state")
              Core.<*> (o Core..:? "unsatisfiedReason")
      )

instance
  Core.ToJSON
    VpnGatewayStatusHighAvailabilityRequirementState
  where
  toJSON
    VpnGatewayStatusHighAvailabilityRequirementState {..} =
      Core.object
        ( Core.catMaybes
            [ ("state" Core..=) Core.<$> state,
              ("unsatisfiedReason" Core..=)
                Core.<$> unsatisfiedReason
            ]
        )

-- | Contains some information about a VPN tunnel.
--
-- /See:/ 'newVpnGatewayStatusTunnel' smart constructor.
data VpnGatewayStatusTunnel = VpnGatewayStatusTunnel
  { -- | The VPN gateway interface this VPN tunnel is associated with.
    localGatewayInterface :: (Core.Maybe Core.Word32),
    -- | The peer gateway interface this VPN tunnel is connected to, the peer gateway could either be an external VPN gateway or GCP VPN gateway.
    peerGatewayInterface :: (Core.Maybe Core.Word32),
    -- | URL reference to the VPN tunnel.
    tunnelUrl :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnGatewayStatusTunnel' with the minimum fields required to make a request.
newVpnGatewayStatusTunnel ::
  VpnGatewayStatusTunnel
newVpnGatewayStatusTunnel =
  VpnGatewayStatusTunnel
    { localGatewayInterface = Core.Nothing,
      peerGatewayInterface = Core.Nothing,
      tunnelUrl = Core.Nothing
    }

instance Core.FromJSON VpnGatewayStatusTunnel where
  parseJSON =
    Core.withObject
      "VpnGatewayStatusTunnel"
      ( \o ->
          VpnGatewayStatusTunnel
            Core.<$> (o Core..:? "localGatewayInterface")
            Core.<*> (o Core..:? "peerGatewayInterface")
            Core.<*> (o Core..:? "tunnelUrl")
      )

instance Core.ToJSON VpnGatewayStatusTunnel where
  toJSON VpnGatewayStatusTunnel {..} =
    Core.object
      ( Core.catMaybes
          [ ("localGatewayInterface" Core..=)
              Core.<$> localGatewayInterface,
            ("peerGatewayInterface" Core..=)
              Core.<$> peerGatewayInterface,
            ("tunnelUrl" Core..=) Core.<$> tunnelUrl
          ]
      )

-- | A VPN connection contains all VPN tunnels connected from this VpnGateway to the same peer gateway. The peer gateway could either be a external VPN gateway or GCP VPN gateway.
--
-- /See:/ 'newVpnGatewayStatusVpnConnection' smart constructor.
data VpnGatewayStatusVpnConnection = VpnGatewayStatusVpnConnection
  { -- | URL reference to the peer external VPN gateways to which the VPN tunnels in this VPN connection are connected. This field is mutually exclusive with peer/gcp/gateway.
    peerExternalGateway :: (Core.Maybe Core.Text),
    -- | URL reference to the peer side VPN gateways to which the VPN tunnels in this VPN connection are connected. This field is mutually exclusive with peer/gcp/gateway.
    peerGcpGateway :: (Core.Maybe Core.Text),
    -- | HighAvailabilityRequirementState for the VPN connection.
    state :: (Core.Maybe VpnGatewayStatusHighAvailabilityRequirementState),
    -- | List of VPN tunnels that are in this VPN connection.
    tunnels :: (Core.Maybe [VpnGatewayStatusTunnel])
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnGatewayStatusVpnConnection' with the minimum fields required to make a request.
newVpnGatewayStatusVpnConnection ::
  VpnGatewayStatusVpnConnection
newVpnGatewayStatusVpnConnection =
  VpnGatewayStatusVpnConnection
    { peerExternalGateway = Core.Nothing,
      peerGcpGateway = Core.Nothing,
      state = Core.Nothing,
      tunnels = Core.Nothing
    }

instance Core.FromJSON VpnGatewayStatusVpnConnection where
  parseJSON =
    Core.withObject
      "VpnGatewayStatusVpnConnection"
      ( \o ->
          VpnGatewayStatusVpnConnection
            Core.<$> (o Core..:? "peerExternalGateway")
            Core.<*> (o Core..:? "peerGcpGateway")
            Core.<*> (o Core..:? "state")
            Core.<*> (o Core..:? "tunnels")
      )

instance Core.ToJSON VpnGatewayStatusVpnConnection where
  toJSON VpnGatewayStatusVpnConnection {..} =
    Core.object
      ( Core.catMaybes
          [ ("peerExternalGateway" Core..=)
              Core.<$> peerExternalGateway,
            ("peerGcpGateway" Core..=) Core.<$> peerGcpGateway,
            ("state" Core..=) Core.<$> state,
            ("tunnels" Core..=) Core.<$> tunnels
          ]
      )

-- | A VPN gateway interface.
--
-- /See:/ 'newVpnGatewayVpnGatewayInterface' smart constructor.
data VpnGatewayVpnGatewayInterface = VpnGatewayVpnGatewayInterface
  { -- | [Output Only] Numeric identifier for this VPN interface associated with the VPN gateway.
    id :: (Core.Maybe Core.Word32),
    -- | URL of the VLAN attachment (interconnectAttachment) resource for this VPN gateway interface. When the value of this field is present, the VPN gateway is used for HA VPN over Cloud Interconnect; all egress or ingress traffic for this VPN gateway interface goes through the specified VLAN attachment resource.
    interconnectAttachment :: (Core.Maybe Core.Text),
    -- | [Output Only] IP address for this VPN interface associated with the VPN gateway. The IP address could be either a regional external IP address or a regional internal IP address. The two IP addresses for a VPN gateway must be all regional external or regional internal IP addresses. There cannot be a mix of regional external IP addresses and regional internal IP addresses. For HA VPN over Cloud Interconnect, the IP addresses for both interfaces could either be regional internal IP addresses or regional external IP addresses. For regular (non HA VPN over Cloud Interconnect) HA VPN tunnels, the IP address must be a regional external IP address.
    ipAddress :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnGatewayVpnGatewayInterface' with the minimum fields required to make a request.
newVpnGatewayVpnGatewayInterface ::
  VpnGatewayVpnGatewayInterface
newVpnGatewayVpnGatewayInterface =
  VpnGatewayVpnGatewayInterface
    { id = Core.Nothing,
      interconnectAttachment = Core.Nothing,
      ipAddress = Core.Nothing
    }

instance Core.FromJSON VpnGatewayVpnGatewayInterface where
  parseJSON =
    Core.withObject
      "VpnGatewayVpnGatewayInterface"
      ( \o ->
          VpnGatewayVpnGatewayInterface
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "interconnectAttachment")
            Core.<*> (o Core..:? "ipAddress")
      )

instance Core.ToJSON VpnGatewayVpnGatewayInterface where
  toJSON VpnGatewayVpnGatewayInterface {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("interconnectAttachment" Core..=)
              Core.<$> interconnectAttachment,
            ("ipAddress" Core..=) Core.<$> ipAddress
          ]
      )

--
-- /See:/ 'newVpnGatewaysGetStatusResponse' smart constructor.
newtype VpnGatewaysGetStatusResponse = VpnGatewaysGetStatusResponse
  { -- |
    result :: (Core.Maybe VpnGatewayStatus)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnGatewaysGetStatusResponse' with the minimum fields required to make a request.
newVpnGatewaysGetStatusResponse ::
  VpnGatewaysGetStatusResponse
newVpnGatewaysGetStatusResponse =
  VpnGatewaysGetStatusResponse {result = Core.Nothing}

instance Core.FromJSON VpnGatewaysGetStatusResponse where
  parseJSON =
    Core.withObject
      "VpnGatewaysGetStatusResponse"
      ( \o ->
          VpnGatewaysGetStatusResponse
            Core.<$> (o Core..:? "result")
      )

instance Core.ToJSON VpnGatewaysGetStatusResponse where
  toJSON VpnGatewaysGetStatusResponse {..} =
    Core.object
      (Core.catMaybes [("result" Core..=) Core.<$> result])

--
-- /See:/ 'newVpnGatewaysScopedList' smart constructor.
data VpnGatewaysScopedList = VpnGatewaysScopedList
  { -- | [Output Only] A list of VPN gateways contained in this scope.
    vpnGateways :: (Core.Maybe [VpnGateway]),
    -- | [Output Only] Informational warning which replaces the list of addresses when the list is empty.
    warning :: (Core.Maybe VpnGatewaysScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnGatewaysScopedList' with the minimum fields required to make a request.
newVpnGatewaysScopedList ::
  VpnGatewaysScopedList
newVpnGatewaysScopedList =
  VpnGatewaysScopedList {vpnGateways = Core.Nothing, warning = Core.Nothing}

instance Core.FromJSON VpnGatewaysScopedList where
  parseJSON =
    Core.withObject
      "VpnGatewaysScopedList"
      ( \o ->
          VpnGatewaysScopedList
            Core.<$> (o Core..:? "vpnGateways")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON VpnGatewaysScopedList where
  toJSON VpnGatewaysScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("vpnGateways" Core..=) Core.<$> vpnGateways,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning which replaces the list of addresses when the list is empty.
--
-- /See:/ 'newVpnGatewaysScopedList_Warning' smart constructor.
data VpnGatewaysScopedList_Warning = VpnGatewaysScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe VpnGatewaysScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [VpnGatewaysScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnGatewaysScopedList_Warning' with the minimum fields required to make a request.
newVpnGatewaysScopedList_Warning ::
  VpnGatewaysScopedList_Warning
newVpnGatewaysScopedList_Warning =
  VpnGatewaysScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON VpnGatewaysScopedList_Warning where
  parseJSON =
    Core.withObject
      "VpnGatewaysScopedList_Warning"
      ( \o ->
          VpnGatewaysScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON VpnGatewaysScopedList_Warning where
  toJSON VpnGatewaysScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newVpnGatewaysScopedList_Warning_DataItem' smart constructor.
data VpnGatewaysScopedList_Warning_DataItem = VpnGatewaysScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnGatewaysScopedList_Warning_DataItem' with the minimum fields required to make a request.
newVpnGatewaysScopedList_Warning_DataItem ::
  VpnGatewaysScopedList_Warning_DataItem
newVpnGatewaysScopedList_Warning_DataItem =
  VpnGatewaysScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    VpnGatewaysScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "VpnGatewaysScopedList_Warning_DataItem"
      ( \o ->
          VpnGatewaysScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    VpnGatewaysScopedList_Warning_DataItem
  where
  toJSON VpnGatewaysScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Represents a Cloud VPN Tunnel resource. For more information about VPN, read the the Cloud VPN Overview.
--
-- /See:/ 'newVpnTunnel' smart constructor.
data VpnTunnel = VpnTunnel
  { -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | An optional description of this resource. Provide this property when you create the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] Detailed status message for the VPN tunnel.
    detailedStatus :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | IKE protocol version to use when establishing the VPN tunnel with the peer VPN gateway. Acceptable IKE versions are 1 or 2. The default version is 2.
    ikeVersion :: (Core.Maybe Core.Int32),
    -- | [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels.
    kind :: Core.Text,
    -- | Local traffic selector to use when establishing the VPN tunnel with the peer VPN gateway. The value should be a CIDR formatted string, for example: 192.168.0.0\/16. The ranges must be disjoint. Only IPv4 is supported.
    localTrafficSelector :: (Core.Maybe [Core.Text]),
    -- | Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression @[a-z]([-a-z0-9]*[a-z0-9])?@ which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    name :: (Core.Maybe Core.Text),
    -- | URL of the peer side external VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. This field is exclusive with the field peerGcpGateway.
    peerExternalGateway :: (Core.Maybe Core.Text),
    -- | The interface ID of the external VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. Possible values are: @0@, @1@, @2@, @3@. The number of IDs in use depends on the external VPN gateway redundancy type.
    peerExternalGatewayInterface :: (Core.Maybe Core.Int32),
    -- | URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected. Provided by the client when the VPN tunnel is created. This field can be used when creating highly available VPN from VPC network to VPC network, the field is exclusive with the field peerExternalGateway. If provided, the VPN tunnel will automatically use the same vpnGatewayInterface ID in the peer GCP VPN gateway.
    peerGcpGateway :: (Core.Maybe Core.Text),
    -- | IP address of the peer VPN gateway. Only IPv4 is supported.
    peerIp :: (Core.Maybe Core.Text),
    -- | [Output Only] URL of the region where the VPN tunnel resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    region :: (Core.Maybe Core.Text),
    -- | Remote traffic selectors to use when establishing the VPN tunnel with the peer VPN gateway. The value should be a CIDR formatted string, for example: 192.168.0.0\/16. The ranges should be disjoint. Only IPv4 is supported.
    remoteTrafficSelector :: (Core.Maybe [Core.Text]),
    -- | URL of the router resource to be used for dynamic routing.
    router :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | Shared secret used to set the secure session between the Cloud VPN gateway and the peer VPN gateway.
    sharedSecret :: (Core.Maybe Core.Text),
    -- | Hash of the shared secret.
    sharedSecretHash :: (Core.Maybe Core.Text),
    -- | [Output Only] The status of the VPN tunnel, which can be one of the following: - PROVISIONING: Resource is being allocated for the VPN tunnel. - WAITING/FOR/FULL/CONFIG: Waiting to receive all VPN-related configs from the user. Network, TargetVpnGateway, VpnTunnel, ForwardingRule, and Route resources are needed to setup the VPN tunnel. - FIRST/HANDSHAKE: Successful first handshake with the peer VPN. - ESTABLISHED: Secure session is successfully established with the peer VPN. - NETWORK/ERROR: Deprecated, replaced by NO/INCOMING/PACKETS - AUTHORIZATION/ERROR: Auth error (for example, bad shared secret). - NEGOTIATION/FAILURE: Handshake failed. - DEPROVISIONING: Resources are being deallocated for the VPN tunnel. - FAILED: Tunnel creation has failed and the tunnel is not ready to be used. - NO/INCOMING/PACKETS: No incoming packets from peer. - REJECTED: Tunnel configuration was rejected, can be result of being denied access. - ALLOCATING/RESOURCES: Cloud VPN is in the process of allocating all required
    -- resources. - STOPPED: Tunnel is stopped due to its Forwarding Rules being deleted for Classic VPN tunnels or the project is in frozen state. - PEER/IDENTITY/MISMATCH: Peer identity does not match peer IP, probably behind NAT. - TS/NARROWING/NOT_ALLOWED: Traffic selector narrowing not allowed for an HA-VPN tunnel.
    status :: (Core.Maybe VpnTunnel_Status),
    -- | URL of the Target VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created.
    targetVpnGateway :: (Core.Maybe Core.Text),
    -- | URL of the VPN gateway with which this VPN tunnel is associated. Provided by the client when the VPN tunnel is created. This must be used (instead of target/vpn/gateway) if a High Availability VPN gateway resource is created.
    vpnGateway :: (Core.Maybe Core.Text),
    -- | The interface ID of the VPN gateway with which this VPN tunnel is associated. Possible values are: @0@, @1@.
    vpnGatewayInterface :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnTunnel' with the minimum fields required to make a request.
newVpnTunnel ::
  VpnTunnel
newVpnTunnel =
  VpnTunnel
    { creationTimestamp = Core.Nothing,
      description = Core.Nothing,
      detailedStatus = Core.Nothing,
      id = Core.Nothing,
      ikeVersion = Core.Nothing,
      kind = "compute#vpnTunnel",
      localTrafficSelector = Core.Nothing,
      name = Core.Nothing,
      peerExternalGateway = Core.Nothing,
      peerExternalGatewayInterface = Core.Nothing,
      peerGcpGateway = Core.Nothing,
      peerIp = Core.Nothing,
      region = Core.Nothing,
      remoteTrafficSelector = Core.Nothing,
      router = Core.Nothing,
      selfLink = Core.Nothing,
      sharedSecret = Core.Nothing,
      sharedSecretHash = Core.Nothing,
      status = Core.Nothing,
      targetVpnGateway = Core.Nothing,
      vpnGateway = Core.Nothing,
      vpnGatewayInterface = Core.Nothing
    }

instance Core.FromJSON VpnTunnel where
  parseJSON =
    Core.withObject
      "VpnTunnel"
      ( \o ->
          VpnTunnel
            Core.<$> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "detailedStatus")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "ikeVersion")
            Core.<*> (o Core..:? "kind" Core..!= "compute#vpnTunnel")
            Core.<*> (o Core..:? "localTrafficSelector")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "peerExternalGateway")
            Core.<*> (o Core..:? "peerExternalGatewayInterface")
            Core.<*> (o Core..:? "peerGcpGateway")
            Core.<*> (o Core..:? "peerIp")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "remoteTrafficSelector")
            Core.<*> (o Core..:? "router")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "sharedSecret")
            Core.<*> (o Core..:? "sharedSecretHash")
            Core.<*> (o Core..:? "status")
            Core.<*> (o Core..:? "targetVpnGateway")
            Core.<*> (o Core..:? "vpnGateway")
            Core.<*> (o Core..:? "vpnGatewayInterface")
      )

instance Core.ToJSON VpnTunnel where
  toJSON VpnTunnel {..} =
    Core.object
      ( Core.catMaybes
          [ ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("description" Core..=) Core.<$> description,
            ("detailedStatus" Core..=) Core.<$> detailedStatus,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            ("ikeVersion" Core..=) Core.<$> ikeVersion,
            Core.Just ("kind" Core..= kind),
            ("localTrafficSelector" Core..=)
              Core.<$> localTrafficSelector,
            ("name" Core..=) Core.<$> name,
            ("peerExternalGateway" Core..=)
              Core.<$> peerExternalGateway,
            ("peerExternalGatewayInterface" Core..=)
              Core.<$> peerExternalGatewayInterface,
            ("peerGcpGateway" Core..=) Core.<$> peerGcpGateway,
            ("peerIp" Core..=) Core.<$> peerIp,
            ("region" Core..=) Core.<$> region,
            ("remoteTrafficSelector" Core..=)
              Core.<$> remoteTrafficSelector,
            ("router" Core..=) Core.<$> router,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("sharedSecret" Core..=) Core.<$> sharedSecret,
            ("sharedSecretHash" Core..=)
              Core.<$> sharedSecretHash,
            ("status" Core..=) Core.<$> status,
            ("targetVpnGateway" Core..=)
              Core.<$> targetVpnGateway,
            ("vpnGateway" Core..=) Core.<$> vpnGateway,
            ("vpnGatewayInterface" Core..=)
              Core.<$> vpnGatewayInterface
          ]
      )

--
-- /See:/ 'newVpnTunnelAggregatedList' smart constructor.
data VpnTunnelAggregatedList = VpnTunnelAggregatedList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of VpnTunnelsScopedList resources.
    items :: (Core.Maybe VpnTunnelAggregatedList_Items),
    -- | [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Unreachable resources.
    unreachables :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe VpnTunnelAggregatedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnTunnelAggregatedList' with the minimum fields required to make a request.
newVpnTunnelAggregatedList ::
  VpnTunnelAggregatedList
newVpnTunnelAggregatedList =
  VpnTunnelAggregatedList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#vpnTunnelAggregatedList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      unreachables = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON VpnTunnelAggregatedList where
  parseJSON =
    Core.withObject
      "VpnTunnelAggregatedList"
      ( \o ->
          VpnTunnelAggregatedList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> ( o Core..:? "kind"
                         Core..!= "compute#vpnTunnelAggregatedList"
                     )
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "unreachables")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON VpnTunnelAggregatedList where
  toJSON VpnTunnelAggregatedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("unreachables" Core..=) Core.<$> unreachables,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | A list of VpnTunnelsScopedList resources.
--
-- /See:/ 'newVpnTunnelAggregatedList_Items' smart constructor.
newtype VpnTunnelAggregatedList_Items = VpnTunnelAggregatedList_Items
  { -- | Name of the scope containing this set of VPN tunnels.
    additional :: (Core.HashMap Core.Text VpnTunnelsScopedList)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnTunnelAggregatedList_Items' with the minimum fields required to make a request.
newVpnTunnelAggregatedList_Items ::
  -- |  Name of the scope containing this set of VPN tunnels. See 'additional'.
  Core.HashMap Core.Text VpnTunnelsScopedList ->
  VpnTunnelAggregatedList_Items
newVpnTunnelAggregatedList_Items additional =
  VpnTunnelAggregatedList_Items {additional = additional}

instance Core.FromJSON VpnTunnelAggregatedList_Items where
  parseJSON =
    Core.withObject
      "VpnTunnelAggregatedList_Items"
      ( \o ->
          VpnTunnelAggregatedList_Items
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON VpnTunnelAggregatedList_Items where
  toJSON VpnTunnelAggregatedList_Items {..} =
    Core.toJSON additional

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newVpnTunnelAggregatedList_Warning' smart constructor.
data VpnTunnelAggregatedList_Warning = VpnTunnelAggregatedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe VpnTunnelAggregatedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [VpnTunnelAggregatedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnTunnelAggregatedList_Warning' with the minimum fields required to make a request.
newVpnTunnelAggregatedList_Warning ::
  VpnTunnelAggregatedList_Warning
newVpnTunnelAggregatedList_Warning =
  VpnTunnelAggregatedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance
  Core.FromJSON
    VpnTunnelAggregatedList_Warning
  where
  parseJSON =
    Core.withObject
      "VpnTunnelAggregatedList_Warning"
      ( \o ->
          VpnTunnelAggregatedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON VpnTunnelAggregatedList_Warning where
  toJSON VpnTunnelAggregatedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newVpnTunnelAggregatedList_Warning_DataItem' smart constructor.
data VpnTunnelAggregatedList_Warning_DataItem = VpnTunnelAggregatedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnTunnelAggregatedList_Warning_DataItem' with the minimum fields required to make a request.
newVpnTunnelAggregatedList_Warning_DataItem ::
  VpnTunnelAggregatedList_Warning_DataItem
newVpnTunnelAggregatedList_Warning_DataItem =
  VpnTunnelAggregatedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    VpnTunnelAggregatedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "VpnTunnelAggregatedList_Warning_DataItem"
      ( \o ->
          VpnTunnelAggregatedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    VpnTunnelAggregatedList_Warning_DataItem
  where
  toJSON VpnTunnelAggregatedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Contains a list of VpnTunnel resources.
--
-- /See:/ 'newVpnTunnelList' smart constructor.
data VpnTunnelList = VpnTunnelList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of VpnTunnel resources.
    items :: (Core.Maybe [VpnTunnel]),
    -- | [Output Only] Type of resource. Always compute#vpnTunnel for VPN tunnels.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe VpnTunnelList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnTunnelList' with the minimum fields required to make a request.
newVpnTunnelList ::
  VpnTunnelList
newVpnTunnelList =
  VpnTunnelList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#vpnTunnelList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON VpnTunnelList where
  parseJSON =
    Core.withObject
      "VpnTunnelList"
      ( \o ->
          VpnTunnelList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#vpnTunnelList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON VpnTunnelList where
  toJSON VpnTunnelList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newVpnTunnelList_Warning' smart constructor.
data VpnTunnelList_Warning = VpnTunnelList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe VpnTunnelList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [VpnTunnelList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnTunnelList_Warning' with the minimum fields required to make a request.
newVpnTunnelList_Warning ::
  VpnTunnelList_Warning
newVpnTunnelList_Warning =
  VpnTunnelList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON VpnTunnelList_Warning where
  parseJSON =
    Core.withObject
      "VpnTunnelList_Warning"
      ( \o ->
          VpnTunnelList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON VpnTunnelList_Warning where
  toJSON VpnTunnelList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newVpnTunnelList_Warning_DataItem' smart constructor.
data VpnTunnelList_Warning_DataItem = VpnTunnelList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnTunnelList_Warning_DataItem' with the minimum fields required to make a request.
newVpnTunnelList_Warning_DataItem ::
  VpnTunnelList_Warning_DataItem
newVpnTunnelList_Warning_DataItem =
  VpnTunnelList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON VpnTunnelList_Warning_DataItem where
  parseJSON =
    Core.withObject
      "VpnTunnelList_Warning_DataItem"
      ( \o ->
          VpnTunnelList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON VpnTunnelList_Warning_DataItem where
  toJSON VpnTunnelList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newVpnTunnelsScopedList' smart constructor.
data VpnTunnelsScopedList = VpnTunnelsScopedList
  { -- | A list of VPN tunnels contained in this scope.
    vpnTunnels :: (Core.Maybe [VpnTunnel]),
    -- | Informational warning which replaces the list of addresses when the list is empty.
    warning :: (Core.Maybe VpnTunnelsScopedList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnTunnelsScopedList' with the minimum fields required to make a request.
newVpnTunnelsScopedList ::
  VpnTunnelsScopedList
newVpnTunnelsScopedList =
  VpnTunnelsScopedList {vpnTunnels = Core.Nothing, warning = Core.Nothing}

instance Core.FromJSON VpnTunnelsScopedList where
  parseJSON =
    Core.withObject
      "VpnTunnelsScopedList"
      ( \o ->
          VpnTunnelsScopedList
            Core.<$> (o Core..:? "vpnTunnels")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON VpnTunnelsScopedList where
  toJSON VpnTunnelsScopedList {..} =
    Core.object
      ( Core.catMaybes
          [ ("vpnTunnels" Core..=) Core.<$> vpnTunnels,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | Informational warning which replaces the list of addresses when the list is empty.
--
-- /See:/ 'newVpnTunnelsScopedList_Warning' smart constructor.
data VpnTunnelsScopedList_Warning = VpnTunnelsScopedList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe VpnTunnelsScopedList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [VpnTunnelsScopedList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnTunnelsScopedList_Warning' with the minimum fields required to make a request.
newVpnTunnelsScopedList_Warning ::
  VpnTunnelsScopedList_Warning
newVpnTunnelsScopedList_Warning =
  VpnTunnelsScopedList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON VpnTunnelsScopedList_Warning where
  parseJSON =
    Core.withObject
      "VpnTunnelsScopedList_Warning"
      ( \o ->
          VpnTunnelsScopedList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON VpnTunnelsScopedList_Warning where
  toJSON VpnTunnelsScopedList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newVpnTunnelsScopedList_Warning_DataItem' smart constructor.
data VpnTunnelsScopedList_Warning_DataItem = VpnTunnelsScopedList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'VpnTunnelsScopedList_Warning_DataItem' with the minimum fields required to make a request.
newVpnTunnelsScopedList_Warning_DataItem ::
  VpnTunnelsScopedList_Warning_DataItem
newVpnTunnelsScopedList_Warning_DataItem =
  VpnTunnelsScopedList_Warning_DataItem
    { key = Core.Nothing,
      value = Core.Nothing
    }

instance
  Core.FromJSON
    VpnTunnelsScopedList_Warning_DataItem
  where
  parseJSON =
    Core.withObject
      "VpnTunnelsScopedList_Warning_DataItem"
      ( \o ->
          VpnTunnelsScopedList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance
  Core.ToJSON
    VpnTunnelsScopedList_Warning_DataItem
  where
  toJSON VpnTunnelsScopedList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newWafExpressionSet' smart constructor.
data WafExpressionSet = WafExpressionSet
  { -- | A list of alternate IDs. The format should be: - E.g. XSS-stable Generic suffix like \"stable\" is particularly useful if a policy likes to avail newer set of expressions without having to change the policy. A given alias name can\'t be used for more than one entity set.
    aliases :: (Core.Maybe [Core.Text]),
    -- | List of available expressions.
    expressions :: (Core.Maybe [WafExpressionSetExpression]),
    -- | Google specified expression set ID. The format should be: - E.g. XSS-20170329 required
    id :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'WafExpressionSet' with the minimum fields required to make a request.
newWafExpressionSet ::
  WafExpressionSet
newWafExpressionSet =
  WafExpressionSet
    { aliases = Core.Nothing,
      expressions = Core.Nothing,
      id = Core.Nothing
    }

instance Core.FromJSON WafExpressionSet where
  parseJSON =
    Core.withObject
      "WafExpressionSet"
      ( \o ->
          WafExpressionSet
            Core.<$> (o Core..:? "aliases")
            Core.<*> (o Core..:? "expressions")
            Core.<*> (o Core..:? "id")
      )

instance Core.ToJSON WafExpressionSet where
  toJSON WafExpressionSet {..} =
    Core.object
      ( Core.catMaybes
          [ ("aliases" Core..=) Core.<$> aliases,
            ("expressions" Core..=) Core.<$> expressions,
            ("id" Core..=) Core.<$> id
          ]
      )

--
-- /See:/ 'newWafExpressionSetExpression' smart constructor.
data WafExpressionSetExpression = WafExpressionSetExpression
  { -- | Expression ID should uniquely identify the origin of the expression. E.g. owasp-crs-v020901-id973337 identifies Owasp core rule set version 2.9.1 rule id 973337. The ID could be used to determine the individual attack definition that has been detected. It could also be used to exclude it from the policy in case of false positive. required
    id :: (Core.Maybe Core.Text),
    -- | The sensitivity value associated with the WAF rule ID. This corresponds to the ModSecurity paranoia level, ranging from 1 to 4. 0 is reserved for opt-in only rules.
    sensitivity :: (Core.Maybe Core.Int32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'WafExpressionSetExpression' with the minimum fields required to make a request.
newWafExpressionSetExpression ::
  WafExpressionSetExpression
newWafExpressionSetExpression =
  WafExpressionSetExpression {id = Core.Nothing, sensitivity = Core.Nothing}

instance Core.FromJSON WafExpressionSetExpression where
  parseJSON =
    Core.withObject
      "WafExpressionSetExpression"
      ( \o ->
          WafExpressionSetExpression
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "sensitivity")
      )

instance Core.ToJSON WafExpressionSetExpression where
  toJSON WafExpressionSetExpression {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("sensitivity" Core..=) Core.<$> sensitivity
          ]
      )

-- | In contrast to a single BackendService in HttpRouteAction to which all matching traffic is directed to, WeightedBackendService allows traffic to be split across multiple backend services. The volume of traffic for each backend service is proportional to the weight specified in each WeightedBackendService
--
-- /See:/ 'newWeightedBackendService' smart constructor.
data WeightedBackendService = WeightedBackendService
  { -- | The full or partial URL to the default BackendService resource. Before forwarding the request to backendService, the load balancer applies any relevant headerActions specified as part of this backendServiceWeight.
    backendService :: (Core.Maybe Core.Text),
    -- | Specifies changes to request and response headers that need to take effect for the selected backendService. headerAction specified here take effect before headerAction in the enclosing HttpRouteRule, PathMatcher and UrlMap. headerAction is not supported for load balancers that have their loadBalancingScheme set to EXTERNAL. Not supported when the URL map is bound to a target gRPC proxy that has validateForProxyless field set to true.
    headerAction :: (Core.Maybe HttpHeaderAction),
    -- | Specifies the fraction of traffic sent to a backend service, computed as weight \/ (sum of all weightedBackendService weights in routeAction) . The selection of a backend service is determined only for new traffic. Once a user\'s request has been directed to a backend service, subsequent requests are sent to the same backend service as determined by the backend service\'s session affinity policy. The value must be from 0 to 1000.
    weight :: (Core.Maybe Core.Word32)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'WeightedBackendService' with the minimum fields required to make a request.
newWeightedBackendService ::
  WeightedBackendService
newWeightedBackendService =
  WeightedBackendService
    { backendService = Core.Nothing,
      headerAction = Core.Nothing,
      weight = Core.Nothing
    }

instance Core.FromJSON WeightedBackendService where
  parseJSON =
    Core.withObject
      "WeightedBackendService"
      ( \o ->
          WeightedBackendService
            Core.<$> (o Core..:? "backendService")
            Core.<*> (o Core..:? "headerAction")
            Core.<*> (o Core..:? "weight")
      )

instance Core.ToJSON WeightedBackendService where
  toJSON WeightedBackendService {..} =
    Core.object
      ( Core.catMaybes
          [ ("backendService" Core..=) Core.<$> backendService,
            ("headerAction" Core..=) Core.<$> headerAction,
            ("weight" Core..=) Core.<$> weight
          ]
      )

--
-- /See:/ 'newXpnHostList' smart constructor.
data XpnHostList = XpnHostList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | [Output Only] A list of shared VPC host project URLs.
    items :: (Core.Maybe [Project]),
    -- | [Output Only] Type of resource. Always compute#xpnHostList for lists of shared VPC hosts.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe XpnHostList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'XpnHostList' with the minimum fields required to make a request.
newXpnHostList ::
  XpnHostList
newXpnHostList =
  XpnHostList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#xpnHostList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON XpnHostList where
  parseJSON =
    Core.withObject
      "XpnHostList"
      ( \o ->
          XpnHostList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#xpnHostList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON XpnHostList where
  toJSON XpnHostList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newXpnHostList_Warning' smart constructor.
data XpnHostList_Warning = XpnHostList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe XpnHostList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [XpnHostList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'XpnHostList_Warning' with the minimum fields required to make a request.
newXpnHostList_Warning ::
  XpnHostList_Warning
newXpnHostList_Warning =
  XpnHostList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON XpnHostList_Warning where
  parseJSON =
    Core.withObject
      "XpnHostList_Warning"
      ( \o ->
          XpnHostList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON XpnHostList_Warning where
  toJSON XpnHostList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newXpnHostList_Warning_DataItem' smart constructor.
data XpnHostList_Warning_DataItem = XpnHostList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'XpnHostList_Warning_DataItem' with the minimum fields required to make a request.
newXpnHostList_Warning_DataItem ::
  XpnHostList_Warning_DataItem
newXpnHostList_Warning_DataItem =
  XpnHostList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON XpnHostList_Warning_DataItem where
  parseJSON =
    Core.withObject
      "XpnHostList_Warning_DataItem"
      ( \o ->
          XpnHostList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON XpnHostList_Warning_DataItem where
  toJSON XpnHostList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

-- | Service resource (a.k.a service project) ID.
--
-- /See:/ 'newXpnResourceId' smart constructor.
data XpnResourceId = XpnResourceId
  { -- | The ID of the service resource. In the case of projects, this field supports project id (e.g., my-project-123) and project number (e.g. 12345678).
    id :: (Core.Maybe Core.Text),
    -- | The type of the service resource.
    type' :: (Core.Maybe XpnResourceId_Type)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'XpnResourceId' with the minimum fields required to make a request.
newXpnResourceId ::
  XpnResourceId
newXpnResourceId = XpnResourceId {id = Core.Nothing, type' = Core.Nothing}

instance Core.FromJSON XpnResourceId where
  parseJSON =
    Core.withObject
      "XpnResourceId"
      ( \o ->
          XpnResourceId
            Core.<$> (o Core..:? "id") Core.<*> (o Core..:? "type")
      )

instance Core.ToJSON XpnResourceId where
  toJSON XpnResourceId {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("type" Core..=) Core.<$> type'
          ]
      )

-- | Represents a Zone resource. A zone is a deployment area. These deployment areas are subsets of a region. For example the zone us-east1-a is located in the us-east1 region. For more information, read Regions and Zones.
--
-- /See:/ 'newZone' smart constructor.
data Zone = Zone
  { -- | [Output Only] Available cpu\/platform selections for the zone.
    availableCpuPlatforms :: (Core.Maybe [Core.Text]),
    -- | [Output Only] Creation timestamp in RFC3339 text format.
    creationTimestamp :: (Core.Maybe Core.Text),
    -- | [Output Only] The deprecation status associated with this zone.
    deprecated :: (Core.Maybe DeprecationStatus),
    -- | [Output Only] Textual description of the resource.
    description :: (Core.Maybe Core.Text),
    -- | [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    id :: (Core.Maybe Core.Word64),
    -- | [Output Only] Type of the resource. Always compute#zone for zones.
    kind :: Core.Text,
    -- | [Output Only] Name of the resource.
    name :: (Core.Maybe Core.Text),
    -- | [Output Only] Full URL reference to the region which hosts the zone.
    region :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for the resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Status of the zone, either UP or DOWN.
    status :: (Core.Maybe Zone_Status),
    -- | [Output Only] Reserved for future use.
    supportsPzs :: (Core.Maybe Core.Bool)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'Zone' with the minimum fields required to make a request.
newZone ::
  Zone
newZone =
  Zone
    { availableCpuPlatforms = Core.Nothing,
      creationTimestamp = Core.Nothing,
      deprecated = Core.Nothing,
      description = Core.Nothing,
      id = Core.Nothing,
      kind = "compute#zone",
      name = Core.Nothing,
      region = Core.Nothing,
      selfLink = Core.Nothing,
      status = Core.Nothing,
      supportsPzs = Core.Nothing
    }

instance Core.FromJSON Zone where
  parseJSON =
    Core.withObject
      "Zone"
      ( \o ->
          Zone
            Core.<$> (o Core..:? "availableCpuPlatforms")
            Core.<*> (o Core..:? "creationTimestamp")
            Core.<*> (o Core..:? "deprecated")
            Core.<*> (o Core..:? "description")
            Core.<*> (o Core..:? "id" Core.<&> Core.fmap Core.fromAsText)
            Core.<*> (o Core..:? "kind" Core..!= "compute#zone")
            Core.<*> (o Core..:? "name")
            Core.<*> (o Core..:? "region")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "status")
            Core.<*> (o Core..:? "supportsPzs")
      )

instance Core.ToJSON Zone where
  toJSON Zone {..} =
    Core.object
      ( Core.catMaybes
          [ ("availableCpuPlatforms" Core..=)
              Core.<$> availableCpuPlatforms,
            ("creationTimestamp" Core..=)
              Core.<$> creationTimestamp,
            ("deprecated" Core..=) Core.<$> deprecated,
            ("description" Core..=) Core.<$> description,
            ("id" Core..=) Core.. Core.AsText Core.<$> id,
            Core.Just ("kind" Core..= kind),
            ("name" Core..=) Core.<$> name,
            ("region" Core..=) Core.<$> region,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("status" Core..=) Core.<$> status,
            ("supportsPzs" Core..=) Core.<$> supportsPzs
          ]
      )

-- | Contains a list of zone resources.
--
-- /See:/ 'newZoneList' smart constructor.
data ZoneList = ZoneList
  { -- | [Output Only] Unique identifier for the resource; defined by the server.
    id :: (Core.Maybe Core.Text),
    -- | A list of Zone resources.
    items :: (Core.Maybe [Zone]),
    -- | Type of resource.
    kind :: Core.Text,
    -- | [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    nextPageToken :: (Core.Maybe Core.Text),
    -- | [Output Only] Server-defined URL for this resource.
    selfLink :: (Core.Maybe Core.Text),
    -- | [Output Only] Informational warning message.
    warning :: (Core.Maybe ZoneList_Warning)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ZoneList' with the minimum fields required to make a request.
newZoneList ::
  ZoneList
newZoneList =
  ZoneList
    { id = Core.Nothing,
      items = Core.Nothing,
      kind = "compute#zoneList",
      nextPageToken = Core.Nothing,
      selfLink = Core.Nothing,
      warning = Core.Nothing
    }

instance Core.FromJSON ZoneList where
  parseJSON =
    Core.withObject
      "ZoneList"
      ( \o ->
          ZoneList
            Core.<$> (o Core..:? "id")
            Core.<*> (o Core..:? "items")
            Core.<*> (o Core..:? "kind" Core..!= "compute#zoneList")
            Core.<*> (o Core..:? "nextPageToken")
            Core.<*> (o Core..:? "selfLink")
            Core.<*> (o Core..:? "warning")
      )

instance Core.ToJSON ZoneList where
  toJSON ZoneList {..} =
    Core.object
      ( Core.catMaybes
          [ ("id" Core..=) Core.<$> id,
            ("items" Core..=) Core.<$> items,
            Core.Just ("kind" Core..= kind),
            ("nextPageToken" Core..=) Core.<$> nextPageToken,
            ("selfLink" Core..=) Core.<$> selfLink,
            ("warning" Core..=) Core.<$> warning
          ]
      )

-- | [Output Only] Informational warning message.
--
-- /See:/ 'newZoneList_Warning' smart constructor.
data ZoneList_Warning = ZoneList_Warning
  { -- | [Output Only] A warning code, if applicable. For example, Compute Engine returns NO/RESULTS/ON_PAGE if there are no results in the response.
    code :: (Core.Maybe ZoneList_Warning_Code),
    -- | [Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones\/us-east1-d\" }
    data' :: (Core.Maybe [ZoneList_Warning_DataItem]),
    -- | [Output Only] A human-readable description of the warning code.
    message :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ZoneList_Warning' with the minimum fields required to make a request.
newZoneList_Warning ::
  ZoneList_Warning
newZoneList_Warning =
  ZoneList_Warning
    { code = Core.Nothing,
      data' = Core.Nothing,
      message = Core.Nothing
    }

instance Core.FromJSON ZoneList_Warning where
  parseJSON =
    Core.withObject
      "ZoneList_Warning"
      ( \o ->
          ZoneList_Warning
            Core.<$> (o Core..:? "code")
            Core.<*> (o Core..:? "data")
            Core.<*> (o Core..:? "message")
      )

instance Core.ToJSON ZoneList_Warning where
  toJSON ZoneList_Warning {..} =
    Core.object
      ( Core.catMaybes
          [ ("code" Core..=) Core.<$> code,
            ("data" Core..=) Core.<$> data',
            ("message" Core..=) Core.<$> message
          ]
      )

--
-- /See:/ 'newZoneList_Warning_DataItem' smart constructor.
data ZoneList_Warning_DataItem = ZoneList_Warning_DataItem
  { -- | [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
    key :: (Core.Maybe Core.Text),
    -- | [Output Only] A warning data value corresponding to the key.
    value :: (Core.Maybe Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ZoneList_Warning_DataItem' with the minimum fields required to make a request.
newZoneList_Warning_DataItem ::
  ZoneList_Warning_DataItem
newZoneList_Warning_DataItem =
  ZoneList_Warning_DataItem {key = Core.Nothing, value = Core.Nothing}

instance Core.FromJSON ZoneList_Warning_DataItem where
  parseJSON =
    Core.withObject
      "ZoneList_Warning_DataItem"
      ( \o ->
          ZoneList_Warning_DataItem
            Core.<$> (o Core..:? "key") Core.<*> (o Core..:? "value")
      )

instance Core.ToJSON ZoneList_Warning_DataItem where
  toJSON ZoneList_Warning_DataItem {..} =
    Core.object
      ( Core.catMaybes
          [ ("key" Core..=) Core.<$> key,
            ("value" Core..=) Core.<$> value
          ]
      )

--
-- /See:/ 'newZoneSetLabelsRequest' smart constructor.
data ZoneSetLabelsRequest = ZoneSetLabelsRequest
  { -- | The fingerprint of the previous set of labels for this resource, used to detect conflicts. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels. Make a get() request to the resource to get the latest fingerprint.
    labelFingerprint :: (Core.Maybe Core.Base64),
    -- | The labels to set for this resource.
    labels :: (Core.Maybe ZoneSetLabelsRequest_Labels)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ZoneSetLabelsRequest' with the minimum fields required to make a request.
newZoneSetLabelsRequest ::
  ZoneSetLabelsRequest
newZoneSetLabelsRequest =
  ZoneSetLabelsRequest {labelFingerprint = Core.Nothing, labels = Core.Nothing}

instance Core.FromJSON ZoneSetLabelsRequest where
  parseJSON =
    Core.withObject
      "ZoneSetLabelsRequest"
      ( \o ->
          ZoneSetLabelsRequest
            Core.<$> (o Core..:? "labelFingerprint")
            Core.<*> (o Core..:? "labels")
      )

instance Core.ToJSON ZoneSetLabelsRequest where
  toJSON ZoneSetLabelsRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("labelFingerprint" Core..=)
              Core.<$> labelFingerprint,
            ("labels" Core..=) Core.<$> labels
          ]
      )

-- | The labels to set for this resource.
--
-- /See:/ 'newZoneSetLabelsRequest_Labels' smart constructor.
newtype ZoneSetLabelsRequest_Labels = ZoneSetLabelsRequest_Labels
  { -- |
    additional :: (Core.HashMap Core.Text Core.Text)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ZoneSetLabelsRequest_Labels' with the minimum fields required to make a request.
newZoneSetLabelsRequest_Labels ::
  -- |  See 'additional'.
  Core.HashMap Core.Text Core.Text ->
  ZoneSetLabelsRequest_Labels
newZoneSetLabelsRequest_Labels additional =
  ZoneSetLabelsRequest_Labels {additional = additional}

instance Core.FromJSON ZoneSetLabelsRequest_Labels where
  parseJSON =
    Core.withObject
      "ZoneSetLabelsRequest_Labels"
      ( \o ->
          ZoneSetLabelsRequest_Labels
            Core.<$> (Core.parseJSONObject o)
      )

instance Core.ToJSON ZoneSetLabelsRequest_Labels where
  toJSON ZoneSetLabelsRequest_Labels {..} =
    Core.toJSON additional

--
-- /See:/ 'newZoneSetPolicyRequest' smart constructor.
data ZoneSetPolicyRequest = ZoneSetPolicyRequest
  { -- | Flatten Policy to create a backwacd compatible wire-format. Deprecated. Use \'policy\' to specify bindings.
    bindings :: (Core.Maybe [Binding]),
    -- | Flatten Policy to create a backward compatible wire-format. Deprecated. Use \'policy\' to specify the etag.
    etag :: (Core.Maybe Core.Base64),
    -- | REQUIRED: The complete policy to be applied to the \'resource\'. The size of the policy is limited to a few 10s of KB. An empty policy is in general a valid policy but certain services (like Projects) might reject them.
    policy :: (Core.Maybe Policy)
  }
  deriving (Core.Eq, Core.Show, Core.Generic)

-- | Creates a value of 'ZoneSetPolicyRequest' with the minimum fields required to make a request.
newZoneSetPolicyRequest ::
  ZoneSetPolicyRequest
newZoneSetPolicyRequest =
  ZoneSetPolicyRequest
    { bindings = Core.Nothing,
      etag = Core.Nothing,
      policy = Core.Nothing
    }

instance Core.FromJSON ZoneSetPolicyRequest where
  parseJSON =
    Core.withObject
      "ZoneSetPolicyRequest"
      ( \o ->
          ZoneSetPolicyRequest
            Core.<$> (o Core..:? "bindings")
            Core.<*> (o Core..:? "etag")
            Core.<*> (o Core..:? "policy")
      )

instance Core.ToJSON ZoneSetPolicyRequest where
  toJSON ZoneSetPolicyRequest {..} =
    Core.object
      ( Core.catMaybes
          [ ("bindings" Core..=) Core.<$> bindings,
            ("etag" Core..=) Core.<$> etag,
            ("policy" Core..=) Core.<$> policy
          ]
      )
