#!/usr/bin/env bash

set -euo pipefail

cd "$(dirname "${BASH_SOURCE[0]}")/.."

say() {
  echo >&2 "$@"
}

format_haskell() {
  local -r dir="$1"
  shift
  local -r options=("$@")

  say "Formatting $dir"

  find "$dir" -type f -name '*.cabal' -print0 |
    xargs -0 cabal-fmt --inplace --indent=2

  find "$dir" -type f -name '*.hs' -print0 |
    xargs -0 ormolu --unsafe --mode inplace \
      -o '-XPatternSynonyms' \
      -o '-XTypeApplications' \
      -o '-XBangPatterns' \
      -o '-XMagicHash' \
      "${options[@]}"
}

# Export the functions for use in GNU parallel.
export -f say
export -f format_haskell

# Whether include generated code in the formatting run.
all="false"

case "${1:-}" in
--all)
  all="true"
  ;;
esac

say "Formatting shell"

find scripts -type f -print0 |
  xargs -0 shfmt -s -i 2 -ln bash -w

say "Formatting nix"

find . -type f -name '*.nix' -print0 |
  xargs -0 nixpkgs-fmt

# Run gen formatter separately for ImportQualifedPost support.
format_haskell gen \
  -o '-XImportQualifiedPost' \
  -o '-XOverloadedRecordDot'

# Run the core formatters prior to service libraries.
format_haskell lib/gogol
format_haskell lib/gogol-core

# Run the formatters in parallel.
if [ "$all" = "true" ]; then
  targets=(lib/services/gogol-*)

  printf '%s\n' "${targets[@]}" |
    parallel --halt-on-error 2 format_haskell
fi
