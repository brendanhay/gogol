#!/usr/bin/env bash

# Usage: generate [--commit] MODELS
#
# Runs gogol-gen on the specified MODELS - which are directory names of the
# services definitions in https://github.com/boto/google-api-go-client/tree/develop/google-api-go-client/data/<MODEL>.
#
# Generates the output per MODEL in a temporary directory, formats .cabal and
# .hs files, removes the related gogol-*/gen directories, and finally
# replaces the gogol-*/gen contents with the updated sources.
#
# If --commit is the first argument a commit will be created per service directory.

set -euo pipefail

cd "$(dirname "${BASH_SOURCE[0]}")/.."

# Output a message to stderr.
say() {
  echo >&2 "$@"
}

commit="false"

case "${1:-}" in
--commit)
  if [[ "$(git diff --stat)" != "" ]]; then
    say "Unable to use --commit when the git working tree is dirty."
    exit 1
  fi

  commit="true"
  shift
  ;;
esac

# Format new sources in tmp and replace the corresponding gogol-*/gen
# directory in the source tree if successful.
format_and_replace() {
  local -r dir="$1"

  say "Formatting $dir"

  find "$dir" -type f -name '*.cabal' -print0 |
    xargs -0 cabal-fmt --inplace --indent=2

  find "$dir" -type f -name '*.hs' -print0 |
    xargs -0 ormolu --mode=inplace \
      --ghc-opt='-XPatternSynonyms' \
      --ghc-opt='-XTypeApplications'

  # Delete corresponding gogol-*/gen dirs from the source tree.
  rm -rf "./lib/services/$(basename "$dir")/gen"

  # Copy formatted sources from tmp to the source tree.
  cp -R "$dir" lib/services
}

# Export the functions for use in GNU parallel.
export -f say
export -f format_and_replace

# Build the generator, obtain the service definitions repository, and ensure buildozer exists.
bazel build //gen @google-api-go-client//... @com_github_bazelbuild_buildtools//buildozer

definitions="$(bazel info output_base)/external/google-api-go-client"
version="$(sed -n '0,/^version: */s///p' lib/gogol/gogol.cabal)"
services="configs/annexes"
models=()

if [ $# -eq 0 ]; then
  for model in "$services"/*.json; do
    models+=("$(basename "$model" .json)")
  done
else
  models=("$@")
fi

tmp="$(mktemp -d -p "$PWD")"

trap 'rm -rf "$tmp"' EXIT

say "Using google-api-go-client $definitions."
say "Using gogol version $version."
say "Generating models ${models[*]}."
say "Using temporary directory $tmp."

generator=(
  --out="$tmp"
  --library-version="${version}"
  --client-version="${version}"
  --core-version="${version}"
  --annexes="configs/annexes"
  --templates="configs/templates"
  --assets="configs/assets"
)

for model in "${models[@]}"; do
  for definition in "${definitions}/${model}"/**/*.json; do
    generator+=("${definition}")
  done
done

# Generate new sources in tmp.
./bazel-bin/gen/gen +RTS -qg0 -RTS "${generator[@]}"

# Run the format and copy/replace steps in parallel.
parallel --halt-on-error 2 format_and_replace ::: "$tmp"/gogol-*

# Generate BUILD files for every package.
./scripts/update-gazelle

set +e

# If --commit was passed as the first argument, created a commit per service.
if [ "$commit" = "true" ]; then
  for service in lib/services/gogol-*; do

    if git add "$service" >/dev/null 2>&1; then
      git commit -m "$(basename "$service"): regenerating service"
    fi
  done
fi

say "Done."
